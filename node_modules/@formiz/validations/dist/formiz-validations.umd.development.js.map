{"version":3,"file":"formiz-validations.umd.development.js","sources":["../src/index.ts"],"sourcesContent":["/* eslint-disable no-restricted-globals */\ntype Value = any;\n\n/**\n * Check if the value is a string.\n */\nconst testIsString = (value: Value): boolean => typeof value === 'string' || value instanceof String;\n\n/**\n * Check if the value is a number.\n */\nconst testIsNumber = (value: Value): boolean => typeof parseFloat(value) === 'number'\n  && !isNaN(parseFloat(value))\n  && !isNaN(value);\n\n/**\n * Check if the value is null or undefined.\n */\nconst testIsNullOrUndefined = (value: Value): boolean => value === null || value === undefined;\n\n/**\n * Check if the value is empty.\n */\nconst testIsEmpty = (value: Value): boolean => value === '' || testIsNullOrUndefined(value);\n\n// const testIsObject = x => x && typeof x === 'object' && x.constructor === Object;\nconst emailRegex = /^(([^<>()[\\].,;:\\s@\"]+(\\.[^<>()[\\].,;:\\s@\"]+)*)|(\".+\"))@(([^<>()[\\].,;:\\s@\"]+\\.)+[^<>()[\\].,;:\\s@\"]{2,})$/i;\n\n/**\n * Check if the value exists.\n * @returns {function} function that accept a value and\n * return true if the value exists, false instead.\n */\nexport const isRequired = () => (value: Value): boolean => !!value || value === 0;\n\n/**\n * Check if the value is a string and is not empty.\n */\nexport const isNotEmptyString = () => (value: Value): boolean => {\n  if (testIsEmpty(value)) return true;\n  if (!testIsString(value)) return false;\n\n  return !!(value || '').match(/^(?!\\s*$).+/);\n};\n\n/**\n * Check if the value is an array and is not empty.\n */\nexport const isNotEmptyArray = () => (value: Value): boolean => {\n  if (testIsEmpty(value)) return true;\n  if (!Array.isArray(value)) return false;\n\n  return !!(value || []).length;\n};\n\n/**\n * Check if the value is a valid email.\n */\nexport const isEmail = () => (value: Value): boolean => {\n  if (testIsEmpty(value)) return true;\n  if (!testIsString(value)) return false;\n\n  return !value || emailRegex.test(value);\n};\n\n/**\n * Check if the value is a number.\n */\nexport const isNumber = () => (value: Value): boolean => testIsEmpty(value) || testIsNumber(value);\n\n/**\n * Check if the value is greater than the given minimum.\n */\nexport const isMinNumber = (min: number) => (value: Value): boolean => testIsEmpty(value)\n  || (testIsNumber(value) && parseFloat(value) >= min);\n\n/**\n * Check if the value is lower than the given maximum.\n */\nexport const isMaxNumber = (max: number) => (value: Value): boolean => testIsEmpty(value)\n  || (testIsNumber(value) && parseFloat(value) <= max);\n\n/**\n * Check if the value is between the minimum and the maximum.\n */\nexport const isInRangeNumber = (min: number, max: number) => (value: Value): boolean => (\n  testIsEmpty(value)\n  || (testIsNumber(value)\n    && parseFloat(value) >= min\n    && parseFloat(value) <= max\n  ));\n\n/**\n * Check if the value is a percentage, between 0 and 100.\n */\nexport const isPercentage = () => (value: Value): boolean => testIsEmpty(value) || (\n  testIsNumber(value)\n  && parseFloat(value) >= 0\n  && parseFloat(value) <= 100\n);\n\n/**\n * Check if the value has the given length.\n */\nexport const isLength = (length: number) => (value: Value): boolean => {\n  if (testIsEmpty(value)) return true;\n\n  return (testIsString(value) || Array.isArray(value))\n    && value.length === length;\n};\n\n/**\n * Check if the value has a length greater than the given minimum.\n */\nexport const isMinLength = (min: number) => (value: Value): boolean => {\n  if (testIsEmpty(value)) return true;\n\n  return (testIsString(value) || Array.isArray(value)) && value.length >= min;\n};\n\n/**\n * Check if the value has a length lower than the given maximum.\n */\nexport const isMaxLength = (max: number) => (value: Value): boolean => testIsEmpty(value) || ((\n  testIsString(value) || Array.isArray(value)\n) && value.length <= max);\n"],"names":["testIsString","value","String","testIsNumber","parseFloat","isNaN","testIsNullOrUndefined","undefined","testIsEmpty","emailRegex","isRequired","isNotEmptyString","match","isNotEmptyArray","Array","isArray","length","isEmail","test","isNumber","isMinNumber","min","isMaxNumber","max","isInRangeNumber","isPercentage","isLength","isMinLength","isMaxLength"],"mappings":"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"}