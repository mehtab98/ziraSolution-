{"version":3,"file":"formiz-validations.umd.production.min.js","sources":["../src/index.ts"],"sourcesContent":["/* eslint-disable no-restricted-globals */\ntype Value = any;\n\n/**\n * Check if the value is a string.\n */\nconst testIsString = (value: Value): boolean => typeof value === 'string' || value instanceof String;\n\n/**\n * Check if the value is a number.\n */\nconst testIsNumber = (value: Value): boolean => typeof parseFloat(value) === 'number'\n  && !isNaN(parseFloat(value))\n  && !isNaN(value);\n\n/**\n * Check if the value is null or undefined.\n */\nconst testIsNullOrUndefined = (value: Value): boolean => value === null || value === undefined;\n\n/**\n * Check if the value is empty.\n */\nconst testIsEmpty = (value: Value): boolean => value === '' || testIsNullOrUndefined(value);\n\n// const testIsObject = x => x && typeof x === 'object' && x.constructor === Object;\nconst emailRegex = /^(([^<>()[\\].,;:\\s@\"]+(\\.[^<>()[\\].,;:\\s@\"]+)*)|(\".+\"))@(([^<>()[\\].,;:\\s@\"]+\\.)+[^<>()[\\].,;:\\s@\"]{2,})$/i;\n\n/**\n * Check if the value exists.\n * @returns {function} function that accept a value and\n * return true if the value exists, false instead.\n */\nexport const isRequired = () => (value: Value): boolean => !!value || value === 0;\n\n/**\n * Check if the value is a string and is not empty.\n */\nexport const isNotEmptyString = () => (value: Value): boolean => {\n  if (testIsEmpty(value)) return true;\n  if (!testIsString(value)) return false;\n\n  return !!(value || '').match(/^(?!\\s*$).+/);\n};\n\n/**\n * Check if the value is an array and is not empty.\n */\nexport const isNotEmptyArray = () => (value: Value): boolean => {\n  if (testIsEmpty(value)) return true;\n  if (!Array.isArray(value)) return false;\n\n  return !!(value || []).length;\n};\n\n/**\n * Check if the value is a valid email.\n */\nexport const isEmail = () => (value: Value): boolean => {\n  if (testIsEmpty(value)) return true;\n  if (!testIsString(value)) return false;\n\n  return !value || emailRegex.test(value);\n};\n\n/**\n * Check if the value is a number.\n */\nexport const isNumber = () => (value: Value): boolean => testIsEmpty(value) || testIsNumber(value);\n\n/**\n * Check if the value is greater than the given minimum.\n */\nexport const isMinNumber = (min: number) => (value: Value): boolean => testIsEmpty(value)\n  || (testIsNumber(value) && parseFloat(value) >= min);\n\n/**\n * Check if the value is lower than the given maximum.\n */\nexport const isMaxNumber = (max: number) => (value: Value): boolean => testIsEmpty(value)\n  || (testIsNumber(value) && parseFloat(value) <= max);\n\n/**\n * Check if the value is between the minimum and the maximum.\n */\nexport const isInRangeNumber = (min: number, max: number) => (value: Value): boolean => (\n  testIsEmpty(value)\n  || (testIsNumber(value)\n    && parseFloat(value) >= min\n    && parseFloat(value) <= max\n  ));\n\n/**\n * Check if the value is a percentage, between 0 and 100.\n */\nexport const isPercentage = () => (value: Value): boolean => testIsEmpty(value) || (\n  testIsNumber(value)\n  && parseFloat(value) >= 0\n  && parseFloat(value) <= 100\n);\n\n/**\n * Check if the value has the given length.\n */\nexport const isLength = (length: number) => (value: Value): boolean => {\n  if (testIsEmpty(value)) return true;\n\n  return (testIsString(value) || Array.isArray(value))\n    && value.length === length;\n};\n\n/**\n * Check if the value has a length greater than the given minimum.\n */\nexport const isMinLength = (min: number) => (value: Value): boolean => {\n  if (testIsEmpty(value)) return true;\n\n  return (testIsString(value) || Array.isArray(value)) && value.length >= min;\n};\n\n/**\n * Check if the value has a length lower than the given maximum.\n */\nexport const isMaxLength = (max: number) => (value: Value): boolean => testIsEmpty(value) || ((\n  testIsString(value) || Array.isArray(value)\n) && value.length <= max);\n"],"names":["testIsString","value","String","testIsNumber","parseFloat","isNaN","testIsEmpty","testIsNullOrUndefined","emailRegex","test","min","max","length","Array","isArray","match"],"mappings":"mNAMA,IAAMA,EAAe,SAACC,SAA2C,iBAAVA,GAAsBA,aAAiBC,QAKxFC,EAAe,SAACF,SAAuD,iBAAtBG,WAAWH,KAC5DI,MAAMD,WAAWH,MACjBI,MAAMJ,IAUNK,EAAc,SAACL,SAAoC,KAAVA,GALjB,SAACA,UAA0BA,MAAAA,EAKMM,CAAsBN,IAG/EO,EAAa,uHAgCI,kBAAM,SAACP,WACxBK,EAAYL,MACXD,EAAaC,MAEVA,GAASO,EAAWC,KAAKR,wBAuBJ,SAACS,EAAaC,UAAgB,SAACV,UAC5DK,EAAYL,IACRE,EAAaF,IACZG,WAAWH,IAAUS,GACrBN,WAAWH,IAAUU,eAeJ,SAACC,UAAmB,SAACX,WACvCK,EAAYL,KAERD,EAAaC,IAAUY,MAAMC,QAAQb,KACxCA,EAAMW,SAAWA,kBAeG,SAACD,UAAgB,SAACV,UAA0BK,EAAYL,KACjFD,EAAaC,IAAUY,MAAMC,QAAQb,KAClCA,EAAMW,QAAUD,kBA9CM,SAACA,UAAgB,SAACV,UAA0BK,EAAYL,IAC7EE,EAAaF,IAAUG,WAAWH,IAAUU,kBAkCvB,SAACD,UAAgB,SAACT,WACvCK,EAAYL,KAERD,EAAaC,IAAUY,MAAMC,QAAQb,KAAWA,EAAMW,QAAUF,kBA5C/C,SAACA,UAAgB,SAACT,UAA0BK,EAAYL,IAC7EE,EAAaF,IAAUG,WAAWH,IAAUS,sBA1BnB,kBAAM,SAACT,WAChCK,EAAYL,MACXY,MAAMC,QAAQb,OAETA,GAAS,IAAIW,4BAdO,kBAAM,SAACX,WACjCK,EAAYL,MACXD,EAAaC,OAERA,GAAS,IAAIc,MAAM,4BA0BP,kBAAM,SAACd,UAA0BK,EAAYL,IAAUE,EAAaF,oBA2BhE,kBAAM,SAACA,UAA0BK,EAAYL,IACvEE,EAAaF,IACVG,WAAWH,IAAU,GACrBG,WAAWH,IAAU,mBAjEA,kBAAM,SAACA,WAA4BA,GAAmB,IAAVA"}