import PropTypes from 'prop-types';
export declare type FieldValue = any;
export interface FieldValidationObject {
    rule(value: FieldValue): boolean;
    message?: string;
    deps?: any[];
}
export interface FieldAsyncValidationObject {
    rule(value: FieldValue): Promise<boolean>;
    message?: string;
    deps?: any[];
}
export interface UseFieldProps {
    name: string;
    debounce?: number;
    defaultValue?: FieldValue;
    formatValue?(value: FieldValue): FieldValue;
    onChange?(value: FieldValue, rawValue: FieldValue): void;
    required?: boolean;
    validations?: FieldValidationObject[];
    asyncValidations?: FieldAsyncValidationObject[];
    keepValue?: boolean;
}
export declare const fieldPropTypes: {
    name: PropTypes.Validator<string>;
    debounce: PropTypes.Requireable<number>;
    defaultValue: PropTypes.Requireable<any>;
    formatValue: PropTypes.Requireable<(...args: any[]) => any>;
    onChange: PropTypes.Requireable<(...args: any[]) => any>;
    required: PropTypes.Requireable<string | number | boolean | {} | PropTypes.ReactElementLike | PropTypes.ReactNodeArray>;
    validations: PropTypes.Requireable<(PropTypes.InferProps<{
        rule: PropTypes.Requireable<(...args: any[]) => any>;
        message: PropTypes.Requireable<PropTypes.ReactNodeLike>;
        deps: PropTypes.Requireable<any[]>;
    }> | null | undefined)[]>;
    asyncValidations: PropTypes.Requireable<(PropTypes.InferProps<{
        rule: PropTypes.Requireable<(...args: any[]) => any>;
        message: PropTypes.Requireable<PropTypes.ReactNodeLike>;
        deps: PropTypes.Requireable<any[]>;
    }> | null | undefined)[]>;
    keepValue: PropTypes.Requireable<boolean>;
};
export declare const fieldDefaultProps: Omit<UseFieldProps, 'name'>;
export interface Field {
    id: string;
    resetKey: number;
    name: string;
    errors: (string | undefined)[];
    asyncErrors: (string | undefined)[];
    externalErrors: string[];
    value: FieldValue;
    valueDebounced: FieldValue;
    isValidating: boolean;
    isPristine: boolean;
    isEnabled: boolean;
    stepName?: string;
}
export interface FieldState {
    id: string;
    resetKey: number;
    errors: (string | undefined)[];
    asyncErrors: (string | undefined)[];
    externalErrors: string[];
    value: FieldValue;
    valueDebounced: FieldValue;
    isValidating: boolean;
    isPristine: boolean;
    isEnabled: boolean;
}
export interface UseFieldValues {
    errorMessage?: string | undefined;
    errorMessages?: (string | undefined)[];
    id: string;
    isPristine: boolean;
    isSubmitted: boolean;
    isValid: boolean;
    isValidating: boolean;
    setValue(value: FieldValue): void;
    value: FieldValue;
    valueDebounced: FieldValue;
    resetKey: number;
}
