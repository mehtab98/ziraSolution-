(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
  typeof define === 'function' && define.amd ? define(['exports'], factory) :
  (global = global || self, factory(global['formiz-validations'] = {}));
}(this, (function (exports) { 'use strict';

  /**
   * Check if the value is a string.
   */
  var testIsString = function testIsString(value) {
    return typeof value === 'string' || value instanceof String;
  };
  /**
   * Check if the value is a number.
   */


  var testIsNumber = function testIsNumber(value) {
    return typeof parseFloat(value) === 'number' && !isNaN(parseFloat(value)) && !isNaN(value);
  };
  /**
   * Check if the value is null or undefined.
   */


  var testIsNullOrUndefined = function testIsNullOrUndefined(value) {
    return value === null || value === undefined;
  };
  /**
   * Check if the value is empty.
   */


  var testIsEmpty = function testIsEmpty(value) {
    return value === '' || testIsNullOrUndefined(value);
  }; // const testIsObject = x => x && typeof x === 'object' && x.constructor === Object;


  var emailRegex = /^(([^<>()[\].,;:\s@"]+(\.[^<>()[\].,;:\s@"]+)*)|(".+"))@(([^<>()[\].,;:\s@"]+\.)+[^<>()[\].,;:\s@"]{2,})$/i;
  /**
   * Check if the value exists.
   * @returns {function} function that accept a value and
   * return true if the value exists, false instead.
   */

  var isRequired = function isRequired() {
    return function (value) {
      return !!value || value === 0;
    };
  };
  /**
   * Check if the value is a string and is not empty.
   */

  var isNotEmptyString = function isNotEmptyString() {
    return function (value) {
      if (testIsEmpty(value)) return true;
      if (!testIsString(value)) return false;
      return !!(value || '').match(/^(?!\s*$).+/);
    };
  };
  /**
   * Check if the value is an array and is not empty.
   */

  var isNotEmptyArray = function isNotEmptyArray() {
    return function (value) {
      if (testIsEmpty(value)) return true;
      if (!Array.isArray(value)) return false;
      return !!(value || []).length;
    };
  };
  /**
   * Check if the value is a valid email.
   */

  var isEmail = function isEmail() {
    return function (value) {
      if (testIsEmpty(value)) return true;
      if (!testIsString(value)) return false;
      return !value || emailRegex.test(value);
    };
  };
  /**
   * Check if the value is a number.
   */

  var isNumber = function isNumber() {
    return function (value) {
      return testIsEmpty(value) || testIsNumber(value);
    };
  };
  /**
   * Check if the value is greater than the given minimum.
   */

  var isMinNumber = function isMinNumber(min) {
    return function (value) {
      return testIsEmpty(value) || testIsNumber(value) && parseFloat(value) >= min;
    };
  };
  /**
   * Check if the value is lower than the given maximum.
   */

  var isMaxNumber = function isMaxNumber(max) {
    return function (value) {
      return testIsEmpty(value) || testIsNumber(value) && parseFloat(value) <= max;
    };
  };
  /**
   * Check if the value is between the minimum and the maximum.
   */

  var isInRangeNumber = function isInRangeNumber(min, max) {
    return function (value) {
      return testIsEmpty(value) || testIsNumber(value) && parseFloat(value) >= min && parseFloat(value) <= max;
    };
  };
  /**
   * Check if the value is a percentage, between 0 and 100.
   */

  var isPercentage = function isPercentage() {
    return function (value) {
      return testIsEmpty(value) || testIsNumber(value) && parseFloat(value) >= 0 && parseFloat(value) <= 100;
    };
  };
  /**
   * Check if the value has the given length.
   */

  var isLength = function isLength(length) {
    return function (value) {
      if (testIsEmpty(value)) return true;
      return (testIsString(value) || Array.isArray(value)) && value.length === length;
    };
  };
  /**
   * Check if the value has a length greater than the given minimum.
   */

  var isMinLength = function isMinLength(min) {
    return function (value) {
      if (testIsEmpty(value)) return true;
      return (testIsString(value) || Array.isArray(value)) && value.length >= min;
    };
  };
  /**
   * Check if the value has a length lower than the given maximum.
   */

  var isMaxLength = function isMaxLength(max) {
    return function (value) {
      return testIsEmpty(value) || (testIsString(value) || Array.isArray(value)) && value.length <= max;
    };
  };

  exports.isEmail = isEmail;
  exports.isInRangeNumber = isInRangeNumber;
  exports.isLength = isLength;
  exports.isMaxLength = isMaxLength;
  exports.isMaxNumber = isMaxNumber;
  exports.isMinLength = isMinLength;
  exports.isMinNumber = isMinNumber;
  exports.isNotEmptyArray = isNotEmptyArray;
  exports.isNotEmptyString = isNotEmptyString;
  exports.isNumber = isNumber;
  exports.isPercentage = isPercentage;
  exports.isRequired = isRequired;

  Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=formiz-validations.umd.development.js.map
