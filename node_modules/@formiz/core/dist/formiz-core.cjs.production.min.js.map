{"version":3,"file":"formiz-core.cjs.production.min.js","sources":["../src/utils/form.utils.ts","../src/utils/global.utils.ts","../src/utils/useRefValue.ts","../src/utils/useSubject.ts","../src/Formiz.tsx","../src/errors/index.ts","../src/FormizStep.tsx","../src/types/field.types.ts","../src/useForm.ts","../src/fieldsActions.ts","../src/formActions.ts","../src/useField.ts"],"sourcesContent":["import { FormFields } from '../types/form.types';\n\nconst isObject = (x: any) => x && typeof x === 'object' && x.constructor === Object;\n\nconst parseValues = (values: any) => Object.keys(values)\n  .reduce(\n    (acc, key) => parseValuesName(key, acc), // eslint-disable-line\n    values,\n  );\n\nconst parseValuesName = (name: any, values: any): any => {\n  if (name.indexOf('.') < 0 && name.indexOf('[') < 0) {\n    return values;\n  }\n\n  const value = values[name];\n  const { [name]: deletedKey, ...nextValues } = values || {};\n  const [current, ...otherNames] = name.split('.');\n  const isArraySyntax = current.match(/\\[([0-9]*)\\]$/g);\n\n  if (isArraySyntax) {\n    const [currentName,, currentIndex] = current.split(/(\\[|\\])/g);\n    const currentCollection = values[currentName] || [];\n\n    if (otherNames.length) {\n      const group = {\n        ...(values[currentName] && isObject(values[currentName][currentIndex])\n          ? values[currentName][currentIndex]\n          : {}\n        ),\n        [otherNames.join('.')]: value,\n      };\n\n      currentCollection[currentIndex] = parseValues(group);\n    } else {\n      currentCollection[currentIndex] = value;\n    }\n\n    return {\n      ...nextValues,\n      [currentName]: currentCollection,\n    };\n  }\n\n  const group = {\n    ...(isObject(values[current]) ? values[current] : {}),\n    [otherNames.join('.')]: value,\n  };\n\n  return {\n    ...nextValues,\n    [current]: parseValues(group),\n  };\n};\n\nexport const getFormValues = (fields: FormFields) => {\n  const values = (fields || [])\n    .filter((field) => field.isEnabled)\n    .reduce((obj, field) => ({\n      ...obj,\n      [field.name]: field.value,\n    }), {});\n\n  return parseValues(values);\n};\n","export const getFormUniqueId = (): string => `form-${Math.random().toString(36).substr(2, 9)}`;\nexport const getFieldUniqueId = (): string => `field-${Math.random().toString(36).substr(2, 9)}`;\nexport const getFieldHtmlUniqueId = (formId: string, fieldName: string): string => `formiz-${formId}-field-${fieldName}`;\n","import { useRef } from 'react';\n\nexport const useRefValue = (value: any): React.RefObject<any> => {\n  const ref = useRef(value);\n  ref.current = value;\n  return ref;\n};\n","import React, { useRef } from 'react';\nimport { BehaviorSubject, Subject } from 'rxjs';\nimport { throttleTime } from 'rxjs/operators';\n\nexport const useSubject = (valueRef: React.RefObject<any>, throttle = 100) => {\n  const subjectRef = useRef(new Subject());\n  const push = (value?: any) => {\n    subjectRef.current.next(value ?? valueRef.current);\n  };\n\n  const subscription = subjectRef.current\n    .pipe(throttleTime(throttle, undefined, { leading: true, trailing: true }));\n\n  return { push, subscription };\n};\n\n\nexport const useBehaviorSubject = (valueRef: React.RefObject<any>, throttle = 100) => {\n  const subjectRef = useRef(new BehaviorSubject(valueRef.current));\n  const push = (value?: any) => {\n    subjectRef.current.next(value ?? valueRef.current);\n  };\n\n  const subscription = subjectRef.current\n    .pipe(throttleTime(throttle, undefined, { leading: true, trailing: true }));\n\n  return { push, subscription };\n};\n","import * as React from 'react';\nimport {\n  useEffect, useRef, useContext,\n} from 'react';\nimport { Field } from './types/field.types';\nimport {\n  useRefValue, getFormValues, useSubject, useBehaviorSubject, getFormUniqueId,\n} from './utils';\nimport {\n  FormMethods, FormState, FormContextValue, FormizProps, FormFields, KeepValues,\n} from './types/form.types';\nimport { StepState } from './types/step.types';\nimport * as formActions from './formActions';\nimport * as fieldsActions from './fieldsActions';\n\nexport const defaultFormActions: FormMethods = {\n  submit: () => {},\n  setFieldsValues: () => {},\n};\n\nexport const defaultFormState: FormState = {\n  id: getFormUniqueId(),\n  resetKey: 0,\n  isSubmitted: false,\n  isValidating: false,\n  isValid: true,\n  isPristine: true,\n  steps: [],\n  initialStepName: null,\n  navigatedStepName: null,\n};\n\nexport const FormContext = React.createContext<FormContextValue>({});\nexport const useFormContext = () => useContext(FormContext);\n\nconst getCurrentStep = (formState: FormState) => {\n  const currentStepName = formState.navigatedStepName\n    || formState.initialStepName;\n  return formState.steps\n    .find((x) => x.name === currentStepName);\n};\n\nexport const Formiz = ({\n  autoForm = false,\n  children = '',\n  connect = {},\n  id = getFormUniqueId(),\n  onChange = () => {},\n  onSubmit = () => {},\n  onValidSubmit = () => {},\n  onInvalidSubmit = () => {},\n  onValid = () => {},\n  onInvalid = () => {},\n}: FormizProps) => {\n  const formStateRef = useRef<FormState>({\n    ...defaultFormState,\n    id,\n  });\n  const fieldsRef = useRef<FormFields>([]);\n  const keepValuesRef = useRef<KeepValues>({});\n  const connectRef = useRefValue(connect.__connect__ || (() => {}));\n  const onChangeRef = useRefValue(onChange);\n  const onSubmitRef = useRefValue(onSubmit);\n  const onValidSubmitRef = useRefValue(onValidSubmit);\n  const onInvalidSubmitRef = useRefValue(onInvalidSubmit);\n  const onValidRef = useRefValue(onValid);\n  const onInvalidRef = useRefValue(onInvalid);\n\n  const onFormUpdate = useBehaviorSubject(formStateRef);\n  const onFieldsUpdate = useBehaviorSubject(fieldsRef);\n  const onExternalFieldsUpdate = useSubject(fieldsRef);\n  const onReset = useSubject(formStateRef);\n\n  const checkFormValidity = (): boolean => {\n    const isValid = fieldsRef.current\n      .every((field: any) => (\n        !field?.errors?.length\n        && !field?.asyncErrors?.length\n        && !field?.externalErrors?.length\n      ));\n\n    if (isValid) {\n      onValidRef.current();\n    } else {\n      onInvalidRef.current();\n    }\n\n    return isValid;\n  };\n\n  const checkStepValidity = (stepName: string): boolean => fieldsRef.current\n    .filter((field) => field.stepName === stepName)\n    .every((field: any) => (\n      !field?.errors?.length\n      && !field?.asyncErrors?.length\n      && !field?.externalErrors?.length\n    ));\n\n  const checkFormPristine = (): boolean => fieldsRef.current\n    .every((field: any) => field?.isPristine);\n\n  const checkStepPristine = (stepName: string): boolean => fieldsRef.current\n    .filter((field) => field.stepName === stepName)\n    .every((field: any) => field?.isPristine);\n\n  const checkFormValidating = (): boolean => fieldsRef.current\n    .some((field: any) => field?.isValidating);\n\n  const checkStepValidating = (stepName: string): boolean => fieldsRef.current\n    .filter((field) => field.stepName === stepName)\n    .some((field: any) => field?.isValidating);\n\n  const updateFormState = (stateToUpdate: Partial<FormState>): void => {\n    const newState = { ...formStateRef.current, ...stateToUpdate };\n    if (JSON.stringify(newState) === JSON.stringify(formStateRef.current)) {\n      return;\n    }\n    formStateRef.current = newState;\n    onFormUpdate.push();\n  };\n\n  const goToStep = (stepName: string) => {\n    const enabledSteps = formStateRef.current.steps\n      .filter(({ isEnabled }) => isEnabled);\n    const targetedStepIndex = enabledSteps\n      .findIndex(({ name }) => name === stepName);\n\n    if (targetedStepIndex < 0) {\n      return;\n    }\n\n    updateFormState({\n      navigatedStepName: enabledSteps[targetedStepIndex].name,\n    });\n  };\n\n  const nextStep = () => {\n    const enabledSteps = formStateRef.current.steps.filter((x) => x.isEnabled);\n    const stepIndex = enabledSteps\n      .findIndex((step) => step.name === getCurrentStep(formStateRef.current)?.name);\n    const isLastStep = stepIndex === enabledSteps.length - 1;\n\n    if (isLastStep) {\n      return;\n    }\n\n    goToStep(enabledSteps[stepIndex + 1].name);\n  };\n\n  const prevStep = () => {\n    const enabledSteps = formStateRef.current.steps.filter((x) => x.isEnabled);\n    const stepIndex = enabledSteps\n      .findIndex((step) => step.name === getCurrentStep(formStateRef.current)?.name);\n    const isFirstStep = stepIndex === 0;\n\n    if (isFirstStep) {\n      return;\n    }\n\n    goToStep(enabledSteps[stepIndex - 1].name);\n  };\n\n  const submit = (e?: React.FormEvent<HTMLFormElement>) => {\n    if (e) e.preventDefault();\n\n    const { steps } = formStateRef.current;\n    updateFormState({\n      isSubmitted: true,\n      steps: steps.map((step) => ({ ...step, isSubmitted: true })),\n    });\n\n    const formatedValues = getFormValues(fieldsRef.current);\n\n    if (formStateRef.current.isValid && !formStateRef.current.isValidating) {\n      onValidSubmitRef.current(formatedValues);\n    } else {\n      onInvalidSubmitRef.current(formatedValues);\n    }\n\n    onSubmitRef.current(formatedValues);\n  };\n\n  const submitStep = (e?: React.FormEvent<HTMLFormElement>) => {\n    if (e) e.preventDefault();\n\n    updateFormState({\n      steps: formStateRef.current.steps.map((step) => ({\n        ...step,\n        isSubmitted: step.name === getCurrentStep(formStateRef.current)?.name\n          ? true\n          : step.isSubmitted,\n      })),\n    });\n\n    const currentStep = getCurrentStep(formStateRef.current);\n\n    if (!currentStep?.isValid || currentStep?.isValidating) {\n      return;\n    }\n\n    const enabledSteps = formStateRef.current.steps.filter((x) => x.isEnabled);\n    const currentStepName = getCurrentStep(formStateRef.current)?.name;\n    const isLastStep = enabledSteps[enabledSteps.length - 1]?.name === currentStepName;\n\n    if (isLastStep) {\n      submit();\n      return;\n    }\n\n    nextStep();\n  };\n\n  const setFieldsValues = (objectOfValues = {}) => {\n    fieldsRef.current = fieldsActions.setFieldsValues(fieldsRef.current, objectOfValues);\n    onExternalFieldsUpdate.push();\n  };\n\n  const invalidateFields = (objectOfErrors = {}) => {\n    fieldsRef.current = fieldsActions.setFieldsExternalErrors(fieldsRef.current, objectOfErrors);\n    onExternalFieldsUpdate.push();\n  };\n\n  const getFieldStepName = (fieldName: string) => fieldsRef.current\n    .find((field: Field) => fieldName === field.name)?.stepName ?? null;\n\n  const validateForm = () => {\n    updateFormState({\n      isValid: checkFormValidity(),\n      isPristine: checkFormPristine(),\n      isValidating: checkFormValidating(),\n      steps: formStateRef.current.steps.map((step) => ({\n        ...step,\n        isValid: checkStepValidity(step.name),\n        isPristine: checkStepPristine(step.name),\n        isValidating: checkStepValidating(step.name),\n      })),\n    });\n  };\n\n  const updateStep = (step: Partial<StepState>): void => {\n    updateFormState(formActions.updateStep(formStateRef.current, step));\n    validateForm();\n  };\n\n  const unregisterStep = (name: string): void => {\n    updateFormState({\n      ...formActions.unregisterStep(formStateRef.current, name),\n      isValid: checkFormValidity(),\n    });\n    validateForm();\n  };\n\n  const registerField = (field: Field): void => {\n    delete keepValuesRef.current[field.name];\n    fieldsRef.current = fieldsActions.registerField(fieldsRef.current, field);\n    onFieldsUpdate.push();\n    onChangeRef.current(getFormValues(fieldsRef.current));\n    validateForm();\n  };\n\n  const updateField = (field: Field): void => {\n    fieldsRef.current = fieldsActions.updateField(fieldsRef.current, field);\n    onFieldsUpdate.push();\n    onChangeRef.current(getFormValues(fieldsRef.current));\n    validateForm();\n  };\n\n  const unregisterField = (field: Field, shouldKeepValue: boolean): void => {\n    if (shouldKeepValue) {\n      keepValuesRef.current[field.name] = field.value;\n    }\n    fieldsRef.current = fieldsActions.unregisterField(fieldsRef.current, field.id);\n    onFieldsUpdate.push();\n    onChangeRef.current(getFormValues(fieldsRef.current));\n    validateForm();\n  };\n\n  const reset = (): void => {\n    updateFormState(formActions.resetForm(formStateRef.current));\n    keepValuesRef.current = {};\n    onReset.push();\n  };\n\n  const formMethods: FormMethods = {\n    submit,\n    submitStep,\n    setFieldsValues,\n    invalidateFields,\n    getFieldStepName,\n    goToStep,\n    nextStep,\n    prevStep,\n    reset,\n  };\n\n  const contextValue: FormContextValue = {\n    formStateRef,\n    fieldsRef,\n    actions: {\n      updateStep,\n      unregisterStep,\n      registerField,\n      updateField,\n      unregisterField,\n    },\n    formMethods,\n    keepValuesRef,\n    subjects: {\n      onFormUpdate,\n      onFieldsUpdate,\n      onExternalFieldsUpdate,\n      onReset,\n    },\n  };\n\n  // Connect\n  useEffect(() => {\n    connectRef.current(contextValue);\n  }, []);\n\n  return (\n    <FormContext.Provider value={contextValue}>\n      {!autoForm\n        ? children\n        : (\n          <form noValidate onSubmit={submit}>\n            {children}\n          </form>\n        )}\n    </FormContext.Provider>\n  );\n};\n","// Fields errors\nexport const ErrorFieldWithoutForm = new Error('A Formiz field always needs to be a children of a `<Formiz>` component.');\nexport const ErrorFieldWithoutName = new Error('A Formiz field (component using a useField hook) always needs a `name` props.');\n\n// Steps errors\nexport const ErrorStepWithoutForm = new Error('A <FormizStep> always needs to be a children of a `<Formiz>` component.');\nexport const ErrorStepWithoutName = new Error('A <FormizStep> always needs a `name` props.');\n","import * as React from 'react';\nimport {\n  useContext, useEffect, useState,\n} from 'react';\nimport { FormizStepProps, StepState } from './types/step.types';\nimport { ErrorStepWithoutName, ErrorStepWithoutForm } from './errors';\nimport { useFormContext, defaultFormState } from './Formiz';\n\nexport const StepContext = React.createContext<any>({});\nexport const useStepContext = () => useContext(StepContext);\n\nexport const FormizStep = ({\n  as: Tag = 'div',\n  children,\n  name,\n  label,\n  order,\n  isEnabled = true,\n  style = {},\n  ...rest\n}: FormizStepProps) => {\n  if (!name) {\n    throw ErrorStepWithoutName;\n  }\n\n  const {\n    formStateRef,\n    actions,\n    subjects,\n  } = useFormContext();\n\n  if (!subjects || !actions) {\n    throw ErrorStepWithoutForm;\n  }\n\n  const [formState, setFormState] = useState(formStateRef?.current ?? defaultFormState);\n  const [state, setState] = useState<Partial<StepState>>({\n    name,\n    label,\n    isVisited: false,\n    order: order ?? 0,\n  });\n  const isActive = formState.navigatedStepName\n    ? formState.navigatedStepName === name\n    : formState.initialStepName === name;\n\n  // Subscribe to form state\n  useEffect(() => {\n    const subscription = subjects.onFormUpdate\n      .subscription\n      .subscribe(setFormState);\n    return () => subscription.unsubscribe();\n  }, []);\n\n  useEffect(() => {\n    if (formState.navigatedStepName === name && !state.isVisited && isActive) {\n      setState((prevState) => ({ ...prevState, isVisited: true }));\n    }\n  });\n\n  // Register / Update the step\n  useEffect(() => {\n    actions.updateStep({\n      ...state,\n      isEnabled,\n    });\n  }, [state, isEnabled]);\n\n  // Unregister the step\n  useEffect(() => () => {\n    actions.unregisterStep(name);\n  }, [name]);\n\n  if (!isEnabled) {\n    return null;\n  }\n\n  return (\n    <StepContext.Provider value={{\n      name,\n    }}\n    >\n      <Tag\n        style={{\n          ...style,\n          display: !isActive ? 'none' : null,\n        }}\n        {...rest}\n      >\n        {isEnabled && children}\n      </Tag>\n    </StepContext.Provider>\n  );\n};\n","import PropTypes from 'prop-types';\n\nexport type FieldValue = any; // eslint-disable-line\n\nexport interface FieldValidationObject {\n  rule(value: FieldValue): boolean;\n  message?: string;\n  deps?: any[];\n}\nexport interface FieldAsyncValidationObject {\n  rule(value: FieldValue): Promise<boolean>;\n  message?: string;\n  deps?: any[];\n}\n\nexport interface UseFieldProps {\n  name: string;\n  debounce?: number;\n  defaultValue?: FieldValue;\n  formatValue?(value: FieldValue): FieldValue;\n  onChange?(value: FieldValue, rawValue: FieldValue): void;\n  required?: boolean;\n  validations?: FieldValidationObject[];\n  asyncValidations?: FieldAsyncValidationObject[];\n  keepValue?: boolean;\n}\n\nexport const fieldPropTypes = {\n  name: PropTypes.string.isRequired,\n  debounce: PropTypes.number,\n  defaultValue: PropTypes.any,\n  formatValue: PropTypes.func,\n  onChange: PropTypes.func,\n  required: PropTypes.oneOfType([PropTypes.bool, PropTypes.node]),\n  validations: PropTypes.arrayOf(PropTypes.shape({\n    rule: PropTypes.func,\n    message: PropTypes.node,\n    deps: PropTypes.arrayOf(PropTypes.any),\n  })),\n  asyncValidations: PropTypes.arrayOf(PropTypes.shape({\n    rule: PropTypes.func,\n    message: PropTypes.node,\n    deps: PropTypes.arrayOf(PropTypes.any),\n  })),\n  keepValue: PropTypes.bool,\n};\n\nexport const fieldDefaultProps: Omit<UseFieldProps, 'name'> = {\n  debounce: 100,\n  defaultValue: null,\n  formatValue: (val: FieldValue): FieldValue => val,\n  onChange: () => {},\n  required: false,\n  validations: [],\n  asyncValidations: [],\n  keepValue: false,\n};\n\nexport interface Field {\n  id: string;\n  resetKey: number;\n  name: string;\n  errors: (string | undefined)[];\n  asyncErrors: (string | undefined)[];\n  externalErrors: string[];\n  value: FieldValue;\n  valueDebounced: FieldValue;\n  isValidating: boolean;\n  isPristine: boolean;\n  isEnabled: boolean;\n  stepName?: string;\n}\n\nexport interface FieldState {\n  id: string;\n  resetKey: number;\n  errors: (string | undefined)[];\n  asyncErrors: (string | undefined)[];\n  externalErrors: string[];\n  value: FieldValue;\n  valueDebounced: FieldValue;\n  isValidating: boolean;\n  isPristine: boolean;\n  isEnabled: boolean;\n}\n\nexport interface UseFieldValues {\n  errorMessage?: string | undefined;\n  errorMessages?: (string | undefined)[];\n  id: string;\n  isPristine: boolean;\n  isSubmitted: boolean;\n  isValid: boolean;\n  isValidating: boolean;\n  setValue(value: FieldValue): void;\n  value: FieldValue;\n  valueDebounced: FieldValue;\n  resetKey: number;\n}\n","import {\n  useCallback, useState, useRef, useEffect,\n} from 'react';\nimport { Subscription } from 'rxjs';\nimport {\n  defaultFormState,\n  useFormContext,\n} from './Formiz';\nimport { getFormValues, useRefValue } from './utils';\nimport {\n  FormFields,\n  UseFormProps,\n  UseFormValues,\n} from './types/form.types';\n\nconst shouldSubscribe = (subscribe: UseFormProps['subscribe'], key: 'form' | 'fields') => {\n  if (subscribe === true) {\n    return true;\n  }\n\n  if (subscribe === key) {\n    return true;\n  }\n\n  if (typeof subscribe !== 'object') {\n    return false;\n  }\n\n  if (!subscribe[key]) {\n    return false;\n  }\n\n  return true;\n};\n\nexport const useForm = ({\n  subscribe = true,\n}: UseFormProps = {}): UseFormValues => {\n  const {\n    formStateRef, fieldsRef, formMethods, subjects,\n  } = useFormContext();\n  const [methods, setMethods] = useState(formMethods);\n  const [localFormState, setLocalFormState] = useState(formStateRef?.current ?? defaultFormState);\n  const [localFields, setLocalFields] = useState<FormFields>(fieldsRef?.current ?? []);\n  const localFieldsRef = useRefValue(localFields);\n  const subscriptionsRef = useRef<Array<Subscription>>([]);\n\n  const subscribeOnFormUpdate = (subject: any) => {\n    if (!subject || !shouldSubscribe(subscribe, 'form')) {\n      return;\n    }\n    const subscription = subject\n      .subscription\n      .subscribe(setLocalFormState);\n    subscriptionsRef.current.push(subscription);\n  };\n\n  const subscribeOnFieldsUpdate = (subject: any) => {\n    if (!subject || !shouldSubscribe(subscribe, 'fields')) {\n      return;\n    }\n\n    const subscribeFields = typeof subscribe === 'object' && typeof subscribe.fields === 'object' ? subscribe.fields : null;\n    const subscription = subject\n      .subscription\n      .subscribe((nextFields: FormFields) => {\n        const nextState = subscribeFields\n          ? nextFields.filter((x) => subscribeFields.includes(x.name))\n          : nextFields;\n\n        if (JSON.stringify(localFieldsRef.current) === JSON.stringify(nextState)) {\n          return;\n        }\n\n        setLocalFields(nextState);\n      });\n    subscriptionsRef.current.push(subscription);\n  };\n\n  // Use the connect property to retrieve the state\n  const connect = useCallback(({\n    formMethods: _formMethods,\n    subjects: _subjects,\n  }) => {\n    setMethods(_formMethods);\n    subscribeOnFormUpdate(_subjects?.onFormUpdate);\n    subscribeOnFieldsUpdate(_subjects?.onFieldsUpdate);\n  }, []);\n\n  // Subscribe (if not used with connect)\n  useEffect(() => {\n    subscribeOnFormUpdate(subjects?.onFormUpdate);\n    subscribeOnFieldsUpdate(subjects?.onFieldsUpdate);\n  }, []);\n\n  // Clear all subscriptions at unmount\n  useEffect(() => () => {\n    subscriptionsRef.current.forEach((subscription) => subscription?.unsubscribe());\n  }, []);\n\n  const enabledSteps = localFormState.steps\n    .filter((x) => x.isEnabled)\n    .map(({\n      name,\n      label,\n      isSubmitted,\n      isPristine,\n      isValidating,\n      isValid,\n      isVisited,\n    }, index) => ({\n      index,\n      name,\n      label,\n      isPristine: isPristine ?? false,\n      isSubmitted: isSubmitted ?? false,\n      isValid: isValid ?? false,\n      isValidating: isValidating ?? false,\n      isVisited: isVisited ?? false,\n    }))\n    .map((x, index) => ({ ...x, index }));\n\n  const currentStep = enabledSteps\n    .find((x) => x.name === (localFormState.navigatedStepName || localFormState.initialStepName))\n    || null;\n\n  return {\n    ...methods,\n    ...(shouldSubscribe(subscribe, 'form') ? {\n      resetKey: localFormState.resetKey,\n      isSubmitted: localFormState.isSubmitted,\n      isValid: localFormState.isValid,\n      isValidating: localFormState.isValidating,\n      isPristine: localFormState.isPristine,\n      steps: enabledSteps,\n      currentStep: currentStep || {},\n      isStepPristine: currentStep ? currentStep.isPristine : localFormState.isPristine,\n      isStepValid: currentStep ? currentStep.isValid : localFormState.isValid,\n      isStepValidating: currentStep ? currentStep.isValidating : localFormState.isValidating,\n      isStepSubmitted: currentStep ? currentStep.isSubmitted : localFormState.isSubmitted,\n      isFirstStep: enabledSteps[0]?.name === currentStep?.name,\n      isLastStep: enabledSteps[enabledSteps.length - 1]?.name === currentStep?.name,\n    } : {}),\n    ...(shouldSubscribe(subscribe, 'fields') ? {\n      values: getFormValues(localFields),\n    } : {}),\n    __connect__: connect,\n  };\n};\n","import { FormFields } from './types/form.types';\nimport { Field } from './types/field.types';\n\nexport const registerField = (\n  fields: FormFields,\n  newField: Field,\n): FormFields => {\n  if (!newField) return fields;\n\n  const field = fields.find((x: Field) => x.id === newField.id);\n  const otherFields = fields.filter((x: Field) => x.id !== newField.id);\n\n  if (JSON.stringify(newField) === JSON.stringify(field)) {\n    return fields;\n  }\n\n  return [\n    ...otherFields,\n    { ...newField },\n  ];\n};\n\n\nexport const updateField = (\n  fields: FormFields,\n  newField: Field,\n): FormFields => {\n  if (!newField) return fields;\n\n  const field = fields.find((x: Field) => x.id === newField.id);\n  const otherFields = fields.filter((x: Field) => x.id !== newField.id);\n\n  if (JSON.stringify(newField) === JSON.stringify(field)) {\n    return fields;\n  }\n\n  return [\n    ...otherFields,\n    {\n      ...newField,\n    },\n  ];\n};\n\nexport const unregisterField = (\n  fields: FormFields,\n  fieldId: Field['id'],\n): FormFields => {\n  if (!fieldId) return fields;\n  const otherFields = fields.filter((x: Field) => x.id !== fieldId);\n  return [...otherFields];\n};\n\nexport const setFieldsValues = (\n  fields: FormFields,\n  objectOfValues: any = {},\n): FormFields => {\n  if (!objectOfValues) return fields;\n\n  const newFields = fields.map((field: Field) => ({\n    ...field,\n    value: objectOfValues[field.name] ?? field.value,\n  }));\n\n  return [...newFields];\n};\n\nexport const setFieldsExternalErrors = (\n  fields: FormFields,\n  objectOfErrors: any = {},\n): FormFields => {\n  if (!objectOfErrors) return fields;\n\n  const newFields = fields.map((field: Field) => ({\n    ...field,\n    externalErrors: objectOfErrors[field.name]\n      ? [objectOfErrors[field.name], field.externalErrors]\n      : field.externalErrors,\n  }));\n\n  return [...newFields];\n};\n","import { FormState } from './types/form.types';\nimport { StepState } from './types/step.types';\n\nexport const updateStep = (state: FormState, partialStepState: Partial<StepState>): FormState => {\n  if (!partialStepState || !partialStepState.name) return state;\n\n  const stepIndex = state.steps.findIndex((x: StepState) => x.name === partialStepState.name);\n  const step = state.steps[stepIndex];\n\n  const newStep: StepState = {\n    ...(step || {}),\n    ...partialStepState,\n  };\n\n  if (JSON.stringify(newStep) === JSON.stringify(step)) {\n    return state;\n  }\n\n  const newSteps = [...state.steps];\n\n  if (!step) {\n    newSteps.push(newStep);\n  } else {\n    newSteps[stepIndex] = newStep;\n  }\n\n  const orderedSteps = newSteps\n    .sort((a, b) => a.order - b.order);\n\n  const enabledSteps = orderedSteps.filter(({ isEnabled }) => isEnabled);\n\n  const initialStepName = enabledSteps.length ? enabledSteps[0].name : null;\n\n  const newState = {\n    ...state,\n    initialStepName,\n    steps: orderedSteps,\n  };\n\n  return newState;\n};\n\nexport const unregisterStep = (state: FormState, name: string): FormState => {\n  if (!name) return state;\n  const newState = {\n    ...state,\n    steps: state.steps.filter((x) => x.name !== name),\n  };\n  return newState;\n};\n\nexport const resetForm = (state: FormState): FormState => {\n  const newState = {\n    ...state,\n    resetKey: state.resetKey + 1,\n    isSubmitted: false,\n    isValid: true,\n    navigatedStepName: null,\n    steps: state.steps.map((step) => ({\n      ...step,\n      isSubmitted: false,\n      isVisited: false,\n    })),\n  };\n  return newState;\n};\n","import {\n  useState, useEffect, useRef,\n} from 'react';\nimport {\n  FieldValue,\n  UseFieldProps,\n  UseFieldValues,\n  FieldState,\n  FieldValidationObject,\n  FieldAsyncValidationObject,\n  fieldDefaultProps,\n} from './types/field.types';\nimport { FormFields } from './types/form.types';\nimport { StepState } from './types/step.types';\nimport { ErrorFieldWithoutForm, ErrorFieldWithoutName } from './errors';\nimport { getFieldUniqueId, useRefValue, getFieldHtmlUniqueId } from './utils';\nimport { useFormContext, defaultFormState } from './Formiz';\nimport { useStepContext } from './FormizStep';\n\nconst getValidationsWithRequired = (\n  validations: FieldValidationObject[],\n  required?: boolean | string,\n) => {\n  if (!required && required !== '') {\n    return validations;\n  }\n  return [\n    ...validations,\n    {\n      rule: (x: FieldValue) => !!x || x === 0,\n      message: required !== true ? required : '',\n    }];\n};\n\nexport const useField = ({\n  name,\n  debounce = fieldDefaultProps.debounce,\n  defaultValue = fieldDefaultProps.defaultValue,\n  formatValue = fieldDefaultProps.formatValue,\n  onChange = fieldDefaultProps.onChange,\n  required = fieldDefaultProps.required,\n  validations = fieldDefaultProps.validations,\n  asyncValidations = fieldDefaultProps.asyncValidations,\n  keepValue = fieldDefaultProps.keepValue,\n}: UseFieldProps): UseFieldValues => {\n  if (!name) {\n    throw ErrorFieldWithoutName;\n  }\n\n  const {\n    formStateRef,\n    actions,\n    subjects,\n    keepValuesRef,\n  } = useFormContext();\n\n  if (!subjects || !actions || !keepValuesRef) {\n    throw ErrorFieldWithoutForm;\n  }\n\n  const isMountedRef = useRef(true);\n  const stepContext = useStepContext();\n  const stepName = stepContext?.name;\n\n  const [formState, setFormState] = useState(formStateRef?.current ?? defaultFormState);\n  const initValue = keepValuesRef.current?.[name] ?? defaultValue;\n  const [state, setState] = useState<FieldState>({\n    id: getFieldUniqueId(),\n    resetKey: 0,\n    value: initValue,\n    valueDebounced: initValue,\n    errors: [],\n    asyncErrors: [],\n    externalErrors: [],\n    isValidating: false,\n    isPristine: true,\n    isEnabled: true,\n  });\n  const stateRef = useRefValue(state);\n  const nameRef = useRefValue(name);\n  const stepNameRef = useRefValue(stepName);\n  const validationsRef = useRefValue(getValidationsWithRequired(validations || [], required));\n  const asyncValidationsRef = useRefValue(asyncValidations || []);\n  const debounceRef = useRefValue(debounce);\n  const onChangeRef = useRefValue(onChange);\n  const formatValueRef = useRefValue(formatValue);\n  const defaultValueRef = useRefValue(defaultValue);\n  const keepValueRef = useRefValue(keepValue);\n  const currentStepName = formState.navigatedStepName\n    || formState.initialStepName;\n  const currentStep: (StepState | null) = formState.steps\n    .find((x) => x.name === currentStepName) || null;\n\n  const setValue = (value: FieldValue) => {\n    setState((prevState: FieldState) => ({\n      ...prevState,\n      externalErrors: [],\n      value,\n      isPristine: false,\n    }));\n    onChangeRef.current(formatValueRef.current(value), value);\n  };\n\n  // Subscribe to form state\n  useEffect(() => {\n    const subscription = subjects.onFormUpdate\n      .subscription\n      .subscribe(setFormState);\n    return () => subscription.unsubscribe();\n  }, []);\n\n  // Subscribe to external updates\n  useEffect(() => {\n    const subscription = subjects.onExternalFieldsUpdate\n      .subscription\n      .subscribe((fields: FormFields) => {\n        const field = fields.find((x) => x.id === stateRef.current.id);\n        if (field && JSON.stringify(field) !== JSON.stringify(stateRef.current)) {\n          setState(field);\n        }\n      });\n    return () => subscription.unsubscribe();\n  }, []);\n\n  // Subscribe to reset\n  useEffect(() => {\n    const subscription = subjects.onReset\n      .subscription\n      .subscribe(() => {\n        setState((prevState) => ({\n          ...prevState,\n          error: [],\n          externalErrors: [],\n          resetKey: prevState.resetKey + 1,\n          isPristine: true,\n          value: defaultValueRef.current,\n        }));\n        onChangeRef.current(\n          formatValueRef.current(defaultValueRef.current),\n          defaultValueRef.current,\n        );\n      });\n    return () => subscription.unsubscribe();\n  }, []);\n\n\n  // Update validations\n  useEffect(() => {\n    const validateField = async () => {\n      /**\n       * Sync validations\n       */\n\n      const fieldErrors = (validationsRef.current || [])\n        .reduce(\n          (errors: any, validation: FieldValidationObject) => (!validation.rule(state.value)\n            ? [...errors, validation.message]\n            : errors),\n          [],\n        );\n\n      const shouldRunAsyncValidations = (\n        !fieldErrors.length\n        && !!(asyncValidationsRef.current || []).length\n      );\n\n      setState((prevState: FieldState) => ({\n        ...prevState,\n        errors: fieldErrors,\n        asyncErrors: [],\n        valueDebounced: prevState.value,\n        isValidating: shouldRunAsyncValidations,\n      }));\n\n      if (!shouldRunAsyncValidations) {\n        return;\n      }\n\n      /**\n       * Async validations\n       */\n\n      const rules = await Promise.all((asyncValidationsRef.current || [])\n        .map(async (validation: FieldAsyncValidationObject) => {\n          const isValid = await validation.rule(state.value);\n          return {\n            ...validation,\n            isValid,\n          };\n        }));\n\n      if (\n        !isMountedRef.current\n        || state.value !== stateRef.current.value\n      ) {\n        return;\n      }\n\n      const fieldAsyncErrors: (string | undefined)[] = rules\n        .reduce(\n          (errors: (string | undefined)[], validation: any) => (!validation.isValid\n            ? [...errors, validation.message]\n            : errors),\n          [],\n        );\n\n      setState((prevState: FieldState) => ({\n        ...prevState,\n        asyncErrors: fieldAsyncErrors,\n        isValidating: false,\n      }));\n    };\n\n    if (!debounceRef.current) {\n      validateField();\n      return () => {};\n    }\n\n    const timer = setTimeout(() => {\n      validateField();\n    }, debounceRef.current);\n    return () => clearTimeout(timer);\n  }, [\n    JSON.stringify(state.value),\n    JSON.stringify(\n      [\n        ...(validations || []),\n        ...(asyncValidations || []),\n      ]?.reduce<any>(\n        (acc, cur) => [\n          ...acc,\n          ...(cur.deps || []),\n          cur.message,\n        ],\n        [],\n      ),\n    ),\n  ]);\n\n  // Register / Unregister the field\n  useEffect(() => {\n    actions.registerField({\n      ...stateRef.current,\n      name: nameRef.current,\n      stepName: stepNameRef.current,\n      value: formatValueRef.current(stateRef.current.value),\n    });\n\n    return () => {\n      actions.unregisterField(\n        {\n          ...stateRef.current,\n          name: nameRef.current,\n          stepName: stepNameRef.current,\n          value: formatValueRef.current(stateRef.current.value),\n        },\n        keepValueRef.current,\n      );\n    };\n  }, []);\n\n  // Update field at form level\n  useEffect(() => {\n    actions.updateField({\n      ...state,\n      name,\n      stepName,\n      value: formatValueRef.current(state.value),\n    });\n  }, [name, stepName, JSON.stringify(state)]);\n\n  useEffect(() => () => {\n    isMountedRef.current = false;\n  }, []);\n\n  const isSubmitted = stepName && currentStep && currentStepName === stepName\n    ? currentStep.isSubmitted\n    : formState.isSubmitted;\n\n  const allErrors = [...state.externalErrors, ...state.asyncErrors, ...state.errors];\n\n  return {\n    errorMessage: allErrors[0],\n    errorMessages: allErrors,\n    id: getFieldHtmlUniqueId(formStateRef?.current?.id || '', name),\n    isPristine: state.isPristine,\n    isSubmitted,\n    isValid: !allErrors.length,\n    isValidating: state.isValidating,\n    setValue,\n    value: state.value,\n    valueDebounced: state.valueDebounced,\n    resetKey: state.resetKey,\n  };\n};\n"],"names":["isObject","x","constructor","Object","parseValues","values","keys","reduce","acc","key","parseValuesName","name","indexOf","value","nextValues","split","current","otherNames","match","currentName","currentIndex","currentCollection","length","group","join","getFormValues","fields","filter","field","isEnabled","obj","getFormUniqueId","Math","random","toString","substr","useRefValue","ref","useRef","useSubject","valueRef","throttle","subjectRef","Subject","push","next","subscription","pipe","throttleTime","undefined","leading","trailing","useBehaviorSubject","BehaviorSubject","defaultFormState","id","resetKey","isSubmitted","isValidating","isValid","isPristine","steps","initialStepName","navigatedStepName","FormContext","React","useFormContext","useContext","getCurrentStep","formState","currentStepName","find","ErrorFieldWithoutForm","Error","ErrorFieldWithoutName","ErrorStepWithoutForm","ErrorStepWithoutName","StepContext","fieldPropTypes","PropTypes","string","isRequired","debounce","number","defaultValue","any","formatValue","func","onChange","required","oneOfType","bool","node","validations","arrayOf","shape","rule","message","deps","asyncValidations","keepValue","fieldDefaultProps","val","shouldSubscribe","subscribe","autoForm","children","connect","onSubmit","onValidSubmit","onInvalidSubmit","onValid","onInvalid","formStateRef","fieldsRef","keepValuesRef","connectRef","__connect__","onChangeRef","onSubmitRef","onValidSubmitRef","onInvalidSubmitRef","onValidRef","onInvalidRef","onFormUpdate","onFieldsUpdate","onExternalFieldsUpdate","onReset","checkFormValidity","every","errors","_field$errors","asyncErrors","_field$asyncErrors","externalErrors","_field$externalErrors","checkStepPristine","stepName","checkStepValidating","some","updateFormState","stateToUpdate","newState","JSON","stringify","goToStep","enabledSteps","targetedStepIndex","findIndex","nextStep","stepIndex","step","_getCurrentStep","submit","e","preventDefault","map","formatedValues","validateForm","_field$errors2","_field$asyncErrors2","_field$externalErrors2","formMethods","submitStep","_getCurrentStep3","currentStep","_getCurrentStep4","setFieldsValues","objectOfValues","newFields","fieldsActions","invalidateFields","objectOfErrors","getFieldStepName","fieldName","_fieldsRef$current$fi2","prevStep","_getCurrentStep2","reset","state","isVisited","contextValue","actions","updateStep","partialStepState","newStep","newSteps","orderedSteps","sort","a","b","order","formActions","unregisterStep","registerField","newField","otherFields","updateField","unregisterField","shouldKeepValue","fieldId","subjects","useEffect","Provider","noValidate","as","Tag","label","style","rest","useState","setFormState","setState","isActive","unsubscribe","prevState","display","isMountedRef","stepContext","initValue","_keepValuesRef$curren2","valueDebounced","stateRef","nameRef","stepNameRef","validationsRef","getValidationsWithRequired","asyncValidationsRef","debounceRef","formatValueRef","defaultValueRef","keepValueRef","error","validateField","fieldErrors","validation","shouldRunAsyncValidations","Promise","all","rules","fieldAsyncErrors","timer","setTimeout","clearTimeout","_ref2","cur","formId","allErrors","errorMessage","errorMessages","setValue","methods","setMethods","localFormState","setLocalFormState","localFields","setLocalFields","localFieldsRef","subscriptionsRef","subscribeOnFormUpdate","subject","subscribeOnFieldsUpdate","subscribeFields","nextFields","nextState","includes","useCallback","_subjects","forEach","index","isStepPristine","isStepValid","isStepValidating","isStepSubmitted","isFirstStep","isLastStep"],"mappings":"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"}