{"ast":null,"code":"'use strict';\n\nvar _assertThisInitialized = require(\"/Users/MehtabRandhawa/Desktop/node-deployment/zira_solution/ziraSolution-/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/assertThisInitialized\");\n\nvar _toConsumableArray = require(\"/Users/MehtabRandhawa/Desktop/node-deployment/zira_solution/ziraSolution-/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/toConsumableArray\");\n\nvar _slicedToArray = require(\"/Users/MehtabRandhawa/Desktop/node-deployment/zira_solution/ziraSolution-/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nvar _get = require(\"/Users/MehtabRandhawa/Desktop/node-deployment/zira_solution/ziraSolution-/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/get\");\n\nvar _getPrototypeOf = require(\"/Users/MehtabRandhawa/Desktop/node-deployment/zira_solution/ziraSolution-/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"/Users/MehtabRandhawa/Desktop/node-deployment/zira_solution/ziraSolution-/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/Users/MehtabRandhawa/Desktop/node-deployment/zira_solution/ziraSolution-/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar _createClass = require(\"/Users/MehtabRandhawa/Desktop/node-deployment/zira_solution/ziraSolution-/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _classCallCheck = require(\"/Users/MehtabRandhawa/Desktop/node-deployment/zira_solution/ziraSolution-/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar beforeExpr = true;\nvar startsExpr = true;\nvar isLoop = true;\nvar isAssign = true;\nvar prefix = true;\nvar postfix = true;\n\nvar TokenType = function TokenType(label) {\n  var conf = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  _classCallCheck(this, TokenType);\n\n  this.label = label;\n  this.keyword = conf.keyword;\n  this.beforeExpr = !!conf.beforeExpr;\n  this.startsExpr = !!conf.startsExpr;\n  this.rightAssociative = !!conf.rightAssociative;\n  this.isLoop = !!conf.isLoop;\n  this.isAssign = !!conf.isAssign;\n  this.prefix = !!conf.prefix;\n  this.postfix = !!conf.postfix;\n  this.binop = conf.binop != null ? conf.binop : null;\n  this.updateContext = null;\n};\n\nvar keywords = new Map();\n\nfunction createKeyword(name) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  options.keyword = name;\n  var token = new TokenType(name, options);\n  keywords.set(name, token);\n  return token;\n}\n\nfunction createBinop(name, binop) {\n  return new TokenType(name, {\n    beforeExpr: beforeExpr,\n    binop: binop\n  });\n}\n\nvar types = {\n  num: new TokenType(\"num\", {\n    startsExpr: startsExpr\n  }),\n  bigint: new TokenType(\"bigint\", {\n    startsExpr: startsExpr\n  }),\n  regexp: new TokenType(\"regexp\", {\n    startsExpr: startsExpr\n  }),\n  string: new TokenType(\"string\", {\n    startsExpr: startsExpr\n  }),\n  name: new TokenType(\"name\", {\n    startsExpr: startsExpr\n  }),\n  eof: new TokenType(\"eof\"),\n  bracketL: new TokenType(\"[\", {\n    beforeExpr: beforeExpr,\n    startsExpr: startsExpr\n  }),\n  bracketHashL: new TokenType(\"#[\", {\n    beforeExpr: beforeExpr,\n    startsExpr: startsExpr\n  }),\n  bracketBarL: new TokenType(\"[|\", {\n    beforeExpr: beforeExpr,\n    startsExpr: startsExpr\n  }),\n  bracketR: new TokenType(\"]\"),\n  bracketBarR: new TokenType(\"|]\"),\n  braceL: new TokenType(\"{\", {\n    beforeExpr: beforeExpr,\n    startsExpr: startsExpr\n  }),\n  braceBarL: new TokenType(\"{|\", {\n    beforeExpr: beforeExpr,\n    startsExpr: startsExpr\n  }),\n  braceHashL: new TokenType(\"#{\", {\n    beforeExpr: beforeExpr,\n    startsExpr: startsExpr\n  }),\n  braceR: new TokenType(\"}\"),\n  braceBarR: new TokenType(\"|}\"),\n  parenL: new TokenType(\"(\", {\n    beforeExpr: beforeExpr,\n    startsExpr: startsExpr\n  }),\n  parenR: new TokenType(\")\"),\n  comma: new TokenType(\",\", {\n    beforeExpr: beforeExpr\n  }),\n  semi: new TokenType(\";\", {\n    beforeExpr: beforeExpr\n  }),\n  colon: new TokenType(\":\", {\n    beforeExpr: beforeExpr\n  }),\n  doubleColon: new TokenType(\"::\", {\n    beforeExpr: beforeExpr\n  }),\n  dot: new TokenType(\".\"),\n  question: new TokenType(\"?\", {\n    beforeExpr: beforeExpr\n  }),\n  questionDot: new TokenType(\"?.\"),\n  arrow: new TokenType(\"=>\", {\n    beforeExpr: beforeExpr\n  }),\n  template: new TokenType(\"template\"),\n  ellipsis: new TokenType(\"...\", {\n    beforeExpr: beforeExpr\n  }),\n  backQuote: new TokenType(\"`\", {\n    startsExpr: startsExpr\n  }),\n  dollarBraceL: new TokenType(\"${\", {\n    beforeExpr: beforeExpr,\n    startsExpr: startsExpr\n  }),\n  at: new TokenType(\"@\"),\n  hash: new TokenType(\"#\", {\n    startsExpr: startsExpr\n  }),\n  interpreterDirective: new TokenType(\"#!...\"),\n  eq: new TokenType(\"=\", {\n    beforeExpr: beforeExpr,\n    isAssign: isAssign\n  }),\n  assign: new TokenType(\"_=\", {\n    beforeExpr: beforeExpr,\n    isAssign: isAssign\n  }),\n  incDec: new TokenType(\"++/--\", {\n    prefix: prefix,\n    postfix: postfix,\n    startsExpr: startsExpr\n  }),\n  bang: new TokenType(\"!\", {\n    beforeExpr: beforeExpr,\n    prefix: prefix,\n    startsExpr: startsExpr\n  }),\n  tilde: new TokenType(\"~\", {\n    beforeExpr: beforeExpr,\n    prefix: prefix,\n    startsExpr: startsExpr\n  }),\n  pipeline: createBinop(\"|>\", 0),\n  nullishCoalescing: createBinop(\"??\", 1),\n  logicalOR: createBinop(\"||\", 1),\n  logicalAND: createBinop(\"&&\", 2),\n  bitwiseOR: createBinop(\"|\", 3),\n  bitwiseXOR: createBinop(\"^\", 4),\n  bitwiseAND: createBinop(\"&\", 5),\n  equality: createBinop(\"==/!=/===/!==\", 6),\n  relational: createBinop(\"</>/<=/>=\", 7),\n  bitShift: createBinop(\"<</>>/>>>\", 8),\n  plusMin: new TokenType(\"+/-\", {\n    beforeExpr: beforeExpr,\n    binop: 9,\n    prefix: prefix,\n    startsExpr: startsExpr\n  }),\n  modulo: new TokenType(\"%\", {\n    beforeExpr: beforeExpr,\n    binop: 10,\n    startsExpr: startsExpr\n  }),\n  star: createBinop(\"*\", 10),\n  slash: createBinop(\"/\", 10),\n  exponent: new TokenType(\"**\", {\n    beforeExpr: beforeExpr,\n    binop: 11,\n    rightAssociative: true\n  }),\n  _break: createKeyword(\"break\"),\n  _case: createKeyword(\"case\", {\n    beforeExpr: beforeExpr\n  }),\n  _catch: createKeyword(\"catch\"),\n  _continue: createKeyword(\"continue\"),\n  _debugger: createKeyword(\"debugger\"),\n  _default: createKeyword(\"default\", {\n    beforeExpr: beforeExpr\n  }),\n  _do: createKeyword(\"do\", {\n    isLoop: isLoop,\n    beforeExpr: beforeExpr\n  }),\n  _else: createKeyword(\"else\", {\n    beforeExpr: beforeExpr\n  }),\n  _finally: createKeyword(\"finally\"),\n  _for: createKeyword(\"for\", {\n    isLoop: isLoop\n  }),\n  _function: createKeyword(\"function\", {\n    startsExpr: startsExpr\n  }),\n  _if: createKeyword(\"if\"),\n  _return: createKeyword(\"return\", {\n    beforeExpr: beforeExpr\n  }),\n  _switch: createKeyword(\"switch\"),\n  _throw: createKeyword(\"throw\", {\n    beforeExpr: beforeExpr,\n    prefix: prefix,\n    startsExpr: startsExpr\n  }),\n  _try: createKeyword(\"try\"),\n  _var: createKeyword(\"var\"),\n  _const: createKeyword(\"const\"),\n  _while: createKeyword(\"while\", {\n    isLoop: isLoop\n  }),\n  _with: createKeyword(\"with\"),\n  _new: createKeyword(\"new\", {\n    beforeExpr: beforeExpr,\n    startsExpr: startsExpr\n  }),\n  _this: createKeyword(\"this\", {\n    startsExpr: startsExpr\n  }),\n  _super: createKeyword(\"super\", {\n    startsExpr: startsExpr\n  }),\n  _class: createKeyword(\"class\", {\n    startsExpr: startsExpr\n  }),\n  _extends: createKeyword(\"extends\", {\n    beforeExpr: beforeExpr\n  }),\n  _export: createKeyword(\"export\"),\n  _import: createKeyword(\"import\", {\n    startsExpr: startsExpr\n  }),\n  _null: createKeyword(\"null\", {\n    startsExpr: startsExpr\n  }),\n  _true: createKeyword(\"true\", {\n    startsExpr: startsExpr\n  }),\n  _false: createKeyword(\"false\", {\n    startsExpr: startsExpr\n  }),\n  _in: createKeyword(\"in\", {\n    beforeExpr: beforeExpr,\n    binop: 7\n  }),\n  _instanceof: createKeyword(\"instanceof\", {\n    beforeExpr: beforeExpr,\n    binop: 7\n  }),\n  _typeof: createKeyword(\"typeof\", {\n    beforeExpr: beforeExpr,\n    prefix: prefix,\n    startsExpr: startsExpr\n  }),\n  _void: createKeyword(\"void\", {\n    beforeExpr: beforeExpr,\n    prefix: prefix,\n    startsExpr: startsExpr\n  }),\n  _delete: createKeyword(\"delete\", {\n    beforeExpr: beforeExpr,\n    prefix: prefix,\n    startsExpr: startsExpr\n  })\n};\nvar SCOPE_OTHER = 0,\n    SCOPE_PROGRAM = 1,\n    SCOPE_FUNCTION = 2,\n    SCOPE_ARROW = 4,\n    SCOPE_SIMPLE_CATCH = 8,\n    SCOPE_SUPER = 16,\n    SCOPE_DIRECT_SUPER = 32,\n    SCOPE_CLASS = 64,\n    SCOPE_TS_MODULE = 128,\n    SCOPE_VAR = SCOPE_PROGRAM | SCOPE_FUNCTION | SCOPE_TS_MODULE;\nvar BIND_KIND_VALUE = 1,\n    BIND_KIND_TYPE = 2,\n    BIND_SCOPE_VAR = 4,\n    BIND_SCOPE_LEXICAL = 8,\n    BIND_SCOPE_FUNCTION = 16,\n    BIND_FLAGS_NONE = 64,\n    BIND_FLAGS_CLASS = 128,\n    BIND_FLAGS_TS_ENUM = 256,\n    BIND_FLAGS_TS_CONST_ENUM = 512,\n    BIND_FLAGS_TS_EXPORT_ONLY = 1024;\nvar BIND_CLASS = BIND_KIND_VALUE | BIND_KIND_TYPE | BIND_SCOPE_LEXICAL | BIND_FLAGS_CLASS,\n    BIND_LEXICAL = BIND_KIND_VALUE | 0 | BIND_SCOPE_LEXICAL | 0,\n    BIND_VAR = BIND_KIND_VALUE | 0 | BIND_SCOPE_VAR | 0,\n    BIND_FUNCTION = BIND_KIND_VALUE | 0 | BIND_SCOPE_FUNCTION | 0,\n    BIND_TS_INTERFACE = 0 | BIND_KIND_TYPE | 0 | BIND_FLAGS_CLASS,\n    BIND_TS_TYPE = 0 | BIND_KIND_TYPE | 0 | 0,\n    BIND_TS_ENUM = BIND_KIND_VALUE | BIND_KIND_TYPE | BIND_SCOPE_LEXICAL | BIND_FLAGS_TS_ENUM,\n    BIND_TS_AMBIENT = 0 | 0 | 0 | BIND_FLAGS_TS_EXPORT_ONLY,\n    BIND_NONE = 0 | 0 | 0 | BIND_FLAGS_NONE,\n    BIND_OUTSIDE = BIND_KIND_VALUE | 0 | 0 | BIND_FLAGS_NONE,\n    BIND_TS_CONST_ENUM = BIND_TS_ENUM | BIND_FLAGS_TS_CONST_ENUM,\n    BIND_TS_NAMESPACE = 0 | 0 | 0 | BIND_FLAGS_TS_EXPORT_ONLY;\nvar CLASS_ELEMENT_FLAG_STATIC = 4,\n    CLASS_ELEMENT_KIND_GETTER = 2,\n    CLASS_ELEMENT_KIND_SETTER = 1,\n    CLASS_ELEMENT_KIND_ACCESSOR = CLASS_ELEMENT_KIND_GETTER | CLASS_ELEMENT_KIND_SETTER;\nvar CLASS_ELEMENT_STATIC_GETTER = CLASS_ELEMENT_KIND_GETTER | CLASS_ELEMENT_FLAG_STATIC,\n    CLASS_ELEMENT_STATIC_SETTER = CLASS_ELEMENT_KIND_SETTER | CLASS_ELEMENT_FLAG_STATIC,\n    CLASS_ELEMENT_INSTANCE_GETTER = CLASS_ELEMENT_KIND_GETTER,\n    CLASS_ELEMENT_INSTANCE_SETTER = CLASS_ELEMENT_KIND_SETTER,\n    CLASS_ELEMENT_OTHER = 0;\nvar lineBreak = /\\r\\n?|[\\n\\u2028\\u2029]/;\nvar lineBreakG = new RegExp(lineBreak.source, \"g\");\n\nfunction isNewLine(code) {\n  switch (code) {\n    case 10:\n    case 13:\n    case 8232:\n    case 8233:\n      return true;\n\n    default:\n      return false;\n  }\n}\n\nvar skipWhiteSpace = /(?:\\s|\\/\\/.*|\\/\\*[^]*?\\*\\/)*/g;\n\nfunction isWhitespace(code) {\n  switch (code) {\n    case 0x0009:\n    case 0x000b:\n    case 0x000c:\n    case 32:\n    case 160:\n    case 5760:\n    case 0x2000:\n    case 0x2001:\n    case 0x2002:\n    case 0x2003:\n    case 0x2004:\n    case 0x2005:\n    case 0x2006:\n    case 0x2007:\n    case 0x2008:\n    case 0x2009:\n    case 0x200a:\n    case 0x202f:\n    case 0x205f:\n    case 0x3000:\n    case 0xfeff:\n      return true;\n\n    default:\n      return false;\n  }\n}\n\nvar Position = function Position(line, col) {\n  _classCallCheck(this, Position);\n\n  this.line = line;\n  this.column = col;\n};\n\nvar SourceLocation = function SourceLocation(start, end) {\n  _classCallCheck(this, SourceLocation);\n\n  this.start = start;\n  this.end = end;\n};\n\nfunction getLineInfo(input, offset) {\n  var line = 1;\n  var lineStart = 0;\n  var match;\n  lineBreakG.lastIndex = 0;\n\n  while ((match = lineBreakG.exec(input)) && match.index < offset) {\n    line++;\n    lineStart = lineBreakG.lastIndex;\n  }\n\n  return new Position(line, offset - lineStart);\n}\n\nvar BaseParser = /*#__PURE__*/function () {\n  function BaseParser() {\n    _classCallCheck(this, BaseParser);\n\n    this.sawUnambiguousESM = false;\n    this.ambiguousScriptDifferentAst = false;\n  }\n\n  _createClass(BaseParser, [{\n    key: \"hasPlugin\",\n    value: function hasPlugin(name) {\n      return this.plugins.has(name);\n    }\n  }, {\n    key: \"getPluginOption\",\n    value: function getPluginOption(plugin, name) {\n      if (this.hasPlugin(plugin)) return this.plugins.get(plugin)[name];\n    }\n  }]);\n\n  return BaseParser;\n}();\n\nfunction last(stack) {\n  return stack[stack.length - 1];\n}\n\nvar CommentsParser = /*#__PURE__*/function (_BaseParser) {\n  _inherits(CommentsParser, _BaseParser);\n\n  var _super = _createSuper(CommentsParser);\n\n  function CommentsParser() {\n    _classCallCheck(this, CommentsParser);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(CommentsParser, [{\n    key: \"addComment\",\n    value: function addComment(comment) {\n      if (this.filename) comment.loc.filename = this.filename;\n      this.state.trailingComments.push(comment);\n      this.state.leadingComments.push(comment);\n    }\n  }, {\n    key: \"adjustCommentsAfterTrailingComma\",\n    value: function adjustCommentsAfterTrailingComma(node, elements, takeAllComments) {\n      if (this.state.leadingComments.length === 0) {\n        return;\n      }\n\n      var lastElement = null;\n      var i = elements.length;\n\n      while (lastElement === null && i > 0) {\n        lastElement = elements[--i];\n      }\n\n      if (lastElement === null) {\n        return;\n      }\n\n      for (var j = 0; j < this.state.leadingComments.length; j++) {\n        if (this.state.leadingComments[j].end < this.state.commentPreviousNode.end) {\n          this.state.leadingComments.splice(j, 1);\n          j--;\n        }\n      }\n\n      var newTrailingComments = [];\n\n      for (var _i8 = 0; _i8 < this.state.leadingComments.length; _i8++) {\n        var leadingComment = this.state.leadingComments[_i8];\n\n        if (leadingComment.end < node.end) {\n          newTrailingComments.push(leadingComment);\n\n          if (!takeAllComments) {\n            this.state.leadingComments.splice(_i8, 1);\n            _i8--;\n          }\n        } else {\n          if (node.trailingComments === undefined) {\n            node.trailingComments = [];\n          }\n\n          node.trailingComments.push(leadingComment);\n        }\n      }\n\n      if (takeAllComments) this.state.leadingComments = [];\n\n      if (newTrailingComments.length > 0) {\n        lastElement.trailingComments = newTrailingComments;\n      } else if (lastElement.trailingComments !== undefined) {\n        lastElement.trailingComments = [];\n      }\n    }\n  }, {\n    key: \"processComment\",\n    value: function processComment(node) {\n      if (node.type === \"Program\" && node.body.length > 0) return;\n      var stack = this.state.commentStack;\n      var firstChild, lastChild, trailingComments, i, j;\n\n      if (this.state.trailingComments.length > 0) {\n        if (this.state.trailingComments[0].start >= node.end) {\n          trailingComments = this.state.trailingComments;\n          this.state.trailingComments = [];\n        } else {\n          this.state.trailingComments.length = 0;\n        }\n      } else if (stack.length > 0) {\n        var lastInStack = last(stack);\n\n        if (lastInStack.trailingComments && lastInStack.trailingComments[0].start >= node.end) {\n          trailingComments = lastInStack.trailingComments;\n          delete lastInStack.trailingComments;\n        }\n      }\n\n      if (stack.length > 0 && last(stack).start >= node.start) {\n        firstChild = stack.pop();\n      }\n\n      while (stack.length > 0 && last(stack).start >= node.start) {\n        lastChild = stack.pop();\n      }\n\n      if (!lastChild && firstChild) lastChild = firstChild;\n\n      if (firstChild) {\n        switch (node.type) {\n          case \"ObjectExpression\":\n            this.adjustCommentsAfterTrailingComma(node, node.properties);\n            break;\n\n          case \"ObjectPattern\":\n            this.adjustCommentsAfterTrailingComma(node, node.properties, true);\n            break;\n\n          case \"CallExpression\":\n            this.adjustCommentsAfterTrailingComma(node, node.arguments);\n            break;\n\n          case \"ArrayExpression\":\n            this.adjustCommentsAfterTrailingComma(node, node.elements);\n            break;\n\n          case \"ArrayPattern\":\n            this.adjustCommentsAfterTrailingComma(node, node.elements, true);\n            break;\n        }\n      } else if (this.state.commentPreviousNode && (this.state.commentPreviousNode.type === \"ImportSpecifier\" && node.type !== \"ImportSpecifier\" || this.state.commentPreviousNode.type === \"ExportSpecifier\" && node.type !== \"ExportSpecifier\")) {\n        this.adjustCommentsAfterTrailingComma(node, [this.state.commentPreviousNode]);\n      }\n\n      if (lastChild) {\n        if (lastChild.leadingComments) {\n          if (lastChild !== node && lastChild.leadingComments.length > 0 && last(lastChild.leadingComments).end <= node.start) {\n            node.leadingComments = lastChild.leadingComments;\n            delete lastChild.leadingComments;\n          } else {\n            for (i = lastChild.leadingComments.length - 2; i >= 0; --i) {\n              if (lastChild.leadingComments[i].end <= node.start) {\n                node.leadingComments = lastChild.leadingComments.splice(0, i + 1);\n                break;\n              }\n            }\n          }\n        }\n      } else if (this.state.leadingComments.length > 0) {\n        if (last(this.state.leadingComments).end <= node.start) {\n          if (this.state.commentPreviousNode) {\n            for (j = 0; j < this.state.leadingComments.length; j++) {\n              if (this.state.leadingComments[j].end < this.state.commentPreviousNode.end) {\n                this.state.leadingComments.splice(j, 1);\n                j--;\n              }\n            }\n          }\n\n          if (this.state.leadingComments.length > 0) {\n            node.leadingComments = this.state.leadingComments;\n            this.state.leadingComments = [];\n          }\n        } else {\n          for (i = 0; i < this.state.leadingComments.length; i++) {\n            if (this.state.leadingComments[i].end > node.start) {\n              break;\n            }\n          }\n\n          var leadingComments = this.state.leadingComments.slice(0, i);\n\n          if (leadingComments.length) {\n            node.leadingComments = leadingComments;\n          }\n\n          trailingComments = this.state.leadingComments.slice(i);\n\n          if (trailingComments.length === 0) {\n            trailingComments = null;\n          }\n        }\n      }\n\n      this.state.commentPreviousNode = node;\n\n      if (trailingComments) {\n        if (trailingComments.length && trailingComments[0].start >= node.start && last(trailingComments).end <= node.end) {\n          node.innerComments = trailingComments;\n        } else {\n          var firstTrailingCommentIndex = trailingComments.findIndex(function (comment) {\n            return comment.end >= node.end;\n          });\n\n          if (firstTrailingCommentIndex > 0) {\n            node.innerComments = trailingComments.slice(0, firstTrailingCommentIndex);\n            node.trailingComments = trailingComments.slice(firstTrailingCommentIndex);\n          } else {\n            node.trailingComments = trailingComments;\n          }\n        }\n      }\n\n      stack.push(node);\n    }\n  }]);\n\n  return CommentsParser;\n}(BaseParser);\n\nvar ErrorMessages = Object.freeze({\n  ArgumentsDisallowedInInitializer: \"'arguments' is not allowed in class field initializer\",\n  AsyncFunctionInSingleStatementContext: \"Async functions can only be declared at the top level or inside a block\",\n  AwaitBindingIdentifier: \"Can not use 'await' as identifier inside an async function\",\n  AwaitExpressionFormalParameter: \"await is not allowed in async function parameters\",\n  AwaitNotInAsyncFunction: \"Can not use keyword 'await' outside an async function\",\n  BadGetterArity: \"getter must not have any formal parameters\",\n  BadSetterArity: \"setter must have exactly one formal parameter\",\n  BadSetterRestParameter: \"setter function argument must not be a rest parameter\",\n  ConstructorClassField: \"Classes may not have a field named 'constructor'\",\n  ConstructorClassPrivateField: \"Classes may not have a private field named '#constructor'\",\n  ConstructorIsAccessor: \"Class constructor may not be an accessor\",\n  ConstructorIsAsync: \"Constructor can't be an async function\",\n  ConstructorIsGenerator: \"Constructor can't be a generator\",\n  DeclarationMissingInitializer: \"%0 require an initialization value\",\n  DecoratorBeforeExport: \"Decorators must be placed *before* the 'export' keyword. You can set the 'decoratorsBeforeExport' option to false to use the 'export @decorator class {}' syntax\",\n  DecoratorConstructor: \"Decorators can't be used with a constructor. Did you mean '@dec class { ... }'?\",\n  DecoratorExportClass: \"Using the export keyword between a decorator and a class is not allowed. Please use `export @dec class` instead.\",\n  DecoratorSemicolon: \"Decorators must not be followed by a semicolon\",\n  DeletePrivateField: \"Deleting a private field is not allowed\",\n  DestructureNamedImport: \"ES2015 named imports do not destructure. Use another statement for destructuring after the import.\",\n  DuplicateConstructor: \"Duplicate constructor in the same class\",\n  DuplicateDefaultExport: \"Only one default export allowed per module.\",\n  DuplicateExport: \"`%0` has already been exported. Exported identifiers must be unique.\",\n  DuplicateProto: \"Redefinition of __proto__ property\",\n  DuplicateRegExpFlags: \"Duplicate regular expression flag\",\n  ElementAfterRest: \"Rest element must be last element\",\n  EscapedCharNotAnIdentifier: \"Invalid Unicode escape\",\n  ExportDefaultFromAsIdentifier: \"'from' is not allowed as an identifier after 'export default'\",\n  ForInOfLoopInitializer: \"%0 loop variable declaration may not have an initializer\",\n  GeneratorInSingleStatementContext: \"Generators can only be declared at the top level or inside a block\",\n  IllegalBreakContinue: \"Unsyntactic %0\",\n  IllegalLanguageModeDirective: \"Illegal 'use strict' directive in function with non-simple parameter list\",\n  IllegalReturn: \"'return' outside of function\",\n  ImportCallArgumentTrailingComma: \"Trailing comma is disallowed inside import(...) arguments\",\n  ImportCallArity: \"import() requires exactly %0\",\n  ImportCallNotNewExpression: \"Cannot use new with import(...)\",\n  ImportCallSpreadArgument: \"... is not allowed in import()\",\n  ImportMetaOutsideModule: \"import.meta may appear only with 'sourceType: \\\"module\\\"'\",\n  ImportOutsideModule: \"'import' and 'export' may appear only with 'sourceType: \\\"module\\\"'\",\n  InvalidBigIntLiteral: \"Invalid BigIntLiteral\",\n  InvalidCodePoint: \"Code point out of bounds\",\n  InvalidDigit: \"Expected number in radix %0\",\n  InvalidEscapeSequence: \"Bad character escape sequence\",\n  InvalidEscapeSequenceTemplate: \"Invalid escape sequence in template\",\n  InvalidEscapedReservedWord: \"Escape sequence in keyword %0\",\n  InvalidIdentifier: \"Invalid identifier %0\",\n  InvalidLhs: \"Invalid left-hand side in %0\",\n  InvalidLhsBinding: \"Binding invalid left-hand side in %0\",\n  InvalidNumber: \"Invalid number\",\n  InvalidOrUnexpectedToken: \"Unexpected character '%0'\",\n  InvalidParenthesizedAssignment: \"Invalid parenthesized assignment pattern\",\n  InvalidPrivateFieldResolution: \"Private name #%0 is not defined\",\n  InvalidPropertyBindingPattern: \"Binding member expression\",\n  InvalidRecordProperty: \"Only properties and spread elements are allowed in record definitions\",\n  InvalidRestAssignmentPattern: \"Invalid rest operator's argument\",\n  LabelRedeclaration: \"Label '%0' is already declared\",\n  LetInLexicalBinding: \"'let' is not allowed to be used as a name in 'let' or 'const' declarations.\",\n  MalformedRegExpFlags: \"Invalid regular expression flag\",\n  MissingClassName: \"A class name is required\",\n  MissingEqInAssignment: \"Only '=' operator can be used for specifying default value.\",\n  MissingUnicodeEscape: \"Expecting Unicode escape sequence \\\\uXXXX\",\n  MixingCoalesceWithLogical: \"Nullish coalescing operator(??) requires parens when mixing with logical operators\",\n  ModuleAttributeDifferentFromType: \"The only accepted module attribute is `type`\",\n  ModuleAttributeInvalidValue: \"Only string literals are allowed as module attribute values\",\n  ModuleAttributesWithDuplicateKeys: 'Duplicate key \"%0\" is not allowed in module attributes',\n  ModuleExportUndefined: \"Export '%0' is not defined\",\n  MultipleDefaultsInSwitch: \"Multiple default clauses\",\n  NewlineAfterThrow: \"Illegal newline after throw\",\n  NoCatchOrFinally: \"Missing catch or finally clause\",\n  NumberIdentifier: \"Identifier directly after number\",\n  NumericSeparatorInEscapeSequence: \"Numeric separators are not allowed inside unicode escape sequences or hex escape sequences\",\n  ObsoleteAwaitStar: \"await* has been removed from the async functions proposal. Use Promise.all() instead.\",\n  OptionalChainingNoNew: \"constructors in/after an Optional Chain are not allowed\",\n  OptionalChainingNoTemplate: \"Tagged Template Literals are not allowed in optionalChain\",\n  ParamDupe: \"Argument name clash\",\n  PatternHasAccessor: \"Object pattern can't contain getter or setter\",\n  PatternHasMethod: \"Object pattern can't contain methods\",\n  PipelineBodyNoArrow: 'Unexpected arrow \"=>\" after pipeline body; arrow function in pipeline body must be parenthesized',\n  PipelineBodySequenceExpression: \"Pipeline body may not be a comma-separated sequence expression\",\n  PipelineHeadSequenceExpression: \"Pipeline head should not be a comma-separated sequence expression\",\n  PipelineTopicUnused: \"Pipeline is in topic style but does not use topic reference\",\n  PrimaryTopicNotAllowed: \"Topic reference was used in a lexical context without topic binding\",\n  PrimaryTopicRequiresSmartPipeline: \"Primary Topic Reference found but pipelineOperator not passed 'smart' for 'proposal' option.\",\n  PrivateInExpectedIn: \"Private names are only allowed in property accesses (`obj.#%0`) or in `in` expressions (`#%0 in obj`)\",\n  PrivateNameRedeclaration: \"Duplicate private name #%0\",\n  RecordExpressionBarIncorrectEndSyntaxType: \"Record expressions ending with '|}' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'\",\n  RecordExpressionBarIncorrectStartSyntaxType: \"Record expressions starting with '{|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'\",\n  RecordExpressionHashIncorrectStartSyntaxType: \"Record expressions starting with '#{' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'\",\n  RecordNoProto: \"'__proto__' is not allowed in Record expressions\",\n  RestTrailingComma: \"Unexpected trailing comma after rest element\",\n  SloppyFunction: \"In non-strict mode code, functions can only be declared at top level, inside a block, or as the body of an if statement\",\n  StaticPrototype: \"Classes may not have static property named prototype\",\n  StrictDelete: \"Deleting local variable in strict mode\",\n  StrictEvalArguments: \"Assigning to '%0' in strict mode\",\n  StrictEvalArgumentsBinding: \"Binding '%0' in strict mode\",\n  StrictFunction: \"In strict mode code, functions can only be declared at top level or inside a block\",\n  StrictOctalLiteral: \"Legacy octal literals are not allowed in strict mode\",\n  StrictWith: \"'with' in strict mode\",\n  SuperNotAllowed: \"super() is only valid inside a class constructor of a subclass. Maybe a typo in the method name ('constructor') or not extending another class?\",\n  SuperPrivateField: \"Private fields can't be accessed on super\",\n  TrailingDecorator: \"Decorators must be attached to a class element\",\n  TupleExpressionBarIncorrectEndSyntaxType: \"Tuple expressions ending with '|]' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'\",\n  TupleExpressionBarIncorrectStartSyntaxType: \"Tuple expressions starting with '[|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'\",\n  TupleExpressionHashIncorrectStartSyntaxType: \"Tuple expressions starting with '#[' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'\",\n  UnexpectedArgumentPlaceholder: \"Unexpected argument placeholder\",\n  UnexpectedAwaitAfterPipelineBody: 'Unexpected \"await\" after pipeline body; await must have parentheses in minimal proposal',\n  UnexpectedDigitAfterHash: \"Unexpected digit after hash token\",\n  UnexpectedImportExport: \"'import' and 'export' may only appear at the top level\",\n  UnexpectedKeyword: \"Unexpected keyword '%0'\",\n  UnexpectedLeadingDecorator: \"Leading decorators must be attached to a class declaration\",\n  UnexpectedLexicalDeclaration: \"Lexical declaration cannot appear in a single-statement context\",\n  UnexpectedNewTarget: \"new.target can only be used in functions\",\n  UnexpectedNumericSeparator: \"A numeric separator is only allowed between two digits\",\n  UnexpectedPrivateField: \"Private names can only be used as the name of a class element (i.e. class C { #p = 42; #m() {} } )\\n or a property of member expression (i.e. this.#p).\",\n  UnexpectedReservedWord: \"Unexpected reserved word '%0'\",\n  UnexpectedSuper: \"super is only allowed in object methods and classes\",\n  UnexpectedToken: \"Unexpected token '%0'\",\n  UnexpectedTokenUnaryExponentiation: \"Illegal expression. Wrap left hand side or entire exponentiation in parentheses.\",\n  UnsupportedBind: \"Binding should be performed on object property.\",\n  UnsupportedDecoratorExport: \"A decorated export must export a class declaration\",\n  UnsupportedDefaultExport: \"Only expressions, functions or classes are allowed as the `default` export.\",\n  UnsupportedImport: \"import can only be used in import() or import.meta\",\n  UnsupportedMetaProperty: \"The only valid meta property for %0 is %0.%1\",\n  UnsupportedParameterDecorator: \"Decorators cannot be used to decorate parameters\",\n  UnsupportedPropertyDecorator: \"Decorators cannot be used to decorate object literal properties\",\n  UnsupportedSuper: \"super can only be used with function calls (i.e. super()) or in property accesses (i.e. super.prop or super[prop])\",\n  UnterminatedComment: \"Unterminated comment\",\n  UnterminatedRegExp: \"Unterminated regular expression\",\n  UnterminatedString: \"Unterminated string constant\",\n  UnterminatedTemplate: \"Unterminated template\",\n  VarRedeclaration: \"Identifier '%0' has already been declared\",\n  YieldBindingIdentifier: \"Can not use 'yield' as identifier inside a generator\",\n  YieldInParameter: \"yield is not allowed in generator parameters\",\n  ZeroDigitNumericSeparator: \"Numeric separator can not be used after leading 0\"\n});\n\nvar ParserError = /*#__PURE__*/function (_CommentsParser) {\n  _inherits(ParserError, _CommentsParser);\n\n  var _super2 = _createSuper(ParserError);\n\n  function ParserError() {\n    _classCallCheck(this, ParserError);\n\n    return _super2.apply(this, arguments);\n  }\n\n  _createClass(ParserError, [{\n    key: \"getLocationForPosition\",\n    value: function getLocationForPosition(pos) {\n      var loc;\n      if (pos === this.state.start) loc = this.state.startLoc;else if (pos === this.state.lastTokStart) loc = this.state.lastTokStartLoc;else if (pos === this.state.end) loc = this.state.endLoc;else if (pos === this.state.lastTokEnd) loc = this.state.lastTokEndLoc;else loc = getLineInfo(this.input, pos);\n      return loc;\n    }\n  }, {\n    key: \"raise\",\n    value: function raise(pos, errorTemplate) {\n      for (var _len = arguments.length, params = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n        params[_key - 2] = arguments[_key];\n      }\n\n      return this.raiseWithData.apply(this, [pos, undefined, errorTemplate].concat(params));\n    }\n  }, {\n    key: \"raiseWithData\",\n    value: function raiseWithData(pos, data, errorTemplate) {\n      for (var _len2 = arguments.length, params = new Array(_len2 > 3 ? _len2 - 3 : 0), _key2 = 3; _key2 < _len2; _key2++) {\n        params[_key2 - 3] = arguments[_key2];\n      }\n\n      var loc = this.getLocationForPosition(pos);\n      var message = errorTemplate.replace(/%(\\d+)/g, function (_, i) {\n        return params[i];\n      }) + \" (\".concat(loc.line, \":\").concat(loc.column, \")\");\n      return this._raise(Object.assign({\n        loc: loc,\n        pos: pos\n      }, data), message);\n    }\n  }, {\n    key: \"_raise\",\n    value: function _raise(errorContext, message) {\n      var err = new SyntaxError(message);\n      Object.assign(err, errorContext);\n\n      if (this.options.errorRecovery) {\n        if (!this.isLookahead) this.state.errors.push(err);\n        return err;\n      } else {\n        throw err;\n      }\n    }\n  }]);\n\n  return ParserError;\n}(CommentsParser);\n\nfunction isSimpleProperty(node) {\n  return node != null && node.type === \"Property\" && node.kind === \"init\" && node.method === false;\n}\n\nvar estree = function estree(superClass) {\n  return /*#__PURE__*/function (_superClass) {\n    _inherits(_class, _superClass);\n\n    var _super3 = _createSuper(_class);\n\n    function _class() {\n      _classCallCheck(this, _class);\n\n      return _super3.apply(this, arguments);\n    }\n\n    _createClass(_class, [{\n      key: \"estreeParseRegExpLiteral\",\n      value: function estreeParseRegExpLiteral(_ref) {\n        var pattern = _ref.pattern,\n            flags = _ref.flags;\n        var regex = null;\n\n        try {\n          regex = new RegExp(pattern, flags);\n        } catch (e) {}\n\n        var node = this.estreeParseLiteral(regex);\n        node.regex = {\n          pattern: pattern,\n          flags: flags\n        };\n        return node;\n      }\n    }, {\n      key: \"estreeParseBigIntLiteral\",\n      value: function estreeParseBigIntLiteral(value) {\n        var bigInt = typeof BigInt !== \"undefined\" ? BigInt(value) : null;\n        var node = this.estreeParseLiteral(bigInt);\n        node.bigint = String(node.value || value);\n        return node;\n      }\n    }, {\n      key: \"estreeParseLiteral\",\n      value: function estreeParseLiteral(value) {\n        return this.parseLiteral(value, \"Literal\");\n      }\n    }, {\n      key: \"directiveToStmt\",\n      value: function directiveToStmt(directive) {\n        var directiveLiteral = directive.value;\n        var stmt = this.startNodeAt(directive.start, directive.loc.start);\n        var expression = this.startNodeAt(directiveLiteral.start, directiveLiteral.loc.start);\n        expression.value = directiveLiteral.value;\n        expression.raw = directiveLiteral.extra.raw;\n        stmt.expression = this.finishNodeAt(expression, \"Literal\", directiveLiteral.end, directiveLiteral.loc.end);\n        stmt.directive = directiveLiteral.extra.raw.slice(1, -1);\n        return this.finishNodeAt(stmt, \"ExpressionStatement\", directive.end, directive.loc.end);\n      }\n    }, {\n      key: \"initFunction\",\n      value: function initFunction(node, isAsync) {\n        _get(_getPrototypeOf(_class.prototype), \"initFunction\", this).call(this, node, isAsync);\n\n        node.expression = false;\n      }\n    }, {\n      key: \"checkDeclaration\",\n      value: function checkDeclaration(node) {\n        if (isSimpleProperty(node)) {\n          this.checkDeclaration(node.value);\n        } else {\n          _get(_getPrototypeOf(_class.prototype), \"checkDeclaration\", this).call(this, node);\n        }\n      }\n    }, {\n      key: \"checkGetterSetterParams\",\n      value: function checkGetterSetterParams(method) {\n        var prop = method;\n        var paramCount = prop.kind === \"get\" ? 0 : 1;\n        var start = prop.start;\n\n        if (prop.value.params.length !== paramCount) {\n          if (method.kind === \"get\") {\n            this.raise(start, ErrorMessages.BadGetterArity);\n          } else {\n            this.raise(start, ErrorMessages.BadSetterArity);\n          }\n        } else if (prop.kind === \"set\" && prop.value.params[0].type === \"RestElement\") {\n          this.raise(start, ErrorMessages.BadSetterRestParameter);\n        }\n      }\n    }, {\n      key: \"checkLVal\",\n      value: function checkLVal(expr) {\n        var _this = this;\n\n        var bindingType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : BIND_NONE;\n        var checkClashes = arguments.length > 2 ? arguments[2] : undefined;\n        var contextDescription = arguments.length > 3 ? arguments[3] : undefined;\n        var disallowLetBinding = arguments.length > 4 ? arguments[4] : undefined;\n\n        switch (expr.type) {\n          case \"ObjectPattern\":\n            expr.properties.forEach(function (prop) {\n              _this.checkLVal(prop.type === \"Property\" ? prop.value : prop, bindingType, checkClashes, \"object destructuring pattern\", disallowLetBinding);\n            });\n            break;\n\n          default:\n            _get(_getPrototypeOf(_class.prototype), \"checkLVal\", this).call(this, expr, bindingType, checkClashes, contextDescription, disallowLetBinding);\n\n        }\n      }\n    }, {\n      key: \"checkProto\",\n      value: function checkProto(prop, isRecord, protoRef, refExpressionErrors) {\n        if (prop.method) {\n          return;\n        }\n\n        _get(_getPrototypeOf(_class.prototype), \"checkProto\", this).call(this, prop, isRecord, protoRef, refExpressionErrors);\n      }\n    }, {\n      key: \"isValidDirective\",\n      value: function isValidDirective(stmt) {\n        var _stmt$expression$extr;\n\n        return stmt.type === \"ExpressionStatement\" && stmt.expression.type === \"Literal\" && typeof stmt.expression.value === \"string\" && !((_stmt$expression$extr = stmt.expression.extra) == null ? void 0 : _stmt$expression$extr.parenthesized);\n      }\n    }, {\n      key: \"stmtToDirective\",\n      value: function stmtToDirective(stmt) {\n        var directive = _get(_getPrototypeOf(_class.prototype), \"stmtToDirective\", this).call(this, stmt);\n\n        var value = stmt.expression.value;\n        directive.value.value = value;\n        return directive;\n      }\n    }, {\n      key: \"parseBlockBody\",\n      value: function parseBlockBody(node, allowDirectives, topLevel, end) {\n        var _this2 = this;\n\n        _get(_getPrototypeOf(_class.prototype), \"parseBlockBody\", this).call(this, node, allowDirectives, topLevel, end);\n\n        var directiveStatements = node.directives.map(function (d) {\n          return _this2.directiveToStmt(d);\n        });\n        node.body = directiveStatements.concat(node.body);\n        delete node.directives;\n      }\n    }, {\n      key: \"pushClassMethod\",\n      value: function pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {\n        this.parseMethod(method, isGenerator, isAsync, isConstructor, allowsDirectSuper, \"ClassMethod\", true);\n\n        if (method.typeParameters) {\n          method.value.typeParameters = method.typeParameters;\n          delete method.typeParameters;\n        }\n\n        classBody.body.push(method);\n      }\n    }, {\n      key: \"parseExprAtom\",\n      value: function parseExprAtom(refExpressionErrors) {\n        switch (this.state.type) {\n          case types.num:\n          case types.string:\n            return this.estreeParseLiteral(this.state.value);\n\n          case types.regexp:\n            return this.estreeParseRegExpLiteral(this.state.value);\n\n          case types.bigint:\n            return this.estreeParseBigIntLiteral(this.state.value);\n\n          case types._null:\n            return this.estreeParseLiteral(null);\n\n          case types._true:\n            return this.estreeParseLiteral(true);\n\n          case types._false:\n            return this.estreeParseLiteral(false);\n\n          default:\n            return _get(_getPrototypeOf(_class.prototype), \"parseExprAtom\", this).call(this, refExpressionErrors);\n        }\n      }\n    }, {\n      key: \"parseLiteral\",\n      value: function parseLiteral(value, type, startPos, startLoc) {\n        var node = _get(_getPrototypeOf(_class.prototype), \"parseLiteral\", this).call(this, value, type, startPos, startLoc);\n\n        node.raw = node.extra.raw;\n        delete node.extra;\n        return node;\n      }\n    }, {\n      key: \"parseFunctionBody\",\n      value: function parseFunctionBody(node, allowExpression) {\n        var isMethod = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n        _get(_getPrototypeOf(_class.prototype), \"parseFunctionBody\", this).call(this, node, allowExpression, isMethod);\n\n        node.expression = node.body.type !== \"BlockStatement\";\n      }\n    }, {\n      key: \"parseMethod\",\n      value: function parseMethod(node, isGenerator, isAsync, isConstructor, allowDirectSuper, type) {\n        var inClassScope = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : false;\n        var funcNode = this.startNode();\n        funcNode.kind = node.kind;\n        funcNode = _get(_getPrototypeOf(_class.prototype), \"parseMethod\", this).call(this, funcNode, isGenerator, isAsync, isConstructor, allowDirectSuper, type, inClassScope);\n        funcNode.type = \"FunctionExpression\";\n        delete funcNode.kind;\n        node.value = funcNode;\n        type = type === \"ClassMethod\" ? \"MethodDefinition\" : type;\n        return this.finishNode(node, type);\n      }\n    }, {\n      key: \"parseObjectMethod\",\n      value: function parseObjectMethod(prop, isGenerator, isAsync, isPattern, containsEsc) {\n        var node = _get(_getPrototypeOf(_class.prototype), \"parseObjectMethod\", this).call(this, prop, isGenerator, isAsync, isPattern, containsEsc);\n\n        if (node) {\n          node.type = \"Property\";\n          if (node.kind === \"method\") node.kind = \"init\";\n          node.shorthand = false;\n        }\n\n        return node;\n      }\n    }, {\n      key: \"parseObjectProperty\",\n      value: function parseObjectProperty(prop, startPos, startLoc, isPattern, refExpressionErrors) {\n        var node = _get(_getPrototypeOf(_class.prototype), \"parseObjectProperty\", this).call(this, prop, startPos, startLoc, isPattern, refExpressionErrors);\n\n        if (node) {\n          node.kind = \"init\";\n          node.type = \"Property\";\n        }\n\n        return node;\n      }\n    }, {\n      key: \"toAssignable\",\n      value: function toAssignable(node) {\n        if (isSimpleProperty(node)) {\n          this.toAssignable(node.value);\n          return node;\n        }\n\n        return _get(_getPrototypeOf(_class.prototype), \"toAssignable\", this).call(this, node);\n      }\n    }, {\n      key: \"toAssignableObjectExpressionProp\",\n      value: function toAssignableObjectExpressionProp(prop, isLast) {\n        if (prop.kind === \"get\" || prop.kind === \"set\") {\n          throw this.raise(prop.key.start, ErrorMessages.PatternHasAccessor);\n        } else if (prop.method) {\n          throw this.raise(prop.key.start, ErrorMessages.PatternHasMethod);\n        } else {\n          _get(_getPrototypeOf(_class.prototype), \"toAssignableObjectExpressionProp\", this).call(this, prop, isLast);\n        }\n      }\n    }, {\n      key: \"finishCallExpression\",\n      value: function finishCallExpression(node, optional) {\n        _get(_getPrototypeOf(_class.prototype), \"finishCallExpression\", this).call(this, node, optional);\n\n        if (node.callee.type === \"Import\") {\n          node.type = \"ImportExpression\";\n          node.source = node.arguments[0];\n          delete node.arguments;\n          delete node.callee;\n        } else if (node.type === \"CallExpression\") {\n          node.optional = false;\n        }\n\n        return node;\n      }\n    }, {\n      key: \"toReferencedListDeep\",\n      value: function toReferencedListDeep(exprList, isParenthesizedExpr) {\n        if (!exprList) {\n          return;\n        }\n\n        _get(_getPrototypeOf(_class.prototype), \"toReferencedListDeep\", this).call(this, exprList, isParenthesizedExpr);\n      }\n    }, {\n      key: \"parseExport\",\n      value: function parseExport(node) {\n        _get(_getPrototypeOf(_class.prototype), \"parseExport\", this).call(this, node);\n\n        switch (node.type) {\n          case \"ExportAllDeclaration\":\n            node.exported = null;\n            break;\n\n          case \"ExportNamedDeclaration\":\n            if (node.specifiers.length === 1 && node.specifiers[0].type === \"ExportNamespaceSpecifier\") {\n              node.type = \"ExportAllDeclaration\";\n              node.exported = node.specifiers[0].exported;\n              delete node.specifiers;\n            }\n\n            break;\n        }\n\n        return node;\n      }\n    }, {\n      key: \"parseSubscript\",\n      value: function parseSubscript() {\n        var _get2;\n\n        for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n          args[_key3] = arguments[_key3];\n        }\n\n        var node = (_get2 = _get(_getPrototypeOf(_class.prototype), \"parseSubscript\", this)).call.apply(_get2, [this].concat(args));\n\n        if (node.type === \"MemberExpression\") {\n          node.optional = false;\n        }\n\n        return node;\n      }\n    }]);\n\n    return _class;\n  }(superClass);\n};\n\nvar TokContext = function TokContext(token, isExpr, preserveSpace, override) {\n  _classCallCheck(this, TokContext);\n\n  this.token = token;\n  this.isExpr = !!isExpr;\n  this.preserveSpace = !!preserveSpace;\n  this.override = override;\n};\n\nvar types$1 = {\n  braceStatement: new TokContext(\"{\", false),\n  braceExpression: new TokContext(\"{\", true),\n  templateQuasi: new TokContext(\"${\", false),\n  parenStatement: new TokContext(\"(\", false),\n  parenExpression: new TokContext(\"(\", true),\n  template: new TokContext(\"`\", true, true, function (p) {\n    return p.readTmplToken();\n  }),\n  functionExpression: new TokContext(\"function\", true),\n  functionStatement: new TokContext(\"function\", false)\n};\n\ntypes.parenR.updateContext = types.braceR.updateContext = function () {\n  if (this.state.context.length === 1) {\n    this.state.exprAllowed = true;\n    return;\n  }\n\n  var out = this.state.context.pop();\n\n  if (out === types$1.braceStatement && this.curContext().token === \"function\") {\n    out = this.state.context.pop();\n  }\n\n  this.state.exprAllowed = !out.isExpr;\n};\n\ntypes.name.updateContext = function (prevType) {\n  var allowed = false;\n\n  if (prevType !== types.dot) {\n    if (this.state.value === \"of\" && !this.state.exprAllowed && prevType !== types._function && prevType !== types._class || this.state.value === \"yield\" && this.prodParam.hasYield) {\n      allowed = true;\n    }\n  }\n\n  this.state.exprAllowed = allowed;\n\n  if (this.state.isIterator) {\n    this.state.isIterator = false;\n  }\n};\n\ntypes.braceL.updateContext = function (prevType) {\n  this.state.context.push(this.braceIsBlock(prevType) ? types$1.braceStatement : types$1.braceExpression);\n  this.state.exprAllowed = true;\n};\n\ntypes.dollarBraceL.updateContext = function () {\n  this.state.context.push(types$1.templateQuasi);\n  this.state.exprAllowed = true;\n};\n\ntypes.parenL.updateContext = function (prevType) {\n  var statementParens = prevType === types._if || prevType === types._for || prevType === types._with || prevType === types._while;\n  this.state.context.push(statementParens ? types$1.parenStatement : types$1.parenExpression);\n  this.state.exprAllowed = true;\n};\n\ntypes.incDec.updateContext = function () {};\n\ntypes._function.updateContext = types._class.updateContext = function (prevType) {\n  if (prevType === types.dot || prevType === types.questionDot) ;else if (prevType.beforeExpr && prevType !== types.semi && prevType !== types._else && !(prevType === types._return && lineBreak.test(this.input.slice(this.state.lastTokEnd, this.state.start))) && !((prevType === types.colon || prevType === types.braceL) && this.curContext() === types$1.b_stat)) {\n    this.state.context.push(types$1.functionExpression);\n  } else {\n    this.state.context.push(types$1.functionStatement);\n  }\n  this.state.exprAllowed = false;\n};\n\ntypes.backQuote.updateContext = function () {\n  if (this.curContext() === types$1.template) {\n    this.state.context.pop();\n  } else {\n    this.state.context.push(types$1.template);\n  }\n\n  this.state.exprAllowed = false;\n};\n\ntypes.star.updateContext = function () {\n  this.state.exprAllowed = false;\n};\n\nvar nonASCIIidentifierStartChars = \"\\xAA\\xB5\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0370-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0560-\\u0588\\u05D0-\\u05EA\\u05EF-\\u05F2\\u0620-\\u064A\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06E5\\u06E6\\u06EE\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u07F4\\u07F5\\u07FA\\u0800-\\u0815\\u081A\\u0824\\u0828\\u0840-\\u0858\\u0860-\\u086A\\u08A0-\\u08B4\\u08B6-\\u08C7\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09F0\\u09F1\\u09FC\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0AF9\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D\\u0C58-\\u0C5A\\u0C60\\u0C61\\u0C80\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDE\\u0CE0\\u0CE1\\u0CF1\\u0CF2\\u0D04-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D54-\\u0D56\\u0D5F-\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E46\\u0E81\\u0E82\\u0E84\\u0E86-\\u0E8A\\u0E8C-\\u0EA3\\u0EA5\\u0EA7-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EDC-\\u0EDF\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u13A0-\\u13F5\\u13F8-\\u13FD\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F8\\u1700-\\u170C\\u170E-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17D7\\u17DC\\u1820-\\u1878\\u1880-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1AA7\\u1B05-\\u1B33\\u1B45-\\u1B4B\\u1B83-\\u1BA0\\u1BAE\\u1BAF\\u1BBA-\\u1BE5\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C7D\\u1C80-\\u1C88\\u1C90-\\u1CBA\\u1CBD-\\u1CBF\\u1CE9-\\u1CEC\\u1CEE-\\u1CF3\\u1CF5\\u1CF6\\u1CFA\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2071\\u207F\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2118-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u309B-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312F\\u3131-\\u318E\\u31A0-\\u31BF\\u31F0-\\u31FF\\u3400-\\u4DBF\\u4E00-\\u9FFC\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA61F\\uA62A\\uA62B\\uA640-\\uA66E\\uA67F-\\uA69D\\uA6A0-\\uA6EF\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA7BF\\uA7C2-\\uA7CA\\uA7F5-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8F2-\\uA8F7\\uA8FB\\uA8FD\\uA8FE\\uA90A-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9CF\\uA9E0-\\uA9E4\\uA9E6-\\uA9EF\\uA9FA-\\uA9FE\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA60-\\uAA76\\uAA7A\\uAA7E-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEA\\uAAF2-\\uAAF4\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB69\\uAB70-\\uABE2\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC\";\nvar nonASCIIidentifierChars = \"\\u200C\\u200D\\xB7\\u0300-\\u036F\\u0387\\u0483-\\u0487\\u0591-\\u05BD\\u05BF\\u05C1\\u05C2\\u05C4\\u05C5\\u05C7\\u0610-\\u061A\\u064B-\\u0669\\u0670\\u06D6-\\u06DC\\u06DF-\\u06E4\\u06E7\\u06E8\\u06EA-\\u06ED\\u06F0-\\u06F9\\u0711\\u0730-\\u074A\\u07A6-\\u07B0\\u07C0-\\u07C9\\u07EB-\\u07F3\\u07FD\\u0816-\\u0819\\u081B-\\u0823\\u0825-\\u0827\\u0829-\\u082D\\u0859-\\u085B\\u08D3-\\u08E1\\u08E3-\\u0903\\u093A-\\u093C\\u093E-\\u094F\\u0951-\\u0957\\u0962\\u0963\\u0966-\\u096F\\u0981-\\u0983\\u09BC\\u09BE-\\u09C4\\u09C7\\u09C8\\u09CB-\\u09CD\\u09D7\\u09E2\\u09E3\\u09E6-\\u09EF\\u09FE\\u0A01-\\u0A03\\u0A3C\\u0A3E-\\u0A42\\u0A47\\u0A48\\u0A4B-\\u0A4D\\u0A51\\u0A66-\\u0A71\\u0A75\\u0A81-\\u0A83\\u0ABC\\u0ABE-\\u0AC5\\u0AC7-\\u0AC9\\u0ACB-\\u0ACD\\u0AE2\\u0AE3\\u0AE6-\\u0AEF\\u0AFA-\\u0AFF\\u0B01-\\u0B03\\u0B3C\\u0B3E-\\u0B44\\u0B47\\u0B48\\u0B4B-\\u0B4D\\u0B55-\\u0B57\\u0B62\\u0B63\\u0B66-\\u0B6F\\u0B82\\u0BBE-\\u0BC2\\u0BC6-\\u0BC8\\u0BCA-\\u0BCD\\u0BD7\\u0BE6-\\u0BEF\\u0C00-\\u0C04\\u0C3E-\\u0C44\\u0C46-\\u0C48\\u0C4A-\\u0C4D\\u0C55\\u0C56\\u0C62\\u0C63\\u0C66-\\u0C6F\\u0C81-\\u0C83\\u0CBC\\u0CBE-\\u0CC4\\u0CC6-\\u0CC8\\u0CCA-\\u0CCD\\u0CD5\\u0CD6\\u0CE2\\u0CE3\\u0CE6-\\u0CEF\\u0D00-\\u0D03\\u0D3B\\u0D3C\\u0D3E-\\u0D44\\u0D46-\\u0D48\\u0D4A-\\u0D4D\\u0D57\\u0D62\\u0D63\\u0D66-\\u0D6F\\u0D81-\\u0D83\\u0DCA\\u0DCF-\\u0DD4\\u0DD6\\u0DD8-\\u0DDF\\u0DE6-\\u0DEF\\u0DF2\\u0DF3\\u0E31\\u0E34-\\u0E3A\\u0E47-\\u0E4E\\u0E50-\\u0E59\\u0EB1\\u0EB4-\\u0EBC\\u0EC8-\\u0ECD\\u0ED0-\\u0ED9\\u0F18\\u0F19\\u0F20-\\u0F29\\u0F35\\u0F37\\u0F39\\u0F3E\\u0F3F\\u0F71-\\u0F84\\u0F86\\u0F87\\u0F8D-\\u0F97\\u0F99-\\u0FBC\\u0FC6\\u102B-\\u103E\\u1040-\\u1049\\u1056-\\u1059\\u105E-\\u1060\\u1062-\\u1064\\u1067-\\u106D\\u1071-\\u1074\\u1082-\\u108D\\u108F-\\u109D\\u135D-\\u135F\\u1369-\\u1371\\u1712-\\u1714\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17B4-\\u17D3\\u17DD\\u17E0-\\u17E9\\u180B-\\u180D\\u1810-\\u1819\\u18A9\\u1920-\\u192B\\u1930-\\u193B\\u1946-\\u194F\\u19D0-\\u19DA\\u1A17-\\u1A1B\\u1A55-\\u1A5E\\u1A60-\\u1A7C\\u1A7F-\\u1A89\\u1A90-\\u1A99\\u1AB0-\\u1ABD\\u1ABF\\u1AC0\\u1B00-\\u1B04\\u1B34-\\u1B44\\u1B50-\\u1B59\\u1B6B-\\u1B73\\u1B80-\\u1B82\\u1BA1-\\u1BAD\\u1BB0-\\u1BB9\\u1BE6-\\u1BF3\\u1C24-\\u1C37\\u1C40-\\u1C49\\u1C50-\\u1C59\\u1CD0-\\u1CD2\\u1CD4-\\u1CE8\\u1CED\\u1CF4\\u1CF7-\\u1CF9\\u1DC0-\\u1DF9\\u1DFB-\\u1DFF\\u203F\\u2040\\u2054\\u20D0-\\u20DC\\u20E1\\u20E5-\\u20F0\\u2CEF-\\u2CF1\\u2D7F\\u2DE0-\\u2DFF\\u302A-\\u302F\\u3099\\u309A\\uA620-\\uA629\\uA66F\\uA674-\\uA67D\\uA69E\\uA69F\\uA6F0\\uA6F1\\uA802\\uA806\\uA80B\\uA823-\\uA827\\uA82C\\uA880\\uA881\\uA8B4-\\uA8C5\\uA8D0-\\uA8D9\\uA8E0-\\uA8F1\\uA8FF-\\uA909\\uA926-\\uA92D\\uA947-\\uA953\\uA980-\\uA983\\uA9B3-\\uA9C0\\uA9D0-\\uA9D9\\uA9E5\\uA9F0-\\uA9F9\\uAA29-\\uAA36\\uAA43\\uAA4C\\uAA4D\\uAA50-\\uAA59\\uAA7B-\\uAA7D\\uAAB0\\uAAB2-\\uAAB4\\uAAB7\\uAAB8\\uAABE\\uAABF\\uAAC1\\uAAEB-\\uAAEF\\uAAF5\\uAAF6\\uABE3-\\uABEA\\uABEC\\uABED\\uABF0-\\uABF9\\uFB1E\\uFE00-\\uFE0F\\uFE20-\\uFE2F\\uFE33\\uFE34\\uFE4D-\\uFE4F\\uFF10-\\uFF19\\uFF3F\";\nvar nonASCIIidentifierStart = new RegExp(\"[\" + nonASCIIidentifierStartChars + \"]\");\nvar nonASCIIidentifier = new RegExp(\"[\" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + \"]\");\nnonASCIIidentifierStartChars = nonASCIIidentifierChars = null;\nvar astralIdentifierStartCodes = [0, 11, 2, 25, 2, 18, 2, 1, 2, 14, 3, 13, 35, 122, 70, 52, 268, 28, 4, 48, 48, 31, 14, 29, 6, 37, 11, 29, 3, 35, 5, 7, 2, 4, 43, 157, 19, 35, 5, 35, 5, 39, 9, 51, 157, 310, 10, 21, 11, 7, 153, 5, 3, 0, 2, 43, 2, 1, 4, 0, 3, 22, 11, 22, 10, 30, 66, 18, 2, 1, 11, 21, 11, 25, 71, 55, 7, 1, 65, 0, 16, 3, 2, 2, 2, 28, 43, 28, 4, 28, 36, 7, 2, 27, 28, 53, 11, 21, 11, 18, 14, 17, 111, 72, 56, 50, 14, 50, 14, 35, 349, 41, 7, 1, 79, 28, 11, 0, 9, 21, 107, 20, 28, 22, 13, 52, 76, 44, 33, 24, 27, 35, 30, 0, 3, 0, 9, 34, 4, 0, 13, 47, 15, 3, 22, 0, 2, 0, 36, 17, 2, 24, 85, 6, 2, 0, 2, 3, 2, 14, 2, 9, 8, 46, 39, 7, 3, 1, 3, 21, 2, 6, 2, 1, 2, 4, 4, 0, 19, 0, 13, 4, 159, 52, 19, 3, 21, 2, 31, 47, 21, 1, 2, 0, 185, 46, 42, 3, 37, 47, 21, 0, 60, 42, 14, 0, 72, 26, 230, 43, 117, 63, 32, 7, 3, 0, 3, 7, 2, 1, 2, 23, 16, 0, 2, 0, 95, 7, 3, 38, 17, 0, 2, 0, 29, 0, 11, 39, 8, 0, 22, 0, 12, 45, 20, 0, 35, 56, 264, 8, 2, 36, 18, 0, 50, 29, 113, 6, 2, 1, 2, 37, 22, 0, 26, 5, 2, 1, 2, 31, 15, 0, 328, 18, 190, 0, 80, 921, 103, 110, 18, 195, 2749, 1070, 4050, 582, 8634, 568, 8, 30, 114, 29, 19, 47, 17, 3, 32, 20, 6, 18, 689, 63, 129, 74, 6, 0, 67, 12, 65, 1, 2, 0, 29, 6135, 9, 1237, 43, 8, 8952, 286, 50, 2, 18, 3, 9, 395, 2309, 106, 6, 12, 4, 8, 8, 9, 5991, 84, 2, 70, 2, 1, 3, 0, 3, 1, 3, 3, 2, 11, 2, 0, 2, 6, 2, 64, 2, 3, 3, 7, 2, 6, 2, 27, 2, 3, 2, 4, 2, 0, 4, 6, 2, 339, 3, 24, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 7, 2357, 44, 11, 6, 17, 0, 370, 43, 1301, 196, 60, 67, 8, 0, 1205, 3, 2, 26, 2, 1, 2, 0, 3, 0, 2, 9, 2, 3, 2, 0, 2, 0, 7, 0, 5, 0, 2, 0, 2, 0, 2, 2, 2, 1, 2, 0, 3, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 1, 2, 0, 3, 3, 2, 6, 2, 3, 2, 3, 2, 0, 2, 9, 2, 16, 6, 2, 2, 4, 2, 16, 4421, 42717, 35, 4148, 12, 221, 3, 5761, 15, 7472, 3104, 541, 1507, 4938];\nvar astralIdentifierCodes = [509, 0, 227, 0, 150, 4, 294, 9, 1368, 2, 2, 1, 6, 3, 41, 2, 5, 0, 166, 1, 574, 3, 9, 9, 370, 1, 154, 10, 176, 2, 54, 14, 32, 9, 16, 3, 46, 10, 54, 9, 7, 2, 37, 13, 2, 9, 6, 1, 45, 0, 13, 2, 49, 13, 9, 3, 2, 11, 83, 11, 7, 0, 161, 11, 6, 9, 7, 3, 56, 1, 2, 6, 3, 1, 3, 2, 10, 0, 11, 1, 3, 6, 4, 4, 193, 17, 10, 9, 5, 0, 82, 19, 13, 9, 214, 6, 3, 8, 28, 1, 83, 16, 16, 9, 82, 12, 9, 9, 84, 14, 5, 9, 243, 14, 166, 9, 71, 5, 2, 1, 3, 3, 2, 0, 2, 1, 13, 9, 120, 6, 3, 6, 4, 0, 29, 9, 41, 6, 2, 3, 9, 0, 10, 10, 47, 15, 406, 7, 2, 7, 17, 9, 57, 21, 2, 13, 123, 5, 4, 0, 2, 1, 2, 6, 2, 0, 9, 9, 49, 4, 2, 1, 2, 4, 9, 9, 330, 3, 19306, 9, 135, 4, 60, 6, 26, 9, 1014, 0, 2, 54, 8, 3, 82, 0, 12, 1, 19628, 1, 5319, 4, 4, 5, 9, 7, 3, 6, 31, 3, 149, 2, 1418, 49, 513, 54, 5, 49, 9, 0, 15, 0, 23, 4, 2, 14, 1361, 6, 2, 16, 3, 6, 2, 1, 2, 4, 262, 6, 10, 9, 419, 13, 1495, 6, 110, 6, 6, 9, 4759, 9, 787719, 239];\n\nfunction isInAstralSet(code, set) {\n  var pos = 0x10000;\n\n  for (var i = 0, length = set.length; i < length; i += 2) {\n    pos += set[i];\n    if (pos > code) return false;\n    pos += set[i + 1];\n    if (pos >= code) return true;\n  }\n\n  return false;\n}\n\nfunction isIdentifierStart(code) {\n  if (code < 65) return code === 36;\n  if (code <= 90) return true;\n  if (code < 97) return code === 95;\n  if (code <= 122) return true;\n\n  if (code <= 0xffff) {\n    return code >= 0xaa && nonASCIIidentifierStart.test(String.fromCharCode(code));\n  }\n\n  return isInAstralSet(code, astralIdentifierStartCodes);\n}\n\nfunction isIdentifierChar(code) {\n  if (code < 48) return code === 36;\n  if (code < 58) return true;\n  if (code < 65) return false;\n  if (code <= 90) return true;\n  if (code < 97) return code === 95;\n  if (code <= 122) return true;\n\n  if (code <= 0xffff) {\n    return code >= 0xaa && nonASCIIidentifier.test(String.fromCharCode(code));\n  }\n\n  return isInAstralSet(code, astralIdentifierStartCodes) || isInAstralSet(code, astralIdentifierCodes);\n}\n\nvar reservedWords = {\n  keyword: [\"break\", \"case\", \"catch\", \"continue\", \"debugger\", \"default\", \"do\", \"else\", \"finally\", \"for\", \"function\", \"if\", \"return\", \"switch\", \"throw\", \"try\", \"var\", \"const\", \"while\", \"with\", \"new\", \"this\", \"super\", \"class\", \"extends\", \"export\", \"import\", \"null\", \"true\", \"false\", \"in\", \"instanceof\", \"typeof\", \"void\", \"delete\"],\n  strict: [\"implements\", \"interface\", \"let\", \"package\", \"private\", \"protected\", \"public\", \"static\", \"yield\"],\n  strictBind: [\"eval\", \"arguments\"]\n};\nvar keywords$1 = new Set(reservedWords.keyword);\nvar reservedWordsStrictSet = new Set(reservedWords.strict);\nvar reservedWordsStrictBindSet = new Set(reservedWords.strictBind);\n\nfunction isReservedWord(word, inModule) {\n  return inModule && word === \"await\" || word === \"enum\";\n}\n\nfunction isStrictReservedWord(word, inModule) {\n  return isReservedWord(word, inModule) || reservedWordsStrictSet.has(word);\n}\n\nfunction isStrictBindOnlyReservedWord(word) {\n  return reservedWordsStrictBindSet.has(word);\n}\n\nfunction isStrictBindReservedWord(word, inModule) {\n  return isStrictReservedWord(word, inModule) || isStrictBindOnlyReservedWord(word);\n}\n\nfunction isKeyword(word) {\n  return keywords$1.has(word);\n}\n\nvar keywordRelationalOperator = /^in(stanceof)?$/;\n\nfunction isIteratorStart(current, next) {\n  return current === 64 && next === 64;\n}\n\nvar reservedTypes = new Set([\"_\", \"any\", \"bool\", \"boolean\", \"empty\", \"extends\", \"false\", \"interface\", \"mixed\", \"null\", \"number\", \"static\", \"string\", \"true\", \"typeof\", \"void\"]);\nvar FlowErrors = Object.freeze({\n  AmbiguousConditionalArrow: \"Ambiguous expression: wrap the arrow functions in parentheses to disambiguate.\",\n  AmbiguousDeclareModuleKind: \"Found both `declare module.exports` and `declare export` in the same module. Modules can only have 1 since they are either an ES module or they are a CommonJS module\",\n  AssignReservedType: \"Cannot overwrite reserved type %0\",\n  DeclareClassElement: \"The `declare` modifier can only appear on class fields.\",\n  DeclareClassFieldInitializer: \"Initializers are not allowed in fields with the `declare` modifier.\",\n  DuplicateDeclareModuleExports: \"Duplicate `declare module.exports` statement\",\n  EnumBooleanMemberNotInitialized: \"Boolean enum members need to be initialized. Use either `%0 = true,` or `%0 = false,` in enum `%1`.\",\n  EnumDuplicateMemberName: \"Enum member names need to be unique, but the name `%0` has already been used before in enum `%1`.\",\n  EnumInconsistentMemberValues: \"Enum `%0` has inconsistent member initializers. Either use no initializers, or consistently use literals (either booleans, numbers, or strings) for all member initializers.\",\n  EnumInvalidExplicitType: \"Enum type `%1` is not valid. Use one of `boolean`, `number`, `string`, or `symbol` in enum `%0`.\",\n  EnumInvalidExplicitTypeUnknownSupplied: \"Supplied enum type is not valid. Use one of `boolean`, `number`, `string`, or `symbol` in enum `%0`.\",\n  EnumInvalidMemberInitializerPrimaryType: \"Enum `%0` has type `%2`, so the initializer of `%1` needs to be a %2 literal.\",\n  EnumInvalidMemberInitializerSymbolType: \"Symbol enum members cannot be initialized. Use `%1,` in enum `%0`.\",\n  EnumInvalidMemberInitializerUnknownType: \"The enum member initializer for `%1` needs to be a literal (either a boolean, number, or string) in enum `%0`.\",\n  EnumInvalidMemberName: \"Enum member names cannot start with lowercase 'a' through 'z'. Instead of using `%0`, consider using `%1`, in enum `%2`.\",\n  EnumNumberMemberNotInitialized: \"Number enum members need to be initialized, e.g. `%1 = 1` in enum `%0`.\",\n  EnumStringMemberInconsistentlyInitailized: \"String enum members need to consistently either all use initializers, or use no initializers, in enum `%0`.\",\n  ImportTypeShorthandOnlyInPureImport: \"The `type` and `typeof` keywords on named imports can only be used on regular `import` statements. It cannot be used with `import type` or `import typeof` statements\",\n  InexactInsideExact: \"Explicit inexact syntax cannot appear inside an explicit exact object type\",\n  InexactInsideNonObject: \"Explicit inexact syntax cannot appear in class or interface definitions\",\n  InexactVariance: \"Explicit inexact syntax cannot have variance\",\n  InvalidNonTypeImportInDeclareModule: \"Imports within a `declare module` body must always be `import type` or `import typeof`\",\n  MissingTypeParamDefault: \"Type parameter declaration needs a default, since a preceding type parameter declaration has a default.\",\n  NestedDeclareModule: \"`declare module` cannot be used inside another `declare module`\",\n  NestedFlowComment: \"Cannot have a flow comment inside another flow comment\",\n  OptionalBindingPattern: \"A binding pattern parameter cannot be optional in an implementation signature.\",\n  SpreadVariance: \"Spread properties cannot have variance\",\n  TypeBeforeInitializer: \"Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`\",\n  TypeCastInPattern: \"The type cast expression is expected to be wrapped with parenthesis\",\n  UnexpectedExplicitInexactInObject: \"Explicit inexact syntax must appear at the end of an inexact object\",\n  UnexpectedReservedType: \"Unexpected reserved type %0\",\n  UnexpectedReservedUnderscore: \"`_` is only allowed as a type argument to call or new\",\n  UnexpectedSpaceBetweenModuloChecks: \"Spaces between `%` and `checks` are not allowed here.\",\n  UnexpectedSpreadType: \"Spread operator cannot appear in class or interface definitions\",\n  UnexpectedSubtractionOperand: 'Unexpected token, expected \"number\" or \"bigint\"',\n  UnexpectedTokenAfterTypeParameter: \"Expected an arrow function after this type parameter declaration\",\n  UnsupportedDeclareExportKind: \"`declare export %0` is not supported. Use `%1` instead\",\n  UnsupportedStatementInDeclareModule: \"Only declares and type imports are allowed inside declare module\",\n  UnterminatedFlowComment: \"Unterminated flow-comment\"\n});\n\nfunction isEsModuleType(bodyElement) {\n  return bodyElement.type === \"DeclareExportAllDeclaration\" || bodyElement.type === \"DeclareExportDeclaration\" && (!bodyElement.declaration || bodyElement.declaration.type !== \"TypeAlias\" && bodyElement.declaration.type !== \"InterfaceDeclaration\");\n}\n\nfunction hasTypeImportKind(node) {\n  return node.importKind === \"type\" || node.importKind === \"typeof\";\n}\n\nfunction isMaybeDefaultImport(state) {\n  return (state.type === types.name || !!state.type.keyword) && state.value !== \"from\";\n}\n\nvar exportSuggestions = {\n  const: \"declare export var\",\n  let: \"declare export var\",\n  type: \"export type\",\n  interface: \"export interface\"\n};\n\nfunction partition(list, test) {\n  var list1 = [];\n  var list2 = [];\n\n  for (var i = 0; i < list.length; i++) {\n    (test(list[i], i, list) ? list1 : list2).push(list[i]);\n  }\n\n  return [list1, list2];\n}\n\nvar FLOW_PRAGMA_REGEX = /\\*?\\s*@((?:no)?flow)\\b/;\n\nvar flow = function flow(superClass) {\n  return /*#__PURE__*/function (_superClass2) {\n    _inherits(_class2, _superClass2);\n\n    var _super4 = _createSuper(_class2);\n\n    function _class2(options, input) {\n      var _this3;\n\n      _classCallCheck(this, _class2);\n\n      _this3 = _super4.call(this, options, input);\n      _this3.flowPragma = undefined;\n      return _this3;\n    }\n\n    _createClass(_class2, [{\n      key: \"shouldParseTypes\",\n      value: function shouldParseTypes() {\n        return this.getPluginOption(\"flow\", \"all\") || this.flowPragma === \"flow\";\n      }\n    }, {\n      key: \"shouldParseEnums\",\n      value: function shouldParseEnums() {\n        return !!this.getPluginOption(\"flow\", \"enums\");\n      }\n    }, {\n      key: \"finishToken\",\n      value: function finishToken(type, val) {\n        if (type !== types.string && type !== types.semi && type !== types.interpreterDirective) {\n          if (this.flowPragma === undefined) {\n            this.flowPragma = null;\n          }\n        }\n\n        return _get(_getPrototypeOf(_class2.prototype), \"finishToken\", this).call(this, type, val);\n      }\n    }, {\n      key: \"addComment\",\n      value: function addComment(comment) {\n        if (this.flowPragma === undefined) {\n          var matches = FLOW_PRAGMA_REGEX.exec(comment.value);\n          if (!matches) ;else if (matches[1] === \"flow\") {\n            this.flowPragma = \"flow\";\n          } else if (matches[1] === \"noflow\") {\n            this.flowPragma = \"noflow\";\n          } else {\n            throw new Error(\"Unexpected flow pragma\");\n          }\n        }\n\n        return _get(_getPrototypeOf(_class2.prototype), \"addComment\", this).call(this, comment);\n      }\n    }, {\n      key: \"flowParseTypeInitialiser\",\n      value: function flowParseTypeInitialiser(tok) {\n        var oldInType = this.state.inType;\n        this.state.inType = true;\n        this.expect(tok || types.colon);\n        var type = this.flowParseType();\n        this.state.inType = oldInType;\n        return type;\n      }\n    }, {\n      key: \"flowParsePredicate\",\n      value: function flowParsePredicate() {\n        var node = this.startNode();\n        var moduloLoc = this.state.startLoc;\n        var moduloPos = this.state.start;\n        this.expect(types.modulo);\n        var checksLoc = this.state.startLoc;\n        this.expectContextual(\"checks\");\n\n        if (moduloLoc.line !== checksLoc.line || moduloLoc.column !== checksLoc.column - 1) {\n          this.raise(moduloPos, FlowErrors.UnexpectedSpaceBetweenModuloChecks);\n        }\n\n        if (this.eat(types.parenL)) {\n          node.value = this.parseExpression();\n          this.expect(types.parenR);\n          return this.finishNode(node, \"DeclaredPredicate\");\n        } else {\n          return this.finishNode(node, \"InferredPredicate\");\n        }\n      }\n    }, {\n      key: \"flowParseTypeAndPredicateInitialiser\",\n      value: function flowParseTypeAndPredicateInitialiser() {\n        var oldInType = this.state.inType;\n        this.state.inType = true;\n        this.expect(types.colon);\n        var type = null;\n        var predicate = null;\n\n        if (this.match(types.modulo)) {\n          this.state.inType = oldInType;\n          predicate = this.flowParsePredicate();\n        } else {\n          type = this.flowParseType();\n          this.state.inType = oldInType;\n\n          if (this.match(types.modulo)) {\n            predicate = this.flowParsePredicate();\n          }\n        }\n\n        return [type, predicate];\n      }\n    }, {\n      key: \"flowParseDeclareClass\",\n      value: function flowParseDeclareClass(node) {\n        this.next();\n        this.flowParseInterfaceish(node, true);\n        return this.finishNode(node, \"DeclareClass\");\n      }\n    }, {\n      key: \"flowParseDeclareFunction\",\n      value: function flowParseDeclareFunction(node) {\n        this.next();\n        var id = node.id = this.parseIdentifier();\n        var typeNode = this.startNode();\n        var typeContainer = this.startNode();\n\n        if (this.isRelational(\"<\")) {\n          typeNode.typeParameters = this.flowParseTypeParameterDeclaration();\n        } else {\n          typeNode.typeParameters = null;\n        }\n\n        this.expect(types.parenL);\n        var tmp = this.flowParseFunctionTypeParams();\n        typeNode.params = tmp.params;\n        typeNode.rest = tmp.rest;\n        this.expect(types.parenR);\n\n        var _this$flowParseTypeAn = this.flowParseTypeAndPredicateInitialiser();\n\n        var _this$flowParseTypeAn2 = _slicedToArray(_this$flowParseTypeAn, 2);\n\n        typeNode.returnType = _this$flowParseTypeAn2[0];\n        node.predicate = _this$flowParseTypeAn2[1];\n        typeContainer.typeAnnotation = this.finishNode(typeNode, \"FunctionTypeAnnotation\");\n        id.typeAnnotation = this.finishNode(typeContainer, \"TypeAnnotation\");\n        this.resetEndLocation(id);\n        this.semicolon();\n        return this.finishNode(node, \"DeclareFunction\");\n      }\n    }, {\n      key: \"flowParseDeclare\",\n      value: function flowParseDeclare(node, insideModule) {\n        if (this.match(types._class)) {\n          return this.flowParseDeclareClass(node);\n        } else if (this.match(types._function)) {\n          return this.flowParseDeclareFunction(node);\n        } else if (this.match(types._var)) {\n          return this.flowParseDeclareVariable(node);\n        } else if (this.eatContextual(\"module\")) {\n          if (this.match(types.dot)) {\n            return this.flowParseDeclareModuleExports(node);\n          } else {\n            if (insideModule) {\n              this.raise(this.state.lastTokStart, FlowErrors.NestedDeclareModule);\n            }\n\n            return this.flowParseDeclareModule(node);\n          }\n        } else if (this.isContextual(\"type\")) {\n          return this.flowParseDeclareTypeAlias(node);\n        } else if (this.isContextual(\"opaque\")) {\n          return this.flowParseDeclareOpaqueType(node);\n        } else if (this.isContextual(\"interface\")) {\n          return this.flowParseDeclareInterface(node);\n        } else if (this.match(types._export)) {\n          return this.flowParseDeclareExportDeclaration(node, insideModule);\n        } else {\n          throw this.unexpected();\n        }\n      }\n    }, {\n      key: \"flowParseDeclareVariable\",\n      value: function flowParseDeclareVariable(node) {\n        this.next();\n        node.id = this.flowParseTypeAnnotatableIdentifier(true);\n        this.scope.declareName(node.id.name, BIND_VAR, node.id.start);\n        this.semicolon();\n        return this.finishNode(node, \"DeclareVariable\");\n      }\n    }, {\n      key: \"flowParseDeclareModule\",\n      value: function flowParseDeclareModule(node) {\n        var _this4 = this;\n\n        this.scope.enter(SCOPE_OTHER);\n\n        if (this.match(types.string)) {\n          node.id = this.parseExprAtom();\n        } else {\n          node.id = this.parseIdentifier();\n        }\n\n        var bodyNode = node.body = this.startNode();\n        var body = bodyNode.body = [];\n        this.expect(types.braceL);\n\n        while (!this.match(types.braceR)) {\n          var _bodyNode = this.startNode();\n\n          if (this.match(types._import)) {\n            this.next();\n\n            if (!this.isContextual(\"type\") && !this.match(types._typeof)) {\n              this.raise(this.state.lastTokStart, FlowErrors.InvalidNonTypeImportInDeclareModule);\n            }\n\n            this.parseImport(_bodyNode);\n          } else {\n            this.expectContextual(\"declare\", FlowErrors.UnsupportedStatementInDeclareModule);\n            _bodyNode = this.flowParseDeclare(_bodyNode, true);\n          }\n\n          body.push(_bodyNode);\n        }\n\n        this.scope.exit();\n        this.expect(types.braceR);\n        this.finishNode(bodyNode, \"BlockStatement\");\n        var kind = null;\n        var hasModuleExport = false;\n        body.forEach(function (bodyElement) {\n          if (isEsModuleType(bodyElement)) {\n            if (kind === \"CommonJS\") {\n              _this4.raise(bodyElement.start, FlowErrors.AmbiguousDeclareModuleKind);\n            }\n\n            kind = \"ES\";\n          } else if (bodyElement.type === \"DeclareModuleExports\") {\n            if (hasModuleExport) {\n              _this4.raise(bodyElement.start, FlowErrors.DuplicateDeclareModuleExports);\n            }\n\n            if (kind === \"ES\") {\n              _this4.raise(bodyElement.start, FlowErrors.AmbiguousDeclareModuleKind);\n            }\n\n            kind = \"CommonJS\";\n            hasModuleExport = true;\n          }\n        });\n        node.kind = kind || \"CommonJS\";\n        return this.finishNode(node, \"DeclareModule\");\n      }\n    }, {\n      key: \"flowParseDeclareExportDeclaration\",\n      value: function flowParseDeclareExportDeclaration(node, insideModule) {\n        this.expect(types._export);\n\n        if (this.eat(types._default)) {\n          if (this.match(types._function) || this.match(types._class)) {\n            node.declaration = this.flowParseDeclare(this.startNode());\n          } else {\n            node.declaration = this.flowParseType();\n            this.semicolon();\n          }\n\n          node.default = true;\n          return this.finishNode(node, \"DeclareExportDeclaration\");\n        } else {\n          if (this.match(types._const) || this.isLet() || (this.isContextual(\"type\") || this.isContextual(\"interface\")) && !insideModule) {\n            var label = this.state.value;\n            var suggestion = exportSuggestions[label];\n            throw this.raise(this.state.start, FlowErrors.UnsupportedDeclareExportKind, label, suggestion);\n          }\n\n          if (this.match(types._var) || this.match(types._function) || this.match(types._class) || this.isContextual(\"opaque\")) {\n            node.declaration = this.flowParseDeclare(this.startNode());\n            node.default = false;\n            return this.finishNode(node, \"DeclareExportDeclaration\");\n          } else if (this.match(types.star) || this.match(types.braceL) || this.isContextual(\"interface\") || this.isContextual(\"type\") || this.isContextual(\"opaque\")) {\n            node = this.parseExport(node);\n\n            if (node.type === \"ExportNamedDeclaration\") {\n              node.type = \"ExportDeclaration\";\n              node.default = false;\n              delete node.exportKind;\n            }\n\n            node.type = \"Declare\" + node.type;\n            return node;\n          }\n        }\n\n        throw this.unexpected();\n      }\n    }, {\n      key: \"flowParseDeclareModuleExports\",\n      value: function flowParseDeclareModuleExports(node) {\n        this.next();\n        this.expectContextual(\"exports\");\n        node.typeAnnotation = this.flowParseTypeAnnotation();\n        this.semicolon();\n        return this.finishNode(node, \"DeclareModuleExports\");\n      }\n    }, {\n      key: \"flowParseDeclareTypeAlias\",\n      value: function flowParseDeclareTypeAlias(node) {\n        this.next();\n        this.flowParseTypeAlias(node);\n        node.type = \"DeclareTypeAlias\";\n        return node;\n      }\n    }, {\n      key: \"flowParseDeclareOpaqueType\",\n      value: function flowParseDeclareOpaqueType(node) {\n        this.next();\n        this.flowParseOpaqueType(node, true);\n        node.type = \"DeclareOpaqueType\";\n        return node;\n      }\n    }, {\n      key: \"flowParseDeclareInterface\",\n      value: function flowParseDeclareInterface(node) {\n        this.next();\n        this.flowParseInterfaceish(node);\n        return this.finishNode(node, \"DeclareInterface\");\n      }\n    }, {\n      key: \"flowParseInterfaceish\",\n      value: function flowParseInterfaceish(node) {\n        var isClass = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n        node.id = this.flowParseRestrictedIdentifier(!isClass, true);\n        this.scope.declareName(node.id.name, isClass ? BIND_FUNCTION : BIND_LEXICAL, node.id.start);\n\n        if (this.isRelational(\"<\")) {\n          node.typeParameters = this.flowParseTypeParameterDeclaration();\n        } else {\n          node.typeParameters = null;\n        }\n\n        node.extends = [];\n        node.implements = [];\n        node.mixins = [];\n\n        if (this.eat(types._extends)) {\n          do {\n            node.extends.push(this.flowParseInterfaceExtends());\n          } while (!isClass && this.eat(types.comma));\n        }\n\n        if (this.isContextual(\"mixins\")) {\n          this.next();\n\n          do {\n            node.mixins.push(this.flowParseInterfaceExtends());\n          } while (this.eat(types.comma));\n        }\n\n        if (this.isContextual(\"implements\")) {\n          this.next();\n\n          do {\n            node.implements.push(this.flowParseInterfaceExtends());\n          } while (this.eat(types.comma));\n        }\n\n        node.body = this.flowParseObjectType({\n          allowStatic: isClass,\n          allowExact: false,\n          allowSpread: false,\n          allowProto: isClass,\n          allowInexact: false\n        });\n      }\n    }, {\n      key: \"flowParseInterfaceExtends\",\n      value: function flowParseInterfaceExtends() {\n        var node = this.startNode();\n        node.id = this.flowParseQualifiedTypeIdentifier();\n\n        if (this.isRelational(\"<\")) {\n          node.typeParameters = this.flowParseTypeParameterInstantiation();\n        } else {\n          node.typeParameters = null;\n        }\n\n        return this.finishNode(node, \"InterfaceExtends\");\n      }\n    }, {\n      key: \"flowParseInterface\",\n      value: function flowParseInterface(node) {\n        this.flowParseInterfaceish(node);\n        return this.finishNode(node, \"InterfaceDeclaration\");\n      }\n    }, {\n      key: \"checkNotUnderscore\",\n      value: function checkNotUnderscore(word) {\n        if (word === \"_\") {\n          this.raise(this.state.start, FlowErrors.UnexpectedReservedUnderscore);\n        }\n      }\n    }, {\n      key: \"checkReservedType\",\n      value: function checkReservedType(word, startLoc, declaration) {\n        if (!reservedTypes.has(word)) return;\n        this.raise(startLoc, declaration ? FlowErrors.AssignReservedType : FlowErrors.UnexpectedReservedType, word);\n      }\n    }, {\n      key: \"flowParseRestrictedIdentifier\",\n      value: function flowParseRestrictedIdentifier(liberal, declaration) {\n        this.checkReservedType(this.state.value, this.state.start, declaration);\n        return this.parseIdentifier(liberal);\n      }\n    }, {\n      key: \"flowParseTypeAlias\",\n      value: function flowParseTypeAlias(node) {\n        node.id = this.flowParseRestrictedIdentifier(false, true);\n        this.scope.declareName(node.id.name, BIND_LEXICAL, node.id.start);\n\n        if (this.isRelational(\"<\")) {\n          node.typeParameters = this.flowParseTypeParameterDeclaration();\n        } else {\n          node.typeParameters = null;\n        }\n\n        node.right = this.flowParseTypeInitialiser(types.eq);\n        this.semicolon();\n        return this.finishNode(node, \"TypeAlias\");\n      }\n    }, {\n      key: \"flowParseOpaqueType\",\n      value: function flowParseOpaqueType(node, declare) {\n        this.expectContextual(\"type\");\n        node.id = this.flowParseRestrictedIdentifier(true, true);\n        this.scope.declareName(node.id.name, BIND_LEXICAL, node.id.start);\n\n        if (this.isRelational(\"<\")) {\n          node.typeParameters = this.flowParseTypeParameterDeclaration();\n        } else {\n          node.typeParameters = null;\n        }\n\n        node.supertype = null;\n\n        if (this.match(types.colon)) {\n          node.supertype = this.flowParseTypeInitialiser(types.colon);\n        }\n\n        node.impltype = null;\n\n        if (!declare) {\n          node.impltype = this.flowParseTypeInitialiser(types.eq);\n        }\n\n        this.semicolon();\n        return this.finishNode(node, \"OpaqueType\");\n      }\n    }, {\n      key: \"flowParseTypeParameter\",\n      value: function flowParseTypeParameter() {\n        var requireDefault = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n        var nodeStart = this.state.start;\n        var node = this.startNode();\n        var variance = this.flowParseVariance();\n        var ident = this.flowParseTypeAnnotatableIdentifier();\n        node.name = ident.name;\n        node.variance = variance;\n        node.bound = ident.typeAnnotation;\n\n        if (this.match(types.eq)) {\n          this.eat(types.eq);\n          node.default = this.flowParseType();\n        } else {\n          if (requireDefault) {\n            this.raise(nodeStart, FlowErrors.MissingTypeParamDefault);\n          }\n        }\n\n        return this.finishNode(node, \"TypeParameter\");\n      }\n    }, {\n      key: \"flowParseTypeParameterDeclaration\",\n      value: function flowParseTypeParameterDeclaration() {\n        var oldInType = this.state.inType;\n        var node = this.startNode();\n        node.params = [];\n        this.state.inType = true;\n\n        if (this.isRelational(\"<\") || this.match(types.jsxTagStart)) {\n          this.next();\n        } else {\n          this.unexpected();\n        }\n\n        var defaultRequired = false;\n\n        do {\n          var typeParameter = this.flowParseTypeParameter(defaultRequired);\n          node.params.push(typeParameter);\n\n          if (typeParameter.default) {\n            defaultRequired = true;\n          }\n\n          if (!this.isRelational(\">\")) {\n            this.expect(types.comma);\n          }\n        } while (!this.isRelational(\">\"));\n\n        this.expectRelational(\">\");\n        this.state.inType = oldInType;\n        return this.finishNode(node, \"TypeParameterDeclaration\");\n      }\n    }, {\n      key: \"flowParseTypeParameterInstantiation\",\n      value: function flowParseTypeParameterInstantiation() {\n        var node = this.startNode();\n        var oldInType = this.state.inType;\n        node.params = [];\n        this.state.inType = true;\n        this.expectRelational(\"<\");\n        var oldNoAnonFunctionType = this.state.noAnonFunctionType;\n        this.state.noAnonFunctionType = false;\n\n        while (!this.isRelational(\">\")) {\n          node.params.push(this.flowParseType());\n\n          if (!this.isRelational(\">\")) {\n            this.expect(types.comma);\n          }\n        }\n\n        this.state.noAnonFunctionType = oldNoAnonFunctionType;\n        this.expectRelational(\">\");\n        this.state.inType = oldInType;\n        return this.finishNode(node, \"TypeParameterInstantiation\");\n      }\n    }, {\n      key: \"flowParseTypeParameterInstantiationCallOrNew\",\n      value: function flowParseTypeParameterInstantiationCallOrNew() {\n        var node = this.startNode();\n        var oldInType = this.state.inType;\n        node.params = [];\n        this.state.inType = true;\n        this.expectRelational(\"<\");\n\n        while (!this.isRelational(\">\")) {\n          node.params.push(this.flowParseTypeOrImplicitInstantiation());\n\n          if (!this.isRelational(\">\")) {\n            this.expect(types.comma);\n          }\n        }\n\n        this.expectRelational(\">\");\n        this.state.inType = oldInType;\n        return this.finishNode(node, \"TypeParameterInstantiation\");\n      }\n    }, {\n      key: \"flowParseInterfaceType\",\n      value: function flowParseInterfaceType() {\n        var node = this.startNode();\n        this.expectContextual(\"interface\");\n        node.extends = [];\n\n        if (this.eat(types._extends)) {\n          do {\n            node.extends.push(this.flowParseInterfaceExtends());\n          } while (this.eat(types.comma));\n        }\n\n        node.body = this.flowParseObjectType({\n          allowStatic: false,\n          allowExact: false,\n          allowSpread: false,\n          allowProto: false,\n          allowInexact: false\n        });\n        return this.finishNode(node, \"InterfaceTypeAnnotation\");\n      }\n    }, {\n      key: \"flowParseObjectPropertyKey\",\n      value: function flowParseObjectPropertyKey() {\n        return this.match(types.num) || this.match(types.string) ? this.parseExprAtom() : this.parseIdentifier(true);\n      }\n    }, {\n      key: \"flowParseObjectTypeIndexer\",\n      value: function flowParseObjectTypeIndexer(node, isStatic, variance) {\n        node.static = isStatic;\n\n        if (this.lookahead().type === types.colon) {\n          node.id = this.flowParseObjectPropertyKey();\n          node.key = this.flowParseTypeInitialiser();\n        } else {\n          node.id = null;\n          node.key = this.flowParseType();\n        }\n\n        this.expect(types.bracketR);\n        node.value = this.flowParseTypeInitialiser();\n        node.variance = variance;\n        return this.finishNode(node, \"ObjectTypeIndexer\");\n      }\n    }, {\n      key: \"flowParseObjectTypeInternalSlot\",\n      value: function flowParseObjectTypeInternalSlot(node, isStatic) {\n        node.static = isStatic;\n        node.id = this.flowParseObjectPropertyKey();\n        this.expect(types.bracketR);\n        this.expect(types.bracketR);\n\n        if (this.isRelational(\"<\") || this.match(types.parenL)) {\n          node.method = true;\n          node.optional = false;\n          node.value = this.flowParseObjectTypeMethodish(this.startNodeAt(node.start, node.loc.start));\n        } else {\n          node.method = false;\n\n          if (this.eat(types.question)) {\n            node.optional = true;\n          }\n\n          node.value = this.flowParseTypeInitialiser();\n        }\n\n        return this.finishNode(node, \"ObjectTypeInternalSlot\");\n      }\n    }, {\n      key: \"flowParseObjectTypeMethodish\",\n      value: function flowParseObjectTypeMethodish(node) {\n        node.params = [];\n        node.rest = null;\n        node.typeParameters = null;\n\n        if (this.isRelational(\"<\")) {\n          node.typeParameters = this.flowParseTypeParameterDeclaration();\n        }\n\n        this.expect(types.parenL);\n\n        while (!this.match(types.parenR) && !this.match(types.ellipsis)) {\n          node.params.push(this.flowParseFunctionTypeParam());\n\n          if (!this.match(types.parenR)) {\n            this.expect(types.comma);\n          }\n        }\n\n        if (this.eat(types.ellipsis)) {\n          node.rest = this.flowParseFunctionTypeParam();\n        }\n\n        this.expect(types.parenR);\n        node.returnType = this.flowParseTypeInitialiser();\n        return this.finishNode(node, \"FunctionTypeAnnotation\");\n      }\n    }, {\n      key: \"flowParseObjectTypeCallProperty\",\n      value: function flowParseObjectTypeCallProperty(node, isStatic) {\n        var valueNode = this.startNode();\n        node.static = isStatic;\n        node.value = this.flowParseObjectTypeMethodish(valueNode);\n        return this.finishNode(node, \"ObjectTypeCallProperty\");\n      }\n    }, {\n      key: \"flowParseObjectType\",\n      value: function flowParseObjectType(_ref2) {\n        var allowStatic = _ref2.allowStatic,\n            allowExact = _ref2.allowExact,\n            allowSpread = _ref2.allowSpread,\n            allowProto = _ref2.allowProto,\n            allowInexact = _ref2.allowInexact;\n        var oldInType = this.state.inType;\n        this.state.inType = true;\n        var nodeStart = this.startNode();\n        nodeStart.callProperties = [];\n        nodeStart.properties = [];\n        nodeStart.indexers = [];\n        nodeStart.internalSlots = [];\n        var endDelim;\n        var exact;\n        var inexact = false;\n\n        if (allowExact && this.match(types.braceBarL)) {\n          this.expect(types.braceBarL);\n          endDelim = types.braceBarR;\n          exact = true;\n        } else {\n          this.expect(types.braceL);\n          endDelim = types.braceR;\n          exact = false;\n        }\n\n        nodeStart.exact = exact;\n\n        while (!this.match(endDelim)) {\n          var isStatic = false;\n          var protoStart = null;\n          var inexactStart = null;\n          var node = this.startNode();\n\n          if (allowProto && this.isContextual(\"proto\")) {\n            var lookahead = this.lookahead();\n\n            if (lookahead.type !== types.colon && lookahead.type !== types.question) {\n              this.next();\n              protoStart = this.state.start;\n              allowStatic = false;\n            }\n          }\n\n          if (allowStatic && this.isContextual(\"static\")) {\n            var _lookahead = this.lookahead();\n\n            if (_lookahead.type !== types.colon && _lookahead.type !== types.question) {\n              this.next();\n              isStatic = true;\n            }\n          }\n\n          var variance = this.flowParseVariance();\n\n          if (this.eat(types.bracketL)) {\n            if (protoStart != null) {\n              this.unexpected(protoStart);\n            }\n\n            if (this.eat(types.bracketL)) {\n              if (variance) {\n                this.unexpected(variance.start);\n              }\n\n              nodeStart.internalSlots.push(this.flowParseObjectTypeInternalSlot(node, isStatic));\n            } else {\n              nodeStart.indexers.push(this.flowParseObjectTypeIndexer(node, isStatic, variance));\n            }\n          } else if (this.match(types.parenL) || this.isRelational(\"<\")) {\n            if (protoStart != null) {\n              this.unexpected(protoStart);\n            }\n\n            if (variance) {\n              this.unexpected(variance.start);\n            }\n\n            nodeStart.callProperties.push(this.flowParseObjectTypeCallProperty(node, isStatic));\n          } else {\n            var kind = \"init\";\n\n            if (this.isContextual(\"get\") || this.isContextual(\"set\")) {\n              var _lookahead2 = this.lookahead();\n\n              if (_lookahead2.type === types.name || _lookahead2.type === types.string || _lookahead2.type === types.num) {\n                kind = this.state.value;\n                this.next();\n              }\n            }\n\n            var propOrInexact = this.flowParseObjectTypeProperty(node, isStatic, protoStart, variance, kind, allowSpread, allowInexact != null ? allowInexact : !exact);\n\n            if (propOrInexact === null) {\n              inexact = true;\n              inexactStart = this.state.lastTokStart;\n            } else {\n              nodeStart.properties.push(propOrInexact);\n            }\n          }\n\n          this.flowObjectTypeSemicolon();\n\n          if (inexactStart && !this.match(types.braceR) && !this.match(types.braceBarR)) {\n            this.raise(inexactStart, FlowErrors.UnexpectedExplicitInexactInObject);\n          }\n        }\n\n        this.expect(endDelim);\n\n        if (allowSpread) {\n          nodeStart.inexact = inexact;\n        }\n\n        var out = this.finishNode(nodeStart, \"ObjectTypeAnnotation\");\n        this.state.inType = oldInType;\n        return out;\n      }\n    }, {\n      key: \"flowParseObjectTypeProperty\",\n      value: function flowParseObjectTypeProperty(node, isStatic, protoStart, variance, kind, allowSpread, allowInexact) {\n        if (this.eat(types.ellipsis)) {\n          var isInexactToken = this.match(types.comma) || this.match(types.semi) || this.match(types.braceR) || this.match(types.braceBarR);\n\n          if (isInexactToken) {\n            if (!allowSpread) {\n              this.raise(this.state.lastTokStart, FlowErrors.InexactInsideNonObject);\n            } else if (!allowInexact) {\n              this.raise(this.state.lastTokStart, FlowErrors.InexactInsideExact);\n            }\n\n            if (variance) {\n              this.raise(variance.start, FlowErrors.InexactVariance);\n            }\n\n            return null;\n          }\n\n          if (!allowSpread) {\n            this.raise(this.state.lastTokStart, FlowErrors.UnexpectedSpreadType);\n          }\n\n          if (protoStart != null) {\n            this.unexpected(protoStart);\n          }\n\n          if (variance) {\n            this.raise(variance.start, FlowErrors.SpreadVariance);\n          }\n\n          node.argument = this.flowParseType();\n          return this.finishNode(node, \"ObjectTypeSpreadProperty\");\n        } else {\n          node.key = this.flowParseObjectPropertyKey();\n          node.static = isStatic;\n          node.proto = protoStart != null;\n          node.kind = kind;\n          var optional = false;\n\n          if (this.isRelational(\"<\") || this.match(types.parenL)) {\n            node.method = true;\n\n            if (protoStart != null) {\n              this.unexpected(protoStart);\n            }\n\n            if (variance) {\n              this.unexpected(variance.start);\n            }\n\n            node.value = this.flowParseObjectTypeMethodish(this.startNodeAt(node.start, node.loc.start));\n\n            if (kind === \"get\" || kind === \"set\") {\n              this.flowCheckGetterSetterParams(node);\n            }\n          } else {\n            if (kind !== \"init\") this.unexpected();\n            node.method = false;\n\n            if (this.eat(types.question)) {\n              optional = true;\n            }\n\n            node.value = this.flowParseTypeInitialiser();\n            node.variance = variance;\n          }\n\n          node.optional = optional;\n          return this.finishNode(node, \"ObjectTypeProperty\");\n        }\n      }\n    }, {\n      key: \"flowCheckGetterSetterParams\",\n      value: function flowCheckGetterSetterParams(property) {\n        var paramCount = property.kind === \"get\" ? 0 : 1;\n        var start = property.start;\n        var length = property.value.params.length + (property.value.rest ? 1 : 0);\n\n        if (length !== paramCount) {\n          if (property.kind === \"get\") {\n            this.raise(start, ErrorMessages.BadGetterArity);\n          } else {\n            this.raise(start, ErrorMessages.BadSetterArity);\n          }\n        }\n\n        if (property.kind === \"set\" && property.value.rest) {\n          this.raise(start, ErrorMessages.BadSetterRestParameter);\n        }\n      }\n    }, {\n      key: \"flowObjectTypeSemicolon\",\n      value: function flowObjectTypeSemicolon() {\n        if (!this.eat(types.semi) && !this.eat(types.comma) && !this.match(types.braceR) && !this.match(types.braceBarR)) {\n          this.unexpected();\n        }\n      }\n    }, {\n      key: \"flowParseQualifiedTypeIdentifier\",\n      value: function flowParseQualifiedTypeIdentifier(startPos, startLoc, id) {\n        startPos = startPos || this.state.start;\n        startLoc = startLoc || this.state.startLoc;\n        var node = id || this.flowParseRestrictedIdentifier(true);\n\n        while (this.eat(types.dot)) {\n          var node2 = this.startNodeAt(startPos, startLoc);\n          node2.qualification = node;\n          node2.id = this.flowParseRestrictedIdentifier(true);\n          node = this.finishNode(node2, \"QualifiedTypeIdentifier\");\n        }\n\n        return node;\n      }\n    }, {\n      key: \"flowParseGenericType\",\n      value: function flowParseGenericType(startPos, startLoc, id) {\n        var node = this.startNodeAt(startPos, startLoc);\n        node.typeParameters = null;\n        node.id = this.flowParseQualifiedTypeIdentifier(startPos, startLoc, id);\n\n        if (this.isRelational(\"<\")) {\n          node.typeParameters = this.flowParseTypeParameterInstantiation();\n        }\n\n        return this.finishNode(node, \"GenericTypeAnnotation\");\n      }\n    }, {\n      key: \"flowParseTypeofType\",\n      value: function flowParseTypeofType() {\n        var node = this.startNode();\n        this.expect(types._typeof);\n        node.argument = this.flowParsePrimaryType();\n        return this.finishNode(node, \"TypeofTypeAnnotation\");\n      }\n    }, {\n      key: \"flowParseTupleType\",\n      value: function flowParseTupleType() {\n        var node = this.startNode();\n        node.types = [];\n        this.expect(types.bracketL);\n\n        while (this.state.pos < this.length && !this.match(types.bracketR)) {\n          node.types.push(this.flowParseType());\n          if (this.match(types.bracketR)) break;\n          this.expect(types.comma);\n        }\n\n        this.expect(types.bracketR);\n        return this.finishNode(node, \"TupleTypeAnnotation\");\n      }\n    }, {\n      key: \"flowParseFunctionTypeParam\",\n      value: function flowParseFunctionTypeParam() {\n        var name = null;\n        var optional = false;\n        var typeAnnotation = null;\n        var node = this.startNode();\n        var lh = this.lookahead();\n\n        if (lh.type === types.colon || lh.type === types.question) {\n          name = this.parseIdentifier();\n\n          if (this.eat(types.question)) {\n            optional = true;\n          }\n\n          typeAnnotation = this.flowParseTypeInitialiser();\n        } else {\n          typeAnnotation = this.flowParseType();\n        }\n\n        node.name = name;\n        node.optional = optional;\n        node.typeAnnotation = typeAnnotation;\n        return this.finishNode(node, \"FunctionTypeParam\");\n      }\n    }, {\n      key: \"reinterpretTypeAsFunctionTypeParam\",\n      value: function reinterpretTypeAsFunctionTypeParam(type) {\n        var node = this.startNodeAt(type.start, type.loc.start);\n        node.name = null;\n        node.optional = false;\n        node.typeAnnotation = type;\n        return this.finishNode(node, \"FunctionTypeParam\");\n      }\n    }, {\n      key: \"flowParseFunctionTypeParams\",\n      value: function flowParseFunctionTypeParams() {\n        var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n        var rest = null;\n\n        while (!this.match(types.parenR) && !this.match(types.ellipsis)) {\n          params.push(this.flowParseFunctionTypeParam());\n\n          if (!this.match(types.parenR)) {\n            this.expect(types.comma);\n          }\n        }\n\n        if (this.eat(types.ellipsis)) {\n          rest = this.flowParseFunctionTypeParam();\n        }\n\n        return {\n          params: params,\n          rest: rest\n        };\n      }\n    }, {\n      key: \"flowIdentToTypeAnnotation\",\n      value: function flowIdentToTypeAnnotation(startPos, startLoc, node, id) {\n        switch (id.name) {\n          case \"any\":\n            return this.finishNode(node, \"AnyTypeAnnotation\");\n\n          case \"bool\":\n          case \"boolean\":\n            return this.finishNode(node, \"BooleanTypeAnnotation\");\n\n          case \"mixed\":\n            return this.finishNode(node, \"MixedTypeAnnotation\");\n\n          case \"empty\":\n            return this.finishNode(node, \"EmptyTypeAnnotation\");\n\n          case \"number\":\n            return this.finishNode(node, \"NumberTypeAnnotation\");\n\n          case \"string\":\n            return this.finishNode(node, \"StringTypeAnnotation\");\n\n          case \"symbol\":\n            return this.finishNode(node, \"SymbolTypeAnnotation\");\n\n          default:\n            this.checkNotUnderscore(id.name);\n            return this.flowParseGenericType(startPos, startLoc, id);\n        }\n      }\n    }, {\n      key: \"flowParsePrimaryType\",\n      value: function flowParsePrimaryType() {\n        var startPos = this.state.start;\n        var startLoc = this.state.startLoc;\n        var node = this.startNode();\n        var tmp;\n        var type;\n        var isGroupedType = false;\n        var oldNoAnonFunctionType = this.state.noAnonFunctionType;\n\n        switch (this.state.type) {\n          case types.name:\n            if (this.isContextual(\"interface\")) {\n              return this.flowParseInterfaceType();\n            }\n\n            return this.flowIdentToTypeAnnotation(startPos, startLoc, node, this.parseIdentifier());\n\n          case types.braceL:\n            return this.flowParseObjectType({\n              allowStatic: false,\n              allowExact: false,\n              allowSpread: true,\n              allowProto: false,\n              allowInexact: true\n            });\n\n          case types.braceBarL:\n            return this.flowParseObjectType({\n              allowStatic: false,\n              allowExact: true,\n              allowSpread: true,\n              allowProto: false,\n              allowInexact: false\n            });\n\n          case types.bracketL:\n            this.state.noAnonFunctionType = false;\n            type = this.flowParseTupleType();\n            this.state.noAnonFunctionType = oldNoAnonFunctionType;\n            return type;\n\n          case types.relational:\n            if (this.state.value === \"<\") {\n              node.typeParameters = this.flowParseTypeParameterDeclaration();\n              this.expect(types.parenL);\n              tmp = this.flowParseFunctionTypeParams();\n              node.params = tmp.params;\n              node.rest = tmp.rest;\n              this.expect(types.parenR);\n              this.expect(types.arrow);\n              node.returnType = this.flowParseType();\n              return this.finishNode(node, \"FunctionTypeAnnotation\");\n            }\n\n            break;\n\n          case types.parenL:\n            this.next();\n\n            if (!this.match(types.parenR) && !this.match(types.ellipsis)) {\n              if (this.match(types.name)) {\n                var token = this.lookahead().type;\n                isGroupedType = token !== types.question && token !== types.colon;\n              } else {\n                isGroupedType = true;\n              }\n            }\n\n            if (isGroupedType) {\n              this.state.noAnonFunctionType = false;\n              type = this.flowParseType();\n              this.state.noAnonFunctionType = oldNoAnonFunctionType;\n\n              if (this.state.noAnonFunctionType || !(this.match(types.comma) || this.match(types.parenR) && this.lookahead().type === types.arrow)) {\n                this.expect(types.parenR);\n                return type;\n              } else {\n                this.eat(types.comma);\n              }\n            }\n\n            if (type) {\n              tmp = this.flowParseFunctionTypeParams([this.reinterpretTypeAsFunctionTypeParam(type)]);\n            } else {\n              tmp = this.flowParseFunctionTypeParams();\n            }\n\n            node.params = tmp.params;\n            node.rest = tmp.rest;\n            this.expect(types.parenR);\n            this.expect(types.arrow);\n            node.returnType = this.flowParseType();\n            node.typeParameters = null;\n            return this.finishNode(node, \"FunctionTypeAnnotation\");\n\n          case types.string:\n            return this.parseLiteral(this.state.value, \"StringLiteralTypeAnnotation\");\n\n          case types._true:\n          case types._false:\n            node.value = this.match(types._true);\n            this.next();\n            return this.finishNode(node, \"BooleanLiteralTypeAnnotation\");\n\n          case types.plusMin:\n            if (this.state.value === \"-\") {\n              this.next();\n\n              if (this.match(types.num)) {\n                return this.parseLiteral(-this.state.value, \"NumberLiteralTypeAnnotation\", node.start, node.loc.start);\n              }\n\n              if (this.match(types.bigint)) {\n                return this.parseLiteral(-this.state.value, \"BigIntLiteralTypeAnnotation\", node.start, node.loc.start);\n              }\n\n              throw this.raise(this.state.start, FlowErrors.UnexpectedSubtractionOperand);\n            }\n\n            throw this.unexpected();\n\n          case types.num:\n            return this.parseLiteral(this.state.value, \"NumberLiteralTypeAnnotation\");\n\n          case types.bigint:\n            return this.parseLiteral(this.state.value, \"BigIntLiteralTypeAnnotation\");\n\n          case types._void:\n            this.next();\n            return this.finishNode(node, \"VoidTypeAnnotation\");\n\n          case types._null:\n            this.next();\n            return this.finishNode(node, \"NullLiteralTypeAnnotation\");\n\n          case types._this:\n            this.next();\n            return this.finishNode(node, \"ThisTypeAnnotation\");\n\n          case types.star:\n            this.next();\n            return this.finishNode(node, \"ExistsTypeAnnotation\");\n\n          default:\n            if (this.state.type.keyword === \"typeof\") {\n              return this.flowParseTypeofType();\n            } else if (this.state.type.keyword) {\n              var label = this.state.type.label;\n              this.next();\n              return _get(_getPrototypeOf(_class2.prototype), \"createIdentifier\", this).call(this, node, label);\n            }\n\n        }\n\n        throw this.unexpected();\n      }\n    }, {\n      key: \"flowParsePostfixType\",\n      value: function flowParsePostfixType() {\n        var startPos = this.state.start,\n            startLoc = this.state.startLoc;\n        var type = this.flowParsePrimaryType();\n\n        while (this.match(types.bracketL) && !this.canInsertSemicolon()) {\n          var node = this.startNodeAt(startPos, startLoc);\n          node.elementType = type;\n          this.expect(types.bracketL);\n          this.expect(types.bracketR);\n          type = this.finishNode(node, \"ArrayTypeAnnotation\");\n        }\n\n        return type;\n      }\n    }, {\n      key: \"flowParsePrefixType\",\n      value: function flowParsePrefixType() {\n        var node = this.startNode();\n\n        if (this.eat(types.question)) {\n          node.typeAnnotation = this.flowParsePrefixType();\n          return this.finishNode(node, \"NullableTypeAnnotation\");\n        } else {\n          return this.flowParsePostfixType();\n        }\n      }\n    }, {\n      key: \"flowParseAnonFunctionWithoutParens\",\n      value: function flowParseAnonFunctionWithoutParens() {\n        var param = this.flowParsePrefixType();\n\n        if (!this.state.noAnonFunctionType && this.eat(types.arrow)) {\n          var node = this.startNodeAt(param.start, param.loc.start);\n          node.params = [this.reinterpretTypeAsFunctionTypeParam(param)];\n          node.rest = null;\n          node.returnType = this.flowParseType();\n          node.typeParameters = null;\n          return this.finishNode(node, \"FunctionTypeAnnotation\");\n        }\n\n        return param;\n      }\n    }, {\n      key: \"flowParseIntersectionType\",\n      value: function flowParseIntersectionType() {\n        var node = this.startNode();\n        this.eat(types.bitwiseAND);\n        var type = this.flowParseAnonFunctionWithoutParens();\n        node.types = [type];\n\n        while (this.eat(types.bitwiseAND)) {\n          node.types.push(this.flowParseAnonFunctionWithoutParens());\n        }\n\n        return node.types.length === 1 ? type : this.finishNode(node, \"IntersectionTypeAnnotation\");\n      }\n    }, {\n      key: \"flowParseUnionType\",\n      value: function flowParseUnionType() {\n        var node = this.startNode();\n        this.eat(types.bitwiseOR);\n        var type = this.flowParseIntersectionType();\n        node.types = [type];\n\n        while (this.eat(types.bitwiseOR)) {\n          node.types.push(this.flowParseIntersectionType());\n        }\n\n        return node.types.length === 1 ? type : this.finishNode(node, \"UnionTypeAnnotation\");\n      }\n    }, {\n      key: \"flowParseType\",\n      value: function flowParseType() {\n        var oldInType = this.state.inType;\n        this.state.inType = true;\n        var type = this.flowParseUnionType();\n        this.state.inType = oldInType;\n        this.state.exprAllowed = this.state.exprAllowed || this.state.noAnonFunctionType;\n        return type;\n      }\n    }, {\n      key: \"flowParseTypeOrImplicitInstantiation\",\n      value: function flowParseTypeOrImplicitInstantiation() {\n        if (this.state.type === types.name && this.state.value === \"_\") {\n          var startPos = this.state.start;\n          var startLoc = this.state.startLoc;\n          var node = this.parseIdentifier();\n          return this.flowParseGenericType(startPos, startLoc, node);\n        } else {\n          return this.flowParseType();\n        }\n      }\n    }, {\n      key: \"flowParseTypeAnnotation\",\n      value: function flowParseTypeAnnotation() {\n        var node = this.startNode();\n        node.typeAnnotation = this.flowParseTypeInitialiser();\n        return this.finishNode(node, \"TypeAnnotation\");\n      }\n    }, {\n      key: \"flowParseTypeAnnotatableIdentifier\",\n      value: function flowParseTypeAnnotatableIdentifier(allowPrimitiveOverride) {\n        var ident = allowPrimitiveOverride ? this.parseIdentifier() : this.flowParseRestrictedIdentifier();\n\n        if (this.match(types.colon)) {\n          ident.typeAnnotation = this.flowParseTypeAnnotation();\n          this.resetEndLocation(ident);\n        }\n\n        return ident;\n      }\n    }, {\n      key: \"typeCastToParameter\",\n      value: function typeCastToParameter(node) {\n        node.expression.typeAnnotation = node.typeAnnotation;\n        this.resetEndLocation(node.expression, node.typeAnnotation.end, node.typeAnnotation.loc.end);\n        return node.expression;\n      }\n    }, {\n      key: \"flowParseVariance\",\n      value: function flowParseVariance() {\n        var variance = null;\n\n        if (this.match(types.plusMin)) {\n          variance = this.startNode();\n\n          if (this.state.value === \"+\") {\n            variance.kind = \"plus\";\n          } else {\n            variance.kind = \"minus\";\n          }\n\n          this.next();\n          this.finishNode(variance, \"Variance\");\n        }\n\n        return variance;\n      }\n    }, {\n      key: \"parseFunctionBody\",\n      value: function parseFunctionBody(node, allowExpressionBody) {\n        var _this5 = this;\n\n        var isMethod = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n        if (allowExpressionBody) {\n          return this.forwardNoArrowParamsConversionAt(node, function () {\n            return _get(_getPrototypeOf(_class2.prototype), \"parseFunctionBody\", _this5).call(_this5, node, true, isMethod);\n          });\n        }\n\n        return _get(_getPrototypeOf(_class2.prototype), \"parseFunctionBody\", this).call(this, node, false, isMethod);\n      }\n    }, {\n      key: \"parseFunctionBodyAndFinish\",\n      value: function parseFunctionBodyAndFinish(node, type) {\n        var isMethod = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n        if (this.match(types.colon)) {\n          var typeNode = this.startNode();\n\n          var _this$flowParseTypeAn3 = this.flowParseTypeAndPredicateInitialiser();\n\n          var _this$flowParseTypeAn4 = _slicedToArray(_this$flowParseTypeAn3, 2);\n\n          typeNode.typeAnnotation = _this$flowParseTypeAn4[0];\n          node.predicate = _this$flowParseTypeAn4[1];\n          node.returnType = typeNode.typeAnnotation ? this.finishNode(typeNode, \"TypeAnnotation\") : null;\n        }\n\n        _get(_getPrototypeOf(_class2.prototype), \"parseFunctionBodyAndFinish\", this).call(this, node, type, isMethod);\n      }\n    }, {\n      key: \"parseStatement\",\n      value: function parseStatement(context, topLevel) {\n        if (this.state.strict && this.match(types.name) && this.state.value === \"interface\") {\n          var node = this.startNode();\n          this.next();\n          return this.flowParseInterface(node);\n        } else if (this.shouldParseEnums() && this.isContextual(\"enum\")) {\n          var _node = this.startNode();\n\n          this.next();\n          return this.flowParseEnumDeclaration(_node);\n        } else {\n          var stmt = _get(_getPrototypeOf(_class2.prototype), \"parseStatement\", this).call(this, context, topLevel);\n\n          if (this.flowPragma === undefined && !this.isValidDirective(stmt)) {\n            this.flowPragma = null;\n          }\n\n          return stmt;\n        }\n      }\n    }, {\n      key: \"parseExpressionStatement\",\n      value: function parseExpressionStatement(node, expr) {\n        if (expr.type === \"Identifier\") {\n          if (expr.name === \"declare\") {\n            if (this.match(types._class) || this.match(types.name) || this.match(types._function) || this.match(types._var) || this.match(types._export)) {\n              return this.flowParseDeclare(node);\n            }\n          } else if (this.match(types.name)) {\n            if (expr.name === \"interface\") {\n              return this.flowParseInterface(node);\n            } else if (expr.name === \"type\") {\n              return this.flowParseTypeAlias(node);\n            } else if (expr.name === \"opaque\") {\n              return this.flowParseOpaqueType(node, false);\n            }\n          }\n        }\n\n        return _get(_getPrototypeOf(_class2.prototype), \"parseExpressionStatement\", this).call(this, node, expr);\n      }\n    }, {\n      key: \"shouldParseExportDeclaration\",\n      value: function shouldParseExportDeclaration() {\n        return this.isContextual(\"type\") || this.isContextual(\"interface\") || this.isContextual(\"opaque\") || this.shouldParseEnums() && this.isContextual(\"enum\") || _get(_getPrototypeOf(_class2.prototype), \"shouldParseExportDeclaration\", this).call(this);\n      }\n    }, {\n      key: \"isExportDefaultSpecifier\",\n      value: function isExportDefaultSpecifier() {\n        if (this.match(types.name) && (this.state.value === \"type\" || this.state.value === \"interface\" || this.state.value === \"opaque\" || this.shouldParseEnums() && this.state.value === \"enum\")) {\n          return false;\n        }\n\n        return _get(_getPrototypeOf(_class2.prototype), \"isExportDefaultSpecifier\", this).call(this);\n      }\n    }, {\n      key: \"parseExportDefaultExpression\",\n      value: function parseExportDefaultExpression() {\n        if (this.shouldParseEnums() && this.isContextual(\"enum\")) {\n          var node = this.startNode();\n          this.next();\n          return this.flowParseEnumDeclaration(node);\n        }\n\n        return _get(_getPrototypeOf(_class2.prototype), \"parseExportDefaultExpression\", this).call(this);\n      }\n    }, {\n      key: \"parseConditional\",\n      value: function parseConditional(expr, noIn, startPos, startLoc, refNeedsArrowPos) {\n        var _this6 = this;\n\n        if (!this.match(types.question)) return expr;\n\n        if (refNeedsArrowPos) {\n          var result = this.tryParse(function () {\n            return _get(_getPrototypeOf(_class2.prototype), \"parseConditional\", _this6).call(_this6, expr, noIn, startPos, startLoc);\n          });\n\n          if (!result.node) {\n            refNeedsArrowPos.start = result.error.pos || this.state.start;\n            return expr;\n          }\n\n          if (result.error) this.state = result.failState;\n          return result.node;\n        }\n\n        this.expect(types.question);\n        var state = this.state.clone();\n        var originalNoArrowAt = this.state.noArrowAt;\n        var node = this.startNodeAt(startPos, startLoc);\n\n        var _this$tryParseConditi = this.tryParseConditionalConsequent(),\n            consequent = _this$tryParseConditi.consequent,\n            failed = _this$tryParseConditi.failed;\n\n        var _this$getArrowLikeExp = this.getArrowLikeExpressions(consequent),\n            _this$getArrowLikeExp2 = _slicedToArray(_this$getArrowLikeExp, 2),\n            valid = _this$getArrowLikeExp2[0],\n            invalid = _this$getArrowLikeExp2[1];\n\n        if (failed || invalid.length > 0) {\n          var noArrowAt = _toConsumableArray(originalNoArrowAt);\n\n          if (invalid.length > 0) {\n            this.state = state;\n            this.state.noArrowAt = noArrowAt;\n\n            for (var i = 0; i < invalid.length; i++) {\n              noArrowAt.push(invalid[i].start);\n            }\n\n            var _this$tryParseConditi2 = this.tryParseConditionalConsequent();\n\n            consequent = _this$tryParseConditi2.consequent;\n            failed = _this$tryParseConditi2.failed;\n\n            var _this$getArrowLikeExp3 = this.getArrowLikeExpressions(consequent);\n\n            var _this$getArrowLikeExp4 = _slicedToArray(_this$getArrowLikeExp3, 2);\n\n            valid = _this$getArrowLikeExp4[0];\n            invalid = _this$getArrowLikeExp4[1];\n          }\n\n          if (failed && valid.length > 1) {\n            this.raise(state.start, FlowErrors.AmbiguousConditionalArrow);\n          }\n\n          if (failed && valid.length === 1) {\n            this.state = state;\n            this.state.noArrowAt = noArrowAt.concat(valid[0].start);\n\n            var _this$tryParseConditi3 = this.tryParseConditionalConsequent();\n\n            consequent = _this$tryParseConditi3.consequent;\n            failed = _this$tryParseConditi3.failed;\n          }\n        }\n\n        this.getArrowLikeExpressions(consequent, true);\n        this.state.noArrowAt = originalNoArrowAt;\n        this.expect(types.colon);\n        node.test = expr;\n        node.consequent = consequent;\n        node.alternate = this.forwardNoArrowParamsConversionAt(node, function () {\n          return _this6.parseMaybeAssign(noIn, undefined, undefined, undefined);\n        });\n        return this.finishNode(node, \"ConditionalExpression\");\n      }\n    }, {\n      key: \"tryParseConditionalConsequent\",\n      value: function tryParseConditionalConsequent() {\n        this.state.noArrowParamsConversionAt.push(this.state.start);\n        var consequent = this.parseMaybeAssign();\n        var failed = !this.match(types.colon);\n        this.state.noArrowParamsConversionAt.pop();\n        return {\n          consequent: consequent,\n          failed: failed\n        };\n      }\n    }, {\n      key: \"getArrowLikeExpressions\",\n      value: function getArrowLikeExpressions(node, disallowInvalid) {\n        var _this7 = this;\n\n        var stack = [node];\n        var arrows = [];\n\n        while (stack.length !== 0) {\n          var _node2 = stack.pop();\n\n          if (_node2.type === \"ArrowFunctionExpression\") {\n            if (_node2.typeParameters || !_node2.returnType) {\n              this.finishArrowValidation(_node2);\n            } else {\n              arrows.push(_node2);\n            }\n\n            stack.push(_node2.body);\n          } else if (_node2.type === \"ConditionalExpression\") {\n            stack.push(_node2.consequent);\n            stack.push(_node2.alternate);\n          }\n        }\n\n        if (disallowInvalid) {\n          arrows.forEach(function (node) {\n            return _this7.finishArrowValidation(node);\n          });\n          return [arrows, []];\n        }\n\n        return partition(arrows, function (node) {\n          return node.params.every(function (param) {\n            return _this7.isAssignable(param, true);\n          });\n        });\n      }\n    }, {\n      key: \"finishArrowValidation\",\n      value: function finishArrowValidation(node) {\n        var _node$extra;\n\n        this.toAssignableList(node.params, (_node$extra = node.extra) == null ? void 0 : _node$extra.trailingComma);\n        this.scope.enter(SCOPE_FUNCTION | SCOPE_ARROW);\n\n        _get(_getPrototypeOf(_class2.prototype), \"checkParams\", this).call(this, node, false, true);\n\n        this.scope.exit();\n      }\n    }, {\n      key: \"forwardNoArrowParamsConversionAt\",\n      value: function forwardNoArrowParamsConversionAt(node, parse) {\n        var result;\n\n        if (this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {\n          this.state.noArrowParamsConversionAt.push(this.state.start);\n          result = parse();\n          this.state.noArrowParamsConversionAt.pop();\n        } else {\n          result = parse();\n        }\n\n        return result;\n      }\n    }, {\n      key: \"parseParenItem\",\n      value: function parseParenItem(node, startPos, startLoc) {\n        node = _get(_getPrototypeOf(_class2.prototype), \"parseParenItem\", this).call(this, node, startPos, startLoc);\n\n        if (this.eat(types.question)) {\n          node.optional = true;\n          this.resetEndLocation(node);\n        }\n\n        if (this.match(types.colon)) {\n          var typeCastNode = this.startNodeAt(startPos, startLoc);\n          typeCastNode.expression = node;\n          typeCastNode.typeAnnotation = this.flowParseTypeAnnotation();\n          return this.finishNode(typeCastNode, \"TypeCastExpression\");\n        }\n\n        return node;\n      }\n    }, {\n      key: \"assertModuleNodeAllowed\",\n      value: function assertModuleNodeAllowed(node) {\n        if (node.type === \"ImportDeclaration\" && (node.importKind === \"type\" || node.importKind === \"typeof\") || node.type === \"ExportNamedDeclaration\" && node.exportKind === \"type\" || node.type === \"ExportAllDeclaration\" && node.exportKind === \"type\") {\n          return;\n        }\n\n        _get(_getPrototypeOf(_class2.prototype), \"assertModuleNodeAllowed\", this).call(this, node);\n      }\n    }, {\n      key: \"parseExport\",\n      value: function parseExport(node) {\n        var decl = _get(_getPrototypeOf(_class2.prototype), \"parseExport\", this).call(this, node);\n\n        if (decl.type === \"ExportNamedDeclaration\" || decl.type === \"ExportAllDeclaration\") {\n          decl.exportKind = decl.exportKind || \"value\";\n        }\n\n        return decl;\n      }\n    }, {\n      key: \"parseExportDeclaration\",\n      value: function parseExportDeclaration(node) {\n        if (this.isContextual(\"type\")) {\n          node.exportKind = \"type\";\n          var declarationNode = this.startNode();\n          this.next();\n\n          if (this.match(types.braceL)) {\n            node.specifiers = this.parseExportSpecifiers();\n            this.parseExportFrom(node);\n            return null;\n          } else {\n            return this.flowParseTypeAlias(declarationNode);\n          }\n        } else if (this.isContextual(\"opaque\")) {\n          node.exportKind = \"type\";\n\n          var _declarationNode = this.startNode();\n\n          this.next();\n          return this.flowParseOpaqueType(_declarationNode, false);\n        } else if (this.isContextual(\"interface\")) {\n          node.exportKind = \"type\";\n\n          var _declarationNode2 = this.startNode();\n\n          this.next();\n          return this.flowParseInterface(_declarationNode2);\n        } else if (this.shouldParseEnums() && this.isContextual(\"enum\")) {\n          node.exportKind = \"value\";\n\n          var _declarationNode3 = this.startNode();\n\n          this.next();\n          return this.flowParseEnumDeclaration(_declarationNode3);\n        } else {\n          return _get(_getPrototypeOf(_class2.prototype), \"parseExportDeclaration\", this).call(this, node);\n        }\n      }\n    }, {\n      key: \"eatExportStar\",\n      value: function eatExportStar(node) {\n        if (_get(_getPrototypeOf(_class2.prototype), \"eatExportStar\", this).apply(this, arguments)) return true;\n\n        if (this.isContextual(\"type\") && this.lookahead().type === types.star) {\n          node.exportKind = \"type\";\n          this.next();\n          this.next();\n          return true;\n        }\n\n        return false;\n      }\n    }, {\n      key: \"maybeParseExportNamespaceSpecifier\",\n      value: function maybeParseExportNamespaceSpecifier(node) {\n        var pos = this.state.start;\n\n        var hasNamespace = _get(_getPrototypeOf(_class2.prototype), \"maybeParseExportNamespaceSpecifier\", this).call(this, node);\n\n        if (hasNamespace && node.exportKind === \"type\") {\n          this.unexpected(pos);\n        }\n\n        return hasNamespace;\n      }\n    }, {\n      key: \"parseClassId\",\n      value: function parseClassId(node, isStatement, optionalId) {\n        _get(_getPrototypeOf(_class2.prototype), \"parseClassId\", this).call(this, node, isStatement, optionalId);\n\n        if (this.isRelational(\"<\")) {\n          node.typeParameters = this.flowParseTypeParameterDeclaration();\n        }\n      }\n    }, {\n      key: \"parseClassMember\",\n      value: function parseClassMember(classBody, member, state, constructorAllowsSuper) {\n        var pos = this.state.start;\n\n        if (this.isContextual(\"declare\")) {\n          if (this.parseClassMemberFromModifier(classBody, member)) {\n            return;\n          }\n\n          member.declare = true;\n        }\n\n        _get(_getPrototypeOf(_class2.prototype), \"parseClassMember\", this).call(this, classBody, member, state, constructorAllowsSuper);\n\n        if (member.declare) {\n          if (member.type !== \"ClassProperty\" && member.type !== \"ClassPrivateProperty\") {\n            this.raise(pos, FlowErrors.DeclareClassElement);\n          } else if (member.value) {\n            this.raise(member.value.start, FlowErrors.DeclareClassFieldInitializer);\n          }\n        }\n      }\n    }, {\n      key: \"getTokenFromCode\",\n      value: function getTokenFromCode(code) {\n        var next = this.input.charCodeAt(this.state.pos + 1);\n\n        if (code === 123 && next === 124) {\n          return this.finishOp(types.braceBarL, 2);\n        } else if (this.state.inType && (code === 62 || code === 60)) {\n          return this.finishOp(types.relational, 1);\n        } else if (isIteratorStart(code, next)) {\n          this.state.isIterator = true;\n          return _get(_getPrototypeOf(_class2.prototype), \"readWord\", this).call(this);\n        } else {\n          return _get(_getPrototypeOf(_class2.prototype), \"getTokenFromCode\", this).call(this, code);\n        }\n      }\n    }, {\n      key: \"isAssignable\",\n      value: function isAssignable(node, isBinding) {\n        var _this8 = this;\n\n        switch (node.type) {\n          case \"Identifier\":\n          case \"ObjectPattern\":\n          case \"ArrayPattern\":\n          case \"AssignmentPattern\":\n            return true;\n\n          case \"ObjectExpression\":\n            {\n              var _last = node.properties.length - 1;\n\n              return node.properties.every(function (prop, i) {\n                return prop.type !== \"ObjectMethod\" && (i === _last || prop.type === \"SpreadElement\") && _this8.isAssignable(prop);\n              });\n            }\n\n          case \"ObjectProperty\":\n            return this.isAssignable(node.value);\n\n          case \"SpreadElement\":\n            return this.isAssignable(node.argument);\n\n          case \"ArrayExpression\":\n            return node.elements.every(function (element) {\n              return _this8.isAssignable(element);\n            });\n\n          case \"AssignmentExpression\":\n            return node.operator === \"=\";\n\n          case \"ParenthesizedExpression\":\n          case \"TypeCastExpression\":\n            return this.isAssignable(node.expression);\n\n          case \"MemberExpression\":\n          case \"OptionalMemberExpression\":\n            return !isBinding;\n\n          default:\n            return false;\n        }\n      }\n    }, {\n      key: \"toAssignable\",\n      value: function toAssignable(node) {\n        if (node.type === \"TypeCastExpression\") {\n          return _get(_getPrototypeOf(_class2.prototype), \"toAssignable\", this).call(this, this.typeCastToParameter(node));\n        } else {\n          return _get(_getPrototypeOf(_class2.prototype), \"toAssignable\", this).call(this, node);\n        }\n      }\n    }, {\n      key: \"toAssignableList\",\n      value: function toAssignableList(exprList, trailingCommaPos) {\n        for (var i = 0; i < exprList.length; i++) {\n          var expr = exprList[i];\n\n          if ((expr == null ? void 0 : expr.type) === \"TypeCastExpression\") {\n            exprList[i] = this.typeCastToParameter(expr);\n          }\n        }\n\n        return _get(_getPrototypeOf(_class2.prototype), \"toAssignableList\", this).call(this, exprList, trailingCommaPos);\n      }\n    }, {\n      key: \"toReferencedList\",\n      value: function toReferencedList(exprList, isParenthesizedExpr) {\n        for (var i = 0; i < exprList.length; i++) {\n          var _expr$extra;\n\n          var expr = exprList[i];\n\n          if (expr && expr.type === \"TypeCastExpression\" && !((_expr$extra = expr.extra) == null ? void 0 : _expr$extra.parenthesized) && (exprList.length > 1 || !isParenthesizedExpr)) {\n            this.raise(expr.typeAnnotation.start, FlowErrors.TypeCastInPattern);\n          }\n        }\n\n        return exprList;\n      }\n    }, {\n      key: \"checkLVal\",\n      value: function checkLVal(expr) {\n        var bindingType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : BIND_NONE;\n        var checkClashes = arguments.length > 2 ? arguments[2] : undefined;\n        var contextDescription = arguments.length > 3 ? arguments[3] : undefined;\n\n        if (expr.type !== \"TypeCastExpression\") {\n          return _get(_getPrototypeOf(_class2.prototype), \"checkLVal\", this).call(this, expr, bindingType, checkClashes, contextDescription);\n        }\n      }\n    }, {\n      key: \"parseClassProperty\",\n      value: function parseClassProperty(node) {\n        if (this.match(types.colon)) {\n          node.typeAnnotation = this.flowParseTypeAnnotation();\n        }\n\n        return _get(_getPrototypeOf(_class2.prototype), \"parseClassProperty\", this).call(this, node);\n      }\n    }, {\n      key: \"parseClassPrivateProperty\",\n      value: function parseClassPrivateProperty(node) {\n        if (this.match(types.colon)) {\n          node.typeAnnotation = this.flowParseTypeAnnotation();\n        }\n\n        return _get(_getPrototypeOf(_class2.prototype), \"parseClassPrivateProperty\", this).call(this, node);\n      }\n    }, {\n      key: \"isClassMethod\",\n      value: function isClassMethod() {\n        return this.isRelational(\"<\") || _get(_getPrototypeOf(_class2.prototype), \"isClassMethod\", this).call(this);\n      }\n    }, {\n      key: \"isClassProperty\",\n      value: function isClassProperty() {\n        return this.match(types.colon) || _get(_getPrototypeOf(_class2.prototype), \"isClassProperty\", this).call(this);\n      }\n    }, {\n      key: \"isNonstaticConstructor\",\n      value: function isNonstaticConstructor(method) {\n        return !this.match(types.colon) && _get(_getPrototypeOf(_class2.prototype), \"isNonstaticConstructor\", this).call(this, method);\n      }\n    }, {\n      key: \"pushClassMethod\",\n      value: function pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {\n        if (method.variance) {\n          this.unexpected(method.variance.start);\n        }\n\n        delete method.variance;\n\n        if (this.isRelational(\"<\")) {\n          method.typeParameters = this.flowParseTypeParameterDeclaration();\n        }\n\n        _get(_getPrototypeOf(_class2.prototype), \"pushClassMethod\", this).call(this, classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper);\n      }\n    }, {\n      key: \"pushClassPrivateMethod\",\n      value: function pushClassPrivateMethod(classBody, method, isGenerator, isAsync) {\n        if (method.variance) {\n          this.unexpected(method.variance.start);\n        }\n\n        delete method.variance;\n\n        if (this.isRelational(\"<\")) {\n          method.typeParameters = this.flowParseTypeParameterDeclaration();\n        }\n\n        _get(_getPrototypeOf(_class2.prototype), \"pushClassPrivateMethod\", this).call(this, classBody, method, isGenerator, isAsync);\n      }\n    }, {\n      key: \"parseClassSuper\",\n      value: function parseClassSuper(node) {\n        _get(_getPrototypeOf(_class2.prototype), \"parseClassSuper\", this).call(this, node);\n\n        if (node.superClass && this.isRelational(\"<\")) {\n          node.superTypeParameters = this.flowParseTypeParameterInstantiation();\n        }\n\n        if (this.isContextual(\"implements\")) {\n          this.next();\n          var implemented = node.implements = [];\n\n          do {\n            var _node3 = this.startNode();\n\n            _node3.id = this.flowParseRestrictedIdentifier(true);\n\n            if (this.isRelational(\"<\")) {\n              _node3.typeParameters = this.flowParseTypeParameterInstantiation();\n            } else {\n              _node3.typeParameters = null;\n            }\n\n            implemented.push(this.finishNode(_node3, \"ClassImplements\"));\n          } while (this.eat(types.comma));\n        }\n      }\n    }, {\n      key: \"parsePropertyName\",\n      value: function parsePropertyName(node, isPrivateNameAllowed) {\n        var variance = this.flowParseVariance();\n\n        var key = _get(_getPrototypeOf(_class2.prototype), \"parsePropertyName\", this).call(this, node, isPrivateNameAllowed);\n\n        node.variance = variance;\n        return key;\n      }\n    }, {\n      key: \"parseObjPropValue\",\n      value: function parseObjPropValue(prop, startPos, startLoc, isGenerator, isAsync, isPattern, refExpressionErrors, containsEsc) {\n        if (prop.variance) {\n          this.unexpected(prop.variance.start);\n        }\n\n        delete prop.variance;\n        var typeParameters;\n\n        if (this.isRelational(\"<\")) {\n          typeParameters = this.flowParseTypeParameterDeclaration();\n          if (!this.match(types.parenL)) this.unexpected();\n        }\n\n        _get(_getPrototypeOf(_class2.prototype), \"parseObjPropValue\", this).call(this, prop, startPos, startLoc, isGenerator, isAsync, isPattern, refExpressionErrors, containsEsc);\n\n        if (typeParameters) {\n          (prop.value || prop).typeParameters = typeParameters;\n        }\n      }\n    }, {\n      key: \"parseAssignableListItemTypes\",\n      value: function parseAssignableListItemTypes(param) {\n        if (this.eat(types.question)) {\n          if (param.type !== \"Identifier\") {\n            this.raise(param.start, FlowErrors.OptionalBindingPattern);\n          }\n\n          param.optional = true;\n        }\n\n        if (this.match(types.colon)) {\n          param.typeAnnotation = this.flowParseTypeAnnotation();\n        }\n\n        this.resetEndLocation(param);\n        return param;\n      }\n    }, {\n      key: \"parseMaybeDefault\",\n      value: function parseMaybeDefault(startPos, startLoc, left) {\n        var node = _get(_getPrototypeOf(_class2.prototype), \"parseMaybeDefault\", this).call(this, startPos, startLoc, left);\n\n        if (node.type === \"AssignmentPattern\" && node.typeAnnotation && node.right.start < node.typeAnnotation.start) {\n          this.raise(node.typeAnnotation.start, FlowErrors.TypeBeforeInitializer);\n        }\n\n        return node;\n      }\n    }, {\n      key: \"shouldParseDefaultImport\",\n      value: function shouldParseDefaultImport(node) {\n        if (!hasTypeImportKind(node)) {\n          return _get(_getPrototypeOf(_class2.prototype), \"shouldParseDefaultImport\", this).call(this, node);\n        }\n\n        return isMaybeDefaultImport(this.state);\n      }\n    }, {\n      key: \"parseImportSpecifierLocal\",\n      value: function parseImportSpecifierLocal(node, specifier, type, contextDescription) {\n        specifier.local = hasTypeImportKind(node) ? this.flowParseRestrictedIdentifier(true, true) : this.parseIdentifier();\n        this.checkLVal(specifier.local, BIND_LEXICAL, undefined, contextDescription);\n        node.specifiers.push(this.finishNode(specifier, type));\n      }\n    }, {\n      key: \"maybeParseDefaultImportSpecifier\",\n      value: function maybeParseDefaultImportSpecifier(node) {\n        node.importKind = \"value\";\n        var kind = null;\n\n        if (this.match(types._typeof)) {\n          kind = \"typeof\";\n        } else if (this.isContextual(\"type\")) {\n          kind = \"type\";\n        }\n\n        if (kind) {\n          var lh = this.lookahead();\n\n          if (kind === \"type\" && lh.type === types.star) {\n            this.unexpected(lh.start);\n          }\n\n          if (isMaybeDefaultImport(lh) || lh.type === types.braceL || lh.type === types.star) {\n            this.next();\n            node.importKind = kind;\n          }\n        }\n\n        return _get(_getPrototypeOf(_class2.prototype), \"maybeParseDefaultImportSpecifier\", this).call(this, node);\n      }\n    }, {\n      key: \"parseImportSpecifier\",\n      value: function parseImportSpecifier(node) {\n        var specifier = this.startNode();\n        var firstIdentLoc = this.state.start;\n        var firstIdent = this.parseIdentifier(true);\n        var specifierTypeKind = null;\n\n        if (firstIdent.name === \"type\") {\n          specifierTypeKind = \"type\";\n        } else if (firstIdent.name === \"typeof\") {\n          specifierTypeKind = \"typeof\";\n        }\n\n        var isBinding = false;\n\n        if (this.isContextual(\"as\") && !this.isLookaheadContextual(\"as\")) {\n          var as_ident = this.parseIdentifier(true);\n\n          if (specifierTypeKind !== null && !this.match(types.name) && !this.state.type.keyword) {\n            specifier.imported = as_ident;\n            specifier.importKind = specifierTypeKind;\n            specifier.local = as_ident.__clone();\n          } else {\n            specifier.imported = firstIdent;\n            specifier.importKind = null;\n            specifier.local = this.parseIdentifier();\n          }\n        } else if (specifierTypeKind !== null && (this.match(types.name) || this.state.type.keyword)) {\n          specifier.imported = this.parseIdentifier(true);\n          specifier.importKind = specifierTypeKind;\n\n          if (this.eatContextual(\"as\")) {\n            specifier.local = this.parseIdentifier();\n          } else {\n            isBinding = true;\n            specifier.local = specifier.imported.__clone();\n          }\n        } else {\n          isBinding = true;\n          specifier.imported = firstIdent;\n          specifier.importKind = null;\n          specifier.local = specifier.imported.__clone();\n        }\n\n        var nodeIsTypeImport = hasTypeImportKind(node);\n        var specifierIsTypeImport = hasTypeImportKind(specifier);\n\n        if (nodeIsTypeImport && specifierIsTypeImport) {\n          this.raise(firstIdentLoc, FlowErrors.ImportTypeShorthandOnlyInPureImport);\n        }\n\n        if (nodeIsTypeImport || specifierIsTypeImport) {\n          this.checkReservedType(specifier.local.name, specifier.local.start, true);\n        }\n\n        if (isBinding && !nodeIsTypeImport && !specifierIsTypeImport) {\n          this.checkReservedWord(specifier.local.name, specifier.start, true, true);\n        }\n\n        this.checkLVal(specifier.local, BIND_LEXICAL, undefined, \"import specifier\");\n        node.specifiers.push(this.finishNode(specifier, \"ImportSpecifier\"));\n      }\n    }, {\n      key: \"parseFunctionParams\",\n      value: function parseFunctionParams(node, allowModifiers) {\n        var kind = node.kind;\n\n        if (kind !== \"get\" && kind !== \"set\" && this.isRelational(\"<\")) {\n          node.typeParameters = this.flowParseTypeParameterDeclaration();\n        }\n\n        _get(_getPrototypeOf(_class2.prototype), \"parseFunctionParams\", this).call(this, node, allowModifiers);\n      }\n    }, {\n      key: \"parseVarId\",\n      value: function parseVarId(decl, kind) {\n        _get(_getPrototypeOf(_class2.prototype), \"parseVarId\", this).call(this, decl, kind);\n\n        if (this.match(types.colon)) {\n          decl.id.typeAnnotation = this.flowParseTypeAnnotation();\n          this.resetEndLocation(decl.id);\n        }\n      }\n    }, {\n      key: \"parseAsyncArrowFromCallExpression\",\n      value: function parseAsyncArrowFromCallExpression(node, call) {\n        if (this.match(types.colon)) {\n          var oldNoAnonFunctionType = this.state.noAnonFunctionType;\n          this.state.noAnonFunctionType = true;\n          node.returnType = this.flowParseTypeAnnotation();\n          this.state.noAnonFunctionType = oldNoAnonFunctionType;\n        }\n\n        return _get(_getPrototypeOf(_class2.prototype), \"parseAsyncArrowFromCallExpression\", this).call(this, node, call);\n      }\n    }, {\n      key: \"shouldParseAsyncArrow\",\n      value: function shouldParseAsyncArrow() {\n        return this.match(types.colon) || _get(_getPrototypeOf(_class2.prototype), \"shouldParseAsyncArrow\", this).call(this);\n      }\n    }, {\n      key: \"parseMaybeAssign\",\n      value: function parseMaybeAssign(noIn, refExpressionErrors, afterLeftParse, refNeedsArrowPos) {\n        var _this9 = this;\n\n        var _jsx;\n\n        var state = null;\n        var jsx;\n\n        if (this.hasPlugin(\"jsx\") && (this.match(types.jsxTagStart) || this.isRelational(\"<\"))) {\n          state = this.state.clone();\n          jsx = this.tryParse(function () {\n            return _get(_getPrototypeOf(_class2.prototype), \"parseMaybeAssign\", _this9).call(_this9, noIn, refExpressionErrors, afterLeftParse, refNeedsArrowPos);\n          }, state);\n          if (!jsx.error) return jsx.node;\n          var context = this.state.context;\n\n          if (context[context.length - 1] === types$1.j_oTag) {\n            context.length -= 2;\n          } else if (context[context.length - 1] === types$1.j_expr) {\n            context.length -= 1;\n          }\n        }\n\n        if (((_jsx = jsx) == null ? void 0 : _jsx.error) || this.isRelational(\"<\")) {\n          var _arrow$node, _jsx2, _jsx3;\n\n          state = state || this.state.clone();\n          var typeParameters;\n          var arrow = this.tryParse(function () {\n            typeParameters = _this9.flowParseTypeParameterDeclaration();\n\n            var arrowExpression = _this9.forwardNoArrowParamsConversionAt(typeParameters, function () {\n              return _get(_getPrototypeOf(_class2.prototype), \"parseMaybeAssign\", _this9).call(_this9, noIn, refExpressionErrors, afterLeftParse, refNeedsArrowPos);\n            });\n\n            arrowExpression.typeParameters = typeParameters;\n\n            _this9.resetStartLocationFromNode(arrowExpression, typeParameters);\n\n            return arrowExpression;\n          }, state);\n          var arrowExpression = ((_arrow$node = arrow.node) == null ? void 0 : _arrow$node.type) === \"ArrowFunctionExpression\" ? arrow.node : null;\n          if (!arrow.error && arrowExpression) return arrowExpression;\n\n          if ((_jsx2 = jsx) == null ? void 0 : _jsx2.node) {\n            this.state = jsx.failState;\n            return jsx.node;\n          }\n\n          if (arrowExpression) {\n            this.state = arrow.failState;\n            return arrowExpression;\n          }\n\n          if ((_jsx3 = jsx) == null ? void 0 : _jsx3.thrown) throw jsx.error;\n          if (arrow.thrown) throw arrow.error;\n          throw this.raise(typeParameters.start, FlowErrors.UnexpectedTokenAfterTypeParameter);\n        }\n\n        return _get(_getPrototypeOf(_class2.prototype), \"parseMaybeAssign\", this).call(this, noIn, refExpressionErrors, afterLeftParse, refNeedsArrowPos);\n      }\n    }, {\n      key: \"parseArrow\",\n      value: function parseArrow(node) {\n        var _this10 = this;\n\n        if (this.match(types.colon)) {\n          var result = this.tryParse(function () {\n            var oldNoAnonFunctionType = _this10.state.noAnonFunctionType;\n            _this10.state.noAnonFunctionType = true;\n\n            var typeNode = _this10.startNode();\n\n            var _this10$flowParseType = _this10.flowParseTypeAndPredicateInitialiser();\n\n            var _this10$flowParseType2 = _slicedToArray(_this10$flowParseType, 2);\n\n            typeNode.typeAnnotation = _this10$flowParseType2[0];\n            node.predicate = _this10$flowParseType2[1];\n            _this10.state.noAnonFunctionType = oldNoAnonFunctionType;\n            if (_this10.canInsertSemicolon()) _this10.unexpected();\n            if (!_this10.match(types.arrow)) _this10.unexpected();\n            return typeNode;\n          });\n          if (result.thrown) return null;\n          if (result.error) this.state = result.failState;\n          node.returnType = result.node.typeAnnotation ? this.finishNode(result.node, \"TypeAnnotation\") : null;\n        }\n\n        return _get(_getPrototypeOf(_class2.prototype), \"parseArrow\", this).call(this, node);\n      }\n    }, {\n      key: \"shouldParseArrow\",\n      value: function shouldParseArrow() {\n        return this.match(types.colon) || _get(_getPrototypeOf(_class2.prototype), \"shouldParseArrow\", this).call(this);\n      }\n    }, {\n      key: \"setArrowFunctionParameters\",\n      value: function setArrowFunctionParameters(node, params) {\n        if (this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {\n          node.params = params;\n        } else {\n          _get(_getPrototypeOf(_class2.prototype), \"setArrowFunctionParameters\", this).call(this, node, params);\n        }\n      }\n    }, {\n      key: \"checkParams\",\n      value: function checkParams(node, allowDuplicates, isArrowFunction) {\n        if (isArrowFunction && this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {\n          return;\n        }\n\n        return _get(_getPrototypeOf(_class2.prototype), \"checkParams\", this).apply(this, arguments);\n      }\n    }, {\n      key: \"parseParenAndDistinguishExpression\",\n      value: function parseParenAndDistinguishExpression(canBeArrow) {\n        return _get(_getPrototypeOf(_class2.prototype), \"parseParenAndDistinguishExpression\", this).call(this, canBeArrow && this.state.noArrowAt.indexOf(this.state.start) === -1);\n      }\n    }, {\n      key: \"parseSubscripts\",\n      value: function parseSubscripts(base, startPos, startLoc, noCalls) {\n        var _this11 = this;\n\n        if (base.type === \"Identifier\" && base.name === \"async\" && this.state.noArrowAt.indexOf(startPos) !== -1) {\n          this.next();\n          var node = this.startNodeAt(startPos, startLoc);\n          node.callee = base;\n          node.arguments = this.parseCallExpressionArguments(types.parenR, false);\n          base = this.finishNode(node, \"CallExpression\");\n        } else if (base.type === \"Identifier\" && base.name === \"async\" && this.isRelational(\"<\")) {\n          var state = this.state.clone();\n          var arrow = this.tryParse(function (abort) {\n            return _this11.parseAsyncArrowWithTypeParameters(startPos, startLoc) || abort();\n          }, state);\n          if (!arrow.error && !arrow.aborted) return arrow.node;\n          var result = this.tryParse(function () {\n            return _get(_getPrototypeOf(_class2.prototype), \"parseSubscripts\", _this11).call(_this11, base, startPos, startLoc, noCalls);\n          }, state);\n          if (result.node && !result.error) return result.node;\n\n          if (arrow.node) {\n            this.state = arrow.failState;\n            return arrow.node;\n          }\n\n          if (result.node) {\n            this.state = result.failState;\n            return result.node;\n          }\n\n          throw arrow.error || result.error;\n        }\n\n        return _get(_getPrototypeOf(_class2.prototype), \"parseSubscripts\", this).call(this, base, startPos, startLoc, noCalls);\n      }\n    }, {\n      key: \"parseSubscript\",\n      value: function parseSubscript(base, startPos, startLoc, noCalls, subscriptState) {\n        var _this12 = this;\n\n        if (this.match(types.questionDot) && this.isLookaheadRelational(\"<\")) {\n          subscriptState.optionalChainMember = true;\n\n          if (noCalls) {\n            subscriptState.stop = true;\n            return base;\n          }\n\n          this.next();\n          var node = this.startNodeAt(startPos, startLoc);\n          node.callee = base;\n          node.typeArguments = this.flowParseTypeParameterInstantiation();\n          this.expect(types.parenL);\n          node.arguments = this.parseCallExpressionArguments(types.parenR, false);\n          node.optional = true;\n          return this.finishCallExpression(node, true);\n        } else if (!noCalls && this.shouldParseTypes() && this.isRelational(\"<\")) {\n          var _node4 = this.startNodeAt(startPos, startLoc);\n\n          _node4.callee = base;\n          var result = this.tryParse(function () {\n            _node4.typeArguments = _this12.flowParseTypeParameterInstantiationCallOrNew();\n\n            _this12.expect(types.parenL);\n\n            _node4.arguments = _this12.parseCallExpressionArguments(types.parenR, false);\n            if (subscriptState.optionalChainMember) _node4.optional = false;\n            return _this12.finishCallExpression(_node4, subscriptState.optionalChainMember);\n          });\n\n          if (result.node) {\n            if (result.error) this.state = result.failState;\n            return result.node;\n          }\n        }\n\n        return _get(_getPrototypeOf(_class2.prototype), \"parseSubscript\", this).call(this, base, startPos, startLoc, noCalls, subscriptState);\n      }\n    }, {\n      key: \"parseNewArguments\",\n      value: function parseNewArguments(node) {\n        var _this13 = this;\n\n        var targs = null;\n\n        if (this.shouldParseTypes() && this.isRelational(\"<\")) {\n          targs = this.tryParse(function () {\n            return _this13.flowParseTypeParameterInstantiationCallOrNew();\n          }).node;\n        }\n\n        node.typeArguments = targs;\n\n        _get(_getPrototypeOf(_class2.prototype), \"parseNewArguments\", this).call(this, node);\n      }\n    }, {\n      key: \"parseAsyncArrowWithTypeParameters\",\n      value: function parseAsyncArrowWithTypeParameters(startPos, startLoc) {\n        var node = this.startNodeAt(startPos, startLoc);\n        this.parseFunctionParams(node);\n        if (!this.parseArrow(node)) return;\n        return this.parseArrowExpression(node, undefined, true);\n      }\n    }, {\n      key: \"readToken_mult_modulo\",\n      value: function readToken_mult_modulo(code) {\n        var next = this.input.charCodeAt(this.state.pos + 1);\n\n        if (code === 42 && next === 47 && this.state.hasFlowComment) {\n          this.state.hasFlowComment = false;\n          this.state.pos += 2;\n          this.nextToken();\n          return;\n        }\n\n        _get(_getPrototypeOf(_class2.prototype), \"readToken_mult_modulo\", this).call(this, code);\n      }\n    }, {\n      key: \"readToken_pipe_amp\",\n      value: function readToken_pipe_amp(code) {\n        var next = this.input.charCodeAt(this.state.pos + 1);\n\n        if (code === 124 && next === 125) {\n          this.finishOp(types.braceBarR, 2);\n          return;\n        }\n\n        _get(_getPrototypeOf(_class2.prototype), \"readToken_pipe_amp\", this).call(this, code);\n      }\n    }, {\n      key: \"parseTopLevel\",\n      value: function parseTopLevel(file, program) {\n        var fileNode = _get(_getPrototypeOf(_class2.prototype), \"parseTopLevel\", this).call(this, file, program);\n\n        if (this.state.hasFlowComment) {\n          this.raise(this.state.pos, FlowErrors.UnterminatedFlowComment);\n        }\n\n        return fileNode;\n      }\n    }, {\n      key: \"skipBlockComment\",\n      value: function skipBlockComment() {\n        if (this.hasPlugin(\"flowComments\") && this.skipFlowComment()) {\n          if (this.state.hasFlowComment) {\n            this.unexpected(null, FlowErrors.NestedFlowComment);\n          }\n\n          this.hasFlowCommentCompletion();\n          this.state.pos += this.skipFlowComment();\n          this.state.hasFlowComment = true;\n          return;\n        }\n\n        if (this.state.hasFlowComment) {\n          var end = this.input.indexOf(\"*-/\", this.state.pos += 2);\n\n          if (end === -1) {\n            throw this.raise(this.state.pos - 2, ErrorMessages.UnterminatedComment);\n          }\n\n          this.state.pos = end + 3;\n          return;\n        }\n\n        _get(_getPrototypeOf(_class2.prototype), \"skipBlockComment\", this).call(this);\n      }\n    }, {\n      key: \"skipFlowComment\",\n      value: function skipFlowComment() {\n        var pos = this.state.pos;\n        var shiftToFirstNonWhiteSpace = 2;\n\n        while ([32, 9].includes(this.input.charCodeAt(pos + shiftToFirstNonWhiteSpace))) {\n          shiftToFirstNonWhiteSpace++;\n        }\n\n        var ch2 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos);\n        var ch3 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos + 1);\n\n        if (ch2 === 58 && ch3 === 58) {\n          return shiftToFirstNonWhiteSpace + 2;\n        }\n\n        if (this.input.slice(shiftToFirstNonWhiteSpace + pos, shiftToFirstNonWhiteSpace + pos + 12) === \"flow-include\") {\n          return shiftToFirstNonWhiteSpace + 12;\n        }\n\n        if (ch2 === 58 && ch3 !== 58) {\n          return shiftToFirstNonWhiteSpace;\n        }\n\n        return false;\n      }\n    }, {\n      key: \"hasFlowCommentCompletion\",\n      value: function hasFlowCommentCompletion() {\n        var end = this.input.indexOf(\"*/\", this.state.pos);\n\n        if (end === -1) {\n          throw this.raise(this.state.pos, ErrorMessages.UnterminatedComment);\n        }\n      }\n    }, {\n      key: \"flowEnumErrorBooleanMemberNotInitialized\",\n      value: function flowEnumErrorBooleanMemberNotInitialized(pos, _ref3) {\n        var enumName = _ref3.enumName,\n            memberName = _ref3.memberName;\n        this.raise(pos, FlowErrors.EnumBooleanMemberNotInitialized, memberName, enumName);\n      }\n    }, {\n      key: \"flowEnumErrorInvalidMemberName\",\n      value: function flowEnumErrorInvalidMemberName(pos, _ref4) {\n        var enumName = _ref4.enumName,\n            memberName = _ref4.memberName;\n        var suggestion = memberName[0].toUpperCase() + memberName.slice(1);\n        this.raise(pos, FlowErrors.EnumInvalidMemberName, memberName, suggestion, enumName);\n      }\n    }, {\n      key: \"flowEnumErrorDuplicateMemberName\",\n      value: function flowEnumErrorDuplicateMemberName(pos, _ref5) {\n        var enumName = _ref5.enumName,\n            memberName = _ref5.memberName;\n        this.raise(pos, FlowErrors.EnumDuplicateMemberName, memberName, enumName);\n      }\n    }, {\n      key: \"flowEnumErrorInconsistentMemberValues\",\n      value: function flowEnumErrorInconsistentMemberValues(pos, _ref6) {\n        var enumName = _ref6.enumName;\n        this.raise(pos, FlowErrors.EnumInconsistentMemberValues, enumName);\n      }\n    }, {\n      key: \"flowEnumErrorInvalidExplicitType\",\n      value: function flowEnumErrorInvalidExplicitType(pos, _ref7) {\n        var enumName = _ref7.enumName,\n            suppliedType = _ref7.suppliedType;\n        return this.raise(pos, suppliedType === null ? FlowErrors.EnumInvalidExplicitTypeUnknownSupplied : FlowErrors.EnumInvalidExplicitType, enumName, suppliedType);\n      }\n    }, {\n      key: \"flowEnumErrorInvalidMemberInitializer\",\n      value: function flowEnumErrorInvalidMemberInitializer(pos, _ref8) {\n        var enumName = _ref8.enumName,\n            explicitType = _ref8.explicitType,\n            memberName = _ref8.memberName;\n        var message = null;\n\n        switch (explicitType) {\n          case \"boolean\":\n          case \"number\":\n          case \"string\":\n            message = FlowErrors.EnumInvalidMemberInitializerPrimaryType;\n            break;\n\n          case \"symbol\":\n            message = FlowErrors.EnumInvalidMemberInitializerSymbolType;\n            break;\n\n          default:\n            message = FlowErrors.EnumInvalidMemberInitializerUnknownType;\n        }\n\n        return this.raise(pos, message, enumName, memberName, explicitType);\n      }\n    }, {\n      key: \"flowEnumErrorNumberMemberNotInitialized\",\n      value: function flowEnumErrorNumberMemberNotInitialized(pos, _ref9) {\n        var enumName = _ref9.enumName,\n            memberName = _ref9.memberName;\n        this.raise(pos, FlowErrors.EnumNumberMemberNotInitialized, enumName, memberName);\n      }\n    }, {\n      key: \"flowEnumErrorStringMemberInconsistentlyInitailized\",\n      value: function flowEnumErrorStringMemberInconsistentlyInitailized(pos, _ref10) {\n        var enumName = _ref10.enumName;\n        this.raise(pos, FlowErrors.EnumStringMemberInconsistentlyInitailized, enumName);\n      }\n    }, {\n      key: \"flowEnumMemberInit\",\n      value: function flowEnumMemberInit() {\n        var _this14 = this;\n\n        var startPos = this.state.start;\n\n        var endOfInit = function endOfInit() {\n          return _this14.match(types.comma) || _this14.match(types.braceR);\n        };\n\n        switch (this.state.type) {\n          case types.num:\n            {\n              var literal = this.parseLiteral(this.state.value, \"NumericLiteral\");\n\n              if (endOfInit()) {\n                return {\n                  type: \"number\",\n                  pos: literal.start,\n                  value: literal\n                };\n              }\n\n              return {\n                type: \"invalid\",\n                pos: startPos\n              };\n            }\n\n          case types.string:\n            {\n              var _literal = this.parseLiteral(this.state.value, \"StringLiteral\");\n\n              if (endOfInit()) {\n                return {\n                  type: \"string\",\n                  pos: _literal.start,\n                  value: _literal\n                };\n              }\n\n              return {\n                type: \"invalid\",\n                pos: startPos\n              };\n            }\n\n          case types._true:\n          case types._false:\n            {\n              var _literal2 = this.parseBooleanLiteral();\n\n              if (endOfInit()) {\n                return {\n                  type: \"boolean\",\n                  pos: _literal2.start,\n                  value: _literal2\n                };\n              }\n\n              return {\n                type: \"invalid\",\n                pos: startPos\n              };\n            }\n\n          default:\n            return {\n              type: \"invalid\",\n              pos: startPos\n            };\n        }\n      }\n    }, {\n      key: \"flowEnumMemberRaw\",\n      value: function flowEnumMemberRaw() {\n        var pos = this.state.start;\n        var id = this.parseIdentifier(true);\n        var init = this.eat(types.eq) ? this.flowEnumMemberInit() : {\n          type: \"none\",\n          pos: pos\n        };\n        return {\n          id: id,\n          init: init\n        };\n      }\n    }, {\n      key: \"flowEnumCheckExplicitTypeMismatch\",\n      value: function flowEnumCheckExplicitTypeMismatch(pos, context, expectedType) {\n        var explicitType = context.explicitType;\n\n        if (explicitType === null) {\n          return;\n        }\n\n        if (explicitType !== expectedType) {\n          this.flowEnumErrorInvalidMemberInitializer(pos, context);\n        }\n      }\n    }, {\n      key: \"flowEnumMembers\",\n      value: function flowEnumMembers(_ref11) {\n        var enumName = _ref11.enumName,\n            explicitType = _ref11.explicitType;\n        var seenNames = new Set();\n        var members = {\n          booleanMembers: [],\n          numberMembers: [],\n          stringMembers: [],\n          defaultedMembers: []\n        };\n\n        while (!this.match(types.braceR)) {\n          var memberNode = this.startNode();\n\n          var _this$flowEnumMemberR = this.flowEnumMemberRaw(),\n              id = _this$flowEnumMemberR.id,\n              init = _this$flowEnumMemberR.init;\n\n          var memberName = id.name;\n\n          if (memberName === \"\") {\n            continue;\n          }\n\n          if (/^[a-z]/.test(memberName)) {\n            this.flowEnumErrorInvalidMemberName(id.start, {\n              enumName: enumName,\n              memberName: memberName\n            });\n          }\n\n          if (seenNames.has(memberName)) {\n            this.flowEnumErrorDuplicateMemberName(id.start, {\n              enumName: enumName,\n              memberName: memberName\n            });\n          }\n\n          seenNames.add(memberName);\n          var context = {\n            enumName: enumName,\n            explicitType: explicitType,\n            memberName: memberName\n          };\n          memberNode.id = id;\n\n          switch (init.type) {\n            case \"boolean\":\n              {\n                this.flowEnumCheckExplicitTypeMismatch(init.pos, context, \"boolean\");\n                memberNode.init = init.value;\n                members.booleanMembers.push(this.finishNode(memberNode, \"EnumBooleanMember\"));\n                break;\n              }\n\n            case \"number\":\n              {\n                this.flowEnumCheckExplicitTypeMismatch(init.pos, context, \"number\");\n                memberNode.init = init.value;\n                members.numberMembers.push(this.finishNode(memberNode, \"EnumNumberMember\"));\n                break;\n              }\n\n            case \"string\":\n              {\n                this.flowEnumCheckExplicitTypeMismatch(init.pos, context, \"string\");\n                memberNode.init = init.value;\n                members.stringMembers.push(this.finishNode(memberNode, \"EnumStringMember\"));\n                break;\n              }\n\n            case \"invalid\":\n              {\n                throw this.flowEnumErrorInvalidMemberInitializer(init.pos, context);\n              }\n\n            case \"none\":\n              {\n                switch (explicitType) {\n                  case \"boolean\":\n                    this.flowEnumErrorBooleanMemberNotInitialized(init.pos, context);\n                    break;\n\n                  case \"number\":\n                    this.flowEnumErrorNumberMemberNotInitialized(init.pos, context);\n                    break;\n\n                  default:\n                    members.defaultedMembers.push(this.finishNode(memberNode, \"EnumDefaultedMember\"));\n                }\n              }\n          }\n\n          if (!this.match(types.braceR)) {\n            this.expect(types.comma);\n          }\n        }\n\n        return members;\n      }\n    }, {\n      key: \"flowEnumStringMembers\",\n      value: function flowEnumStringMembers(initializedMembers, defaultedMembers, _ref12) {\n        var enumName = _ref12.enumName;\n\n        if (initializedMembers.length === 0) {\n          return defaultedMembers;\n        } else if (defaultedMembers.length === 0) {\n          return initializedMembers;\n        } else if (defaultedMembers.length > initializedMembers.length) {\n          for (var _i = 0; _i < initializedMembers.length; _i++) {\n            var member = initializedMembers[_i];\n            this.flowEnumErrorStringMemberInconsistentlyInitailized(member.start, {\n              enumName: enumName\n            });\n          }\n\n          return defaultedMembers;\n        } else {\n          for (var _i2 = 0; _i2 < defaultedMembers.length; _i2++) {\n            var _member = defaultedMembers[_i2];\n            this.flowEnumErrorStringMemberInconsistentlyInitailized(_member.start, {\n              enumName: enumName\n            });\n          }\n\n          return initializedMembers;\n        }\n      }\n    }, {\n      key: \"flowEnumParseExplicitType\",\n      value: function flowEnumParseExplicitType(_ref13) {\n        var enumName = _ref13.enumName;\n\n        if (this.eatContextual(\"of\")) {\n          if (!this.match(types.name)) {\n            throw this.flowEnumErrorInvalidExplicitType(this.state.start, {\n              enumName: enumName,\n              suppliedType: null\n            });\n          }\n\n          var value = this.state.value;\n          this.next();\n\n          if (value !== \"boolean\" && value !== \"number\" && value !== \"string\" && value !== \"symbol\") {\n            this.flowEnumErrorInvalidExplicitType(this.state.start, {\n              enumName: enumName,\n              suppliedType: value\n            });\n          }\n\n          return value;\n        }\n\n        return null;\n      }\n    }, {\n      key: \"flowEnumBody\",\n      value: function flowEnumBody(node, _ref14) {\n        var _this15 = this;\n\n        var enumName = _ref14.enumName,\n            nameLoc = _ref14.nameLoc;\n        var explicitType = this.flowEnumParseExplicitType({\n          enumName: enumName\n        });\n        this.expect(types.braceL);\n        var members = this.flowEnumMembers({\n          enumName: enumName,\n          explicitType: explicitType\n        });\n\n        switch (explicitType) {\n          case \"boolean\":\n            node.explicitType = true;\n            node.members = members.booleanMembers;\n            this.expect(types.braceR);\n            return this.finishNode(node, \"EnumBooleanBody\");\n\n          case \"number\":\n            node.explicitType = true;\n            node.members = members.numberMembers;\n            this.expect(types.braceR);\n            return this.finishNode(node, \"EnumNumberBody\");\n\n          case \"string\":\n            node.explicitType = true;\n            node.members = this.flowEnumStringMembers(members.stringMembers, members.defaultedMembers, {\n              enumName: enumName\n            });\n            this.expect(types.braceR);\n            return this.finishNode(node, \"EnumStringBody\");\n\n          case \"symbol\":\n            node.members = members.defaultedMembers;\n            this.expect(types.braceR);\n            return this.finishNode(node, \"EnumSymbolBody\");\n\n          default:\n            {\n              var empty = function empty() {\n                node.members = [];\n\n                _this15.expect(types.braceR);\n\n                return _this15.finishNode(node, \"EnumStringBody\");\n              };\n\n              node.explicitType = false;\n              var boolsLen = members.booleanMembers.length;\n              var numsLen = members.numberMembers.length;\n              var strsLen = members.stringMembers.length;\n              var defaultedLen = members.defaultedMembers.length;\n\n              if (!boolsLen && !numsLen && !strsLen && !defaultedLen) {\n                return empty();\n              } else if (!boolsLen && !numsLen) {\n                node.members = this.flowEnumStringMembers(members.stringMembers, members.defaultedMembers, {\n                  enumName: enumName\n                });\n                this.expect(types.braceR);\n                return this.finishNode(node, \"EnumStringBody\");\n              } else if (!numsLen && !strsLen && boolsLen >= defaultedLen) {\n                for (var _i3 = 0, _members$defaultedMem = members.defaultedMembers; _i3 < _members$defaultedMem.length; _i3++) {\n                  var member = _members$defaultedMem[_i3];\n                  this.flowEnumErrorBooleanMemberNotInitialized(member.start, {\n                    enumName: enumName,\n                    memberName: member.id.name\n                  });\n                }\n\n                node.members = members.booleanMembers;\n                this.expect(types.braceR);\n                return this.finishNode(node, \"EnumBooleanBody\");\n              } else if (!boolsLen && !strsLen && numsLen >= defaultedLen) {\n                for (var _i4 = 0, _members$defaultedMem2 = members.defaultedMembers; _i4 < _members$defaultedMem2.length; _i4++) {\n                  var _member2 = _members$defaultedMem2[_i4];\n                  this.flowEnumErrorNumberMemberNotInitialized(_member2.start, {\n                    enumName: enumName,\n                    memberName: _member2.id.name\n                  });\n                }\n\n                node.members = members.numberMembers;\n                this.expect(types.braceR);\n                return this.finishNode(node, \"EnumNumberBody\");\n              } else {\n                this.flowEnumErrorInconsistentMemberValues(nameLoc, {\n                  enumName: enumName\n                });\n                return empty();\n              }\n            }\n        }\n      }\n    }, {\n      key: \"flowParseEnumDeclaration\",\n      value: function flowParseEnumDeclaration(node) {\n        var id = this.parseIdentifier();\n        node.id = id;\n        node.body = this.flowEnumBody(this.startNode(), {\n          enumName: id.name,\n          nameLoc: id.start\n        });\n        return this.finishNode(node, \"EnumDeclaration\");\n      }\n    }, {\n      key: \"updateContext\",\n      value: function updateContext(prevType) {\n        if (this.match(types.name) && this.state.value === \"of\" && prevType === types.name && this.input.slice(this.state.lastTokStart, this.state.lastTokEnd) === \"interface\") {\n          this.state.exprAllowed = false;\n        } else {\n          _get(_getPrototypeOf(_class2.prototype), \"updateContext\", this).call(this, prevType);\n        }\n      }\n    }]);\n\n    return _class2;\n  }(superClass);\n};\n\nvar entities = {\n  quot: \"\\\"\",\n  amp: \"&\",\n  apos: \"'\",\n  lt: \"<\",\n  gt: \">\",\n  nbsp: \"\\xA0\",\n  iexcl: \"\\xA1\",\n  cent: \"\\xA2\",\n  pound: \"\\xA3\",\n  curren: \"\\xA4\",\n  yen: \"\\xA5\",\n  brvbar: \"\\xA6\",\n  sect: \"\\xA7\",\n  uml: \"\\xA8\",\n  copy: \"\\xA9\",\n  ordf: \"\\xAA\",\n  laquo: \"\\xAB\",\n  not: \"\\xAC\",\n  shy: \"\\xAD\",\n  reg: \"\\xAE\",\n  macr: \"\\xAF\",\n  deg: \"\\xB0\",\n  plusmn: \"\\xB1\",\n  sup2: \"\\xB2\",\n  sup3: \"\\xB3\",\n  acute: \"\\xB4\",\n  micro: \"\\xB5\",\n  para: \"\\xB6\",\n  middot: \"\\xB7\",\n  cedil: \"\\xB8\",\n  sup1: \"\\xB9\",\n  ordm: \"\\xBA\",\n  raquo: \"\\xBB\",\n  frac14: \"\\xBC\",\n  frac12: \"\\xBD\",\n  frac34: \"\\xBE\",\n  iquest: \"\\xBF\",\n  Agrave: \"\\xC0\",\n  Aacute: \"\\xC1\",\n  Acirc: \"\\xC2\",\n  Atilde: \"\\xC3\",\n  Auml: \"\\xC4\",\n  Aring: \"\\xC5\",\n  AElig: \"\\xC6\",\n  Ccedil: \"\\xC7\",\n  Egrave: \"\\xC8\",\n  Eacute: \"\\xC9\",\n  Ecirc: \"\\xCA\",\n  Euml: \"\\xCB\",\n  Igrave: \"\\xCC\",\n  Iacute: \"\\xCD\",\n  Icirc: \"\\xCE\",\n  Iuml: \"\\xCF\",\n  ETH: \"\\xD0\",\n  Ntilde: \"\\xD1\",\n  Ograve: \"\\xD2\",\n  Oacute: \"\\xD3\",\n  Ocirc: \"\\xD4\",\n  Otilde: \"\\xD5\",\n  Ouml: \"\\xD6\",\n  times: \"\\xD7\",\n  Oslash: \"\\xD8\",\n  Ugrave: \"\\xD9\",\n  Uacute: \"\\xDA\",\n  Ucirc: \"\\xDB\",\n  Uuml: \"\\xDC\",\n  Yacute: \"\\xDD\",\n  THORN: \"\\xDE\",\n  szlig: \"\\xDF\",\n  agrave: \"\\xE0\",\n  aacute: \"\\xE1\",\n  acirc: \"\\xE2\",\n  atilde: \"\\xE3\",\n  auml: \"\\xE4\",\n  aring: \"\\xE5\",\n  aelig: \"\\xE6\",\n  ccedil: \"\\xE7\",\n  egrave: \"\\xE8\",\n  eacute: \"\\xE9\",\n  ecirc: \"\\xEA\",\n  euml: \"\\xEB\",\n  igrave: \"\\xEC\",\n  iacute: \"\\xED\",\n  icirc: \"\\xEE\",\n  iuml: \"\\xEF\",\n  eth: \"\\xF0\",\n  ntilde: \"\\xF1\",\n  ograve: \"\\xF2\",\n  oacute: \"\\xF3\",\n  ocirc: \"\\xF4\",\n  otilde: \"\\xF5\",\n  ouml: \"\\xF6\",\n  divide: \"\\xF7\",\n  oslash: \"\\xF8\",\n  ugrave: \"\\xF9\",\n  uacute: \"\\xFA\",\n  ucirc: \"\\xFB\",\n  uuml: \"\\xFC\",\n  yacute: \"\\xFD\",\n  thorn: \"\\xFE\",\n  yuml: \"\\xFF\",\n  OElig: \"\\u0152\",\n  oelig: \"\\u0153\",\n  Scaron: \"\\u0160\",\n  scaron: \"\\u0161\",\n  Yuml: \"\\u0178\",\n  fnof: \"\\u0192\",\n  circ: \"\\u02C6\",\n  tilde: \"\\u02DC\",\n  Alpha: \"\\u0391\",\n  Beta: \"\\u0392\",\n  Gamma: \"\\u0393\",\n  Delta: \"\\u0394\",\n  Epsilon: \"\\u0395\",\n  Zeta: \"\\u0396\",\n  Eta: \"\\u0397\",\n  Theta: \"\\u0398\",\n  Iota: \"\\u0399\",\n  Kappa: \"\\u039A\",\n  Lambda: \"\\u039B\",\n  Mu: \"\\u039C\",\n  Nu: \"\\u039D\",\n  Xi: \"\\u039E\",\n  Omicron: \"\\u039F\",\n  Pi: \"\\u03A0\",\n  Rho: \"\\u03A1\",\n  Sigma: \"\\u03A3\",\n  Tau: \"\\u03A4\",\n  Upsilon: \"\\u03A5\",\n  Phi: \"\\u03A6\",\n  Chi: \"\\u03A7\",\n  Psi: \"\\u03A8\",\n  Omega: \"\\u03A9\",\n  alpha: \"\\u03B1\",\n  beta: \"\\u03B2\",\n  gamma: \"\\u03B3\",\n  delta: \"\\u03B4\",\n  epsilon: \"\\u03B5\",\n  zeta: \"\\u03B6\",\n  eta: \"\\u03B7\",\n  theta: \"\\u03B8\",\n  iota: \"\\u03B9\",\n  kappa: \"\\u03BA\",\n  lambda: \"\\u03BB\",\n  mu: \"\\u03BC\",\n  nu: \"\\u03BD\",\n  xi: \"\\u03BE\",\n  omicron: \"\\u03BF\",\n  pi: \"\\u03C0\",\n  rho: \"\\u03C1\",\n  sigmaf: \"\\u03C2\",\n  sigma: \"\\u03C3\",\n  tau: \"\\u03C4\",\n  upsilon: \"\\u03C5\",\n  phi: \"\\u03C6\",\n  chi: \"\\u03C7\",\n  psi: \"\\u03C8\",\n  omega: \"\\u03C9\",\n  thetasym: \"\\u03D1\",\n  upsih: \"\\u03D2\",\n  piv: \"\\u03D6\",\n  ensp: \"\\u2002\",\n  emsp: \"\\u2003\",\n  thinsp: \"\\u2009\",\n  zwnj: \"\\u200C\",\n  zwj: \"\\u200D\",\n  lrm: \"\\u200E\",\n  rlm: \"\\u200F\",\n  ndash: \"\\u2013\",\n  mdash: \"\\u2014\",\n  lsquo: \"\\u2018\",\n  rsquo: \"\\u2019\",\n  sbquo: \"\\u201A\",\n  ldquo: \"\\u201C\",\n  rdquo: \"\\u201D\",\n  bdquo: \"\\u201E\",\n  dagger: \"\\u2020\",\n  Dagger: \"\\u2021\",\n  bull: \"\\u2022\",\n  hellip: \"\\u2026\",\n  permil: \"\\u2030\",\n  prime: \"\\u2032\",\n  Prime: \"\\u2033\",\n  lsaquo: \"\\u2039\",\n  rsaquo: \"\\u203A\",\n  oline: \"\\u203E\",\n  frasl: \"\\u2044\",\n  euro: \"\\u20AC\",\n  image: \"\\u2111\",\n  weierp: \"\\u2118\",\n  real: \"\\u211C\",\n  trade: \"\\u2122\",\n  alefsym: \"\\u2135\",\n  larr: \"\\u2190\",\n  uarr: \"\\u2191\",\n  rarr: \"\\u2192\",\n  darr: \"\\u2193\",\n  harr: \"\\u2194\",\n  crarr: \"\\u21B5\",\n  lArr: \"\\u21D0\",\n  uArr: \"\\u21D1\",\n  rArr: \"\\u21D2\",\n  dArr: \"\\u21D3\",\n  hArr: \"\\u21D4\",\n  forall: \"\\u2200\",\n  part: \"\\u2202\",\n  exist: \"\\u2203\",\n  empty: \"\\u2205\",\n  nabla: \"\\u2207\",\n  isin: \"\\u2208\",\n  notin: \"\\u2209\",\n  ni: \"\\u220B\",\n  prod: \"\\u220F\",\n  sum: \"\\u2211\",\n  minus: \"\\u2212\",\n  lowast: \"\\u2217\",\n  radic: \"\\u221A\",\n  prop: \"\\u221D\",\n  infin: \"\\u221E\",\n  ang: \"\\u2220\",\n  and: \"\\u2227\",\n  or: \"\\u2228\",\n  cap: \"\\u2229\",\n  cup: \"\\u222A\",\n  int: \"\\u222B\",\n  there4: \"\\u2234\",\n  sim: \"\\u223C\",\n  cong: \"\\u2245\",\n  asymp: \"\\u2248\",\n  ne: \"\\u2260\",\n  equiv: \"\\u2261\",\n  le: \"\\u2264\",\n  ge: \"\\u2265\",\n  sub: \"\\u2282\",\n  sup: \"\\u2283\",\n  nsub: \"\\u2284\",\n  sube: \"\\u2286\",\n  supe: \"\\u2287\",\n  oplus: \"\\u2295\",\n  otimes: \"\\u2297\",\n  perp: \"\\u22A5\",\n  sdot: \"\\u22C5\",\n  lceil: \"\\u2308\",\n  rceil: \"\\u2309\",\n  lfloor: \"\\u230A\",\n  rfloor: \"\\u230B\",\n  lang: \"\\u2329\",\n  rang: \"\\u232A\",\n  loz: \"\\u25CA\",\n  spades: \"\\u2660\",\n  clubs: \"\\u2663\",\n  hearts: \"\\u2665\",\n  diams: \"\\u2666\"\n};\nvar HEX_NUMBER = /^[\\da-fA-F]+$/;\nvar DECIMAL_NUMBER = /^\\d+$/;\nvar JsxErrors = Object.freeze({\n  AttributeIsEmpty: \"JSX attributes must only be assigned a non-empty expression\",\n  MissingClosingTagFragment: \"Expected corresponding JSX closing tag for <>\",\n  MissingClosingTagElement: \"Expected corresponding JSX closing tag for <%0>\",\n  UnsupportedJsxValue: \"JSX value should be either an expression or a quoted JSX text\",\n  UnterminatedJsxContent: \"Unterminated JSX contents\",\n  UnwrappedAdjacentJSXElements: \"Adjacent JSX elements must be wrapped in an enclosing tag. Did you want a JSX fragment <>...</>?\"\n});\ntypes$1.j_oTag = new TokContext(\"<tag\", false);\ntypes$1.j_cTag = new TokContext(\"</tag\", false);\ntypes$1.j_expr = new TokContext(\"<tag>...</tag>\", true, true);\ntypes.jsxName = new TokenType(\"jsxName\");\ntypes.jsxText = new TokenType(\"jsxText\", {\n  beforeExpr: true\n});\ntypes.jsxTagStart = new TokenType(\"jsxTagStart\", {\n  startsExpr: true\n});\ntypes.jsxTagEnd = new TokenType(\"jsxTagEnd\");\n\ntypes.jsxTagStart.updateContext = function () {\n  this.state.context.push(types$1.j_expr);\n  this.state.context.push(types$1.j_oTag);\n  this.state.exprAllowed = false;\n};\n\ntypes.jsxTagEnd.updateContext = function (prevType) {\n  var out = this.state.context.pop();\n\n  if (out === types$1.j_oTag && prevType === types.slash || out === types$1.j_cTag) {\n    this.state.context.pop();\n    this.state.exprAllowed = this.curContext() === types$1.j_expr;\n  } else {\n    this.state.exprAllowed = true;\n  }\n};\n\nfunction isFragment(object) {\n  return object ? object.type === \"JSXOpeningFragment\" || object.type === \"JSXClosingFragment\" : false;\n}\n\nfunction getQualifiedJSXName(object) {\n  if (object.type === \"JSXIdentifier\") {\n    return object.name;\n  }\n\n  if (object.type === \"JSXNamespacedName\") {\n    return object.namespace.name + \":\" + object.name.name;\n  }\n\n  if (object.type === \"JSXMemberExpression\") {\n    return getQualifiedJSXName(object.object) + \".\" + getQualifiedJSXName(object.property);\n  }\n\n  throw new Error(\"Node had unexpected type: \" + object.type);\n}\n\nvar jsx = function jsx(superClass) {\n  return /*#__PURE__*/function (_superClass3) {\n    _inherits(_class3, _superClass3);\n\n    var _super5 = _createSuper(_class3);\n\n    function _class3() {\n      _classCallCheck(this, _class3);\n\n      return _super5.apply(this, arguments);\n    }\n\n    _createClass(_class3, [{\n      key: \"jsxReadToken\",\n      value: function jsxReadToken() {\n        var out = \"\";\n        var chunkStart = this.state.pos;\n\n        for (;;) {\n          if (this.state.pos >= this.length) {\n            throw this.raise(this.state.start, JsxErrors.UnterminatedJsxContent);\n          }\n\n          var ch = this.input.charCodeAt(this.state.pos);\n\n          switch (ch) {\n            case 60:\n            case 123:\n              if (this.state.pos === this.state.start) {\n                if (ch === 60 && this.state.exprAllowed) {\n                  ++this.state.pos;\n                  return this.finishToken(types.jsxTagStart);\n                }\n\n                return _get(_getPrototypeOf(_class3.prototype), \"getTokenFromCode\", this).call(this, ch);\n              }\n\n              out += this.input.slice(chunkStart, this.state.pos);\n              return this.finishToken(types.jsxText, out);\n\n            case 38:\n              out += this.input.slice(chunkStart, this.state.pos);\n              out += this.jsxReadEntity();\n              chunkStart = this.state.pos;\n              break;\n\n            default:\n              if (isNewLine(ch)) {\n                out += this.input.slice(chunkStart, this.state.pos);\n                out += this.jsxReadNewLine(true);\n                chunkStart = this.state.pos;\n              } else {\n                ++this.state.pos;\n              }\n\n          }\n        }\n      }\n    }, {\n      key: \"jsxReadNewLine\",\n      value: function jsxReadNewLine(normalizeCRLF) {\n        var ch = this.input.charCodeAt(this.state.pos);\n        var out;\n        ++this.state.pos;\n\n        if (ch === 13 && this.input.charCodeAt(this.state.pos) === 10) {\n          ++this.state.pos;\n          out = normalizeCRLF ? \"\\n\" : \"\\r\\n\";\n        } else {\n          out = String.fromCharCode(ch);\n        }\n\n        ++this.state.curLine;\n        this.state.lineStart = this.state.pos;\n        return out;\n      }\n    }, {\n      key: \"jsxReadString\",\n      value: function jsxReadString(quote) {\n        var out = \"\";\n        var chunkStart = ++this.state.pos;\n\n        for (;;) {\n          if (this.state.pos >= this.length) {\n            throw this.raise(this.state.start, ErrorMessages.UnterminatedString);\n          }\n\n          var ch = this.input.charCodeAt(this.state.pos);\n          if (ch === quote) break;\n\n          if (ch === 38) {\n            out += this.input.slice(chunkStart, this.state.pos);\n            out += this.jsxReadEntity();\n            chunkStart = this.state.pos;\n          } else if (isNewLine(ch)) {\n            out += this.input.slice(chunkStart, this.state.pos);\n            out += this.jsxReadNewLine(false);\n            chunkStart = this.state.pos;\n          } else {\n            ++this.state.pos;\n          }\n        }\n\n        out += this.input.slice(chunkStart, this.state.pos++);\n        return this.finishToken(types.string, out);\n      }\n    }, {\n      key: \"jsxReadEntity\",\n      value: function jsxReadEntity() {\n        var str = \"\";\n        var count = 0;\n        var entity;\n        var ch = this.input[this.state.pos];\n        var startPos = ++this.state.pos;\n\n        while (this.state.pos < this.length && count++ < 10) {\n          ch = this.input[this.state.pos++];\n\n          if (ch === \";\") {\n            if (str[0] === \"#\") {\n              if (str[1] === \"x\") {\n                str = str.substr(2);\n\n                if (HEX_NUMBER.test(str)) {\n                  entity = String.fromCodePoint(parseInt(str, 16));\n                }\n              } else {\n                str = str.substr(1);\n\n                if (DECIMAL_NUMBER.test(str)) {\n                  entity = String.fromCodePoint(parseInt(str, 10));\n                }\n              }\n            } else {\n              entity = entities[str];\n            }\n\n            break;\n          }\n\n          str += ch;\n        }\n\n        if (!entity) {\n          this.state.pos = startPos;\n          return \"&\";\n        }\n\n        return entity;\n      }\n    }, {\n      key: \"jsxReadWord\",\n      value: function jsxReadWord() {\n        var ch;\n        var start = this.state.pos;\n\n        do {\n          ch = this.input.charCodeAt(++this.state.pos);\n        } while (isIdentifierChar(ch) || ch === 45);\n\n        return this.finishToken(types.jsxName, this.input.slice(start, this.state.pos));\n      }\n    }, {\n      key: \"jsxParseIdentifier\",\n      value: function jsxParseIdentifier() {\n        var node = this.startNode();\n\n        if (this.match(types.jsxName)) {\n          node.name = this.state.value;\n        } else if (this.state.type.keyword) {\n          node.name = this.state.type.keyword;\n        } else {\n          this.unexpected();\n        }\n\n        this.next();\n        return this.finishNode(node, \"JSXIdentifier\");\n      }\n    }, {\n      key: \"jsxParseNamespacedName\",\n      value: function jsxParseNamespacedName() {\n        var startPos = this.state.start;\n        var startLoc = this.state.startLoc;\n        var name = this.jsxParseIdentifier();\n        if (!this.eat(types.colon)) return name;\n        var node = this.startNodeAt(startPos, startLoc);\n        node.namespace = name;\n        node.name = this.jsxParseIdentifier();\n        return this.finishNode(node, \"JSXNamespacedName\");\n      }\n    }, {\n      key: \"jsxParseElementName\",\n      value: function jsxParseElementName() {\n        var startPos = this.state.start;\n        var startLoc = this.state.startLoc;\n        var node = this.jsxParseNamespacedName();\n\n        if (node.type === \"JSXNamespacedName\") {\n          return node;\n        }\n\n        while (this.eat(types.dot)) {\n          var newNode = this.startNodeAt(startPos, startLoc);\n          newNode.object = node;\n          newNode.property = this.jsxParseIdentifier();\n          node = this.finishNode(newNode, \"JSXMemberExpression\");\n        }\n\n        return node;\n      }\n    }, {\n      key: \"jsxParseAttributeValue\",\n      value: function jsxParseAttributeValue() {\n        var node;\n\n        switch (this.state.type) {\n          case types.braceL:\n            node = this.startNode();\n            this.next();\n            node = this.jsxParseExpressionContainer(node);\n\n            if (node.expression.type === \"JSXEmptyExpression\") {\n              this.raise(node.start, JsxErrors.AttributeIsEmpty);\n            }\n\n            return node;\n\n          case types.jsxTagStart:\n          case types.string:\n            return this.parseExprAtom();\n\n          default:\n            throw this.raise(this.state.start, JsxErrors.UnsupportedJsxValue);\n        }\n      }\n    }, {\n      key: \"jsxParseEmptyExpression\",\n      value: function jsxParseEmptyExpression() {\n        var node = this.startNodeAt(this.state.lastTokEnd, this.state.lastTokEndLoc);\n        return this.finishNodeAt(node, \"JSXEmptyExpression\", this.state.start, this.state.startLoc);\n      }\n    }, {\n      key: \"jsxParseSpreadChild\",\n      value: function jsxParseSpreadChild(node) {\n        this.next();\n        node.expression = this.parseExpression();\n        this.expect(types.braceR);\n        return this.finishNode(node, \"JSXSpreadChild\");\n      }\n    }, {\n      key: \"jsxParseExpressionContainer\",\n      value: function jsxParseExpressionContainer(node) {\n        if (this.match(types.braceR)) {\n          node.expression = this.jsxParseEmptyExpression();\n        } else {\n          node.expression = this.parseExpression();\n        }\n\n        this.expect(types.braceR);\n        return this.finishNode(node, \"JSXExpressionContainer\");\n      }\n    }, {\n      key: \"jsxParseAttribute\",\n      value: function jsxParseAttribute() {\n        var node = this.startNode();\n\n        if (this.eat(types.braceL)) {\n          this.expect(types.ellipsis);\n          node.argument = this.parseMaybeAssign();\n          this.expect(types.braceR);\n          return this.finishNode(node, \"JSXSpreadAttribute\");\n        }\n\n        node.name = this.jsxParseNamespacedName();\n        node.value = this.eat(types.eq) ? this.jsxParseAttributeValue() : null;\n        return this.finishNode(node, \"JSXAttribute\");\n      }\n    }, {\n      key: \"jsxParseOpeningElementAt\",\n      value: function jsxParseOpeningElementAt(startPos, startLoc) {\n        var node = this.startNodeAt(startPos, startLoc);\n\n        if (this.match(types.jsxTagEnd)) {\n          this.expect(types.jsxTagEnd);\n          return this.finishNode(node, \"JSXOpeningFragment\");\n        }\n\n        node.name = this.jsxParseElementName();\n        return this.jsxParseOpeningElementAfterName(node);\n      }\n    }, {\n      key: \"jsxParseOpeningElementAfterName\",\n      value: function jsxParseOpeningElementAfterName(node) {\n        var attributes = [];\n\n        while (!this.match(types.slash) && !this.match(types.jsxTagEnd)) {\n          attributes.push(this.jsxParseAttribute());\n        }\n\n        node.attributes = attributes;\n        node.selfClosing = this.eat(types.slash);\n        this.expect(types.jsxTagEnd);\n        return this.finishNode(node, \"JSXOpeningElement\");\n      }\n    }, {\n      key: \"jsxParseClosingElementAt\",\n      value: function jsxParseClosingElementAt(startPos, startLoc) {\n        var node = this.startNodeAt(startPos, startLoc);\n\n        if (this.match(types.jsxTagEnd)) {\n          this.expect(types.jsxTagEnd);\n          return this.finishNode(node, \"JSXClosingFragment\");\n        }\n\n        node.name = this.jsxParseElementName();\n        this.expect(types.jsxTagEnd);\n        return this.finishNode(node, \"JSXClosingElement\");\n      }\n    }, {\n      key: \"jsxParseElementAt\",\n      value: function jsxParseElementAt(startPos, startLoc) {\n        var node = this.startNodeAt(startPos, startLoc);\n        var children = [];\n        var openingElement = this.jsxParseOpeningElementAt(startPos, startLoc);\n        var closingElement = null;\n\n        if (!openingElement.selfClosing) {\n          contents: for (;;) {\n            switch (this.state.type) {\n              case types.jsxTagStart:\n                startPos = this.state.start;\n                startLoc = this.state.startLoc;\n                this.next();\n\n                if (this.eat(types.slash)) {\n                  closingElement = this.jsxParseClosingElementAt(startPos, startLoc);\n                  break contents;\n                }\n\n                children.push(this.jsxParseElementAt(startPos, startLoc));\n                break;\n\n              case types.jsxText:\n                children.push(this.parseExprAtom());\n                break;\n\n              case types.braceL:\n                {\n                  var _node5 = this.startNode();\n\n                  this.next();\n\n                  if (this.match(types.ellipsis)) {\n                    children.push(this.jsxParseSpreadChild(_node5));\n                  } else {\n                    children.push(this.jsxParseExpressionContainer(_node5));\n                  }\n\n                  break;\n                }\n\n              default:\n                throw this.unexpected();\n            }\n          }\n\n          if (isFragment(openingElement) && !isFragment(closingElement)) {\n            this.raise(closingElement.start, JsxErrors.MissingClosingTagFragment);\n          } else if (!isFragment(openingElement) && isFragment(closingElement)) {\n            this.raise(closingElement.start, JsxErrors.MissingClosingTagElement, getQualifiedJSXName(openingElement.name));\n          } else if (!isFragment(openingElement) && !isFragment(closingElement)) {\n            if (getQualifiedJSXName(closingElement.name) !== getQualifiedJSXName(openingElement.name)) {\n              this.raise(closingElement.start, JsxErrors.MissingClosingTagElement, getQualifiedJSXName(openingElement.name));\n            }\n          }\n        }\n\n        if (isFragment(openingElement)) {\n          node.openingFragment = openingElement;\n          node.closingFragment = closingElement;\n        } else {\n          node.openingElement = openingElement;\n          node.closingElement = closingElement;\n        }\n\n        node.children = children;\n\n        if (this.isRelational(\"<\")) {\n          throw this.raise(this.state.start, JsxErrors.UnwrappedAdjacentJSXElements);\n        }\n\n        return isFragment(openingElement) ? this.finishNode(node, \"JSXFragment\") : this.finishNode(node, \"JSXElement\");\n      }\n    }, {\n      key: \"jsxParseElement\",\n      value: function jsxParseElement() {\n        var startPos = this.state.start;\n        var startLoc = this.state.startLoc;\n        this.next();\n        return this.jsxParseElementAt(startPos, startLoc);\n      }\n    }, {\n      key: \"parseExprAtom\",\n      value: function parseExprAtom(refExpressionErrors) {\n        if (this.match(types.jsxText)) {\n          return this.parseLiteral(this.state.value, \"JSXText\");\n        } else if (this.match(types.jsxTagStart)) {\n          return this.jsxParseElement();\n        } else if (this.isRelational(\"<\") && this.input.charCodeAt(this.state.pos) !== 33) {\n          this.finishToken(types.jsxTagStart);\n          return this.jsxParseElement();\n        } else {\n          return _get(_getPrototypeOf(_class3.prototype), \"parseExprAtom\", this).call(this, refExpressionErrors);\n        }\n      }\n    }, {\n      key: \"getTokenFromCode\",\n      value: function getTokenFromCode(code) {\n        if (this.state.inPropertyName) return _get(_getPrototypeOf(_class3.prototype), \"getTokenFromCode\", this).call(this, code);\n        var context = this.curContext();\n\n        if (context === types$1.j_expr) {\n          return this.jsxReadToken();\n        }\n\n        if (context === types$1.j_oTag || context === types$1.j_cTag) {\n          if (isIdentifierStart(code)) {\n            return this.jsxReadWord();\n          }\n\n          if (code === 62) {\n            ++this.state.pos;\n            return this.finishToken(types.jsxTagEnd);\n          }\n\n          if ((code === 34 || code === 39) && context === types$1.j_oTag) {\n            return this.jsxReadString(code);\n          }\n        }\n\n        if (code === 60 && this.state.exprAllowed && this.input.charCodeAt(this.state.pos + 1) !== 33) {\n          ++this.state.pos;\n          return this.finishToken(types.jsxTagStart);\n        }\n\n        return _get(_getPrototypeOf(_class3.prototype), \"getTokenFromCode\", this).call(this, code);\n      }\n    }, {\n      key: \"updateContext\",\n      value: function updateContext(prevType) {\n        if (this.match(types.braceL)) {\n          var curContext = this.curContext();\n\n          if (curContext === types$1.j_oTag) {\n            this.state.context.push(types$1.braceExpression);\n          } else if (curContext === types$1.j_expr) {\n            this.state.context.push(types$1.templateQuasi);\n          } else {\n            _get(_getPrototypeOf(_class3.prototype), \"updateContext\", this).call(this, prevType);\n          }\n\n          this.state.exprAllowed = true;\n        } else if (this.match(types.slash) && prevType === types.jsxTagStart) {\n          this.state.context.length -= 2;\n          this.state.context.push(types$1.j_cTag);\n          this.state.exprAllowed = false;\n        } else {\n          return _get(_getPrototypeOf(_class3.prototype), \"updateContext\", this).call(this, prevType);\n        }\n      }\n    }]);\n\n    return _class3;\n  }(superClass);\n};\n\nvar Scope = function Scope(flags) {\n  _classCallCheck(this, Scope);\n\n  this.var = [];\n  this.lexical = [];\n  this.functions = [];\n  this.flags = flags;\n};\n\nvar ScopeHandler = /*#__PURE__*/function () {\n  function ScopeHandler(raise, inModule) {\n    _classCallCheck(this, ScopeHandler);\n\n    this.scopeStack = [];\n    this.undefinedExports = new Map();\n    this.undefinedPrivateNames = new Map();\n    this.raise = raise;\n    this.inModule = inModule;\n  }\n\n  _createClass(ScopeHandler, [{\n    key: \"createScope\",\n    value: function createScope(flags) {\n      return new Scope(flags);\n    }\n  }, {\n    key: \"enter\",\n    value: function enter(flags) {\n      this.scopeStack.push(this.createScope(flags));\n    }\n  }, {\n    key: \"exit\",\n    value: function exit() {\n      this.scopeStack.pop();\n    }\n  }, {\n    key: \"treatFunctionsAsVarInScope\",\n    value: function treatFunctionsAsVarInScope(scope) {\n      return !!(scope.flags & SCOPE_FUNCTION || !this.inModule && scope.flags & SCOPE_PROGRAM);\n    }\n  }, {\n    key: \"declareName\",\n    value: function declareName(name, bindingType, pos) {\n      var scope = this.currentScope();\n\n      if (bindingType & BIND_SCOPE_LEXICAL || bindingType & BIND_SCOPE_FUNCTION) {\n        this.checkRedeclarationInScope(scope, name, bindingType, pos);\n\n        if (bindingType & BIND_SCOPE_FUNCTION) {\n          scope.functions.push(name);\n        } else {\n          scope.lexical.push(name);\n        }\n\n        if (bindingType & BIND_SCOPE_LEXICAL) {\n          this.maybeExportDefined(scope, name);\n        }\n      } else if (bindingType & BIND_SCOPE_VAR) {\n        for (var i = this.scopeStack.length - 1; i >= 0; --i) {\n          scope = this.scopeStack[i];\n          this.checkRedeclarationInScope(scope, name, bindingType, pos);\n          scope.var.push(name);\n          this.maybeExportDefined(scope, name);\n          if (scope.flags & SCOPE_VAR) break;\n        }\n      }\n\n      if (this.inModule && scope.flags & SCOPE_PROGRAM) {\n        this.undefinedExports.delete(name);\n      }\n    }\n  }, {\n    key: \"maybeExportDefined\",\n    value: function maybeExportDefined(scope, name) {\n      if (this.inModule && scope.flags & SCOPE_PROGRAM) {\n        this.undefinedExports.delete(name);\n      }\n    }\n  }, {\n    key: \"checkRedeclarationInScope\",\n    value: function checkRedeclarationInScope(scope, name, bindingType, pos) {\n      if (this.isRedeclaredInScope(scope, name, bindingType)) {\n        this.raise(pos, ErrorMessages.VarRedeclaration, name);\n      }\n    }\n  }, {\n    key: \"isRedeclaredInScope\",\n    value: function isRedeclaredInScope(scope, name, bindingType) {\n      if (!(bindingType & BIND_KIND_VALUE)) return false;\n\n      if (bindingType & BIND_SCOPE_LEXICAL) {\n        return scope.lexical.indexOf(name) > -1 || scope.functions.indexOf(name) > -1 || scope.var.indexOf(name) > -1;\n      }\n\n      if (bindingType & BIND_SCOPE_FUNCTION) {\n        return scope.lexical.indexOf(name) > -1 || !this.treatFunctionsAsVarInScope(scope) && scope.var.indexOf(name) > -1;\n      }\n\n      return scope.lexical.indexOf(name) > -1 && !(scope.flags & SCOPE_SIMPLE_CATCH && scope.lexical[0] === name) || !this.treatFunctionsAsVarInScope(scope) && scope.functions.indexOf(name) > -1;\n    }\n  }, {\n    key: \"checkLocalExport\",\n    value: function checkLocalExport(id) {\n      if (this.scopeStack[0].lexical.indexOf(id.name) === -1 && this.scopeStack[0].var.indexOf(id.name) === -1 && this.scopeStack[0].functions.indexOf(id.name) === -1) {\n        this.undefinedExports.set(id.name, id.start);\n      }\n    }\n  }, {\n    key: \"currentScope\",\n    value: function currentScope() {\n      return this.scopeStack[this.scopeStack.length - 1];\n    }\n  }, {\n    key: \"currentVarScope\",\n    value: function currentVarScope() {\n      for (var i = this.scopeStack.length - 1;; i--) {\n        var scope = this.scopeStack[i];\n\n        if (scope.flags & SCOPE_VAR) {\n          return scope;\n        }\n      }\n    }\n  }, {\n    key: \"currentThisScope\",\n    value: function currentThisScope() {\n      for (var i = this.scopeStack.length - 1;; i--) {\n        var scope = this.scopeStack[i];\n\n        if ((scope.flags & SCOPE_VAR || scope.flags & SCOPE_CLASS) && !(scope.flags & SCOPE_ARROW)) {\n          return scope;\n        }\n      }\n    }\n  }, {\n    key: \"inFunction\",\n    get: function get() {\n      return (this.currentVarScope().flags & SCOPE_FUNCTION) > 0;\n    }\n  }, {\n    key: \"allowSuper\",\n    get: function get() {\n      return (this.currentThisScope().flags & SCOPE_SUPER) > 0;\n    }\n  }, {\n    key: \"allowDirectSuper\",\n    get: function get() {\n      return (this.currentThisScope().flags & SCOPE_DIRECT_SUPER) > 0;\n    }\n  }, {\n    key: \"inClass\",\n    get: function get() {\n      return (this.currentThisScope().flags & SCOPE_CLASS) > 0;\n    }\n  }, {\n    key: \"inNonArrowFunction\",\n    get: function get() {\n      return (this.currentThisScope().flags & SCOPE_FUNCTION) > 0;\n    }\n  }, {\n    key: \"treatFunctionsAsVar\",\n    get: function get() {\n      return this.treatFunctionsAsVarInScope(this.currentScope());\n    }\n  }]);\n\n  return ScopeHandler;\n}();\n\nvar TypeScriptScope = /*#__PURE__*/function (_Scope) {\n  _inherits(TypeScriptScope, _Scope);\n\n  var _super6 = _createSuper(TypeScriptScope);\n\n  function TypeScriptScope() {\n    var _this16;\n\n    _classCallCheck(this, TypeScriptScope);\n\n    for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n      args[_key4] = arguments[_key4];\n    }\n\n    _this16 = _super6.call.apply(_super6, [this].concat(args));\n    _this16.types = [];\n    _this16.enums = [];\n    _this16.constEnums = [];\n    _this16.classes = [];\n    _this16.exportOnlyBindings = [];\n    return _this16;\n  }\n\n  return TypeScriptScope;\n}(Scope);\n\nvar TypeScriptScopeHandler = /*#__PURE__*/function (_ScopeHandler) {\n  _inherits(TypeScriptScopeHandler, _ScopeHandler);\n\n  var _super7 = _createSuper(TypeScriptScopeHandler);\n\n  function TypeScriptScopeHandler() {\n    _classCallCheck(this, TypeScriptScopeHandler);\n\n    return _super7.apply(this, arguments);\n  }\n\n  _createClass(TypeScriptScopeHandler, [{\n    key: \"createScope\",\n    value: function createScope(flags) {\n      return new TypeScriptScope(flags);\n    }\n  }, {\n    key: \"declareName\",\n    value: function declareName(name, bindingType, pos) {\n      var scope = this.currentScope();\n\n      if (bindingType & BIND_FLAGS_TS_EXPORT_ONLY) {\n        this.maybeExportDefined(scope, name);\n        scope.exportOnlyBindings.push(name);\n        return;\n      }\n\n      _get(_getPrototypeOf(TypeScriptScopeHandler.prototype), \"declareName\", this).apply(this, arguments);\n\n      if (bindingType & BIND_KIND_TYPE) {\n        if (!(bindingType & BIND_KIND_VALUE)) {\n          this.checkRedeclarationInScope(scope, name, bindingType, pos);\n          this.maybeExportDefined(scope, name);\n        }\n\n        scope.types.push(name);\n      }\n\n      if (bindingType & BIND_FLAGS_TS_ENUM) scope.enums.push(name);\n      if (bindingType & BIND_FLAGS_TS_CONST_ENUM) scope.constEnums.push(name);\n      if (bindingType & BIND_FLAGS_CLASS) scope.classes.push(name);\n    }\n  }, {\n    key: \"isRedeclaredInScope\",\n    value: function isRedeclaredInScope(scope, name, bindingType) {\n      if (scope.enums.indexOf(name) > -1) {\n        if (bindingType & BIND_FLAGS_TS_ENUM) {\n          var isConst = !!(bindingType & BIND_FLAGS_TS_CONST_ENUM);\n          var wasConst = scope.constEnums.indexOf(name) > -1;\n          return isConst !== wasConst;\n        }\n\n        return true;\n      }\n\n      if (bindingType & BIND_FLAGS_CLASS && scope.classes.indexOf(name) > -1) {\n        if (scope.lexical.indexOf(name) > -1) {\n          return !!(bindingType & BIND_KIND_VALUE);\n        } else {\n          return false;\n        }\n      }\n\n      if (bindingType & BIND_KIND_TYPE && scope.types.indexOf(name) > -1) {\n        return true;\n      }\n\n      return _get(_getPrototypeOf(TypeScriptScopeHandler.prototype), \"isRedeclaredInScope\", this).apply(this, arguments);\n    }\n  }, {\n    key: \"checkLocalExport\",\n    value: function checkLocalExport(id) {\n      if (this.scopeStack[0].types.indexOf(id.name) === -1 && this.scopeStack[0].exportOnlyBindings.indexOf(id.name) === -1) {\n        _get(_getPrototypeOf(TypeScriptScopeHandler.prototype), \"checkLocalExport\", this).call(this, id);\n      }\n    }\n  }]);\n\n  return TypeScriptScopeHandler;\n}(ScopeHandler);\n\nvar PARAM = 0,\n    PARAM_YIELD = 1,\n    PARAM_AWAIT = 2,\n    PARAM_RETURN = 4;\n\nvar ProductionParameterHandler = /*#__PURE__*/function () {\n  function ProductionParameterHandler() {\n    _classCallCheck(this, ProductionParameterHandler);\n\n    this.stacks = [];\n  }\n\n  _createClass(ProductionParameterHandler, [{\n    key: \"enter\",\n    value: function enter(flags) {\n      this.stacks.push(flags);\n    }\n  }, {\n    key: \"exit\",\n    value: function exit() {\n      this.stacks.pop();\n    }\n  }, {\n    key: \"currentFlags\",\n    value: function currentFlags() {\n      return this.stacks[this.stacks.length - 1];\n    }\n  }, {\n    key: \"hasAwait\",\n    get: function get() {\n      return (this.currentFlags() & PARAM_AWAIT) > 0;\n    }\n  }, {\n    key: \"hasYield\",\n    get: function get() {\n      return (this.currentFlags() & PARAM_YIELD) > 0;\n    }\n  }, {\n    key: \"hasReturn\",\n    get: function get() {\n      return (this.currentFlags() & PARAM_RETURN) > 0;\n    }\n  }]);\n\n  return ProductionParameterHandler;\n}();\n\nfunction functionFlags(isAsync, isGenerator) {\n  return (isAsync ? PARAM_AWAIT : 0) | (isGenerator ? PARAM_YIELD : 0);\n}\n\nfunction nonNull(x) {\n  if (x == null) {\n    throw new Error(\"Unexpected \".concat(x, \" value.\"));\n  }\n\n  return x;\n}\n\nfunction assert(x) {\n  if (!x) {\n    throw new Error(\"Assert fail\");\n  }\n}\n\nvar TSErrors = Object.freeze({\n  ClassMethodHasDeclare: \"Class methods cannot have the 'declare' modifier\",\n  ClassMethodHasReadonly: \"Class methods cannot have the 'readonly' modifier\",\n  DeclareClassFieldHasInitializer: \"'declare' class fields cannot have an initializer\",\n  DuplicateModifier: \"Duplicate modifier: '%0'\",\n  EmptyHeritageClauseType: \"'%0' list cannot be empty.\",\n  IndexSignatureHasAbstract: \"Index signatures cannot have the 'abstract' modifier\",\n  IndexSignatureHasAccessibility: \"Index signatures cannot have an accessibility modifier ('%0')\",\n  IndexSignatureHasStatic: \"Index signatures cannot have the 'static' modifier\",\n  OptionalTypeBeforeRequired: \"A required element cannot follow an optional element.\",\n  PatternIsOptional: \"A binding pattern parameter cannot be optional in an implementation signature.\",\n  PrivateElementHasAbstract: \"Private elements cannot have the 'abstract' modifier.\",\n  PrivateElementHasAccessibility: \"Private elements cannot have an accessibility modifier ('%0')\",\n  TemplateTypeHasSubstitution: \"Template literal types cannot have any substitution\",\n  TypeAnnotationAfterAssign: \"Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`\",\n  UnexpectedReadonly: \"'readonly' type modifier is only permitted on array and tuple literal types.\",\n  UnexpectedTypeAnnotation: \"Did not expect a type annotation here.\",\n  UnexpectedTypeCastInParameter: \"Unexpected type cast in parameter position.\",\n  UnsupportedImportTypeArgument: \"Argument in a type import must be a string literal\",\n  UnsupportedParameterPropertyKind: \"A parameter property may not be declared using a binding pattern.\",\n  UnsupportedSignatureParameterKind: \"Name in a signature must be an Identifier, ObjectPattern or ArrayPattern, instead got %0\"\n});\n\nfunction keywordTypeFromName(value) {\n  switch (value) {\n    case \"any\":\n      return \"TSAnyKeyword\";\n\n    case \"boolean\":\n      return \"TSBooleanKeyword\";\n\n    case \"bigint\":\n      return \"TSBigIntKeyword\";\n\n    case \"never\":\n      return \"TSNeverKeyword\";\n\n    case \"number\":\n      return \"TSNumberKeyword\";\n\n    case \"object\":\n      return \"TSObjectKeyword\";\n\n    case \"string\":\n      return \"TSStringKeyword\";\n\n    case \"symbol\":\n      return \"TSSymbolKeyword\";\n\n    case \"undefined\":\n      return \"TSUndefinedKeyword\";\n\n    case \"unknown\":\n      return \"TSUnknownKeyword\";\n\n    default:\n      return undefined;\n  }\n}\n\nvar typescript = function typescript(superClass) {\n  return /*#__PURE__*/function (_superClass4) {\n    _inherits(_class4, _superClass4);\n\n    var _super8 = _createSuper(_class4);\n\n    function _class4() {\n      _classCallCheck(this, _class4);\n\n      return _super8.apply(this, arguments);\n    }\n\n    _createClass(_class4, [{\n      key: \"getScopeHandler\",\n      value: function getScopeHandler() {\n        return TypeScriptScopeHandler;\n      }\n    }, {\n      key: \"tsIsIdentifier\",\n      value: function tsIsIdentifier() {\n        return this.match(types.name);\n      }\n    }, {\n      key: \"tsNextTokenCanFollowModifier\",\n      value: function tsNextTokenCanFollowModifier() {\n        this.next();\n        return !this.hasPrecedingLineBreak() && !this.match(types.parenL) && !this.match(types.parenR) && !this.match(types.colon) && !this.match(types.eq) && !this.match(types.question) && !this.match(types.bang);\n      }\n    }, {\n      key: \"tsParseModifier\",\n      value: function tsParseModifier(allowedModifiers) {\n        if (!this.match(types.name)) {\n          return undefined;\n        }\n\n        var modifier = this.state.value;\n\n        if (allowedModifiers.indexOf(modifier) !== -1 && this.tsTryParse(this.tsNextTokenCanFollowModifier.bind(this))) {\n          return modifier;\n        }\n\n        return undefined;\n      }\n    }, {\n      key: \"tsParseModifiers\",\n      value: function tsParseModifiers(modified, allowedModifiers) {\n        for (;;) {\n          var startPos = this.state.start;\n          var modifier = this.tsParseModifier(allowedModifiers);\n          if (!modifier) break;\n\n          if (Object.hasOwnProperty.call(modified, modifier)) {\n            this.raise(startPos, TSErrors.DuplicateModifier, modifier);\n          }\n\n          modified[modifier] = true;\n        }\n      }\n    }, {\n      key: \"tsIsListTerminator\",\n      value: function tsIsListTerminator(kind) {\n        switch (kind) {\n          case \"EnumMembers\":\n          case \"TypeMembers\":\n            return this.match(types.braceR);\n\n          case \"HeritageClauseElement\":\n            return this.match(types.braceL);\n\n          case \"TupleElementTypes\":\n            return this.match(types.bracketR);\n\n          case \"TypeParametersOrArguments\":\n            return this.isRelational(\">\");\n        }\n\n        throw new Error(\"Unreachable\");\n      }\n    }, {\n      key: \"tsParseList\",\n      value: function tsParseList(kind, parseElement) {\n        var result = [];\n\n        while (!this.tsIsListTerminator(kind)) {\n          result.push(parseElement());\n        }\n\n        return result;\n      }\n    }, {\n      key: \"tsParseDelimitedList\",\n      value: function tsParseDelimitedList(kind, parseElement) {\n        return nonNull(this.tsParseDelimitedListWorker(kind, parseElement, true));\n      }\n    }, {\n      key: \"tsParseDelimitedListWorker\",\n      value: function tsParseDelimitedListWorker(kind, parseElement, expectSuccess) {\n        var result = [];\n\n        for (;;) {\n          if (this.tsIsListTerminator(kind)) {\n            break;\n          }\n\n          var element = parseElement();\n\n          if (element == null) {\n            return undefined;\n          }\n\n          result.push(element);\n\n          if (this.eat(types.comma)) {\n            continue;\n          }\n\n          if (this.tsIsListTerminator(kind)) {\n            break;\n          }\n\n          if (expectSuccess) {\n            this.expect(types.comma);\n          }\n\n          return undefined;\n        }\n\n        return result;\n      }\n    }, {\n      key: \"tsParseBracketedList\",\n      value: function tsParseBracketedList(kind, parseElement, bracket, skipFirstToken) {\n        if (!skipFirstToken) {\n          if (bracket) {\n            this.expect(types.bracketL);\n          } else {\n            this.expectRelational(\"<\");\n          }\n        }\n\n        var result = this.tsParseDelimitedList(kind, parseElement);\n\n        if (bracket) {\n          this.expect(types.bracketR);\n        } else {\n          this.expectRelational(\">\");\n        }\n\n        return result;\n      }\n    }, {\n      key: \"tsParseImportType\",\n      value: function tsParseImportType() {\n        var node = this.startNode();\n        this.expect(types._import);\n        this.expect(types.parenL);\n\n        if (!this.match(types.string)) {\n          this.raise(this.state.start, TSErrors.UnsupportedImportTypeArgument);\n        }\n\n        node.argument = this.parseExprAtom();\n        this.expect(types.parenR);\n\n        if (this.eat(types.dot)) {\n          node.qualifier = this.tsParseEntityName(true);\n        }\n\n        if (this.isRelational(\"<\")) {\n          node.typeParameters = this.tsParseTypeArguments();\n        }\n\n        return this.finishNode(node, \"TSImportType\");\n      }\n    }, {\n      key: \"tsParseEntityName\",\n      value: function tsParseEntityName(allowReservedWords) {\n        var entity = this.parseIdentifier();\n\n        while (this.eat(types.dot)) {\n          var node = this.startNodeAtNode(entity);\n          node.left = entity;\n          node.right = this.parseIdentifier(allowReservedWords);\n          entity = this.finishNode(node, \"TSQualifiedName\");\n        }\n\n        return entity;\n      }\n    }, {\n      key: \"tsParseTypeReference\",\n      value: function tsParseTypeReference() {\n        var node = this.startNode();\n        node.typeName = this.tsParseEntityName(false);\n\n        if (!this.hasPrecedingLineBreak() && this.isRelational(\"<\")) {\n          node.typeParameters = this.tsParseTypeArguments();\n        }\n\n        return this.finishNode(node, \"TSTypeReference\");\n      }\n    }, {\n      key: \"tsParseThisTypePredicate\",\n      value: function tsParseThisTypePredicate(lhs) {\n        this.next();\n        var node = this.startNodeAtNode(lhs);\n        node.parameterName = lhs;\n        node.typeAnnotation = this.tsParseTypeAnnotation(false);\n        return this.finishNode(node, \"TSTypePredicate\");\n      }\n    }, {\n      key: \"tsParseThisTypeNode\",\n      value: function tsParseThisTypeNode() {\n        var node = this.startNode();\n        this.next();\n        return this.finishNode(node, \"TSThisType\");\n      }\n    }, {\n      key: \"tsParseTypeQuery\",\n      value: function tsParseTypeQuery() {\n        var node = this.startNode();\n        this.expect(types._typeof);\n\n        if (this.match(types._import)) {\n          node.exprName = this.tsParseImportType();\n        } else {\n          node.exprName = this.tsParseEntityName(true);\n        }\n\n        return this.finishNode(node, \"TSTypeQuery\");\n      }\n    }, {\n      key: \"tsParseTypeParameter\",\n      value: function tsParseTypeParameter() {\n        var node = this.startNode();\n        node.name = this.parseIdentifierName(node.start);\n        node.constraint = this.tsEatThenParseType(types._extends);\n        node.default = this.tsEatThenParseType(types.eq);\n        return this.finishNode(node, \"TSTypeParameter\");\n      }\n    }, {\n      key: \"tsTryParseTypeParameters\",\n      value: function tsTryParseTypeParameters() {\n        if (this.isRelational(\"<\")) {\n          return this.tsParseTypeParameters();\n        }\n      }\n    }, {\n      key: \"tsParseTypeParameters\",\n      value: function tsParseTypeParameters() {\n        var node = this.startNode();\n\n        if (this.isRelational(\"<\") || this.match(types.jsxTagStart)) {\n          this.next();\n        } else {\n          this.unexpected();\n        }\n\n        node.params = this.tsParseBracketedList(\"TypeParametersOrArguments\", this.tsParseTypeParameter.bind(this), false, true);\n        return this.finishNode(node, \"TSTypeParameterDeclaration\");\n      }\n    }, {\n      key: \"tsTryNextParseConstantContext\",\n      value: function tsTryNextParseConstantContext() {\n        if (this.lookahead().type === types._const) {\n          this.next();\n          return this.tsParseTypeReference();\n        }\n\n        return null;\n      }\n    }, {\n      key: \"tsFillSignature\",\n      value: function tsFillSignature(returnToken, signature) {\n        var returnTokenRequired = returnToken === types.arrow;\n        signature.typeParameters = this.tsTryParseTypeParameters();\n        this.expect(types.parenL);\n        signature.parameters = this.tsParseBindingListForSignature();\n\n        if (returnTokenRequired) {\n          signature.typeAnnotation = this.tsParseTypeOrTypePredicateAnnotation(returnToken);\n        } else if (this.match(returnToken)) {\n          signature.typeAnnotation = this.tsParseTypeOrTypePredicateAnnotation(returnToken);\n        }\n      }\n    }, {\n      key: \"tsParseBindingListForSignature\",\n      value: function tsParseBindingListForSignature() {\n        var _this17 = this;\n\n        return this.parseBindingList(types.parenR, 41).map(function (pattern) {\n          if (pattern.type !== \"Identifier\" && pattern.type !== \"RestElement\" && pattern.type !== \"ObjectPattern\" && pattern.type !== \"ArrayPattern\") {\n            _this17.raise(pattern.start, TSErrors.UnsupportedSignatureParameterKind, pattern.type);\n          }\n\n          return pattern;\n        });\n      }\n    }, {\n      key: \"tsParseTypeMemberSemicolon\",\n      value: function tsParseTypeMemberSemicolon() {\n        if (!this.eat(types.comma)) {\n          this.semicolon();\n        }\n      }\n    }, {\n      key: \"tsParseSignatureMember\",\n      value: function tsParseSignatureMember(kind, node) {\n        this.tsFillSignature(types.colon, node);\n        this.tsParseTypeMemberSemicolon();\n        return this.finishNode(node, kind);\n      }\n    }, {\n      key: \"tsIsUnambiguouslyIndexSignature\",\n      value: function tsIsUnambiguouslyIndexSignature() {\n        this.next();\n        return this.eat(types.name) && this.match(types.colon);\n      }\n    }, {\n      key: \"tsTryParseIndexSignature\",\n      value: function tsTryParseIndexSignature(node) {\n        if (!(this.match(types.bracketL) && this.tsLookAhead(this.tsIsUnambiguouslyIndexSignature.bind(this)))) {\n          return undefined;\n        }\n\n        this.expect(types.bracketL);\n        var id = this.parseIdentifier();\n        id.typeAnnotation = this.tsParseTypeAnnotation();\n        this.resetEndLocation(id);\n        this.expect(types.bracketR);\n        node.parameters = [id];\n        var type = this.tsTryParseTypeAnnotation();\n        if (type) node.typeAnnotation = type;\n        this.tsParseTypeMemberSemicolon();\n        return this.finishNode(node, \"TSIndexSignature\");\n      }\n    }, {\n      key: \"tsParsePropertyOrMethodSignature\",\n      value: function tsParsePropertyOrMethodSignature(node, readonly) {\n        if (this.eat(types.question)) node.optional = true;\n        var nodeAny = node;\n\n        if (!readonly && (this.match(types.parenL) || this.isRelational(\"<\"))) {\n          var method = nodeAny;\n          this.tsFillSignature(types.colon, method);\n          this.tsParseTypeMemberSemicolon();\n          return this.finishNode(method, \"TSMethodSignature\");\n        } else {\n          var property = nodeAny;\n          if (readonly) property.readonly = true;\n          var type = this.tsTryParseTypeAnnotation();\n          if (type) property.typeAnnotation = type;\n          this.tsParseTypeMemberSemicolon();\n          return this.finishNode(property, \"TSPropertySignature\");\n        }\n      }\n    }, {\n      key: \"tsParseTypeMember\",\n      value: function tsParseTypeMember() {\n        var node = this.startNode();\n\n        if (this.match(types.parenL) || this.isRelational(\"<\")) {\n          return this.tsParseSignatureMember(\"TSCallSignatureDeclaration\", node);\n        }\n\n        if (this.match(types._new)) {\n          var id = this.startNode();\n          this.next();\n\n          if (this.match(types.parenL) || this.isRelational(\"<\")) {\n            return this.tsParseSignatureMember(\"TSConstructSignatureDeclaration\", node);\n          } else {\n            node.key = this.createIdentifier(id, \"new\");\n            return this.tsParsePropertyOrMethodSignature(node, false);\n          }\n        }\n\n        var readonly = !!this.tsParseModifier([\"readonly\"]);\n        var idx = this.tsTryParseIndexSignature(node);\n\n        if (idx) {\n          if (readonly) node.readonly = true;\n          return idx;\n        }\n\n        this.parsePropertyName(node, false);\n        return this.tsParsePropertyOrMethodSignature(node, readonly);\n      }\n    }, {\n      key: \"tsParseTypeLiteral\",\n      value: function tsParseTypeLiteral() {\n        var node = this.startNode();\n        node.members = this.tsParseObjectTypeMembers();\n        return this.finishNode(node, \"TSTypeLiteral\");\n      }\n    }, {\n      key: \"tsParseObjectTypeMembers\",\n      value: function tsParseObjectTypeMembers() {\n        this.expect(types.braceL);\n        var members = this.tsParseList(\"TypeMembers\", this.tsParseTypeMember.bind(this));\n        this.expect(types.braceR);\n        return members;\n      }\n    }, {\n      key: \"tsIsStartOfMappedType\",\n      value: function tsIsStartOfMappedType() {\n        this.next();\n\n        if (this.eat(types.plusMin)) {\n          return this.isContextual(\"readonly\");\n        }\n\n        if (this.isContextual(\"readonly\")) {\n          this.next();\n        }\n\n        if (!this.match(types.bracketL)) {\n          return false;\n        }\n\n        this.next();\n\n        if (!this.tsIsIdentifier()) {\n          return false;\n        }\n\n        this.next();\n        return this.match(types._in);\n      }\n    }, {\n      key: \"tsParseMappedTypeParameter\",\n      value: function tsParseMappedTypeParameter() {\n        var node = this.startNode();\n        node.name = this.parseIdentifierName(node.start);\n        node.constraint = this.tsExpectThenParseType(types._in);\n        return this.finishNode(node, \"TSTypeParameter\");\n      }\n    }, {\n      key: \"tsParseMappedType\",\n      value: function tsParseMappedType() {\n        var node = this.startNode();\n        this.expect(types.braceL);\n\n        if (this.match(types.plusMin)) {\n          node.readonly = this.state.value;\n          this.next();\n          this.expectContextual(\"readonly\");\n        } else if (this.eatContextual(\"readonly\")) {\n          node.readonly = true;\n        }\n\n        this.expect(types.bracketL);\n        node.typeParameter = this.tsParseMappedTypeParameter();\n        this.expect(types.bracketR);\n\n        if (this.match(types.plusMin)) {\n          node.optional = this.state.value;\n          this.next();\n          this.expect(types.question);\n        } else if (this.eat(types.question)) {\n          node.optional = true;\n        }\n\n        node.typeAnnotation = this.tsTryParseType();\n        this.semicolon();\n        this.expect(types.braceR);\n        return this.finishNode(node, \"TSMappedType\");\n      }\n    }, {\n      key: \"tsParseTupleType\",\n      value: function tsParseTupleType() {\n        var _this18 = this;\n\n        var node = this.startNode();\n        node.elementTypes = this.tsParseBracketedList(\"TupleElementTypes\", this.tsParseTupleElementType.bind(this), true, false);\n        var seenOptionalElement = false;\n        node.elementTypes.forEach(function (elementNode) {\n          if (elementNode.type === \"TSOptionalType\") {\n            seenOptionalElement = true;\n          } else if (seenOptionalElement && elementNode.type !== \"TSRestType\") {\n            _this18.raise(elementNode.start, TSErrors.OptionalTypeBeforeRequired);\n          }\n        });\n        return this.finishNode(node, \"TSTupleType\");\n      }\n    }, {\n      key: \"tsParseTupleElementType\",\n      value: function tsParseTupleElementType() {\n        if (this.match(types.ellipsis)) {\n          var restNode = this.startNode();\n          this.next();\n          restNode.typeAnnotation = this.tsParseType();\n\n          if (this.match(types.comma) && this.lookaheadCharCode() !== 93) {\n            this.raiseRestNotLast(this.state.start);\n          }\n\n          return this.finishNode(restNode, \"TSRestType\");\n        }\n\n        var type = this.tsParseType();\n\n        if (this.eat(types.question)) {\n          var optionalTypeNode = this.startNodeAtNode(type);\n          optionalTypeNode.typeAnnotation = type;\n          return this.finishNode(optionalTypeNode, \"TSOptionalType\");\n        }\n\n        return type;\n      }\n    }, {\n      key: \"tsParseParenthesizedType\",\n      value: function tsParseParenthesizedType() {\n        var node = this.startNode();\n        this.expect(types.parenL);\n        node.typeAnnotation = this.tsParseType();\n        this.expect(types.parenR);\n        return this.finishNode(node, \"TSParenthesizedType\");\n      }\n    }, {\n      key: \"tsParseFunctionOrConstructorType\",\n      value: function tsParseFunctionOrConstructorType(type) {\n        var node = this.startNode();\n\n        if (type === \"TSConstructorType\") {\n          this.expect(types._new);\n        }\n\n        this.tsFillSignature(types.arrow, node);\n        return this.finishNode(node, type);\n      }\n    }, {\n      key: \"tsParseLiteralTypeNode\",\n      value: function tsParseLiteralTypeNode() {\n        var _this19 = this;\n\n        var node = this.startNode();\n\n        node.literal = function () {\n          switch (_this19.state.type) {\n            case types.num:\n            case types.bigint:\n            case types.string:\n            case types._true:\n            case types._false:\n              return _this19.parseExprAtom();\n\n            default:\n              throw _this19.unexpected();\n          }\n        }();\n\n        return this.finishNode(node, \"TSLiteralType\");\n      }\n    }, {\n      key: \"tsParseTemplateLiteralType\",\n      value: function tsParseTemplateLiteralType() {\n        var node = this.startNode();\n        var templateNode = this.parseTemplate(false);\n\n        if (templateNode.expressions.length > 0) {\n          this.raise(templateNode.expressions[0].start, TSErrors.TemplateTypeHasSubstitution);\n        }\n\n        node.literal = templateNode;\n        return this.finishNode(node, \"TSLiteralType\");\n      }\n    }, {\n      key: \"tsParseThisTypeOrThisTypePredicate\",\n      value: function tsParseThisTypeOrThisTypePredicate() {\n        var thisKeyword = this.tsParseThisTypeNode();\n\n        if (this.isContextual(\"is\") && !this.hasPrecedingLineBreak()) {\n          return this.tsParseThisTypePredicate(thisKeyword);\n        } else {\n          return thisKeyword;\n        }\n      }\n    }, {\n      key: \"tsParseNonArrayType\",\n      value: function tsParseNonArrayType() {\n        switch (this.state.type) {\n          case types.name:\n          case types._void:\n          case types._null:\n            {\n              var type = this.match(types._void) ? \"TSVoidKeyword\" : this.match(types._null) ? \"TSNullKeyword\" : keywordTypeFromName(this.state.value);\n\n              if (type !== undefined && this.lookaheadCharCode() !== 46) {\n                var node = this.startNode();\n                this.next();\n                return this.finishNode(node, type);\n              }\n\n              return this.tsParseTypeReference();\n            }\n\n          case types.string:\n          case types.num:\n          case types.bigint:\n          case types._true:\n          case types._false:\n            return this.tsParseLiteralTypeNode();\n\n          case types.plusMin:\n            if (this.state.value === \"-\") {\n              var _node6 = this.startNode();\n\n              var nextToken = this.lookahead();\n\n              if (nextToken.type !== types.num && nextToken.type !== types.bigint) {\n                throw this.unexpected();\n              }\n\n              _node6.literal = this.parseMaybeUnary();\n              return this.finishNode(_node6, \"TSLiteralType\");\n            }\n\n            break;\n\n          case types._this:\n            return this.tsParseThisTypeOrThisTypePredicate();\n\n          case types._typeof:\n            return this.tsParseTypeQuery();\n\n          case types._import:\n            return this.tsParseImportType();\n\n          case types.braceL:\n            return this.tsLookAhead(this.tsIsStartOfMappedType.bind(this)) ? this.tsParseMappedType() : this.tsParseTypeLiteral();\n\n          case types.bracketL:\n            return this.tsParseTupleType();\n\n          case types.parenL:\n            return this.tsParseParenthesizedType();\n\n          case types.backQuote:\n            return this.tsParseTemplateLiteralType();\n        }\n\n        throw this.unexpected();\n      }\n    }, {\n      key: \"tsParseArrayTypeOrHigher\",\n      value: function tsParseArrayTypeOrHigher() {\n        var type = this.tsParseNonArrayType();\n\n        while (!this.hasPrecedingLineBreak() && this.eat(types.bracketL)) {\n          if (this.match(types.bracketR)) {\n            var node = this.startNodeAtNode(type);\n            node.elementType = type;\n            this.expect(types.bracketR);\n            type = this.finishNode(node, \"TSArrayType\");\n          } else {\n            var _node7 = this.startNodeAtNode(type);\n\n            _node7.objectType = type;\n            _node7.indexType = this.tsParseType();\n            this.expect(types.bracketR);\n            type = this.finishNode(_node7, \"TSIndexedAccessType\");\n          }\n        }\n\n        return type;\n      }\n    }, {\n      key: \"tsParseTypeOperator\",\n      value: function tsParseTypeOperator(operator) {\n        var node = this.startNode();\n        this.expectContextual(operator);\n        node.operator = operator;\n        node.typeAnnotation = this.tsParseTypeOperatorOrHigher();\n\n        if (operator === \"readonly\") {\n          this.tsCheckTypeAnnotationForReadOnly(node);\n        }\n\n        return this.finishNode(node, \"TSTypeOperator\");\n      }\n    }, {\n      key: \"tsCheckTypeAnnotationForReadOnly\",\n      value: function tsCheckTypeAnnotationForReadOnly(node) {\n        switch (node.typeAnnotation.type) {\n          case \"TSTupleType\":\n          case \"TSArrayType\":\n            return;\n\n          default:\n            this.raise(node.start, TSErrors.UnexpectedReadonly);\n        }\n      }\n    }, {\n      key: \"tsParseInferType\",\n      value: function tsParseInferType() {\n        var node = this.startNode();\n        this.expectContextual(\"infer\");\n        var typeParameter = this.startNode();\n        typeParameter.name = this.parseIdentifierName(typeParameter.start);\n        node.typeParameter = this.finishNode(typeParameter, \"TSTypeParameter\");\n        return this.finishNode(node, \"TSInferType\");\n      }\n    }, {\n      key: \"tsParseTypeOperatorOrHigher\",\n      value: function tsParseTypeOperatorOrHigher() {\n        var _this20 = this;\n\n        var operator = [\"keyof\", \"unique\", \"readonly\"].find(function (kw) {\n          return _this20.isContextual(kw);\n        });\n        return operator ? this.tsParseTypeOperator(operator) : this.isContextual(\"infer\") ? this.tsParseInferType() : this.tsParseArrayTypeOrHigher();\n      }\n    }, {\n      key: \"tsParseUnionOrIntersectionType\",\n      value: function tsParseUnionOrIntersectionType(kind, parseConstituentType, operator) {\n        this.eat(operator);\n        var type = parseConstituentType();\n\n        if (this.match(operator)) {\n          var _types = [type];\n\n          while (this.eat(operator)) {\n            _types.push(parseConstituentType());\n          }\n\n          var node = this.startNodeAtNode(type);\n          node.types = _types;\n          type = this.finishNode(node, kind);\n        }\n\n        return type;\n      }\n    }, {\n      key: \"tsParseIntersectionTypeOrHigher\",\n      value: function tsParseIntersectionTypeOrHigher() {\n        return this.tsParseUnionOrIntersectionType(\"TSIntersectionType\", this.tsParseTypeOperatorOrHigher.bind(this), types.bitwiseAND);\n      }\n    }, {\n      key: \"tsParseUnionTypeOrHigher\",\n      value: function tsParseUnionTypeOrHigher() {\n        return this.tsParseUnionOrIntersectionType(\"TSUnionType\", this.tsParseIntersectionTypeOrHigher.bind(this), types.bitwiseOR);\n      }\n    }, {\n      key: \"tsIsStartOfFunctionType\",\n      value: function tsIsStartOfFunctionType() {\n        if (this.isRelational(\"<\")) {\n          return true;\n        }\n\n        return this.match(types.parenL) && this.tsLookAhead(this.tsIsUnambiguouslyStartOfFunctionType.bind(this));\n      }\n    }, {\n      key: \"tsSkipParameterStart\",\n      value: function tsSkipParameterStart() {\n        if (this.match(types.name) || this.match(types._this)) {\n          this.next();\n          return true;\n        }\n\n        if (this.match(types.braceL)) {\n          var braceStackCounter = 1;\n          this.next();\n\n          while (braceStackCounter > 0) {\n            if (this.match(types.braceL)) {\n              ++braceStackCounter;\n            } else if (this.match(types.braceR)) {\n              --braceStackCounter;\n            }\n\n            this.next();\n          }\n\n          return true;\n        }\n\n        if (this.match(types.bracketL)) {\n          var _braceStackCounter = 1;\n          this.next();\n\n          while (_braceStackCounter > 0) {\n            if (this.match(types.bracketL)) {\n              ++_braceStackCounter;\n            } else if (this.match(types.bracketR)) {\n              --_braceStackCounter;\n            }\n\n            this.next();\n          }\n\n          return true;\n        }\n\n        return false;\n      }\n    }, {\n      key: \"tsIsUnambiguouslyStartOfFunctionType\",\n      value: function tsIsUnambiguouslyStartOfFunctionType() {\n        this.next();\n\n        if (this.match(types.parenR) || this.match(types.ellipsis)) {\n          return true;\n        }\n\n        if (this.tsSkipParameterStart()) {\n          if (this.match(types.colon) || this.match(types.comma) || this.match(types.question) || this.match(types.eq)) {\n            return true;\n          }\n\n          if (this.match(types.parenR)) {\n            this.next();\n\n            if (this.match(types.arrow)) {\n              return true;\n            }\n          }\n        }\n\n        return false;\n      }\n    }, {\n      key: \"tsParseTypeOrTypePredicateAnnotation\",\n      value: function tsParseTypeOrTypePredicateAnnotation(returnToken) {\n        var _this21 = this;\n\n        return this.tsInType(function () {\n          var t = _this21.startNode();\n\n          _this21.expect(returnToken);\n\n          var asserts = _this21.tsTryParse(_this21.tsParseTypePredicateAsserts.bind(_this21));\n\n          if (asserts && _this21.match(types._this)) {\n            var thisTypePredicate = _this21.tsParseThisTypeOrThisTypePredicate();\n\n            if (thisTypePredicate.type === \"TSThisType\") {\n              var _node8 = _this21.startNodeAtNode(t);\n\n              _node8.parameterName = thisTypePredicate;\n              _node8.asserts = true;\n              thisTypePredicate = _this21.finishNode(_node8, \"TSTypePredicate\");\n            } else {\n              thisTypePredicate.asserts = true;\n            }\n\n            t.typeAnnotation = thisTypePredicate;\n            return _this21.finishNode(t, \"TSTypeAnnotation\");\n          }\n\n          var typePredicateVariable = _this21.tsIsIdentifier() && _this21.tsTryParse(_this21.tsParseTypePredicatePrefix.bind(_this21));\n\n          if (!typePredicateVariable) {\n            if (!asserts) {\n              return _this21.tsParseTypeAnnotation(false, t);\n            }\n\n            var _node9 = _this21.startNodeAtNode(t);\n\n            _node9.parameterName = _this21.parseIdentifier();\n            _node9.asserts = asserts;\n            t.typeAnnotation = _this21.finishNode(_node9, \"TSTypePredicate\");\n            return _this21.finishNode(t, \"TSTypeAnnotation\");\n          }\n\n          var type = _this21.tsParseTypeAnnotation(false);\n\n          var node = _this21.startNodeAtNode(t);\n\n          node.parameterName = typePredicateVariable;\n          node.typeAnnotation = type;\n          node.asserts = asserts;\n          t.typeAnnotation = _this21.finishNode(node, \"TSTypePredicate\");\n          return _this21.finishNode(t, \"TSTypeAnnotation\");\n        });\n      }\n    }, {\n      key: \"tsTryParseTypeOrTypePredicateAnnotation\",\n      value: function tsTryParseTypeOrTypePredicateAnnotation() {\n        return this.match(types.colon) ? this.tsParseTypeOrTypePredicateAnnotation(types.colon) : undefined;\n      }\n    }, {\n      key: \"tsTryParseTypeAnnotation\",\n      value: function tsTryParseTypeAnnotation() {\n        return this.match(types.colon) ? this.tsParseTypeAnnotation() : undefined;\n      }\n    }, {\n      key: \"tsTryParseType\",\n      value: function tsTryParseType() {\n        return this.tsEatThenParseType(types.colon);\n      }\n    }, {\n      key: \"tsParseTypePredicatePrefix\",\n      value: function tsParseTypePredicatePrefix() {\n        var id = this.parseIdentifier();\n\n        if (this.isContextual(\"is\") && !this.hasPrecedingLineBreak()) {\n          this.next();\n          return id;\n        }\n      }\n    }, {\n      key: \"tsParseTypePredicateAsserts\",\n      value: function tsParseTypePredicateAsserts() {\n        if (!this.match(types.name) || this.state.value !== \"asserts\" || this.hasPrecedingLineBreak()) {\n          return false;\n        }\n\n        var containsEsc = this.state.containsEsc;\n        this.next();\n\n        if (!this.match(types.name) && !this.match(types._this)) {\n          return false;\n        }\n\n        if (containsEsc) {\n          this.raise(this.state.lastTokStart, ErrorMessages.InvalidEscapedReservedWord, \"asserts\");\n        }\n\n        return true;\n      }\n    }, {\n      key: \"tsParseTypeAnnotation\",\n      value: function tsParseTypeAnnotation() {\n        var _this22 = this;\n\n        var eatColon = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n        var t = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.startNode();\n        this.tsInType(function () {\n          if (eatColon) _this22.expect(types.colon);\n          t.typeAnnotation = _this22.tsParseType();\n        });\n        return this.finishNode(t, \"TSTypeAnnotation\");\n      }\n    }, {\n      key: \"tsParseType\",\n      value: function tsParseType() {\n        assert(this.state.inType);\n        var type = this.tsParseNonConditionalType();\n\n        if (this.hasPrecedingLineBreak() || !this.eat(types._extends)) {\n          return type;\n        }\n\n        var node = this.startNodeAtNode(type);\n        node.checkType = type;\n        node.extendsType = this.tsParseNonConditionalType();\n        this.expect(types.question);\n        node.trueType = this.tsParseType();\n        this.expect(types.colon);\n        node.falseType = this.tsParseType();\n        return this.finishNode(node, \"TSConditionalType\");\n      }\n    }, {\n      key: \"tsParseNonConditionalType\",\n      value: function tsParseNonConditionalType() {\n        if (this.tsIsStartOfFunctionType()) {\n          return this.tsParseFunctionOrConstructorType(\"TSFunctionType\");\n        }\n\n        if (this.match(types._new)) {\n          return this.tsParseFunctionOrConstructorType(\"TSConstructorType\");\n        }\n\n        return this.tsParseUnionTypeOrHigher();\n      }\n    }, {\n      key: \"tsParseTypeAssertion\",\n      value: function tsParseTypeAssertion() {\n        var node = this.startNode();\n\n        var _const = this.tsTryNextParseConstantContext();\n\n        node.typeAnnotation = _const || this.tsNextThenParseType();\n        this.expectRelational(\">\");\n        node.expression = this.parseMaybeUnary();\n        return this.finishNode(node, \"TSTypeAssertion\");\n      }\n    }, {\n      key: \"tsParseHeritageClause\",\n      value: function tsParseHeritageClause(descriptor) {\n        var originalStart = this.state.start;\n        var delimitedList = this.tsParseDelimitedList(\"HeritageClauseElement\", this.tsParseExpressionWithTypeArguments.bind(this));\n\n        if (!delimitedList.length) {\n          this.raise(originalStart, TSErrors.EmptyHeritageClauseType, descriptor);\n        }\n\n        return delimitedList;\n      }\n    }, {\n      key: \"tsParseExpressionWithTypeArguments\",\n      value: function tsParseExpressionWithTypeArguments() {\n        var node = this.startNode();\n        node.expression = this.tsParseEntityName(false);\n\n        if (this.isRelational(\"<\")) {\n          node.typeParameters = this.tsParseTypeArguments();\n        }\n\n        return this.finishNode(node, \"TSExpressionWithTypeArguments\");\n      }\n    }, {\n      key: \"tsParseInterfaceDeclaration\",\n      value: function tsParseInterfaceDeclaration(node) {\n        node.id = this.parseIdentifier();\n        this.checkLVal(node.id, BIND_TS_INTERFACE, undefined, \"typescript interface declaration\");\n        node.typeParameters = this.tsTryParseTypeParameters();\n\n        if (this.eat(types._extends)) {\n          node.extends = this.tsParseHeritageClause(\"extends\");\n        }\n\n        var body = this.startNode();\n        body.body = this.tsInType(this.tsParseObjectTypeMembers.bind(this));\n        node.body = this.finishNode(body, \"TSInterfaceBody\");\n        return this.finishNode(node, \"TSInterfaceDeclaration\");\n      }\n    }, {\n      key: \"tsParseTypeAliasDeclaration\",\n      value: function tsParseTypeAliasDeclaration(node) {\n        node.id = this.parseIdentifier();\n        this.checkLVal(node.id, BIND_TS_TYPE, undefined, \"typescript type alias\");\n        node.typeParameters = this.tsTryParseTypeParameters();\n        node.typeAnnotation = this.tsExpectThenParseType(types.eq);\n        this.semicolon();\n        return this.finishNode(node, \"TSTypeAliasDeclaration\");\n      }\n    }, {\n      key: \"tsInNoContext\",\n      value: function tsInNoContext(cb) {\n        var oldContext = this.state.context;\n        this.state.context = [oldContext[0]];\n\n        try {\n          return cb();\n        } finally {\n          this.state.context = oldContext;\n        }\n      }\n    }, {\n      key: \"tsInType\",\n      value: function tsInType(cb) {\n        var oldInType = this.state.inType;\n        this.state.inType = true;\n\n        try {\n          return cb();\n        } finally {\n          this.state.inType = oldInType;\n        }\n      }\n    }, {\n      key: \"tsEatThenParseType\",\n      value: function tsEatThenParseType(token) {\n        return !this.match(token) ? undefined : this.tsNextThenParseType();\n      }\n    }, {\n      key: \"tsExpectThenParseType\",\n      value: function tsExpectThenParseType(token) {\n        var _this23 = this;\n\n        return this.tsDoThenParseType(function () {\n          return _this23.expect(token);\n        });\n      }\n    }, {\n      key: \"tsNextThenParseType\",\n      value: function tsNextThenParseType() {\n        var _this24 = this;\n\n        return this.tsDoThenParseType(function () {\n          return _this24.next();\n        });\n      }\n    }, {\n      key: \"tsDoThenParseType\",\n      value: function tsDoThenParseType(cb) {\n        var _this25 = this;\n\n        return this.tsInType(function () {\n          cb();\n          return _this25.tsParseType();\n        });\n      }\n    }, {\n      key: \"tsParseEnumMember\",\n      value: function tsParseEnumMember() {\n        var node = this.startNode();\n        node.id = this.match(types.string) ? this.parseExprAtom() : this.parseIdentifier(true);\n\n        if (this.eat(types.eq)) {\n          node.initializer = this.parseMaybeAssign();\n        }\n\n        return this.finishNode(node, \"TSEnumMember\");\n      }\n    }, {\n      key: \"tsParseEnumDeclaration\",\n      value: function tsParseEnumDeclaration(node, isConst) {\n        if (isConst) node.const = true;\n        node.id = this.parseIdentifier();\n        this.checkLVal(node.id, isConst ? BIND_TS_CONST_ENUM : BIND_TS_ENUM, undefined, \"typescript enum declaration\");\n        this.expect(types.braceL);\n        node.members = this.tsParseDelimitedList(\"EnumMembers\", this.tsParseEnumMember.bind(this));\n        this.expect(types.braceR);\n        return this.finishNode(node, \"TSEnumDeclaration\");\n      }\n    }, {\n      key: \"tsParseModuleBlock\",\n      value: function tsParseModuleBlock() {\n        var node = this.startNode();\n        this.scope.enter(SCOPE_OTHER);\n        this.expect(types.braceL);\n        this.parseBlockOrModuleBlockBody(node.body = [], undefined, true, types.braceR);\n        this.scope.exit();\n        return this.finishNode(node, \"TSModuleBlock\");\n      }\n    }, {\n      key: \"tsParseModuleOrNamespaceDeclaration\",\n      value: function tsParseModuleOrNamespaceDeclaration(node) {\n        var nested = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n        node.id = this.parseIdentifier();\n\n        if (!nested) {\n          this.checkLVal(node.id, BIND_TS_NAMESPACE, null, \"module or namespace declaration\");\n        }\n\n        if (this.eat(types.dot)) {\n          var inner = this.startNode();\n          this.tsParseModuleOrNamespaceDeclaration(inner, true);\n          node.body = inner;\n        } else {\n          this.scope.enter(SCOPE_TS_MODULE);\n          this.prodParam.enter(PARAM);\n          node.body = this.tsParseModuleBlock();\n          this.prodParam.exit();\n          this.scope.exit();\n        }\n\n        return this.finishNode(node, \"TSModuleDeclaration\");\n      }\n    }, {\n      key: \"tsParseAmbientExternalModuleDeclaration\",\n      value: function tsParseAmbientExternalModuleDeclaration(node) {\n        if (this.isContextual(\"global\")) {\n          node.global = true;\n          node.id = this.parseIdentifier();\n        } else if (this.match(types.string)) {\n          node.id = this.parseExprAtom();\n        } else {\n          this.unexpected();\n        }\n\n        if (this.match(types.braceL)) {\n          this.scope.enter(SCOPE_TS_MODULE);\n          this.prodParam.enter(PARAM);\n          node.body = this.tsParseModuleBlock();\n          this.prodParam.exit();\n          this.scope.exit();\n        } else {\n          this.semicolon();\n        }\n\n        return this.finishNode(node, \"TSModuleDeclaration\");\n      }\n    }, {\n      key: \"tsParseImportEqualsDeclaration\",\n      value: function tsParseImportEqualsDeclaration(node, isExport) {\n        node.isExport = isExport || false;\n        node.id = this.parseIdentifier();\n        this.checkLVal(node.id, BIND_LEXICAL, undefined, \"import equals declaration\");\n        this.expect(types.eq);\n        node.moduleReference = this.tsParseModuleReference();\n        this.semicolon();\n        return this.finishNode(node, \"TSImportEqualsDeclaration\");\n      }\n    }, {\n      key: \"tsIsExternalModuleReference\",\n      value: function tsIsExternalModuleReference() {\n        return this.isContextual(\"require\") && this.lookaheadCharCode() === 40;\n      }\n    }, {\n      key: \"tsParseModuleReference\",\n      value: function tsParseModuleReference() {\n        return this.tsIsExternalModuleReference() ? this.tsParseExternalModuleReference() : this.tsParseEntityName(false);\n      }\n    }, {\n      key: \"tsParseExternalModuleReference\",\n      value: function tsParseExternalModuleReference() {\n        var node = this.startNode();\n        this.expectContextual(\"require\");\n        this.expect(types.parenL);\n\n        if (!this.match(types.string)) {\n          throw this.unexpected();\n        }\n\n        node.expression = this.parseExprAtom();\n        this.expect(types.parenR);\n        return this.finishNode(node, \"TSExternalModuleReference\");\n      }\n    }, {\n      key: \"tsLookAhead\",\n      value: function tsLookAhead(f) {\n        var state = this.state.clone();\n        var res = f();\n        this.state = state;\n        return res;\n      }\n    }, {\n      key: \"tsTryParseAndCatch\",\n      value: function tsTryParseAndCatch(f) {\n        var result = this.tryParse(function (abort) {\n          return f() || abort();\n        });\n        if (result.aborted || !result.node) return undefined;\n        if (result.error) this.state = result.failState;\n        return result.node;\n      }\n    }, {\n      key: \"tsTryParse\",\n      value: function tsTryParse(f) {\n        var state = this.state.clone();\n        var result = f();\n\n        if (result !== undefined && result !== false) {\n          return result;\n        } else {\n          this.state = state;\n          return undefined;\n        }\n      }\n    }, {\n      key: \"tsTryParseDeclare\",\n      value: function tsTryParseDeclare(nany) {\n        if (this.isLineTerminator()) {\n          return;\n        }\n\n        var starttype = this.state.type;\n        var kind;\n\n        if (this.isContextual(\"let\")) {\n          starttype = types._var;\n          kind = \"let\";\n        }\n\n        switch (starttype) {\n          case types._function:\n            return this.parseFunctionStatement(nany, false, true);\n\n          case types._class:\n            nany.declare = true;\n            return this.parseClass(nany, true, false);\n\n          case types._const:\n            if (this.match(types._const) && this.isLookaheadContextual(\"enum\")) {\n              this.expect(types._const);\n              this.expectContextual(\"enum\");\n              return this.tsParseEnumDeclaration(nany, true);\n            }\n\n          case types._var:\n            kind = kind || this.state.value;\n            return this.parseVarStatement(nany, kind);\n\n          case types.name:\n            {\n              var value = this.state.value;\n\n              if (value === \"global\") {\n                return this.tsParseAmbientExternalModuleDeclaration(nany);\n              } else {\n                return this.tsParseDeclaration(nany, value, true);\n              }\n            }\n        }\n      }\n    }, {\n      key: \"tsTryParseExportDeclaration\",\n      value: function tsTryParseExportDeclaration() {\n        return this.tsParseDeclaration(this.startNode(), this.state.value, true);\n      }\n    }, {\n      key: \"tsParseExpressionStatement\",\n      value: function tsParseExpressionStatement(node, expr) {\n        switch (expr.name) {\n          case \"declare\":\n            {\n              var declaration = this.tsTryParseDeclare(node);\n\n              if (declaration) {\n                declaration.declare = true;\n                return declaration;\n              }\n\n              break;\n            }\n\n          case \"global\":\n            if (this.match(types.braceL)) {\n              this.scope.enter(SCOPE_TS_MODULE);\n              this.prodParam.enter(PARAM);\n              var mod = node;\n              mod.global = true;\n              mod.id = expr;\n              mod.body = this.tsParseModuleBlock();\n              this.scope.exit();\n              this.prodParam.exit();\n              return this.finishNode(mod, \"TSModuleDeclaration\");\n            }\n\n            break;\n\n          default:\n            return this.tsParseDeclaration(node, expr.name, false);\n        }\n      }\n    }, {\n      key: \"tsParseDeclaration\",\n      value: function tsParseDeclaration(node, value, next) {\n        switch (value) {\n          case \"abstract\":\n            if (this.tsCheckLineTerminatorAndMatch(types._class, next)) {\n              var cls = node;\n              cls.abstract = true;\n\n              if (next) {\n                this.next();\n\n                if (!this.match(types._class)) {\n                  this.unexpected(null, types._class);\n                }\n              }\n\n              return this.parseClass(cls, true, false);\n            }\n\n            break;\n\n          case \"enum\":\n            if (next || this.match(types.name)) {\n              if (next) this.next();\n              return this.tsParseEnumDeclaration(node, false);\n            }\n\n            break;\n\n          case \"interface\":\n            if (this.tsCheckLineTerminatorAndMatch(types.name, next)) {\n              if (next) this.next();\n              return this.tsParseInterfaceDeclaration(node);\n            }\n\n            break;\n\n          case \"module\":\n            if (next) this.next();\n\n            if (this.match(types.string)) {\n              return this.tsParseAmbientExternalModuleDeclaration(node);\n            } else if (this.tsCheckLineTerminatorAndMatch(types.name, next)) {\n              return this.tsParseModuleOrNamespaceDeclaration(node);\n            }\n\n            break;\n\n          case \"namespace\":\n            if (this.tsCheckLineTerminatorAndMatch(types.name, next)) {\n              if (next) this.next();\n              return this.tsParseModuleOrNamespaceDeclaration(node);\n            }\n\n            break;\n\n          case \"type\":\n            if (this.tsCheckLineTerminatorAndMatch(types.name, next)) {\n              if (next) this.next();\n              return this.tsParseTypeAliasDeclaration(node);\n            }\n\n            break;\n        }\n      }\n    }, {\n      key: \"tsCheckLineTerminatorAndMatch\",\n      value: function tsCheckLineTerminatorAndMatch(tokenType, next) {\n        return (next || this.match(tokenType)) && !this.isLineTerminator();\n      }\n    }, {\n      key: \"tsTryParseGenericAsyncArrowFunction\",\n      value: function tsTryParseGenericAsyncArrowFunction(startPos, startLoc) {\n        var _this26 = this;\n\n        if (!this.isRelational(\"<\")) {\n          return undefined;\n        }\n\n        var oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n        var oldYieldPos = this.state.yieldPos;\n        var oldAwaitPos = this.state.awaitPos;\n        this.state.maybeInArrowParameters = true;\n        this.state.yieldPos = -1;\n        this.state.awaitPos = -1;\n        var res = this.tsTryParseAndCatch(function () {\n          var node = _this26.startNodeAt(startPos, startLoc);\n\n          node.typeParameters = _this26.tsParseTypeParameters();\n\n          _get(_getPrototypeOf(_class4.prototype), \"parseFunctionParams\", _this26).call(_this26, node);\n\n          node.returnType = _this26.tsTryParseTypeOrTypePredicateAnnotation();\n\n          _this26.expect(types.arrow);\n\n          return node;\n        });\n        this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n        this.state.yieldPos = oldYieldPos;\n        this.state.awaitPos = oldAwaitPos;\n\n        if (!res) {\n          return undefined;\n        }\n\n        return this.parseArrowExpression(res, null, true);\n      }\n    }, {\n      key: \"tsParseTypeArguments\",\n      value: function tsParseTypeArguments() {\n        var _this27 = this;\n\n        var node = this.startNode();\n        node.params = this.tsInType(function () {\n          return _this27.tsInNoContext(function () {\n            _this27.expectRelational(\"<\");\n\n            return _this27.tsParseDelimitedList(\"TypeParametersOrArguments\", _this27.tsParseType.bind(_this27));\n          });\n        });\n        this.state.exprAllowed = false;\n        this.expectRelational(\">\");\n        return this.finishNode(node, \"TSTypeParameterInstantiation\");\n      }\n    }, {\n      key: \"tsIsDeclarationStart\",\n      value: function tsIsDeclarationStart() {\n        if (this.match(types.name)) {\n          switch (this.state.value) {\n            case \"abstract\":\n            case \"declare\":\n            case \"enum\":\n            case \"interface\":\n            case \"module\":\n            case \"namespace\":\n            case \"type\":\n              return true;\n          }\n        }\n\n        return false;\n      }\n    }, {\n      key: \"isExportDefaultSpecifier\",\n      value: function isExportDefaultSpecifier() {\n        if (this.tsIsDeclarationStart()) return false;\n        return _get(_getPrototypeOf(_class4.prototype), \"isExportDefaultSpecifier\", this).call(this);\n      }\n    }, {\n      key: \"parseAssignableListItem\",\n      value: function parseAssignableListItem(allowModifiers, decorators) {\n        var startPos = this.state.start;\n        var startLoc = this.state.startLoc;\n        var accessibility;\n        var readonly = false;\n\n        if (allowModifiers) {\n          accessibility = this.parseAccessModifier();\n          readonly = !!this.tsParseModifier([\"readonly\"]);\n        }\n\n        var left = this.parseMaybeDefault();\n        this.parseAssignableListItemTypes(left);\n        var elt = this.parseMaybeDefault(left.start, left.loc.start, left);\n\n        if (accessibility || readonly) {\n          var pp = this.startNodeAt(startPos, startLoc);\n\n          if (decorators.length) {\n            pp.decorators = decorators;\n          }\n\n          if (accessibility) pp.accessibility = accessibility;\n          if (readonly) pp.readonly = readonly;\n\n          if (elt.type !== \"Identifier\" && elt.type !== \"AssignmentPattern\") {\n            this.raise(pp.start, TSErrors.UnsupportedParameterPropertyKind);\n          }\n\n          pp.parameter = elt;\n          return this.finishNode(pp, \"TSParameterProperty\");\n        }\n\n        if (decorators.length) {\n          left.decorators = decorators;\n        }\n\n        return elt;\n      }\n    }, {\n      key: \"parseFunctionBodyAndFinish\",\n      value: function parseFunctionBodyAndFinish(node, type) {\n        var isMethod = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n        if (this.match(types.colon)) {\n          node.returnType = this.tsParseTypeOrTypePredicateAnnotation(types.colon);\n        }\n\n        var bodilessType = type === \"FunctionDeclaration\" ? \"TSDeclareFunction\" : type === \"ClassMethod\" ? \"TSDeclareMethod\" : undefined;\n\n        if (bodilessType && !this.match(types.braceL) && this.isLineTerminator()) {\n          this.finishNode(node, bodilessType);\n          return;\n        }\n\n        _get(_getPrototypeOf(_class4.prototype), \"parseFunctionBodyAndFinish\", this).call(this, node, type, isMethod);\n      }\n    }, {\n      key: \"registerFunctionStatementId\",\n      value: function registerFunctionStatementId(node) {\n        if (!node.body && node.id) {\n          this.checkLVal(node.id, BIND_TS_AMBIENT, null, \"function name\");\n        } else {\n          _get(_getPrototypeOf(_class4.prototype), \"registerFunctionStatementId\", this).apply(this, arguments);\n        }\n      }\n    }, {\n      key: \"parseSubscript\",\n      value: function parseSubscript(base, startPos, startLoc, noCalls, state) {\n        var _this28 = this;\n\n        if (!this.hasPrecedingLineBreak() && this.match(types.bang)) {\n          this.state.exprAllowed = false;\n          this.next();\n          var nonNullExpression = this.startNodeAt(startPos, startLoc);\n          nonNullExpression.expression = base;\n          return this.finishNode(nonNullExpression, \"TSNonNullExpression\");\n        }\n\n        if (this.isRelational(\"<\")) {\n          var result = this.tsTryParseAndCatch(function () {\n            if (!noCalls && _this28.atPossibleAsyncArrow(base)) {\n              var asyncArrowFn = _this28.tsTryParseGenericAsyncArrowFunction(startPos, startLoc);\n\n              if (asyncArrowFn) {\n                return asyncArrowFn;\n              }\n            }\n\n            var node = _this28.startNodeAt(startPos, startLoc);\n\n            node.callee = base;\n\n            var typeArguments = _this28.tsParseTypeArguments();\n\n            if (typeArguments) {\n              if (!noCalls && _this28.eat(types.parenL)) {\n                node.arguments = _this28.parseCallExpressionArguments(types.parenR, false);\n                node.typeParameters = typeArguments;\n                return _this28.finishCallExpression(node, state.optionalChainMember);\n              } else if (_this28.match(types.backQuote)) {\n                return _this28.parseTaggedTemplateExpression(startPos, startLoc, base, state, typeArguments);\n              }\n            }\n\n            _this28.unexpected();\n          });\n          if (result) return result;\n        }\n\n        return _get(_getPrototypeOf(_class4.prototype), \"parseSubscript\", this).call(this, base, startPos, startLoc, noCalls, state);\n      }\n    }, {\n      key: \"parseNewArguments\",\n      value: function parseNewArguments(node) {\n        var _this29 = this;\n\n        if (this.isRelational(\"<\")) {\n          var typeParameters = this.tsTryParseAndCatch(function () {\n            var args = _this29.tsParseTypeArguments();\n\n            if (!_this29.match(types.parenL)) _this29.unexpected();\n            return args;\n          });\n\n          if (typeParameters) {\n            node.typeParameters = typeParameters;\n          }\n        }\n\n        _get(_getPrototypeOf(_class4.prototype), \"parseNewArguments\", this).call(this, node);\n      }\n    }, {\n      key: \"parseExprOp\",\n      value: function parseExprOp(left, leftStartPos, leftStartLoc, minPrec, noIn) {\n        if (nonNull(types._in.binop) > minPrec && !this.hasPrecedingLineBreak() && this.isContextual(\"as\")) {\n          var node = this.startNodeAt(leftStartPos, leftStartLoc);\n          node.expression = left;\n\n          var _const = this.tsTryNextParseConstantContext();\n\n          if (_const) {\n            node.typeAnnotation = _const;\n          } else {\n            node.typeAnnotation = this.tsNextThenParseType();\n          }\n\n          this.finishNode(node, \"TSAsExpression\");\n          return this.parseExprOp(node, leftStartPos, leftStartLoc, minPrec, noIn);\n        }\n\n        return _get(_getPrototypeOf(_class4.prototype), \"parseExprOp\", this).call(this, left, leftStartPos, leftStartLoc, minPrec, noIn);\n      }\n    }, {\n      key: \"checkReservedWord\",\n      value: function checkReservedWord(word, startLoc, checkKeywords, isBinding) {}\n    }, {\n      key: \"checkDuplicateExports\",\n      value: function checkDuplicateExports() {}\n    }, {\n      key: \"parseImport\",\n      value: function parseImport(node) {\n        if (this.match(types.name) || this.match(types.star) || this.match(types.braceL)) {\n          var ahead = this.lookahead();\n\n          if (this.match(types.name) && ahead.type === types.eq) {\n            return this.tsParseImportEqualsDeclaration(node);\n          }\n\n          if (this.isContextual(\"type\") && ahead.type !== types.comma && !(ahead.type === types.name && ahead.value === \"from\")) {\n            node.importKind = \"type\";\n            this.next();\n          } else {\n            node.importKind = \"value\";\n          }\n        }\n\n        var importNode = _get(_getPrototypeOf(_class4.prototype), \"parseImport\", this).call(this, node);\n\n        if (importNode.importKind === \"type\" && importNode.specifiers.length > 1 && importNode.specifiers[0].type === \"ImportDefaultSpecifier\") {\n          this.raise(importNode.start, \"A type-only import can specify a default import or named bindings, but not both.\");\n        }\n\n        return importNode;\n      }\n    }, {\n      key: \"parseExport\",\n      value: function parseExport(node) {\n        if (this.match(types._import)) {\n          this.expect(types._import);\n          return this.tsParseImportEqualsDeclaration(node, true);\n        } else if (this.eat(types.eq)) {\n          var assign = node;\n          assign.expression = this.parseExpression();\n          this.semicolon();\n          return this.finishNode(assign, \"TSExportAssignment\");\n        } else if (this.eatContextual(\"as\")) {\n          var decl = node;\n          this.expectContextual(\"namespace\");\n          decl.id = this.parseIdentifier();\n          this.semicolon();\n          return this.finishNode(decl, \"TSNamespaceExportDeclaration\");\n        } else {\n          if (this.isContextual(\"type\") && this.lookahead().type === types.braceL) {\n            this.next();\n            node.exportKind = \"type\";\n          } else {\n            node.exportKind = \"value\";\n          }\n\n          return _get(_getPrototypeOf(_class4.prototype), \"parseExport\", this).call(this, node);\n        }\n      }\n    }, {\n      key: \"isAbstractClass\",\n      value: function isAbstractClass() {\n        return this.isContextual(\"abstract\") && this.lookahead().type === types._class;\n      }\n    }, {\n      key: \"parseExportDefaultExpression\",\n      value: function parseExportDefaultExpression() {\n        if (this.isAbstractClass()) {\n          var cls = this.startNode();\n          this.next();\n          this.parseClass(cls, true, true);\n          cls.abstract = true;\n          return cls;\n        }\n\n        if (this.state.value === \"interface\") {\n          var result = this.tsParseDeclaration(this.startNode(), this.state.value, true);\n          if (result) return result;\n        }\n\n        return _get(_getPrototypeOf(_class4.prototype), \"parseExportDefaultExpression\", this).call(this);\n      }\n    }, {\n      key: \"parseStatementContent\",\n      value: function parseStatementContent(context, topLevel) {\n        if (this.state.type === types._const) {\n          var ahead = this.lookahead();\n\n          if (ahead.type === types.name && ahead.value === \"enum\") {\n            var node = this.startNode();\n            this.expect(types._const);\n            this.expectContextual(\"enum\");\n            return this.tsParseEnumDeclaration(node, true);\n          }\n        }\n\n        return _get(_getPrototypeOf(_class4.prototype), \"parseStatementContent\", this).call(this, context, topLevel);\n      }\n    }, {\n      key: \"parseAccessModifier\",\n      value: function parseAccessModifier() {\n        return this.tsParseModifier([\"public\", \"protected\", \"private\"]);\n      }\n    }, {\n      key: \"parseClassMember\",\n      value: function parseClassMember(classBody, member, state, constructorAllowsSuper) {\n        this.tsParseModifiers(member, [\"declare\"]);\n        var accessibility = this.parseAccessModifier();\n        if (accessibility) member.accessibility = accessibility;\n        this.tsParseModifiers(member, [\"declare\"]);\n\n        _get(_getPrototypeOf(_class4.prototype), \"parseClassMember\", this).call(this, classBody, member, state, constructorAllowsSuper);\n      }\n    }, {\n      key: \"parseClassMemberWithIsStatic\",\n      value: function parseClassMemberWithIsStatic(classBody, member, state, isStatic, constructorAllowsSuper) {\n        this.tsParseModifiers(member, [\"abstract\", \"readonly\", \"declare\"]);\n        var idx = this.tsTryParseIndexSignature(member);\n\n        if (idx) {\n          classBody.body.push(idx);\n\n          if (member.abstract) {\n            this.raise(member.start, TSErrors.IndexSignatureHasAbstract);\n          }\n\n          if (isStatic) {\n            this.raise(member.start, TSErrors.IndexSignatureHasStatic);\n          }\n\n          if (member.accessibility) {\n            this.raise(member.start, TSErrors.IndexSignatureHasAccessibility, member.accessibility);\n          }\n\n          return;\n        }\n\n        _get(_getPrototypeOf(_class4.prototype), \"parseClassMemberWithIsStatic\", this).call(this, classBody, member, state, isStatic, constructorAllowsSuper);\n      }\n    }, {\n      key: \"parsePostMemberNameModifiers\",\n      value: function parsePostMemberNameModifiers(methodOrProp) {\n        var optional = this.eat(types.question);\n        if (optional) methodOrProp.optional = true;\n\n        if (methodOrProp.readonly && this.match(types.parenL)) {\n          this.raise(methodOrProp.start, TSErrors.ClassMethodHasReadonly);\n        }\n\n        if (methodOrProp.declare && this.match(types.parenL)) {\n          this.raise(methodOrProp.start, TSErrors.ClassMethodHasDeclare);\n        }\n      }\n    }, {\n      key: \"parseExpressionStatement\",\n      value: function parseExpressionStatement(node, expr) {\n        var decl = expr.type === \"Identifier\" ? this.tsParseExpressionStatement(node, expr) : undefined;\n        return decl || _get(_getPrototypeOf(_class4.prototype), \"parseExpressionStatement\", this).call(this, node, expr);\n      }\n    }, {\n      key: \"shouldParseExportDeclaration\",\n      value: function shouldParseExportDeclaration() {\n        if (this.tsIsDeclarationStart()) return true;\n        return _get(_getPrototypeOf(_class4.prototype), \"shouldParseExportDeclaration\", this).call(this);\n      }\n    }, {\n      key: \"parseConditional\",\n      value: function parseConditional(expr, noIn, startPos, startLoc, refNeedsArrowPos) {\n        var _this30 = this;\n\n        if (!refNeedsArrowPos || !this.match(types.question)) {\n          return _get(_getPrototypeOf(_class4.prototype), \"parseConditional\", this).call(this, expr, noIn, startPos, startLoc, refNeedsArrowPos);\n        }\n\n        var result = this.tryParse(function () {\n          return _get(_getPrototypeOf(_class4.prototype), \"parseConditional\", _this30).call(_this30, expr, noIn, startPos, startLoc);\n        });\n\n        if (!result.node) {\n          refNeedsArrowPos.start = result.error.pos || this.state.start;\n          return expr;\n        }\n\n        if (result.error) this.state = result.failState;\n        return result.node;\n      }\n    }, {\n      key: \"parseParenItem\",\n      value: function parseParenItem(node, startPos, startLoc) {\n        node = _get(_getPrototypeOf(_class4.prototype), \"parseParenItem\", this).call(this, node, startPos, startLoc);\n\n        if (this.eat(types.question)) {\n          node.optional = true;\n          this.resetEndLocation(node);\n        }\n\n        if (this.match(types.colon)) {\n          var typeCastNode = this.startNodeAt(startPos, startLoc);\n          typeCastNode.expression = node;\n          typeCastNode.typeAnnotation = this.tsParseTypeAnnotation();\n          return this.finishNode(typeCastNode, \"TSTypeCastExpression\");\n        }\n\n        return node;\n      }\n    }, {\n      key: \"parseExportDeclaration\",\n      value: function parseExportDeclaration(node) {\n        var startPos = this.state.start;\n        var startLoc = this.state.startLoc;\n        var isDeclare = this.eatContextual(\"declare\");\n        var declaration;\n\n        if (this.match(types.name)) {\n          declaration = this.tsTryParseExportDeclaration();\n        }\n\n        if (!declaration) {\n          declaration = _get(_getPrototypeOf(_class4.prototype), \"parseExportDeclaration\", this).call(this, node);\n        }\n\n        if (declaration && (declaration.type === \"TSInterfaceDeclaration\" || declaration.type === \"TSTypeAliasDeclaration\" || isDeclare)) {\n          node.exportKind = \"type\";\n        }\n\n        if (declaration && isDeclare) {\n          this.resetStartLocation(declaration, startPos, startLoc);\n          declaration.declare = true;\n        }\n\n        return declaration;\n      }\n    }, {\n      key: \"parseClassId\",\n      value: function parseClassId(node, isStatement, optionalId) {\n        if ((!isStatement || optionalId) && this.isContextual(\"implements\")) {\n          return;\n        }\n\n        _get(_getPrototypeOf(_class4.prototype), \"parseClassId\", this).call(this, node, isStatement, optionalId, node.declare ? BIND_TS_AMBIENT : BIND_CLASS);\n\n        var typeParameters = this.tsTryParseTypeParameters();\n        if (typeParameters) node.typeParameters = typeParameters;\n      }\n    }, {\n      key: \"parseClassPropertyAnnotation\",\n      value: function parseClassPropertyAnnotation(node) {\n        if (!node.optional && this.eat(types.bang)) {\n          node.definite = true;\n        }\n\n        var type = this.tsTryParseTypeAnnotation();\n        if (type) node.typeAnnotation = type;\n      }\n    }, {\n      key: \"parseClassProperty\",\n      value: function parseClassProperty(node) {\n        this.parseClassPropertyAnnotation(node);\n\n        if (node.declare && this.match(types.equal)) {\n          this.raise(this.state.start, TSErrors.DeclareClassFieldHasInitializer);\n        }\n\n        return _get(_getPrototypeOf(_class4.prototype), \"parseClassProperty\", this).call(this, node);\n      }\n    }, {\n      key: \"parseClassPrivateProperty\",\n      value: function parseClassPrivateProperty(node) {\n        if (node.abstract) {\n          this.raise(node.start, TSErrors.PrivateElementHasAbstract);\n        }\n\n        if (node.accessibility) {\n          this.raise(node.start, TSErrors.PrivateElementHasAccessibility, node.accessibility);\n        }\n\n        this.parseClassPropertyAnnotation(node);\n        return _get(_getPrototypeOf(_class4.prototype), \"parseClassPrivateProperty\", this).call(this, node);\n      }\n    }, {\n      key: \"pushClassMethod\",\n      value: function pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {\n        var typeParameters = this.tsTryParseTypeParameters();\n        if (typeParameters) method.typeParameters = typeParameters;\n\n        _get(_getPrototypeOf(_class4.prototype), \"pushClassMethod\", this).call(this, classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper);\n      }\n    }, {\n      key: \"pushClassPrivateMethod\",\n      value: function pushClassPrivateMethod(classBody, method, isGenerator, isAsync) {\n        var typeParameters = this.tsTryParseTypeParameters();\n        if (typeParameters) method.typeParameters = typeParameters;\n\n        _get(_getPrototypeOf(_class4.prototype), \"pushClassPrivateMethod\", this).call(this, classBody, method, isGenerator, isAsync);\n      }\n    }, {\n      key: \"parseClassSuper\",\n      value: function parseClassSuper(node) {\n        _get(_getPrototypeOf(_class4.prototype), \"parseClassSuper\", this).call(this, node);\n\n        if (node.superClass && this.isRelational(\"<\")) {\n          node.superTypeParameters = this.tsParseTypeArguments();\n        }\n\n        if (this.eatContextual(\"implements\")) {\n          node.implements = this.tsParseHeritageClause(\"implements\");\n        }\n      }\n    }, {\n      key: \"parseObjPropValue\",\n      value: function parseObjPropValue(prop) {\n        var _get3;\n\n        var typeParameters = this.tsTryParseTypeParameters();\n        if (typeParameters) prop.typeParameters = typeParameters;\n\n        for (var _len5 = arguments.length, args = new Array(_len5 > 1 ? _len5 - 1 : 0), _key5 = 1; _key5 < _len5; _key5++) {\n          args[_key5 - 1] = arguments[_key5];\n        }\n\n        (_get3 = _get(_getPrototypeOf(_class4.prototype), \"parseObjPropValue\", this)).call.apply(_get3, [this, prop].concat(args));\n      }\n    }, {\n      key: \"parseFunctionParams\",\n      value: function parseFunctionParams(node, allowModifiers) {\n        var typeParameters = this.tsTryParseTypeParameters();\n        if (typeParameters) node.typeParameters = typeParameters;\n\n        _get(_getPrototypeOf(_class4.prototype), \"parseFunctionParams\", this).call(this, node, allowModifiers);\n      }\n    }, {\n      key: \"parseVarId\",\n      value: function parseVarId(decl, kind) {\n        _get(_getPrototypeOf(_class4.prototype), \"parseVarId\", this).call(this, decl, kind);\n\n        if (decl.id.type === \"Identifier\" && this.eat(types.bang)) {\n          decl.definite = true;\n        }\n\n        var type = this.tsTryParseTypeAnnotation();\n\n        if (type) {\n          decl.id.typeAnnotation = type;\n          this.resetEndLocation(decl.id);\n        }\n      }\n    }, {\n      key: \"parseAsyncArrowFromCallExpression\",\n      value: function parseAsyncArrowFromCallExpression(node, call) {\n        if (this.match(types.colon)) {\n          node.returnType = this.tsParseTypeAnnotation();\n        }\n\n        return _get(_getPrototypeOf(_class4.prototype), \"parseAsyncArrowFromCallExpression\", this).call(this, node, call);\n      }\n    }, {\n      key: \"parseMaybeAssign\",\n      value: function parseMaybeAssign() {\n        var _this31 = this;\n\n        for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {\n          args[_key6] = arguments[_key6];\n        }\n\n        var _jsx, _jsx2, _typeCast, _jsx3, _typeCast2, _jsx4, _typeCast3;\n\n        var state;\n        var jsx;\n        var typeCast;\n\n        if (this.match(types.jsxTagStart)) {\n          state = this.state.clone();\n          jsx = this.tryParse(function () {\n            var _get4;\n\n            return (_get4 = _get(_getPrototypeOf(_class4.prototype), \"parseMaybeAssign\", _this31)).call.apply(_get4, [_this31].concat(args));\n          }, state);\n          if (!jsx.error) return jsx.node;\n          var context = this.state.context;\n\n          if (context[context.length - 1] === types$1.j_oTag) {\n            context.length -= 2;\n          } else if (context[context.length - 1] === types$1.j_expr) {\n            context.length -= 1;\n          }\n        }\n\n        if (!((_jsx = jsx) == null ? void 0 : _jsx.error) && !this.isRelational(\"<\")) {\n          var _get5;\n\n          return (_get5 = _get(_getPrototypeOf(_class4.prototype), \"parseMaybeAssign\", this)).call.apply(_get5, [this].concat(args));\n        }\n\n        var typeParameters;\n        state = state || this.state.clone();\n        var arrow = this.tryParse(function (abort) {\n          var _get6;\n\n          var _typeParameters;\n\n          typeParameters = _this31.tsParseTypeParameters();\n\n          var expr = (_get6 = _get(_getPrototypeOf(_class4.prototype), \"parseMaybeAssign\", _this31)).call.apply(_get6, [_this31].concat(args));\n\n          if (expr.type !== \"ArrowFunctionExpression\" || expr.extra && expr.extra.parenthesized) {\n            abort();\n          }\n\n          if (((_typeParameters = typeParameters) == null ? void 0 : _typeParameters.params.length) !== 0) {\n            _this31.resetStartLocationFromNode(expr, typeParameters);\n          }\n\n          expr.typeParameters = typeParameters;\n          return expr;\n        }, state);\n        if (!arrow.error && !arrow.aborted) return arrow.node;\n\n        if (!jsx) {\n          assert(!this.hasPlugin(\"jsx\"));\n          typeCast = this.tryParse(function () {\n            var _get7;\n\n            return (_get7 = _get(_getPrototypeOf(_class4.prototype), \"parseMaybeAssign\", _this31)).call.apply(_get7, [_this31].concat(args));\n          }, state);\n          if (!typeCast.error) return typeCast.node;\n        }\n\n        if ((_jsx2 = jsx) == null ? void 0 : _jsx2.node) {\n          this.state = jsx.failState;\n          return jsx.node;\n        }\n\n        if (arrow.node) {\n          this.state = arrow.failState;\n          return arrow.node;\n        }\n\n        if ((_typeCast = typeCast) == null ? void 0 : _typeCast.node) {\n          this.state = typeCast.failState;\n          return typeCast.node;\n        }\n\n        if ((_jsx3 = jsx) == null ? void 0 : _jsx3.thrown) throw jsx.error;\n        if (arrow.thrown) throw arrow.error;\n        if ((_typeCast2 = typeCast) == null ? void 0 : _typeCast2.thrown) throw typeCast.error;\n        throw ((_jsx4 = jsx) == null ? void 0 : _jsx4.error) || arrow.error || ((_typeCast3 = typeCast) == null ? void 0 : _typeCast3.error);\n      }\n    }, {\n      key: \"parseMaybeUnary\",\n      value: function parseMaybeUnary(refExpressionErrors) {\n        if (!this.hasPlugin(\"jsx\") && this.isRelational(\"<\")) {\n          return this.tsParseTypeAssertion();\n        } else {\n          return _get(_getPrototypeOf(_class4.prototype), \"parseMaybeUnary\", this).call(this, refExpressionErrors);\n        }\n      }\n    }, {\n      key: \"parseArrow\",\n      value: function parseArrow(node) {\n        var _this32 = this;\n\n        if (this.match(types.colon)) {\n          var result = this.tryParse(function (abort) {\n            var returnType = _this32.tsParseTypeOrTypePredicateAnnotation(types.colon);\n\n            if (_this32.canInsertSemicolon() || !_this32.match(types.arrow)) abort();\n            return returnType;\n          });\n          if (result.aborted) return;\n\n          if (!result.thrown) {\n            if (result.error) this.state = result.failState;\n            node.returnType = result.node;\n          }\n        }\n\n        return _get(_getPrototypeOf(_class4.prototype), \"parseArrow\", this).call(this, node);\n      }\n    }, {\n      key: \"parseAssignableListItemTypes\",\n      value: function parseAssignableListItemTypes(param) {\n        if (this.eat(types.question)) {\n          if (param.type !== \"Identifier\") {\n            this.raise(param.start, TSErrors.PatternIsOptional);\n          }\n\n          param.optional = true;\n        }\n\n        var type = this.tsTryParseTypeAnnotation();\n        if (type) param.typeAnnotation = type;\n        this.resetEndLocation(param);\n        return param;\n      }\n    }, {\n      key: \"toAssignable\",\n      value: function toAssignable(node) {\n        switch (node.type) {\n          case \"TSTypeCastExpression\":\n            return _get(_getPrototypeOf(_class4.prototype), \"toAssignable\", this).call(this, this.typeCastToParameter(node));\n\n          case \"TSParameterProperty\":\n            return _get(_getPrototypeOf(_class4.prototype), \"toAssignable\", this).call(this, node);\n\n          case \"TSAsExpression\":\n          case \"TSNonNullExpression\":\n          case \"TSTypeAssertion\":\n            node.expression = this.toAssignable(node.expression);\n            return node;\n\n          default:\n            return _get(_getPrototypeOf(_class4.prototype), \"toAssignable\", this).call(this, node);\n        }\n      }\n    }, {\n      key: \"checkLVal\",\n      value: function checkLVal(expr) {\n        var bindingType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : BIND_NONE;\n        var checkClashes = arguments.length > 2 ? arguments[2] : undefined;\n        var contextDescription = arguments.length > 3 ? arguments[3] : undefined;\n\n        switch (expr.type) {\n          case \"TSTypeCastExpression\":\n            return;\n\n          case \"TSParameterProperty\":\n            this.checkLVal(expr.parameter, bindingType, checkClashes, \"parameter property\");\n            return;\n\n          case \"TSAsExpression\":\n          case \"TSNonNullExpression\":\n          case \"TSTypeAssertion\":\n            this.checkLVal(expr.expression, bindingType, checkClashes, contextDescription);\n            return;\n\n          default:\n            _get(_getPrototypeOf(_class4.prototype), \"checkLVal\", this).call(this, expr, bindingType, checkClashes, contextDescription);\n\n            return;\n        }\n      }\n    }, {\n      key: \"parseBindingAtom\",\n      value: function parseBindingAtom() {\n        switch (this.state.type) {\n          case types._this:\n            return this.parseIdentifier(true);\n\n          default:\n            return _get(_getPrototypeOf(_class4.prototype), \"parseBindingAtom\", this).call(this);\n        }\n      }\n    }, {\n      key: \"parseMaybeDecoratorArguments\",\n      value: function parseMaybeDecoratorArguments(expr) {\n        if (this.isRelational(\"<\")) {\n          var typeArguments = this.tsParseTypeArguments();\n\n          if (this.match(types.parenL)) {\n            var call = _get(_getPrototypeOf(_class4.prototype), \"parseMaybeDecoratorArguments\", this).call(this, expr);\n\n            call.typeParameters = typeArguments;\n            return call;\n          }\n\n          this.unexpected(this.state.start, types.parenL);\n        }\n\n        return _get(_getPrototypeOf(_class4.prototype), \"parseMaybeDecoratorArguments\", this).call(this, expr);\n      }\n    }, {\n      key: \"isClassMethod\",\n      value: function isClassMethod() {\n        return this.isRelational(\"<\") || _get(_getPrototypeOf(_class4.prototype), \"isClassMethod\", this).call(this);\n      }\n    }, {\n      key: \"isClassProperty\",\n      value: function isClassProperty() {\n        return this.match(types.bang) || this.match(types.colon) || _get(_getPrototypeOf(_class4.prototype), \"isClassProperty\", this).call(this);\n      }\n    }, {\n      key: \"parseMaybeDefault\",\n      value: function parseMaybeDefault() {\n        var _get8;\n\n        for (var _len7 = arguments.length, args = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {\n          args[_key7] = arguments[_key7];\n        }\n\n        var node = (_get8 = _get(_getPrototypeOf(_class4.prototype), \"parseMaybeDefault\", this)).call.apply(_get8, [this].concat(args));\n\n        if (node.type === \"AssignmentPattern\" && node.typeAnnotation && node.right.start < node.typeAnnotation.start) {\n          this.raise(node.typeAnnotation.start, TSErrors.TypeAnnotationAfterAssign);\n        }\n\n        return node;\n      }\n    }, {\n      key: \"getTokenFromCode\",\n      value: function getTokenFromCode(code) {\n        if (this.state.inType && (code === 62 || code === 60)) {\n          return this.finishOp(types.relational, 1);\n        } else {\n          return _get(_getPrototypeOf(_class4.prototype), \"getTokenFromCode\", this).call(this, code);\n        }\n      }\n    }, {\n      key: \"toAssignableList\",\n      value: function toAssignableList(exprList) {\n        for (var i = 0; i < exprList.length; i++) {\n          var expr = exprList[i];\n          if (!expr) continue;\n\n          switch (expr.type) {\n            case \"TSTypeCastExpression\":\n              exprList[i] = this.typeCastToParameter(expr);\n              break;\n\n            case \"TSAsExpression\":\n            case \"TSTypeAssertion\":\n              if (!this.state.maybeInArrowParameters) {\n                exprList[i] = this.typeCastToParameter(expr);\n              } else {\n                this.raise(expr.start, TSErrors.UnexpectedTypeCastInParameter);\n              }\n\n              break;\n          }\n        }\n\n        return _get(_getPrototypeOf(_class4.prototype), \"toAssignableList\", this).apply(this, arguments);\n      }\n    }, {\n      key: \"typeCastToParameter\",\n      value: function typeCastToParameter(node) {\n        node.expression.typeAnnotation = node.typeAnnotation;\n        this.resetEndLocation(node.expression, node.typeAnnotation.end, node.typeAnnotation.loc.end);\n        return node.expression;\n      }\n    }, {\n      key: \"toReferencedList\",\n      value: function toReferencedList(exprList, isInParens) {\n        for (var i = 0; i < exprList.length; i++) {\n          var expr = exprList[i];\n\n          if ((expr == null ? void 0 : expr.type) === \"TSTypeCastExpression\") {\n            this.raise(expr.start, TSErrors.UnexpectedTypeAnnotation);\n          }\n        }\n\n        return exprList;\n      }\n    }, {\n      key: \"shouldParseArrow\",\n      value: function shouldParseArrow() {\n        return this.match(types.colon) || _get(_getPrototypeOf(_class4.prototype), \"shouldParseArrow\", this).call(this);\n      }\n    }, {\n      key: \"shouldParseAsyncArrow\",\n      value: function shouldParseAsyncArrow() {\n        return this.match(types.colon) || _get(_getPrototypeOf(_class4.prototype), \"shouldParseAsyncArrow\", this).call(this);\n      }\n    }, {\n      key: \"canHaveLeadingDecorator\",\n      value: function canHaveLeadingDecorator() {\n        return _get(_getPrototypeOf(_class4.prototype), \"canHaveLeadingDecorator\", this).call(this) || this.isAbstractClass();\n      }\n    }, {\n      key: \"jsxParseOpeningElementAfterName\",\n      value: function jsxParseOpeningElementAfterName(node) {\n        var _this33 = this;\n\n        if (this.isRelational(\"<\")) {\n          var typeArguments = this.tsTryParseAndCatch(function () {\n            return _this33.tsParseTypeArguments();\n          });\n          if (typeArguments) node.typeParameters = typeArguments;\n        }\n\n        return _get(_getPrototypeOf(_class4.prototype), \"jsxParseOpeningElementAfterName\", this).call(this, node);\n      }\n    }, {\n      key: \"getGetterSetterExpectedParamCount\",\n      value: function getGetterSetterExpectedParamCount(method) {\n        var baseCount = _get(_getPrototypeOf(_class4.prototype), \"getGetterSetterExpectedParamCount\", this).call(this, method);\n\n        var firstParam = method.params[0];\n        var hasContextParam = firstParam && firstParam.type === \"Identifier\" && firstParam.name === \"this\";\n        return hasContextParam ? baseCount + 1 : baseCount;\n      }\n    }]);\n\n    return _class4;\n  }(superClass);\n};\n\ntypes.placeholder = new TokenType(\"%%\", {\n  startsExpr: true\n});\n\nvar placeholders = function placeholders(superClass) {\n  return /*#__PURE__*/function (_superClass5) {\n    _inherits(_class5, _superClass5);\n\n    var _super9 = _createSuper(_class5);\n\n    function _class5() {\n      _classCallCheck(this, _class5);\n\n      return _super9.apply(this, arguments);\n    }\n\n    _createClass(_class5, [{\n      key: \"parsePlaceholder\",\n      value: function parsePlaceholder(expectedNode) {\n        if (this.match(types.placeholder)) {\n          var node = this.startNode();\n          this.next();\n          this.assertNoSpace(\"Unexpected space in placeholder.\");\n          node.name = _get(_getPrototypeOf(_class5.prototype), \"parseIdentifier\", this).call(this, true);\n          this.assertNoSpace(\"Unexpected space in placeholder.\");\n          this.expect(types.placeholder);\n          return this.finishPlaceholder(node, expectedNode);\n        }\n      }\n    }, {\n      key: \"finishPlaceholder\",\n      value: function finishPlaceholder(node, expectedNode) {\n        var isFinished = !!(node.expectedNode && node.type === \"Placeholder\");\n        node.expectedNode = expectedNode;\n        return isFinished ? node : this.finishNode(node, \"Placeholder\");\n      }\n    }, {\n      key: \"getTokenFromCode\",\n      value: function getTokenFromCode(code) {\n        if (code === 37 && this.input.charCodeAt(this.state.pos + 1) === 37) {\n          return this.finishOp(types.placeholder, 2);\n        }\n\n        return _get(_getPrototypeOf(_class5.prototype), \"getTokenFromCode\", this).apply(this, arguments);\n      }\n    }, {\n      key: \"parseExprAtom\",\n      value: function parseExprAtom() {\n        return this.parsePlaceholder(\"Expression\") || _get(_getPrototypeOf(_class5.prototype), \"parseExprAtom\", this).apply(this, arguments);\n      }\n    }, {\n      key: \"parseIdentifier\",\n      value: function parseIdentifier() {\n        return this.parsePlaceholder(\"Identifier\") || _get(_getPrototypeOf(_class5.prototype), \"parseIdentifier\", this).apply(this, arguments);\n      }\n    }, {\n      key: \"checkReservedWord\",\n      value: function checkReservedWord(word) {\n        if (word !== undefined) _get(_getPrototypeOf(_class5.prototype), \"checkReservedWord\", this).apply(this, arguments);\n      }\n    }, {\n      key: \"parseBindingAtom\",\n      value: function parseBindingAtom() {\n        return this.parsePlaceholder(\"Pattern\") || _get(_getPrototypeOf(_class5.prototype), \"parseBindingAtom\", this).apply(this, arguments);\n      }\n    }, {\n      key: \"checkLVal\",\n      value: function checkLVal(expr) {\n        if (expr.type !== \"Placeholder\") _get(_getPrototypeOf(_class5.prototype), \"checkLVal\", this).apply(this, arguments);\n      }\n    }, {\n      key: \"toAssignable\",\n      value: function toAssignable(node) {\n        if (node && node.type === \"Placeholder\" && node.expectedNode === \"Expression\") {\n          node.expectedNode = \"Pattern\";\n          return node;\n        }\n\n        return _get(_getPrototypeOf(_class5.prototype), \"toAssignable\", this).apply(this, arguments);\n      }\n    }, {\n      key: \"verifyBreakContinue\",\n      value: function verifyBreakContinue(node) {\n        if (node.label && node.label.type === \"Placeholder\") return;\n\n        _get(_getPrototypeOf(_class5.prototype), \"verifyBreakContinue\", this).apply(this, arguments);\n      }\n    }, {\n      key: \"parseExpressionStatement\",\n      value: function parseExpressionStatement(node, expr) {\n        if (expr.type !== \"Placeholder\" || expr.extra && expr.extra.parenthesized) {\n          return _get(_getPrototypeOf(_class5.prototype), \"parseExpressionStatement\", this).apply(this, arguments);\n        }\n\n        if (this.match(types.colon)) {\n          var stmt = node;\n          stmt.label = this.finishPlaceholder(expr, \"Identifier\");\n          this.next();\n          stmt.body = this.parseStatement(\"label\");\n          return this.finishNode(stmt, \"LabeledStatement\");\n        }\n\n        this.semicolon();\n        node.name = expr.name;\n        return this.finishPlaceholder(node, \"Statement\");\n      }\n    }, {\n      key: \"parseBlock\",\n      value: function parseBlock() {\n        return this.parsePlaceholder(\"BlockStatement\") || _get(_getPrototypeOf(_class5.prototype), \"parseBlock\", this).apply(this, arguments);\n      }\n    }, {\n      key: \"parseFunctionId\",\n      value: function parseFunctionId() {\n        return this.parsePlaceholder(\"Identifier\") || _get(_getPrototypeOf(_class5.prototype), \"parseFunctionId\", this).apply(this, arguments);\n      }\n    }, {\n      key: \"parseClass\",\n      value: function parseClass(node, isStatement, optionalId) {\n        var type = isStatement ? \"ClassDeclaration\" : \"ClassExpression\";\n        this.next();\n        this.takeDecorators(node);\n        var placeholder = this.parsePlaceholder(\"Identifier\");\n\n        if (placeholder) {\n          if (this.match(types._extends) || this.match(types.placeholder) || this.match(types.braceL)) {\n            node.id = placeholder;\n          } else if (optionalId || !isStatement) {\n            node.id = null;\n            node.body = this.finishPlaceholder(placeholder, \"ClassBody\");\n            return this.finishNode(node, type);\n          } else {\n            this.unexpected(null, \"A class name is required\");\n          }\n        } else {\n          this.parseClassId(node, isStatement, optionalId);\n        }\n\n        this.parseClassSuper(node);\n        node.body = this.parsePlaceholder(\"ClassBody\") || this.parseClassBody(!!node.superClass);\n        return this.finishNode(node, type);\n      }\n    }, {\n      key: \"parseExport\",\n      value: function parseExport(node) {\n        var placeholder = this.parsePlaceholder(\"Identifier\");\n        if (!placeholder) return _get(_getPrototypeOf(_class5.prototype), \"parseExport\", this).apply(this, arguments);\n\n        if (!this.isContextual(\"from\") && !this.match(types.comma)) {\n          node.specifiers = [];\n          node.source = null;\n          node.declaration = this.finishPlaceholder(placeholder, \"Declaration\");\n          return this.finishNode(node, \"ExportNamedDeclaration\");\n        }\n\n        this.expectPlugin(\"exportDefaultFrom\");\n        var specifier = this.startNode();\n        specifier.exported = placeholder;\n        node.specifiers = [this.finishNode(specifier, \"ExportDefaultSpecifier\")];\n        return _get(_getPrototypeOf(_class5.prototype), \"parseExport\", this).call(this, node);\n      }\n    }, {\n      key: \"isExportDefaultSpecifier\",\n      value: function isExportDefaultSpecifier() {\n        if (this.match(types._default)) {\n          var next = this.nextTokenStart();\n\n          if (this.isUnparsedContextual(next, \"from\")) {\n            if (this.input.startsWith(types.placeholder.label, this.nextTokenStartSince(next + 4))) {\n              return true;\n            }\n          }\n        }\n\n        return _get(_getPrototypeOf(_class5.prototype), \"isExportDefaultSpecifier\", this).call(this);\n      }\n    }, {\n      key: \"maybeParseExportDefaultSpecifier\",\n      value: function maybeParseExportDefaultSpecifier(node) {\n        if (node.specifiers && node.specifiers.length > 0) {\n          return true;\n        }\n\n        return _get(_getPrototypeOf(_class5.prototype), \"maybeParseExportDefaultSpecifier\", this).apply(this, arguments);\n      }\n    }, {\n      key: \"checkExport\",\n      value: function checkExport(node) {\n        var specifiers = node.specifiers;\n\n        if (specifiers == null ? void 0 : specifiers.length) {\n          node.specifiers = specifiers.filter(function (node) {\n            return node.exported.type === \"Placeholder\";\n          });\n        }\n\n        _get(_getPrototypeOf(_class5.prototype), \"checkExport\", this).call(this, node);\n\n        node.specifiers = specifiers;\n      }\n    }, {\n      key: \"parseImport\",\n      value: function parseImport(node) {\n        var placeholder = this.parsePlaceholder(\"Identifier\");\n        if (!placeholder) return _get(_getPrototypeOf(_class5.prototype), \"parseImport\", this).apply(this, arguments);\n        node.specifiers = [];\n\n        if (!this.isContextual(\"from\") && !this.match(types.comma)) {\n          node.source = this.finishPlaceholder(placeholder, \"StringLiteral\");\n          this.semicolon();\n          return this.finishNode(node, \"ImportDeclaration\");\n        }\n\n        var specifier = this.startNodeAtNode(placeholder);\n        specifier.local = placeholder;\n        this.finishNode(specifier, \"ImportDefaultSpecifier\");\n        node.specifiers.push(specifier);\n\n        if (this.eat(types.comma)) {\n          var hasStarImport = this.maybeParseStarImportSpecifier(node);\n          if (!hasStarImport) this.parseNamedImportSpecifiers(node);\n        }\n\n        this.expectContextual(\"from\");\n        node.source = this.parseImportSource();\n        this.semicolon();\n        return this.finishNode(node, \"ImportDeclaration\");\n      }\n    }, {\n      key: \"parseImportSource\",\n      value: function parseImportSource() {\n        return this.parsePlaceholder(\"StringLiteral\") || _get(_getPrototypeOf(_class5.prototype), \"parseImportSource\", this).apply(this, arguments);\n      }\n    }]);\n\n    return _class5;\n  }(superClass);\n};\n\nvar v8intrinsic = function v8intrinsic(superClass) {\n  return /*#__PURE__*/function (_superClass6) {\n    _inherits(_class6, _superClass6);\n\n    var _super10 = _createSuper(_class6);\n\n    function _class6() {\n      _classCallCheck(this, _class6);\n\n      return _super10.apply(this, arguments);\n    }\n\n    _createClass(_class6, [{\n      key: \"parseV8Intrinsic\",\n      value: function parseV8Intrinsic() {\n        if (this.match(types.modulo)) {\n          var v8IntrinsicStart = this.state.start;\n          var node = this.startNode();\n          this.eat(types.modulo);\n\n          if (this.match(types.name)) {\n            var name = this.parseIdentifierName(this.state.start);\n            var identifier = this.createIdentifier(node, name);\n            identifier.type = \"V8IntrinsicIdentifier\";\n\n            if (this.match(types.parenL)) {\n              return identifier;\n            }\n          }\n\n          this.unexpected(v8IntrinsicStart);\n        }\n      }\n    }, {\n      key: \"parseExprAtom\",\n      value: function parseExprAtom() {\n        return this.parseV8Intrinsic() || _get(_getPrototypeOf(_class6.prototype), \"parseExprAtom\", this).apply(this, arguments);\n      }\n    }]);\n\n    return _class6;\n  }(superClass);\n};\n\nfunction hasPlugin(plugins, name) {\n  return plugins.some(function (plugin) {\n    if (Array.isArray(plugin)) {\n      return plugin[0] === name;\n    } else {\n      return plugin === name;\n    }\n  });\n}\n\nfunction getPluginOption(plugins, name, option) {\n  var plugin = plugins.find(function (plugin) {\n    if (Array.isArray(plugin)) {\n      return plugin[0] === name;\n    } else {\n      return plugin === name;\n    }\n  });\n\n  if (plugin && Array.isArray(plugin)) {\n    return plugin[1][option];\n  }\n\n  return null;\n}\n\nvar PIPELINE_PROPOSALS = [\"minimal\", \"smart\", \"fsharp\"];\nvar RECORD_AND_TUPLE_SYNTAX_TYPES = [\"hash\", \"bar\"];\n\nfunction validatePlugins(plugins) {\n  if (hasPlugin(plugins, \"decorators\")) {\n    if (hasPlugin(plugins, \"decorators-legacy\")) {\n      throw new Error(\"Cannot use the decorators and decorators-legacy plugin together\");\n    }\n\n    var decoratorsBeforeExport = getPluginOption(plugins, \"decorators\", \"decoratorsBeforeExport\");\n\n    if (decoratorsBeforeExport == null) {\n      throw new Error(\"The 'decorators' plugin requires a 'decoratorsBeforeExport' option,\" + \" whose value must be a boolean. If you are migrating from\" + \" Babylon/Babel 6 or want to use the old decorators proposal, you\" + \" should use the 'decorators-legacy' plugin instead of 'decorators'.\");\n    } else if (typeof decoratorsBeforeExport !== \"boolean\") {\n      throw new Error(\"'decoratorsBeforeExport' must be a boolean.\");\n    }\n  }\n\n  if (hasPlugin(plugins, \"flow\") && hasPlugin(plugins, \"typescript\")) {\n    throw new Error(\"Cannot combine flow and typescript plugins.\");\n  }\n\n  if (hasPlugin(plugins, \"placeholders\") && hasPlugin(plugins, \"v8intrinsic\")) {\n    throw new Error(\"Cannot combine placeholders and v8intrinsic plugins.\");\n  }\n\n  if (hasPlugin(plugins, \"pipelineOperator\") && !PIPELINE_PROPOSALS.includes(getPluginOption(plugins, \"pipelineOperator\", \"proposal\"))) {\n    throw new Error(\"'pipelineOperator' requires 'proposal' option whose value should be one of: \" + PIPELINE_PROPOSALS.map(function (p) {\n      return \"'\".concat(p, \"'\");\n    }).join(\", \"));\n  }\n\n  if (hasPlugin(plugins, \"moduleAttributes\")) {\n    var moduleAttributesVerionPluginOption = getPluginOption(plugins, \"moduleAttributes\", \"version\");\n\n    if (moduleAttributesVerionPluginOption !== \"may-2020\") {\n      throw new Error(\"The 'moduleAttributes' plugin requires a 'version' option,\" + \" representing the last proposal update. Currently, the\" + \" only supported value is 'may-2020'.\");\n    }\n  }\n\n  if (hasPlugin(plugins, \"recordAndTuple\") && !RECORD_AND_TUPLE_SYNTAX_TYPES.includes(getPluginOption(plugins, \"recordAndTuple\", \"syntaxType\"))) {\n    throw new Error(\"'recordAndTuple' requires 'syntaxType' option whose value should be one of: \" + RECORD_AND_TUPLE_SYNTAX_TYPES.map(function (p) {\n      return \"'\".concat(p, \"'\");\n    }).join(\", \"));\n  }\n}\n\nvar mixinPlugins = {\n  estree: estree,\n  jsx: jsx,\n  flow: flow,\n  typescript: typescript,\n  v8intrinsic: v8intrinsic,\n  placeholders: placeholders\n};\nvar mixinPluginNames = Object.keys(mixinPlugins);\nvar defaultOptions = {\n  sourceType: \"script\",\n  sourceFilename: undefined,\n  startLine: 1,\n  allowAwaitOutsideFunction: false,\n  allowReturnOutsideFunction: false,\n  allowImportExportEverywhere: false,\n  allowSuperOutsideMethod: false,\n  allowUndeclaredExports: false,\n  plugins: [],\n  strictMode: null,\n  ranges: false,\n  tokens: false,\n  createParenthesizedExpressions: false,\n  errorRecovery: false\n};\n\nfunction getOptions(opts) {\n  var options = {};\n\n  for (var _i = 0, _Object$keys = Object.keys(defaultOptions); _i < _Object$keys.length; _i++) {\n    var key = _Object$keys[_i];\n    options[key] = opts && opts[key] != null ? opts[key] : defaultOptions[key];\n  }\n\n  return options;\n}\n\nvar State = /*#__PURE__*/function () {\n  function State() {\n    _classCallCheck(this, State);\n\n    this.errors = [];\n    this.potentialArrowAt = -1;\n    this.noArrowAt = [];\n    this.noArrowParamsConversionAt = [];\n    this.inParameters = false;\n    this.maybeInArrowParameters = false;\n    this.maybeInAsyncArrowHead = false;\n    this.inPipeline = false;\n    this.inType = false;\n    this.noAnonFunctionType = false;\n    this.inPropertyName = false;\n    this.hasFlowComment = false;\n    this.isIterator = false;\n    this.topicContext = {\n      maxNumOfResolvableTopics: 0,\n      maxTopicIndex: null\n    };\n    this.soloAwait = false;\n    this.inFSharpPipelineDirectBody = false;\n    this.labels = [];\n    this.decoratorStack = [[]];\n    this.yieldPos = -1;\n    this.awaitPos = -1;\n    this.comments = [];\n    this.trailingComments = [];\n    this.leadingComments = [];\n    this.commentStack = [];\n    this.commentPreviousNode = null;\n    this.pos = 0;\n    this.lineStart = 0;\n    this.type = types.eof;\n    this.value = null;\n    this.start = 0;\n    this.end = 0;\n    this.lastTokEndLoc = null;\n    this.lastTokStartLoc = null;\n    this.lastTokStart = 0;\n    this.lastTokEnd = 0;\n    this.context = [types$1.braceStatement];\n    this.exprAllowed = true;\n    this.containsEsc = false;\n    this.octalPositions = [];\n    this.exportedIdentifiers = [];\n    this.tokensLength = 0;\n  }\n\n  _createClass(State, [{\n    key: \"init\",\n    value: function init(options) {\n      this.strict = options.strictMode === false ? false : options.sourceType === \"module\";\n      this.curLine = options.startLine;\n      this.startLoc = this.endLoc = this.curPosition();\n    }\n  }, {\n    key: \"curPosition\",\n    value: function curPosition() {\n      return new Position(this.curLine, this.pos - this.lineStart);\n    }\n  }, {\n    key: \"clone\",\n    value: function clone(skipArrays) {\n      var state = new State();\n      var keys = Object.keys(this);\n\n      for (var i = 0, length = keys.length; i < length; i++) {\n        var key = keys[i];\n        var val = this[key];\n\n        if (!skipArrays && Array.isArray(val)) {\n          val = val.slice();\n        }\n\n        state[key] = val;\n      }\n\n      return state;\n    }\n  }]);\n\n  return State;\n}();\n\nvar _isDigit = function isDigit(code) {\n  return code >= 48 && code <= 57;\n};\n\nvar VALID_REGEX_FLAGS = new Set([\"g\", \"m\", \"s\", \"i\", \"y\", \"u\"]);\nvar forbiddenNumericSeparatorSiblings = {\n  decBinOct: [46, 66, 69, 79, 95, 98, 101, 111],\n  hex: [46, 88, 95, 120]\n};\nvar allowedNumericSeparatorSiblings = {};\nallowedNumericSeparatorSiblings.bin = [48, 49];\nallowedNumericSeparatorSiblings.oct = [].concat(_toConsumableArray(allowedNumericSeparatorSiblings.bin), [50, 51, 52, 53, 54, 55]);\nallowedNumericSeparatorSiblings.dec = [].concat(_toConsumableArray(allowedNumericSeparatorSiblings.oct), [56, 57]);\nallowedNumericSeparatorSiblings.hex = [].concat(_toConsumableArray(allowedNumericSeparatorSiblings.dec), [65, 66, 67, 68, 69, 70, 97, 98, 99, 100, 101, 102]);\n\nvar Token = function Token(state) {\n  _classCallCheck(this, Token);\n\n  this.type = state.type;\n  this.value = state.value;\n  this.start = state.start;\n  this.end = state.end;\n  this.loc = new SourceLocation(state.startLoc, state.endLoc);\n};\n\nvar Tokenizer = /*#__PURE__*/function (_ParserError) {\n  _inherits(Tokenizer, _ParserError);\n\n  var _super11 = _createSuper(Tokenizer);\n\n  function Tokenizer(options, input) {\n    var _this34;\n\n    _classCallCheck(this, Tokenizer);\n\n    _this34 = _super11.call(this);\n    _this34.tokens = [];\n    _this34.state = new State();\n\n    _this34.state.init(options);\n\n    _this34.input = input;\n    _this34.length = input.length;\n    _this34.isLookahead = false;\n    return _this34;\n  }\n\n  _createClass(Tokenizer, [{\n    key: \"pushToken\",\n    value: function pushToken(token) {\n      this.tokens.length = this.state.tokensLength;\n      this.tokens.push(token);\n      ++this.state.tokensLength;\n    }\n  }, {\n    key: \"next\",\n    value: function next() {\n      if (!this.isLookahead) {\n        this.checkKeywordEscapes();\n\n        if (this.options.tokens) {\n          this.pushToken(new Token(this.state));\n        }\n      }\n\n      this.state.lastTokEnd = this.state.end;\n      this.state.lastTokStart = this.state.start;\n      this.state.lastTokEndLoc = this.state.endLoc;\n      this.state.lastTokStartLoc = this.state.startLoc;\n      this.nextToken();\n    }\n  }, {\n    key: \"eat\",\n    value: function eat(type) {\n      if (this.match(type)) {\n        this.next();\n        return true;\n      } else {\n        return false;\n      }\n    }\n  }, {\n    key: \"match\",\n    value: function match(type) {\n      return this.state.type === type;\n    }\n  }, {\n    key: \"lookahead\",\n    value: function lookahead() {\n      var old = this.state;\n      this.state = old.clone(true);\n      this.isLookahead = true;\n      this.next();\n      this.isLookahead = false;\n      var curr = this.state;\n      this.state = old;\n      return curr;\n    }\n  }, {\n    key: \"nextTokenStart\",\n    value: function nextTokenStart() {\n      return this.nextTokenStartSince(this.state.pos);\n    }\n  }, {\n    key: \"nextTokenStartSince\",\n    value: function nextTokenStartSince(pos) {\n      skipWhiteSpace.lastIndex = pos;\n      var skip = skipWhiteSpace.exec(this.input);\n      return pos + skip[0].length;\n    }\n  }, {\n    key: \"lookaheadCharCode\",\n    value: function lookaheadCharCode() {\n      return this.input.charCodeAt(this.nextTokenStart());\n    }\n  }, {\n    key: \"setStrict\",\n    value: function setStrict(strict) {\n      this.state.strict = strict;\n      if (!this.match(types.num) && !this.match(types.string)) return;\n      this.state.pos = this.state.start;\n\n      while (this.state.pos < this.state.lineStart) {\n        this.state.lineStart = this.input.lastIndexOf(\"\\n\", this.state.lineStart - 2) + 1;\n        --this.state.curLine;\n      }\n\n      this.nextToken();\n    }\n  }, {\n    key: \"curContext\",\n    value: function curContext() {\n      return this.state.context[this.state.context.length - 1];\n    }\n  }, {\n    key: \"nextToken\",\n    value: function nextToken() {\n      var curContext = this.curContext();\n      if (!(curContext == null ? void 0 : curContext.preserveSpace)) this.skipSpace();\n      this.state.octalPositions = [];\n      this.state.start = this.state.pos;\n      this.state.startLoc = this.state.curPosition();\n\n      if (this.state.pos >= this.length) {\n        this.finishToken(types.eof);\n        return;\n      }\n\n      var override = curContext == null ? void 0 : curContext.override;\n\n      if (override) {\n        override(this);\n      } else {\n        this.getTokenFromCode(this.input.codePointAt(this.state.pos));\n      }\n    }\n  }, {\n    key: \"pushComment\",\n    value: function pushComment(block, text, start, end, startLoc, endLoc) {\n      var comment = {\n        type: block ? \"CommentBlock\" : \"CommentLine\",\n        value: text,\n        start: start,\n        end: end,\n        loc: new SourceLocation(startLoc, endLoc)\n      };\n      if (this.options.tokens) this.pushToken(comment);\n      this.state.comments.push(comment);\n      this.addComment(comment);\n    }\n  }, {\n    key: \"skipBlockComment\",\n    value: function skipBlockComment() {\n      var startLoc = this.state.curPosition();\n      var start = this.state.pos;\n      var end = this.input.indexOf(\"*/\", this.state.pos + 2);\n      if (end === -1) throw this.raise(start, ErrorMessages.UnterminatedComment);\n      this.state.pos = end + 2;\n      lineBreakG.lastIndex = start;\n      var match;\n\n      while ((match = lineBreakG.exec(this.input)) && match.index < this.state.pos) {\n        ++this.state.curLine;\n        this.state.lineStart = match.index + match[0].length;\n      }\n\n      if (this.isLookahead) return;\n      this.pushComment(true, this.input.slice(start + 2, end), start, this.state.pos, startLoc, this.state.curPosition());\n    }\n  }, {\n    key: \"skipLineComment\",\n    value: function skipLineComment(startSkip) {\n      var start = this.state.pos;\n      var startLoc = this.state.curPosition();\n      var ch = this.input.charCodeAt(this.state.pos += startSkip);\n\n      if (this.state.pos < this.length) {\n        while (!isNewLine(ch) && ++this.state.pos < this.length) {\n          ch = this.input.charCodeAt(this.state.pos);\n        }\n      }\n\n      if (this.isLookahead) return;\n      this.pushComment(false, this.input.slice(start + startSkip, this.state.pos), start, this.state.pos, startLoc, this.state.curPosition());\n    }\n  }, {\n    key: \"skipSpace\",\n    value: function skipSpace() {\n      loop: while (this.state.pos < this.length) {\n        var ch = this.input.charCodeAt(this.state.pos);\n\n        switch (ch) {\n          case 32:\n          case 160:\n          case 9:\n            ++this.state.pos;\n            break;\n\n          case 13:\n            if (this.input.charCodeAt(this.state.pos + 1) === 10) {\n              ++this.state.pos;\n            }\n\n          case 10:\n          case 8232:\n          case 8233:\n            ++this.state.pos;\n            ++this.state.curLine;\n            this.state.lineStart = this.state.pos;\n            break;\n\n          case 47:\n            switch (this.input.charCodeAt(this.state.pos + 1)) {\n              case 42:\n                this.skipBlockComment();\n                break;\n\n              case 47:\n                this.skipLineComment(2);\n                break;\n\n              default:\n                break loop;\n            }\n\n            break;\n\n          default:\n            if (isWhitespace(ch)) {\n              ++this.state.pos;\n            } else {\n              break loop;\n            }\n\n        }\n      }\n    }\n  }, {\n    key: \"finishToken\",\n    value: function finishToken(type, val) {\n      this.state.end = this.state.pos;\n      this.state.endLoc = this.state.curPosition();\n      var prevType = this.state.type;\n      this.state.type = type;\n      this.state.value = val;\n      if (!this.isLookahead) this.updateContext(prevType);\n    }\n  }, {\n    key: \"readToken_numberSign\",\n    value: function readToken_numberSign() {\n      if (this.state.pos === 0 && this.readToken_interpreter()) {\n        return;\n      }\n\n      var nextPos = this.state.pos + 1;\n      var next = this.input.charCodeAt(nextPos);\n\n      if (next >= 48 && next <= 57) {\n        throw this.raise(this.state.pos, ErrorMessages.UnexpectedDigitAfterHash);\n      }\n\n      if (next === 123 || next === 91 && this.hasPlugin(\"recordAndTuple\")) {\n        this.expectPlugin(\"recordAndTuple\");\n\n        if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"hash\") {\n          throw this.raise(this.state.pos, next === 123 ? ErrorMessages.RecordExpressionHashIncorrectStartSyntaxType : ErrorMessages.TupleExpressionHashIncorrectStartSyntaxType);\n        }\n\n        if (next === 123) {\n          this.finishToken(types.braceHashL);\n        } else {\n          this.finishToken(types.bracketHashL);\n        }\n\n        this.state.pos += 2;\n      } else {\n        this.finishOp(types.hash, 1);\n      }\n    }\n  }, {\n    key: \"readToken_dot\",\n    value: function readToken_dot() {\n      var next = this.input.charCodeAt(this.state.pos + 1);\n\n      if (next >= 48 && next <= 57) {\n        this.readNumber(true);\n        return;\n      }\n\n      if (next === 46 && this.input.charCodeAt(this.state.pos + 2) === 46) {\n        this.state.pos += 3;\n        this.finishToken(types.ellipsis);\n      } else {\n        ++this.state.pos;\n        this.finishToken(types.dot);\n      }\n    }\n  }, {\n    key: \"readToken_slash\",\n    value: function readToken_slash() {\n      if (this.state.exprAllowed && !this.state.inType) {\n        ++this.state.pos;\n        this.readRegexp();\n        return;\n      }\n\n      var next = this.input.charCodeAt(this.state.pos + 1);\n\n      if (next === 61) {\n        this.finishOp(types.assign, 2);\n      } else {\n        this.finishOp(types.slash, 1);\n      }\n    }\n  }, {\n    key: \"readToken_interpreter\",\n    value: function readToken_interpreter() {\n      if (this.state.pos !== 0 || this.length < 2) return false;\n      var ch = this.input.charCodeAt(this.state.pos + 1);\n      if (ch !== 33) return false;\n      var start = this.state.pos;\n      this.state.pos += 1;\n\n      while (!isNewLine(ch) && ++this.state.pos < this.length) {\n        ch = this.input.charCodeAt(this.state.pos);\n      }\n\n      var value = this.input.slice(start + 2, this.state.pos);\n      this.finishToken(types.interpreterDirective, value);\n      return true;\n    }\n  }, {\n    key: \"readToken_mult_modulo\",\n    value: function readToken_mult_modulo(code) {\n      var type = code === 42 ? types.star : types.modulo;\n      var width = 1;\n      var next = this.input.charCodeAt(this.state.pos + 1);\n      var exprAllowed = this.state.exprAllowed;\n\n      if (code === 42 && next === 42) {\n        width++;\n        next = this.input.charCodeAt(this.state.pos + 2);\n        type = types.exponent;\n      }\n\n      if (next === 61 && !exprAllowed) {\n        width++;\n        type = types.assign;\n      }\n\n      this.finishOp(type, width);\n    }\n  }, {\n    key: \"readToken_pipe_amp\",\n    value: function readToken_pipe_amp(code) {\n      var next = this.input.charCodeAt(this.state.pos + 1);\n\n      if (next === code) {\n        if (this.input.charCodeAt(this.state.pos + 2) === 61) {\n          this.finishOp(types.assign, 3);\n        } else {\n          this.finishOp(code === 124 ? types.logicalOR : types.logicalAND, 2);\n        }\n\n        return;\n      }\n\n      if (code === 124) {\n        if (next === 62) {\n          this.finishOp(types.pipeline, 2);\n          return;\n        }\n\n        if (this.hasPlugin(\"recordAndTuple\") && next === 125) {\n          if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n            throw this.raise(this.state.pos, ErrorMessages.RecordExpressionBarIncorrectEndSyntaxType);\n          }\n\n          this.finishOp(types.braceBarR, 2);\n          return;\n        }\n\n        if (this.hasPlugin(\"recordAndTuple\") && next === 93) {\n          if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n            throw this.raise(this.state.pos, ErrorMessages.TupleExpressionBarIncorrectEndSyntaxType);\n          }\n\n          this.finishOp(types.bracketBarR, 2);\n          return;\n        }\n      }\n\n      if (next === 61) {\n        this.finishOp(types.assign, 2);\n        return;\n      }\n\n      this.finishOp(code === 124 ? types.bitwiseOR : types.bitwiseAND, 1);\n    }\n  }, {\n    key: \"readToken_caret\",\n    value: function readToken_caret() {\n      var next = this.input.charCodeAt(this.state.pos + 1);\n\n      if (next === 61) {\n        this.finishOp(types.assign, 2);\n      } else {\n        this.finishOp(types.bitwiseXOR, 1);\n      }\n    }\n  }, {\n    key: \"readToken_plus_min\",\n    value: function readToken_plus_min(code) {\n      var next = this.input.charCodeAt(this.state.pos + 1);\n\n      if (next === code) {\n        if (next === 45 && !this.inModule && this.input.charCodeAt(this.state.pos + 2) === 62 && (this.state.lastTokEnd === 0 || lineBreak.test(this.input.slice(this.state.lastTokEnd, this.state.pos)))) {\n          this.skipLineComment(3);\n          this.skipSpace();\n          this.nextToken();\n          return;\n        }\n\n        this.finishOp(types.incDec, 2);\n        return;\n      }\n\n      if (next === 61) {\n        this.finishOp(types.assign, 2);\n      } else {\n        this.finishOp(types.plusMin, 1);\n      }\n    }\n  }, {\n    key: \"readToken_lt_gt\",\n    value: function readToken_lt_gt(code) {\n      var next = this.input.charCodeAt(this.state.pos + 1);\n      var size = 1;\n\n      if (next === code) {\n        size = code === 62 && this.input.charCodeAt(this.state.pos + 2) === 62 ? 3 : 2;\n\n        if (this.input.charCodeAt(this.state.pos + size) === 61) {\n          this.finishOp(types.assign, size + 1);\n          return;\n        }\n\n        this.finishOp(types.bitShift, size);\n        return;\n      }\n\n      if (next === 33 && code === 60 && !this.inModule && this.input.charCodeAt(this.state.pos + 2) === 45 && this.input.charCodeAt(this.state.pos + 3) === 45) {\n        this.skipLineComment(4);\n        this.skipSpace();\n        this.nextToken();\n        return;\n      }\n\n      if (next === 61) {\n        size = 2;\n      }\n\n      this.finishOp(types.relational, size);\n    }\n  }, {\n    key: \"readToken_eq_excl\",\n    value: function readToken_eq_excl(code) {\n      var next = this.input.charCodeAt(this.state.pos + 1);\n\n      if (next === 61) {\n        this.finishOp(types.equality, this.input.charCodeAt(this.state.pos + 2) === 61 ? 3 : 2);\n        return;\n      }\n\n      if (code === 61 && next === 62) {\n        this.state.pos += 2;\n        this.finishToken(types.arrow);\n        return;\n      }\n\n      this.finishOp(code === 61 ? types.eq : types.bang, 1);\n    }\n  }, {\n    key: \"readToken_question\",\n    value: function readToken_question() {\n      var next = this.input.charCodeAt(this.state.pos + 1);\n      var next2 = this.input.charCodeAt(this.state.pos + 2);\n\n      if (next === 63 && !this.state.inType) {\n        if (next2 === 61) {\n          this.finishOp(types.assign, 3);\n        } else {\n          this.finishOp(types.nullishCoalescing, 2);\n        }\n      } else if (next === 46 && !(next2 >= 48 && next2 <= 57)) {\n        this.state.pos += 2;\n        this.finishToken(types.questionDot);\n      } else {\n        ++this.state.pos;\n        this.finishToken(types.question);\n      }\n    }\n  }, {\n    key: \"getTokenFromCode\",\n    value: function getTokenFromCode(code) {\n      switch (code) {\n        case 46:\n          this.readToken_dot();\n          return;\n\n        case 40:\n          ++this.state.pos;\n          this.finishToken(types.parenL);\n          return;\n\n        case 41:\n          ++this.state.pos;\n          this.finishToken(types.parenR);\n          return;\n\n        case 59:\n          ++this.state.pos;\n          this.finishToken(types.semi);\n          return;\n\n        case 44:\n          ++this.state.pos;\n          this.finishToken(types.comma);\n          return;\n\n        case 91:\n          if (this.hasPlugin(\"recordAndTuple\") && this.input.charCodeAt(this.state.pos + 1) === 124) {\n            if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n              throw this.raise(this.state.pos, ErrorMessages.TupleExpressionBarIncorrectStartSyntaxType);\n            }\n\n            this.finishToken(types.bracketBarL);\n            this.state.pos += 2;\n          } else {\n            ++this.state.pos;\n            this.finishToken(types.bracketL);\n          }\n\n          return;\n\n        case 93:\n          ++this.state.pos;\n          this.finishToken(types.bracketR);\n          return;\n\n        case 123:\n          if (this.hasPlugin(\"recordAndTuple\") && this.input.charCodeAt(this.state.pos + 1) === 124) {\n            if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n              throw this.raise(this.state.pos, ErrorMessages.RecordExpressionBarIncorrectStartSyntaxType);\n            }\n\n            this.finishToken(types.braceBarL);\n            this.state.pos += 2;\n          } else {\n            ++this.state.pos;\n            this.finishToken(types.braceL);\n          }\n\n          return;\n\n        case 125:\n          ++this.state.pos;\n          this.finishToken(types.braceR);\n          return;\n\n        case 58:\n          if (this.hasPlugin(\"functionBind\") && this.input.charCodeAt(this.state.pos + 1) === 58) {\n            this.finishOp(types.doubleColon, 2);\n          } else {\n            ++this.state.pos;\n            this.finishToken(types.colon);\n          }\n\n          return;\n\n        case 63:\n          this.readToken_question();\n          return;\n\n        case 96:\n          ++this.state.pos;\n          this.finishToken(types.backQuote);\n          return;\n\n        case 48:\n          {\n            var next = this.input.charCodeAt(this.state.pos + 1);\n\n            if (next === 120 || next === 88) {\n              this.readRadixNumber(16);\n              return;\n            }\n\n            if (next === 111 || next === 79) {\n              this.readRadixNumber(8);\n              return;\n            }\n\n            if (next === 98 || next === 66) {\n              this.readRadixNumber(2);\n              return;\n            }\n          }\n\n        case 49:\n        case 50:\n        case 51:\n        case 52:\n        case 53:\n        case 54:\n        case 55:\n        case 56:\n        case 57:\n          this.readNumber(false);\n          return;\n\n        case 34:\n        case 39:\n          this.readString(code);\n          return;\n\n        case 47:\n          this.readToken_slash();\n          return;\n\n        case 37:\n        case 42:\n          this.readToken_mult_modulo(code);\n          return;\n\n        case 124:\n        case 38:\n          this.readToken_pipe_amp(code);\n          return;\n\n        case 94:\n          this.readToken_caret();\n          return;\n\n        case 43:\n        case 45:\n          this.readToken_plus_min(code);\n          return;\n\n        case 60:\n        case 62:\n          this.readToken_lt_gt(code);\n          return;\n\n        case 61:\n        case 33:\n          this.readToken_eq_excl(code);\n          return;\n\n        case 126:\n          this.finishOp(types.tilde, 1);\n          return;\n\n        case 64:\n          ++this.state.pos;\n          this.finishToken(types.at);\n          return;\n\n        case 35:\n          this.readToken_numberSign();\n          return;\n\n        case 92:\n          this.readWord();\n          return;\n\n        default:\n          if (isIdentifierStart(code)) {\n            this.readWord();\n            return;\n          }\n\n      }\n\n      throw this.raise(this.state.pos, ErrorMessages.InvalidOrUnexpectedToken, String.fromCodePoint(code));\n    }\n  }, {\n    key: \"finishOp\",\n    value: function finishOp(type, size) {\n      var str = this.input.slice(this.state.pos, this.state.pos + size);\n      this.state.pos += size;\n      this.finishToken(type, str);\n    }\n  }, {\n    key: \"readRegexp\",\n    value: function readRegexp() {\n      var start = this.state.pos;\n      var escaped, inClass;\n\n      for (;;) {\n        if (this.state.pos >= this.length) {\n          throw this.raise(start, ErrorMessages.UnterminatedRegExp);\n        }\n\n        var ch = this.input.charAt(this.state.pos);\n\n        if (lineBreak.test(ch)) {\n          throw this.raise(start, ErrorMessages.UnterminatedRegExp);\n        }\n\n        if (escaped) {\n          escaped = false;\n        } else {\n          if (ch === \"[\") {\n            inClass = true;\n          } else if (ch === \"]\" && inClass) {\n            inClass = false;\n          } else if (ch === \"/\" && !inClass) {\n            break;\n          }\n\n          escaped = ch === \"\\\\\";\n        }\n\n        ++this.state.pos;\n      }\n\n      var content = this.input.slice(start, this.state.pos);\n      ++this.state.pos;\n      var mods = \"\";\n\n      while (this.state.pos < this.length) {\n        var char = this.input[this.state.pos];\n        var charCode = this.input.codePointAt(this.state.pos);\n\n        if (VALID_REGEX_FLAGS.has(char)) {\n          if (mods.indexOf(char) > -1) {\n            this.raise(this.state.pos + 1, ErrorMessages.DuplicateRegExpFlags);\n          }\n        } else if (isIdentifierChar(charCode) || charCode === 92) {\n          this.raise(this.state.pos + 1, ErrorMessages.MalformedRegExpFlags);\n        } else {\n          break;\n        }\n\n        ++this.state.pos;\n        mods += char;\n      }\n\n      this.finishToken(types.regexp, {\n        pattern: content,\n        flags: mods\n      });\n    }\n  }, {\n    key: \"readInt\",\n    value: function readInt(radix, len, forceLen) {\n      var allowNumSeparator = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n      var start = this.state.pos;\n      var forbiddenSiblings = radix === 16 ? forbiddenNumericSeparatorSiblings.hex : forbiddenNumericSeparatorSiblings.decBinOct;\n      var allowedSiblings = radix === 16 ? allowedNumericSeparatorSiblings.hex : radix === 10 ? allowedNumericSeparatorSiblings.dec : radix === 8 ? allowedNumericSeparatorSiblings.oct : allowedNumericSeparatorSiblings.bin;\n      var invalid = false;\n      var total = 0;\n\n      for (var i = 0, e = len == null ? Infinity : len; i < e; ++i) {\n        var code = this.input.charCodeAt(this.state.pos);\n        var val = void 0;\n\n        if (this.hasPlugin(\"numericSeparator\")) {\n          if (code === 95) {\n            var prev = this.input.charCodeAt(this.state.pos - 1);\n            var next = this.input.charCodeAt(this.state.pos + 1);\n\n            if (allowedSiblings.indexOf(next) === -1) {\n              this.raise(this.state.pos, ErrorMessages.UnexpectedNumericSeparator);\n            } else if (forbiddenSiblings.indexOf(prev) > -1 || forbiddenSiblings.indexOf(next) > -1 || Number.isNaN(next)) {\n              this.raise(this.state.pos, ErrorMessages.UnexpectedNumericSeparator);\n            }\n\n            if (!allowNumSeparator) {\n              this.raise(this.state.pos, ErrorMessages.NumericSeparatorInEscapeSequence);\n            }\n\n            ++this.state.pos;\n            continue;\n          }\n        }\n\n        if (code >= 97) {\n          val = code - 97 + 10;\n        } else if (code >= 65) {\n          val = code - 65 + 10;\n        } else if (_isDigit(code)) {\n          val = code - 48;\n        } else {\n          val = Infinity;\n        }\n\n        if (val >= radix) {\n          if (this.options.errorRecovery && val <= 9) {\n            val = 0;\n            this.raise(this.state.start + i + 2, ErrorMessages.InvalidDigit, radix);\n          } else if (forceLen) {\n            val = 0;\n            invalid = true;\n          } else {\n            break;\n          }\n        }\n\n        ++this.state.pos;\n        total = total * radix + val;\n      }\n\n      if (this.state.pos === start || len != null && this.state.pos - start !== len || invalid) {\n        return null;\n      }\n\n      return total;\n    }\n  }, {\n    key: \"readRadixNumber\",\n    value: function readRadixNumber(radix) {\n      var start = this.state.pos;\n      var isBigInt = false;\n      this.state.pos += 2;\n      var val = this.readInt(radix);\n\n      if (val == null) {\n        this.raise(this.state.start + 2, ErrorMessages.InvalidDigit, radix);\n      }\n\n      var next = this.input.charCodeAt(this.state.pos);\n\n      if (next === 95) {\n        this.expectPlugin(\"numericSeparator\", this.state.pos);\n      }\n\n      if (next === 110) {\n        ++this.state.pos;\n        isBigInt = true;\n      }\n\n      if (isIdentifierStart(this.input.codePointAt(this.state.pos))) {\n        throw this.raise(this.state.pos, ErrorMessages.NumberIdentifier);\n      }\n\n      if (isBigInt) {\n        var str = this.input.slice(start, this.state.pos).replace(/[_n]/g, \"\");\n        this.finishToken(types.bigint, str);\n        return;\n      }\n\n      this.finishToken(types.num, val);\n    }\n  }, {\n    key: \"readNumber\",\n    value: function readNumber(startsWithDot) {\n      var start = this.state.pos;\n      var isFloat = false;\n      var isBigInt = false;\n      var isNonOctalDecimalInt = false;\n\n      if (!startsWithDot && this.readInt(10) === null) {\n        this.raise(start, ErrorMessages.InvalidNumber);\n      }\n\n      var octal = this.state.pos - start >= 2 && this.input.charCodeAt(start) === 48;\n\n      if (octal) {\n        if (this.state.strict) {\n          this.raise(start, ErrorMessages.StrictOctalLiteral);\n        }\n\n        if (/[89]/.test(this.input.slice(start, this.state.pos))) {\n          octal = false;\n          isNonOctalDecimalInt = true;\n        }\n      }\n\n      var next = this.input.charCodeAt(this.state.pos);\n\n      if (next === 46 && !octal) {\n        ++this.state.pos;\n        this.readInt(10);\n        isFloat = true;\n        next = this.input.charCodeAt(this.state.pos);\n      }\n\n      if ((next === 69 || next === 101) && !octal) {\n        next = this.input.charCodeAt(++this.state.pos);\n\n        if (next === 43 || next === 45) {\n          ++this.state.pos;\n        }\n\n        if (this.readInt(10) === null) this.raise(start, ErrorMessages.InvalidNumber);\n        isFloat = true;\n        next = this.input.charCodeAt(this.state.pos);\n      }\n\n      if (this.hasPlugin(\"numericSeparator\") && (octal || isNonOctalDecimalInt)) {\n        var underscorePos = this.input.slice(start, this.state.pos).indexOf(\"_\");\n\n        if (underscorePos > 0) {\n          this.raise(underscorePos + start, ErrorMessages.ZeroDigitNumericSeparator);\n        }\n      }\n\n      if (next === 95) {\n        this.expectPlugin(\"numericSeparator\", this.state.pos);\n      }\n\n      if (next === 110) {\n        if (isFloat || octal || isNonOctalDecimalInt) {\n          this.raise(start, ErrorMessages.InvalidBigIntLiteral);\n        }\n\n        ++this.state.pos;\n        isBigInt = true;\n      }\n\n      if (isIdentifierStart(this.input.codePointAt(this.state.pos))) {\n        throw this.raise(this.state.pos, ErrorMessages.NumberIdentifier);\n      }\n\n      var str = this.input.slice(start, this.state.pos).replace(/[_n]/g, \"\");\n\n      if (isBigInt) {\n        this.finishToken(types.bigint, str);\n        return;\n      }\n\n      var val = octal ? parseInt(str, 8) : parseFloat(str);\n      this.finishToken(types.num, val);\n    }\n  }, {\n    key: \"readCodePoint\",\n    value: function readCodePoint(throwOnInvalid) {\n      var ch = this.input.charCodeAt(this.state.pos);\n      var code;\n\n      if (ch === 123) {\n        var codePos = ++this.state.pos;\n        code = this.readHexChar(this.input.indexOf(\"}\", this.state.pos) - this.state.pos, true, throwOnInvalid);\n        ++this.state.pos;\n\n        if (code !== null && code > 0x10ffff) {\n          if (throwOnInvalid) {\n            this.raise(codePos, ErrorMessages.InvalidCodePoint);\n          } else {\n            return null;\n          }\n        }\n      } else {\n        code = this.readHexChar(4, false, throwOnInvalid);\n      }\n\n      return code;\n    }\n  }, {\n    key: \"readString\",\n    value: function readString(quote) {\n      var out = \"\",\n          chunkStart = ++this.state.pos;\n\n      for (;;) {\n        if (this.state.pos >= this.length) {\n          throw this.raise(this.state.start, ErrorMessages.UnterminatedString);\n        }\n\n        var ch = this.input.charCodeAt(this.state.pos);\n        if (ch === quote) break;\n\n        if (ch === 92) {\n          out += this.input.slice(chunkStart, this.state.pos);\n          out += this.readEscapedChar(false);\n          chunkStart = this.state.pos;\n        } else if (ch === 8232 || ch === 8233) {\n          ++this.state.pos;\n          ++this.state.curLine;\n          this.state.lineStart = this.state.pos;\n        } else if (isNewLine(ch)) {\n          throw this.raise(this.state.start, ErrorMessages.UnterminatedString);\n        } else {\n          ++this.state.pos;\n        }\n      }\n\n      out += this.input.slice(chunkStart, this.state.pos++);\n      this.finishToken(types.string, out);\n    }\n  }, {\n    key: \"readTmplToken\",\n    value: function readTmplToken() {\n      var out = \"\",\n          chunkStart = this.state.pos,\n          containsInvalid = false;\n\n      for (;;) {\n        if (this.state.pos >= this.length) {\n          throw this.raise(this.state.start, ErrorMessages.UnterminatedTemplate);\n        }\n\n        var ch = this.input.charCodeAt(this.state.pos);\n\n        if (ch === 96 || ch === 36 && this.input.charCodeAt(this.state.pos + 1) === 123) {\n          if (this.state.pos === this.state.start && this.match(types.template)) {\n            if (ch === 36) {\n              this.state.pos += 2;\n              this.finishToken(types.dollarBraceL);\n              return;\n            } else {\n              ++this.state.pos;\n              this.finishToken(types.backQuote);\n              return;\n            }\n          }\n\n          out += this.input.slice(chunkStart, this.state.pos);\n          this.finishToken(types.template, containsInvalid ? null : out);\n          return;\n        }\n\n        if (ch === 92) {\n          out += this.input.slice(chunkStart, this.state.pos);\n          var escaped = this.readEscapedChar(true);\n\n          if (escaped === null) {\n            containsInvalid = true;\n          } else {\n            out += escaped;\n          }\n\n          chunkStart = this.state.pos;\n        } else if (isNewLine(ch)) {\n          out += this.input.slice(chunkStart, this.state.pos);\n          ++this.state.pos;\n\n          switch (ch) {\n            case 13:\n              if (this.input.charCodeAt(this.state.pos) === 10) {\n                ++this.state.pos;\n              }\n\n            case 10:\n              out += \"\\n\";\n              break;\n\n            default:\n              out += String.fromCharCode(ch);\n              break;\n          }\n\n          ++this.state.curLine;\n          this.state.lineStart = this.state.pos;\n          chunkStart = this.state.pos;\n        } else {\n          ++this.state.pos;\n        }\n      }\n    }\n  }, {\n    key: \"readEscapedChar\",\n    value: function readEscapedChar(inTemplate) {\n      var throwOnInvalid = !inTemplate;\n      var ch = this.input.charCodeAt(++this.state.pos);\n      ++this.state.pos;\n\n      switch (ch) {\n        case 110:\n          return \"\\n\";\n\n        case 114:\n          return \"\\r\";\n\n        case 120:\n          {\n            var code = this.readHexChar(2, false, throwOnInvalid);\n            return code === null ? null : String.fromCharCode(code);\n          }\n\n        case 117:\n          {\n            var _code = this.readCodePoint(throwOnInvalid);\n\n            return _code === null ? null : String.fromCodePoint(_code);\n          }\n\n        case 116:\n          return \"\\t\";\n\n        case 98:\n          return \"\\b\";\n\n        case 118:\n          return \"\\x0B\";\n\n        case 102:\n          return \"\\f\";\n\n        case 13:\n          if (this.input.charCodeAt(this.state.pos) === 10) {\n            ++this.state.pos;\n          }\n\n        case 10:\n          this.state.lineStart = this.state.pos;\n          ++this.state.curLine;\n\n        case 8232:\n        case 8233:\n          return \"\";\n\n        case 56:\n        case 57:\n          if (inTemplate) {\n            return null;\n          }\n\n        default:\n          if (ch >= 48 && ch <= 55) {\n            var codePos = this.state.pos - 1;\n            var match = this.input.substr(this.state.pos - 1, 3).match(/^[0-7]+/);\n            var octalStr = match[0];\n            var octal = parseInt(octalStr, 8);\n\n            if (octal > 255) {\n              octalStr = octalStr.slice(0, -1);\n              octal = parseInt(octalStr, 8);\n            }\n\n            this.state.pos += octalStr.length - 1;\n            var next = this.input.charCodeAt(this.state.pos);\n\n            if (octalStr !== \"0\" || next === 56 || next === 57) {\n              if (inTemplate) {\n                return null;\n              } else if (this.state.strict) {\n                this.raise(codePos, ErrorMessages.StrictOctalLiteral);\n              } else {\n                this.state.octalPositions.push(codePos);\n              }\n            }\n\n            return String.fromCharCode(octal);\n          }\n\n          return String.fromCharCode(ch);\n      }\n    }\n  }, {\n    key: \"readHexChar\",\n    value: function readHexChar(len, forceLen, throwOnInvalid) {\n      var codePos = this.state.pos;\n      var n = this.readInt(16, len, forceLen, false);\n\n      if (n === null) {\n        if (throwOnInvalid) {\n          this.raise(codePos, ErrorMessages.InvalidEscapeSequence);\n        } else {\n          this.state.pos = codePos - 1;\n        }\n      }\n\n      return n;\n    }\n  }, {\n    key: \"readWord1\",\n    value: function readWord1() {\n      var word = \"\";\n      this.state.containsEsc = false;\n      var start = this.state.pos;\n      var chunkStart = this.state.pos;\n\n      while (this.state.pos < this.length) {\n        var ch = this.input.codePointAt(this.state.pos);\n\n        if (isIdentifierChar(ch)) {\n          this.state.pos += ch <= 0xffff ? 1 : 2;\n        } else if (this.state.isIterator && ch === 64) {\n          ++this.state.pos;\n        } else if (ch === 92) {\n          this.state.containsEsc = true;\n          word += this.input.slice(chunkStart, this.state.pos);\n          var escStart = this.state.pos;\n          var identifierCheck = this.state.pos === start ? isIdentifierStart : isIdentifierChar;\n\n          if (this.input.charCodeAt(++this.state.pos) !== 117) {\n            this.raise(this.state.pos, ErrorMessages.MissingUnicodeEscape);\n            continue;\n          }\n\n          ++this.state.pos;\n          var esc = this.readCodePoint(true);\n\n          if (esc !== null) {\n            if (!identifierCheck(esc)) {\n              this.raise(escStart, ErrorMessages.EscapedCharNotAnIdentifier);\n            }\n\n            word += String.fromCodePoint(esc);\n          }\n\n          chunkStart = this.state.pos;\n        } else {\n          break;\n        }\n      }\n\n      return word + this.input.slice(chunkStart, this.state.pos);\n    }\n  }, {\n    key: \"isIterator\",\n    value: function isIterator(word) {\n      return word === \"@@iterator\" || word === \"@@asyncIterator\";\n    }\n  }, {\n    key: \"readWord\",\n    value: function readWord() {\n      var word = this.readWord1();\n      var type = keywords.get(word) || types.name;\n\n      if (this.state.isIterator && (!this.isIterator(word) || !this.state.inType)) {\n        this.raise(this.state.pos, ErrorMessages.InvalidIdentifier, word);\n      }\n\n      this.finishToken(type, word);\n    }\n  }, {\n    key: \"checkKeywordEscapes\",\n    value: function checkKeywordEscapes() {\n      var kw = this.state.type.keyword;\n\n      if (kw && this.state.containsEsc) {\n        this.raise(this.state.start, ErrorMessages.InvalidEscapedReservedWord, kw);\n      }\n    }\n  }, {\n    key: \"braceIsBlock\",\n    value: function braceIsBlock(prevType) {\n      var parent = this.curContext();\n\n      if (parent === types$1.functionExpression || parent === types$1.functionStatement) {\n        return true;\n      }\n\n      if (prevType === types.colon && (parent === types$1.braceStatement || parent === types$1.braceExpression)) {\n        return !parent.isExpr;\n      }\n\n      if (prevType === types._return || prevType === types.name && this.state.exprAllowed) {\n        return lineBreak.test(this.input.slice(this.state.lastTokEnd, this.state.start));\n      }\n\n      if (prevType === types._else || prevType === types.semi || prevType === types.eof || prevType === types.parenR || prevType === types.arrow) {\n        return true;\n      }\n\n      if (prevType === types.braceL) {\n        return parent === types$1.braceStatement;\n      }\n\n      if (prevType === types._var || prevType === types._const || prevType === types.name) {\n        return false;\n      }\n\n      if (prevType === types.relational) {\n        return true;\n      }\n\n      return !this.state.exprAllowed;\n    }\n  }, {\n    key: \"updateContext\",\n    value: function updateContext(prevType) {\n      var type = this.state.type;\n      var update;\n\n      if (type.keyword && (prevType === types.dot || prevType === types.questionDot)) {\n        this.state.exprAllowed = false;\n      } else if (update = type.updateContext) {\n        update.call(this, prevType);\n      } else {\n        this.state.exprAllowed = type.beforeExpr;\n      }\n    }\n  }]);\n\n  return Tokenizer;\n}(ParserError);\n\nvar UtilParser = /*#__PURE__*/function (_Tokenizer) {\n  _inherits(UtilParser, _Tokenizer);\n\n  var _super12 = _createSuper(UtilParser);\n\n  function UtilParser() {\n    _classCallCheck(this, UtilParser);\n\n    return _super12.apply(this, arguments);\n  }\n\n  _createClass(UtilParser, [{\n    key: \"addExtra\",\n    value: function addExtra(node, key, val) {\n      if (!node) return;\n      var extra = node.extra = node.extra || {};\n      extra[key] = val;\n    }\n  }, {\n    key: \"isRelational\",\n    value: function isRelational(op) {\n      return this.match(types.relational) && this.state.value === op;\n    }\n  }, {\n    key: \"isLookaheadRelational\",\n    value: function isLookaheadRelational(op) {\n      var next = this.nextTokenStart();\n\n      if (this.input.charAt(next) === op) {\n        if (next + 1 === this.input.length) {\n          return true;\n        }\n\n        var afterNext = this.input.charCodeAt(next + 1);\n        return afterNext !== op.charCodeAt(0) && afterNext !== 61;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"expectRelational\",\n    value: function expectRelational(op) {\n      if (this.isRelational(op)) {\n        this.next();\n      } else {\n        this.unexpected(null, types.relational);\n      }\n    }\n  }, {\n    key: \"isContextual\",\n    value: function isContextual(name) {\n      return this.match(types.name) && this.state.value === name && !this.state.containsEsc;\n    }\n  }, {\n    key: \"isUnparsedContextual\",\n    value: function isUnparsedContextual(nameStart, name) {\n      var nameEnd = nameStart + name.length;\n      return this.input.slice(nameStart, nameEnd) === name && (nameEnd === this.input.length || !isIdentifierChar(this.input.charCodeAt(nameEnd)));\n    }\n  }, {\n    key: \"isLookaheadContextual\",\n    value: function isLookaheadContextual(name) {\n      var next = this.nextTokenStart();\n      return this.isUnparsedContextual(next, name);\n    }\n  }, {\n    key: \"eatContextual\",\n    value: function eatContextual(name) {\n      return this.isContextual(name) && this.eat(types.name);\n    }\n  }, {\n    key: \"expectContextual\",\n    value: function expectContextual(name, message) {\n      if (!this.eatContextual(name)) this.unexpected(null, message);\n    }\n  }, {\n    key: \"canInsertSemicolon\",\n    value: function canInsertSemicolon() {\n      return this.match(types.eof) || this.match(types.braceR) || this.hasPrecedingLineBreak();\n    }\n  }, {\n    key: \"hasPrecedingLineBreak\",\n    value: function hasPrecedingLineBreak() {\n      return lineBreak.test(this.input.slice(this.state.lastTokEnd, this.state.start));\n    }\n  }, {\n    key: \"isLineTerminator\",\n    value: function isLineTerminator() {\n      return this.eat(types.semi) || this.canInsertSemicolon();\n    }\n  }, {\n    key: \"semicolon\",\n    value: function semicolon() {\n      if (!this.isLineTerminator()) this.unexpected(null, types.semi);\n    }\n  }, {\n    key: \"expect\",\n    value: function expect(type, pos) {\n      this.eat(type) || this.unexpected(pos, type);\n    }\n  }, {\n    key: \"assertNoSpace\",\n    value: function assertNoSpace() {\n      var message = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"Unexpected space.\";\n\n      if (this.state.start > this.state.lastTokEnd) {\n        this.raise(this.state.lastTokEnd, message);\n      }\n    }\n  }, {\n    key: \"unexpected\",\n    value: function unexpected(pos) {\n      var messageOrType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"Unexpected token\";\n\n      if (typeof messageOrType !== \"string\") {\n        messageOrType = \"Unexpected token, expected \\\"\".concat(messageOrType.label, \"\\\"\");\n      }\n\n      throw this.raise(pos != null ? pos : this.state.start, messageOrType);\n    }\n  }, {\n    key: \"expectPlugin\",\n    value: function expectPlugin(name, pos) {\n      if (!this.hasPlugin(name)) {\n        throw this.raiseWithData(pos != null ? pos : this.state.start, {\n          missingPlugin: [name]\n        }, \"This experimental syntax requires enabling the parser plugin: '\".concat(name, \"'\"));\n      }\n\n      return true;\n    }\n  }, {\n    key: \"expectOnePlugin\",\n    value: function expectOnePlugin(names, pos) {\n      var _this35 = this;\n\n      if (!names.some(function (n) {\n        return _this35.hasPlugin(n);\n      })) {\n        throw this.raiseWithData(pos != null ? pos : this.state.start, {\n          missingPlugin: names\n        }, \"This experimental syntax requires enabling one of the following parser plugin(s): '\".concat(names.join(\", \"), \"'\"));\n      }\n    }\n  }, {\n    key: \"checkYieldAwaitInDefaultParams\",\n    value: function checkYieldAwaitInDefaultParams() {\n      if (this.state.yieldPos !== -1 && (this.state.awaitPos === -1 || this.state.yieldPos < this.state.awaitPos)) {\n        this.raise(this.state.yieldPos, ErrorMessages.YieldBindingIdentifier);\n      }\n\n      if (this.state.awaitPos !== -1) {\n        this.raise(this.state.awaitPos, ErrorMessages.AwaitBindingIdentifier);\n      }\n    }\n  }, {\n    key: \"tryParse\",\n    value: function tryParse(fn) {\n      var oldState = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.state.clone();\n      var abortSignal = {\n        node: null\n      };\n\n      try {\n        var node = fn(function () {\n          var node = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n          abortSignal.node = node;\n          throw abortSignal;\n        });\n\n        if (this.state.errors.length > oldState.errors.length) {\n          var failState = this.state;\n          this.state = oldState;\n          return {\n            node: node,\n            error: failState.errors[oldState.errors.length],\n            thrown: false,\n            aborted: false,\n            failState: failState\n          };\n        }\n\n        return {\n          node: node,\n          error: null,\n          thrown: false,\n          aborted: false,\n          failState: null\n        };\n      } catch (error) {\n        var _failState = this.state;\n        this.state = oldState;\n\n        if (error instanceof SyntaxError) {\n          return {\n            node: null,\n            error: error,\n            thrown: true,\n            aborted: false,\n            failState: _failState\n          };\n        }\n\n        if (error === abortSignal) {\n          return {\n            node: abortSignal.node,\n            error: null,\n            thrown: false,\n            aborted: true,\n            failState: _failState\n          };\n        }\n\n        throw error;\n      }\n    }\n  }, {\n    key: \"checkExpressionErrors\",\n    value: function checkExpressionErrors(refExpressionErrors, andThrow) {\n      if (!refExpressionErrors) return false;\n      var shorthandAssign = refExpressionErrors.shorthandAssign,\n          doubleProto = refExpressionErrors.doubleProto;\n      if (!andThrow) return shorthandAssign >= 0 || doubleProto >= 0;\n\n      if (shorthandAssign >= 0) {\n        this.unexpected(shorthandAssign);\n      }\n\n      if (doubleProto >= 0) {\n        this.raise(doubleProto, ErrorMessages.DuplicateProto);\n      }\n    }\n  }, {\n    key: \"isLiteralPropertyName\",\n    value: function isLiteralPropertyName() {\n      return this.match(types.name) || !!this.state.type.keyword || this.match(types.string) || this.match(types.num) || this.match(types.bigint);\n    }\n  }]);\n\n  return UtilParser;\n}(Tokenizer);\n\nvar ExpressionErrors = function ExpressionErrors() {\n  _classCallCheck(this, ExpressionErrors);\n\n  this.shorthandAssign = -1;\n  this.doubleProto = -1;\n};\n\nvar Node = /*#__PURE__*/function () {\n  function Node(parser, pos, loc) {\n    _classCallCheck(this, Node);\n\n    this.type = \"\";\n    this.start = pos;\n    this.end = 0;\n    this.loc = new SourceLocation(loc);\n    if (parser == null ? void 0 : parser.options.ranges) this.range = [pos, 0];\n    if (parser == null ? void 0 : parser.filename) this.loc.filename = parser.filename;\n  }\n\n  _createClass(Node, [{\n    key: \"__clone\",\n    value: function __clone() {\n      var newNode = new Node();\n      var keys = Object.keys(this);\n\n      for (var i = 0, length = keys.length; i < length; i++) {\n        var key = keys[i];\n\n        if (key !== \"leadingComments\" && key !== \"trailingComments\" && key !== \"innerComments\") {\n          newNode[key] = this[key];\n        }\n      }\n\n      return newNode;\n    }\n  }]);\n\n  return Node;\n}();\n\nvar NodeUtils = /*#__PURE__*/function (_UtilParser) {\n  _inherits(NodeUtils, _UtilParser);\n\n  var _super13 = _createSuper(NodeUtils);\n\n  function NodeUtils() {\n    _classCallCheck(this, NodeUtils);\n\n    return _super13.apply(this, arguments);\n  }\n\n  _createClass(NodeUtils, [{\n    key: \"startNode\",\n    value: function startNode() {\n      return new Node(this, this.state.start, this.state.startLoc);\n    }\n  }, {\n    key: \"startNodeAt\",\n    value: function startNodeAt(pos, loc) {\n      return new Node(this, pos, loc);\n    }\n  }, {\n    key: \"startNodeAtNode\",\n    value: function startNodeAtNode(type) {\n      return this.startNodeAt(type.start, type.loc.start);\n    }\n  }, {\n    key: \"finishNode\",\n    value: function finishNode(node, type) {\n      return this.finishNodeAt(node, type, this.state.lastTokEnd, this.state.lastTokEndLoc);\n    }\n  }, {\n    key: \"finishNodeAt\",\n    value: function finishNodeAt(node, type, pos, loc) {\n      node.type = type;\n      node.end = pos;\n      node.loc.end = loc;\n      if (this.options.ranges) node.range[1] = pos;\n      this.processComment(node);\n      return node;\n    }\n  }, {\n    key: \"resetStartLocation\",\n    value: function resetStartLocation(node, start, startLoc) {\n      node.start = start;\n      node.loc.start = startLoc;\n      if (this.options.ranges) node.range[0] = start;\n    }\n  }, {\n    key: \"resetEndLocation\",\n    value: function resetEndLocation(node) {\n      var end = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.state.lastTokEnd;\n      var endLoc = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.state.lastTokEndLoc;\n      node.end = end;\n      node.loc.end = endLoc;\n      if (this.options.ranges) node.range[1] = end;\n    }\n  }, {\n    key: \"resetStartLocationFromNode\",\n    value: function resetStartLocationFromNode(node, locationNode) {\n      this.resetStartLocation(node, locationNode.start, locationNode.loc.start);\n    }\n  }]);\n\n  return NodeUtils;\n}(UtilParser);\n\nvar unwrapParenthesizedExpression = function unwrapParenthesizedExpression(node) {\n  return node.type === \"ParenthesizedExpression\" ? unwrapParenthesizedExpression(node.expression) : node;\n};\n\nvar LValParser = /*#__PURE__*/function (_NodeUtils) {\n  _inherits(LValParser, _NodeUtils);\n\n  var _super14 = _createSuper(LValParser);\n\n  function LValParser() {\n    _classCallCheck(this, LValParser);\n\n    return _super14.apply(this, arguments);\n  }\n\n  _createClass(LValParser, [{\n    key: \"toAssignable\",\n    value: function toAssignable(node) {\n      var _node$extra, _node$extra3;\n\n      var parenthesized = undefined;\n\n      if (node.type === \"ParenthesizedExpression\" || ((_node$extra = node.extra) == null ? void 0 : _node$extra.parenthesized)) {\n        parenthesized = unwrapParenthesizedExpression(node);\n\n        if (parenthesized.type !== \"Identifier\" && parenthesized.type !== \"MemberExpression\") {\n          this.raise(node.start, ErrorMessages.InvalidParenthesizedAssignment);\n        }\n      }\n\n      switch (node.type) {\n        case \"Identifier\":\n        case \"ObjectPattern\":\n        case \"ArrayPattern\":\n        case \"AssignmentPattern\":\n          break;\n\n        case \"ObjectExpression\":\n          node.type = \"ObjectPattern\";\n\n          for (var i = 0, length = node.properties.length, _last2 = length - 1; i < length; i++) {\n            var _node$extra2;\n\n            var prop = node.properties[i];\n            var isLast = i === _last2;\n            this.toAssignableObjectExpressionProp(prop, isLast);\n\n            if (isLast && prop.type === \"RestElement\" && ((_node$extra2 = node.extra) == null ? void 0 : _node$extra2.trailingComma)) {\n              this.raiseRestNotLast(node.extra.trailingComma);\n            }\n          }\n\n          break;\n\n        case \"ObjectProperty\":\n          this.toAssignable(node.value);\n          break;\n\n        case \"SpreadElement\":\n          {\n            this.checkToRestConversion(node);\n            node.type = \"RestElement\";\n            var arg = node.argument;\n            this.toAssignable(arg);\n            break;\n          }\n\n        case \"ArrayExpression\":\n          node.type = \"ArrayPattern\";\n          this.toAssignableList(node.elements, (_node$extra3 = node.extra) == null ? void 0 : _node$extra3.trailingComma);\n          break;\n\n        case \"AssignmentExpression\":\n          if (node.operator !== \"=\") {\n            this.raise(node.left.end, ErrorMessages.MissingEqInAssignment);\n          }\n\n          node.type = \"AssignmentPattern\";\n          delete node.operator;\n          this.toAssignable(node.left);\n          break;\n\n        case \"ParenthesizedExpression\":\n          this.toAssignable(parenthesized);\n          break;\n      }\n\n      return node;\n    }\n  }, {\n    key: \"toAssignableObjectExpressionProp\",\n    value: function toAssignableObjectExpressionProp(prop, isLast) {\n      if (prop.type === \"ObjectMethod\") {\n        var error = prop.kind === \"get\" || prop.kind === \"set\" ? ErrorMessages.PatternHasAccessor : ErrorMessages.PatternHasMethod;\n        this.raise(prop.key.start, error);\n      } else if (prop.type === \"SpreadElement\" && !isLast) {\n        this.raiseRestNotLast(prop.start);\n      } else {\n        this.toAssignable(prop);\n      }\n    }\n  }, {\n    key: \"toAssignableList\",\n    value: function toAssignableList(exprList, trailingCommaPos) {\n      var end = exprList.length;\n\n      if (end) {\n        var _last3 = exprList[end - 1];\n\n        if ((_last3 == null ? void 0 : _last3.type) === \"RestElement\") {\n          --end;\n        } else if ((_last3 == null ? void 0 : _last3.type) === \"SpreadElement\") {\n          _last3.type = \"RestElement\";\n          var arg = _last3.argument;\n          this.toAssignable(arg);\n\n          if (arg.type !== \"Identifier\" && arg.type !== \"MemberExpression\" && arg.type !== \"ArrayPattern\" && arg.type !== \"ObjectPattern\") {\n            this.unexpected(arg.start);\n          }\n\n          if (trailingCommaPos) {\n            this.raiseTrailingCommaAfterRest(trailingCommaPos);\n          }\n\n          --end;\n        }\n      }\n\n      for (var i = 0; i < end; i++) {\n        var elt = exprList[i];\n\n        if (elt) {\n          this.toAssignable(elt);\n\n          if (elt.type === \"RestElement\") {\n            this.raiseRestNotLast(elt.start);\n          }\n        }\n      }\n\n      return exprList;\n    }\n  }, {\n    key: \"toReferencedList\",\n    value: function toReferencedList(exprList, isParenthesizedExpr) {\n      return exprList;\n    }\n  }, {\n    key: \"toReferencedListDeep\",\n    value: function toReferencedListDeep(exprList, isParenthesizedExpr) {\n      this.toReferencedList(exprList, isParenthesizedExpr);\n\n      for (var _i = 0; _i < exprList.length; _i++) {\n        var expr = exprList[_i];\n\n        if ((expr == null ? void 0 : expr.type) === \"ArrayExpression\") {\n          this.toReferencedListDeep(expr.elements);\n        }\n      }\n    }\n  }, {\n    key: \"parseSpread\",\n    value: function parseSpread(refExpressionErrors, refNeedsArrowPos) {\n      var node = this.startNode();\n      this.next();\n      node.argument = this.parseMaybeAssign(false, refExpressionErrors, undefined, refNeedsArrowPos);\n      return this.finishNode(node, \"SpreadElement\");\n    }\n  }, {\n    key: \"parseRestBinding\",\n    value: function parseRestBinding() {\n      var node = this.startNode();\n      this.next();\n      node.argument = this.parseBindingAtom();\n      return this.finishNode(node, \"RestElement\");\n    }\n  }, {\n    key: \"parseBindingAtom\",\n    value: function parseBindingAtom() {\n      switch (this.state.type) {\n        case types.bracketL:\n          {\n            var node = this.startNode();\n            this.next();\n            node.elements = this.parseBindingList(types.bracketR, 93, true);\n            return this.finishNode(node, \"ArrayPattern\");\n          }\n\n        case types.braceL:\n          return this.parseObj(types.braceR, true);\n      }\n\n      return this.parseIdentifier();\n    }\n  }, {\n    key: \"parseBindingList\",\n    value: function parseBindingList(close, closeCharCode, allowEmpty, allowModifiers) {\n      var elts = [];\n      var first = true;\n\n      while (!this.eat(close)) {\n        if (first) {\n          first = false;\n        } else {\n          this.expect(types.comma);\n        }\n\n        if (allowEmpty && this.match(types.comma)) {\n          elts.push(null);\n        } else if (this.eat(close)) {\n          break;\n        } else if (this.match(types.ellipsis)) {\n          elts.push(this.parseAssignableListItemTypes(this.parseRestBinding()));\n          this.checkCommaAfterRest(closeCharCode);\n          this.expect(close);\n          break;\n        } else {\n          var decorators = [];\n\n          if (this.match(types.at) && this.hasPlugin(\"decorators\")) {\n            this.raise(this.state.start, ErrorMessages.UnsupportedParameterDecorator);\n          }\n\n          while (this.match(types.at)) {\n            decorators.push(this.parseDecorator());\n          }\n\n          elts.push(this.parseAssignableListItem(allowModifiers, decorators));\n        }\n      }\n\n      return elts;\n    }\n  }, {\n    key: \"parseAssignableListItem\",\n    value: function parseAssignableListItem(allowModifiers, decorators) {\n      var left = this.parseMaybeDefault();\n      this.parseAssignableListItemTypes(left);\n      var elt = this.parseMaybeDefault(left.start, left.loc.start, left);\n\n      if (decorators.length) {\n        left.decorators = decorators;\n      }\n\n      return elt;\n    }\n  }, {\n    key: \"parseAssignableListItemTypes\",\n    value: function parseAssignableListItemTypes(param) {\n      return param;\n    }\n  }, {\n    key: \"parseMaybeDefault\",\n    value: function parseMaybeDefault(startPos, startLoc, left) {\n      startLoc = startLoc || this.state.startLoc;\n      startPos = startPos || this.state.start;\n      left = left || this.parseBindingAtom();\n      if (!this.eat(types.eq)) return left;\n      var node = this.startNodeAt(startPos, startLoc);\n      node.left = left;\n      node.right = this.parseMaybeAssign();\n      return this.finishNode(node, \"AssignmentPattern\");\n    }\n  }, {\n    key: \"checkLVal\",\n    value: function checkLVal(expr) {\n      var bindingType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : BIND_NONE;\n      var checkClashes = arguments.length > 2 ? arguments[2] : undefined;\n      var contextDescription = arguments.length > 3 ? arguments[3] : undefined;\n      var disallowLetBinding = arguments.length > 4 ? arguments[4] : undefined;\n      var strictModeChanged = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : false;\n\n      switch (expr.type) {\n        case \"Identifier\":\n          if (this.state.strict && (strictModeChanged ? isStrictBindReservedWord(expr.name, this.inModule) : isStrictBindOnlyReservedWord(expr.name))) {\n            this.raise(expr.start, bindingType === BIND_NONE ? ErrorMessages.StrictEvalArguments : ErrorMessages.StrictEvalArgumentsBinding, expr.name);\n          }\n\n          if (checkClashes) {\n            var key = \"_\".concat(expr.name);\n\n            if (checkClashes[key]) {\n              this.raise(expr.start, ErrorMessages.ParamDupe);\n            } else {\n              checkClashes[key] = true;\n            }\n          }\n\n          if (disallowLetBinding && expr.name === \"let\") {\n            this.raise(expr.start, ErrorMessages.LetInLexicalBinding);\n          }\n\n          if (!(bindingType & BIND_NONE)) {\n            this.scope.declareName(expr.name, bindingType, expr.start);\n          }\n\n          break;\n\n        case \"MemberExpression\":\n          if (bindingType !== BIND_NONE) {\n            this.raise(expr.start, ErrorMessages.InvalidPropertyBindingPattern);\n          }\n\n          break;\n\n        case \"ObjectPattern\":\n          for (var _i2 = 0, _expr$properties = expr.properties; _i2 < _expr$properties.length; _i2++) {\n            var prop = _expr$properties[_i2];\n            if (prop.type === \"ObjectProperty\") prop = prop.value;else if (prop.type === \"ObjectMethod\") continue;\n            this.checkLVal(prop, bindingType, checkClashes, \"object destructuring pattern\", disallowLetBinding);\n          }\n\n          break;\n\n        case \"ArrayPattern\":\n          for (var _i3 = 0, _expr$elements = expr.elements; _i3 < _expr$elements.length; _i3++) {\n            var elem = _expr$elements[_i3];\n\n            if (elem) {\n              this.checkLVal(elem, bindingType, checkClashes, \"array destructuring pattern\", disallowLetBinding);\n            }\n          }\n\n          break;\n\n        case \"AssignmentPattern\":\n          this.checkLVal(expr.left, bindingType, checkClashes, \"assignment pattern\");\n          break;\n\n        case \"RestElement\":\n          this.checkLVal(expr.argument, bindingType, checkClashes, \"rest element\");\n          break;\n\n        case \"ParenthesizedExpression\":\n          this.checkLVal(expr.expression, bindingType, checkClashes, \"parenthesized expression\");\n          break;\n\n        default:\n          {\n            this.raise(expr.start, bindingType === BIND_NONE ? ErrorMessages.InvalidLhs : ErrorMessages.InvalidLhsBinding, contextDescription);\n          }\n      }\n    }\n  }, {\n    key: \"checkToRestConversion\",\n    value: function checkToRestConversion(node) {\n      if (node.argument.type !== \"Identifier\" && node.argument.type !== \"MemberExpression\") {\n        this.raise(node.argument.start, ErrorMessages.InvalidRestAssignmentPattern);\n      }\n    }\n  }, {\n    key: \"checkCommaAfterRest\",\n    value: function checkCommaAfterRest(close) {\n      if (this.match(types.comma)) {\n        if (this.lookaheadCharCode() === close) {\n          this.raiseTrailingCommaAfterRest(this.state.start);\n        } else {\n          this.raiseRestNotLast(this.state.start);\n        }\n      }\n    }\n  }, {\n    key: \"raiseRestNotLast\",\n    value: function raiseRestNotLast(pos) {\n      throw this.raise(pos, ErrorMessages.ElementAfterRest);\n    }\n  }, {\n    key: \"raiseTrailingCommaAfterRest\",\n    value: function raiseTrailingCommaAfterRest(pos) {\n      this.raise(pos, ErrorMessages.RestTrailingComma);\n    }\n  }]);\n\n  return LValParser;\n}(NodeUtils);\n\nvar ExpressionParser = /*#__PURE__*/function (_LValParser) {\n  _inherits(ExpressionParser, _LValParser);\n\n  var _super15 = _createSuper(ExpressionParser);\n\n  function ExpressionParser() {\n    _classCallCheck(this, ExpressionParser);\n\n    return _super15.apply(this, arguments);\n  }\n\n  _createClass(ExpressionParser, [{\n    key: \"checkProto\",\n    value: function checkProto(prop, isRecord, protoRef, refExpressionErrors) {\n      if (prop.type === \"SpreadElement\" || prop.type === \"ObjectMethod\" || prop.computed || prop.shorthand) {\n        return;\n      }\n\n      var key = prop.key;\n      var name = key.type === \"Identifier\" ? key.name : key.value;\n\n      if (name === \"__proto__\") {\n        if (isRecord) {\n          this.raise(key.start, ErrorMessages.RecordNoProto);\n          return;\n        }\n\n        if (protoRef.used) {\n          if (refExpressionErrors) {\n            if (refExpressionErrors.doubleProto === -1) {\n              refExpressionErrors.doubleProto = key.start;\n            }\n          } else {\n            this.raise(key.start, ErrorMessages.DuplicateProto);\n          }\n        }\n\n        protoRef.used = true;\n      }\n    }\n  }, {\n    key: \"getExpression\",\n    value: function getExpression() {\n      var paramFlags = PARAM;\n\n      if (this.hasPlugin(\"topLevelAwait\") && this.inModule) {\n        paramFlags |= PARAM_AWAIT;\n      }\n\n      this.scope.enter(SCOPE_PROGRAM);\n      this.prodParam.enter(paramFlags);\n      this.nextToken();\n      var expr = this.parseExpression();\n\n      if (!this.match(types.eof)) {\n        this.unexpected();\n      }\n\n      expr.comments = this.state.comments;\n      expr.errors = this.state.errors;\n      return expr;\n    }\n  }, {\n    key: \"parseExpression\",\n    value: function parseExpression(noIn, refExpressionErrors) {\n      var startPos = this.state.start;\n      var startLoc = this.state.startLoc;\n      var expr = this.parseMaybeAssign(noIn, refExpressionErrors);\n\n      if (this.match(types.comma)) {\n        var node = this.startNodeAt(startPos, startLoc);\n        node.expressions = [expr];\n\n        while (this.eat(types.comma)) {\n          node.expressions.push(this.parseMaybeAssign(noIn, refExpressionErrors));\n        }\n\n        this.toReferencedList(node.expressions);\n        return this.finishNode(node, \"SequenceExpression\");\n      }\n\n      return expr;\n    }\n  }, {\n    key: \"parseMaybeAssign\",\n    value: function parseMaybeAssign(noIn, refExpressionErrors, afterLeftParse, refNeedsArrowPos) {\n      var startPos = this.state.start;\n      var startLoc = this.state.startLoc;\n\n      if (this.isContextual(\"yield\")) {\n        if (this.prodParam.hasYield) {\n          var _left = this.parseYield(noIn);\n\n          if (afterLeftParse) {\n            _left = afterLeftParse.call(this, _left, startPos, startLoc);\n          }\n\n          return _left;\n        } else {\n          this.state.exprAllowed = false;\n        }\n      }\n\n      var ownExpressionErrors;\n\n      if (refExpressionErrors) {\n        ownExpressionErrors = false;\n      } else {\n        refExpressionErrors = new ExpressionErrors();\n        ownExpressionErrors = true;\n      }\n\n      if (this.match(types.parenL) || this.match(types.name)) {\n        this.state.potentialArrowAt = this.state.start;\n      }\n\n      var left = this.parseMaybeConditional(noIn, refExpressionErrors, refNeedsArrowPos);\n\n      if (afterLeftParse) {\n        left = afterLeftParse.call(this, left, startPos, startLoc);\n      }\n\n      if (this.state.type.isAssign) {\n        var node = this.startNodeAt(startPos, startLoc);\n        var operator = this.state.value;\n        node.operator = operator;\n\n        if (operator === \"??=\") {\n          this.expectPlugin(\"logicalAssignment\");\n        }\n\n        if (operator === \"||=\" || operator === \"&&=\") {\n          this.expectPlugin(\"logicalAssignment\");\n        }\n\n        if (this.match(types.eq)) {\n          node.left = this.toAssignable(left);\n          refExpressionErrors.doubleProto = -1;\n        } else {\n          node.left = left;\n        }\n\n        if (refExpressionErrors.shorthandAssign >= node.left.start) {\n          refExpressionErrors.shorthandAssign = -1;\n        }\n\n        this.checkLVal(left, undefined, undefined, \"assignment expression\");\n        this.next();\n        node.right = this.parseMaybeAssign(noIn);\n        return this.finishNode(node, \"AssignmentExpression\");\n      } else if (ownExpressionErrors) {\n        this.checkExpressionErrors(refExpressionErrors, true);\n      }\n\n      return left;\n    }\n  }, {\n    key: \"parseMaybeConditional\",\n    value: function parseMaybeConditional(noIn, refExpressionErrors, refNeedsArrowPos) {\n      var startPos = this.state.start;\n      var startLoc = this.state.startLoc;\n      var potentialArrowAt = this.state.potentialArrowAt;\n      var expr = this.parseExprOps(noIn, refExpressionErrors);\n\n      if (expr.type === \"ArrowFunctionExpression\" && expr.start === potentialArrowAt) {\n        return expr;\n      }\n\n      if (this.checkExpressionErrors(refExpressionErrors, false)) return expr;\n      return this.parseConditional(expr, noIn, startPos, startLoc, refNeedsArrowPos);\n    }\n  }, {\n    key: \"parseConditional\",\n    value: function parseConditional(expr, noIn, startPos, startLoc, refNeedsArrowPos) {\n      if (this.eat(types.question)) {\n        var node = this.startNodeAt(startPos, startLoc);\n        node.test = expr;\n        node.consequent = this.parseMaybeAssign();\n        this.expect(types.colon);\n        node.alternate = this.parseMaybeAssign(noIn);\n        return this.finishNode(node, \"ConditionalExpression\");\n      }\n\n      return expr;\n    }\n  }, {\n    key: \"parseExprOps\",\n    value: function parseExprOps(noIn, refExpressionErrors) {\n      var startPos = this.state.start;\n      var startLoc = this.state.startLoc;\n      var potentialArrowAt = this.state.potentialArrowAt;\n      var expr = this.parseMaybeUnary(refExpressionErrors);\n\n      if (expr.type === \"ArrowFunctionExpression\" && expr.start === potentialArrowAt) {\n        return expr;\n      }\n\n      if (this.checkExpressionErrors(refExpressionErrors, false)) {\n        return expr;\n      }\n\n      return this.parseExprOp(expr, startPos, startLoc, -1, noIn);\n    }\n  }, {\n    key: \"parseExprOp\",\n    value: function parseExprOp(left, leftStartPos, leftStartLoc, minPrec, noIn) {\n      var prec = this.state.type.binop;\n\n      if (prec != null && (!noIn || !this.match(types._in))) {\n        if (prec > minPrec) {\n          var operator = this.state.value;\n\n          if (operator === \"|>\" && this.state.inFSharpPipelineDirectBody) {\n            return left;\n          }\n\n          var node = this.startNodeAt(leftStartPos, leftStartLoc);\n          node.left = left;\n          node.operator = operator;\n\n          if (operator === \"**\" && left.type === \"UnaryExpression\" && (this.options.createParenthesizedExpressions || !(left.extra && left.extra.parenthesized))) {\n            this.raise(left.argument.start, ErrorMessages.UnexpectedTokenUnaryExponentiation);\n          }\n\n          var op = this.state.type;\n          var logical = op === types.logicalOR || op === types.logicalAND;\n          var coalesce = op === types.nullishCoalescing;\n\n          if (op === types.pipeline) {\n            this.expectPlugin(\"pipelineOperator\");\n            this.state.inPipeline = true;\n            this.checkPipelineAtInfixOperator(left, leftStartPos);\n          } else if (coalesce) {\n            prec = types.logicalAND.binop;\n          }\n\n          this.next();\n\n          if (op === types.pipeline && this.getPluginOption(\"pipelineOperator\", \"proposal\") === \"minimal\") {\n            if (this.match(types.name) && this.state.value === \"await\" && this.prodParam.hasAwait) {\n              throw this.raise(this.state.start, ErrorMessages.UnexpectedAwaitAfterPipelineBody);\n            }\n          }\n\n          node.right = this.parseExprOpRightExpr(op, prec, noIn);\n          this.finishNode(node, logical || coalesce ? \"LogicalExpression\" : \"BinaryExpression\");\n          var nextOp = this.state.type;\n\n          if (coalesce && (nextOp === types.logicalOR || nextOp === types.logicalAND) || logical && nextOp === types.nullishCoalescing) {\n            throw this.raise(this.state.start, ErrorMessages.MixingCoalesceWithLogical);\n          }\n\n          return this.parseExprOp(node, leftStartPos, leftStartLoc, minPrec, noIn);\n        }\n      }\n\n      return left;\n    }\n  }, {\n    key: \"parseExprOpRightExpr\",\n    value: function parseExprOpRightExpr(op, prec, noIn) {\n      var _this36 = this;\n\n      var startPos = this.state.start;\n      var startLoc = this.state.startLoc;\n\n      switch (op) {\n        case types.pipeline:\n          switch (this.getPluginOption(\"pipelineOperator\", \"proposal\")) {\n            case \"smart\":\n              return this.withTopicPermittingContext(function () {\n                return _this36.parseSmartPipelineBody(_this36.parseExprOpBaseRightExpr(op, prec, noIn), startPos, startLoc);\n              });\n\n            case \"fsharp\":\n              return this.withSoloAwaitPermittingContext(function () {\n                return _this36.parseFSharpPipelineBody(prec, noIn);\n              });\n          }\n\n        default:\n          return this.parseExprOpBaseRightExpr(op, prec, noIn);\n      }\n    }\n  }, {\n    key: \"parseExprOpBaseRightExpr\",\n    value: function parseExprOpBaseRightExpr(op, prec, noIn) {\n      var startPos = this.state.start;\n      var startLoc = this.state.startLoc;\n      return this.parseExprOp(this.parseMaybeUnary(), startPos, startLoc, op.rightAssociative ? prec - 1 : prec, noIn);\n    }\n  }, {\n    key: \"parseMaybeUnary\",\n    value: function parseMaybeUnary(refExpressionErrors) {\n      if (this.isContextual(\"await\") && this.isAwaitAllowed()) {\n        return this.parseAwait();\n      } else if (this.state.type.prefix) {\n        var node = this.startNode();\n        var update = this.match(types.incDec);\n        node.operator = this.state.value;\n        node.prefix = true;\n\n        if (node.operator === \"throw\") {\n          this.expectPlugin(\"throwExpressions\");\n        }\n\n        this.next();\n        node.argument = this.parseMaybeUnary();\n        this.checkExpressionErrors(refExpressionErrors, true);\n\n        if (update) {\n          this.checkLVal(node.argument, undefined, undefined, \"prefix operation\");\n        } else if (this.state.strict && node.operator === \"delete\") {\n          var arg = node.argument;\n\n          if (arg.type === \"Identifier\") {\n            this.raise(node.start, ErrorMessages.StrictDelete);\n          } else if ((arg.type === \"MemberExpression\" || arg.type === \"OptionalMemberExpression\") && arg.property.type === \"PrivateName\") {\n            this.raise(node.start, ErrorMessages.DeletePrivateField);\n          }\n        }\n\n        return this.finishNode(node, update ? \"UpdateExpression\" : \"UnaryExpression\");\n      }\n\n      var startPos = this.state.start;\n      var startLoc = this.state.startLoc;\n      var expr = this.parseExprSubscripts(refExpressionErrors);\n      if (this.checkExpressionErrors(refExpressionErrors, false)) return expr;\n\n      while (this.state.type.postfix && !this.canInsertSemicolon()) {\n        var _node10 = this.startNodeAt(startPos, startLoc);\n\n        _node10.operator = this.state.value;\n        _node10.prefix = false;\n        _node10.argument = expr;\n        this.checkLVal(expr, undefined, undefined, \"postfix operation\");\n        this.next();\n        expr = this.finishNode(_node10, \"UpdateExpression\");\n      }\n\n      return expr;\n    }\n  }, {\n    key: \"parseExprSubscripts\",\n    value: function parseExprSubscripts(refExpressionErrors) {\n      var startPos = this.state.start;\n      var startLoc = this.state.startLoc;\n      var potentialArrowAt = this.state.potentialArrowAt;\n      var expr = this.parseExprAtom(refExpressionErrors);\n\n      if (expr.type === \"ArrowFunctionExpression\" && expr.start === potentialArrowAt) {\n        return expr;\n      }\n\n      return this.parseSubscripts(expr, startPos, startLoc);\n    }\n  }, {\n    key: \"parseSubscripts\",\n    value: function parseSubscripts(base, startPos, startLoc, noCalls) {\n      var state = {\n        optionalChainMember: false,\n        maybeAsyncArrow: this.atPossibleAsyncArrow(base),\n        stop: false\n      };\n\n      do {\n        var oldMaybeInAsyncArrowHead = this.state.maybeInAsyncArrowHead;\n\n        if (state.maybeAsyncArrow) {\n          this.state.maybeInAsyncArrowHead = true;\n        }\n\n        base = this.parseSubscript(base, startPos, startLoc, noCalls, state);\n        state.maybeAsyncArrow = false;\n        this.state.maybeInAsyncArrowHead = oldMaybeInAsyncArrowHead;\n      } while (!state.stop);\n\n      return base;\n    }\n  }, {\n    key: \"parseSubscript\",\n    value: function parseSubscript(base, startPos, startLoc, noCalls, state) {\n      if (!noCalls && this.eat(types.doubleColon)) {\n        var node = this.startNodeAt(startPos, startLoc);\n        node.object = base;\n        node.callee = this.parseNoCallExpr();\n        state.stop = true;\n        return this.parseSubscripts(this.finishNode(node, \"BindExpression\"), startPos, startLoc, noCalls);\n      }\n\n      var optional = false;\n\n      if (this.match(types.questionDot)) {\n        state.optionalChainMember = optional = true;\n\n        if (noCalls && this.lookaheadCharCode() === 40) {\n          state.stop = true;\n          return base;\n        }\n\n        this.next();\n      }\n\n      var computed = this.eat(types.bracketL);\n\n      if (optional && !this.match(types.parenL) && !this.match(types.backQuote) || computed || this.eat(types.dot)) {\n        var _node11 = this.startNodeAt(startPos, startLoc);\n\n        _node11.object = base;\n        _node11.property = computed ? this.parseExpression() : this.parseMaybePrivateName(true);\n        _node11.computed = computed;\n\n        if (_node11.property.type === \"PrivateName\") {\n          if (_node11.object.type === \"Super\") {\n            this.raise(startPos, ErrorMessages.SuperPrivateField);\n          }\n\n          this.classScope.usePrivateName(_node11.property.id.name, _node11.property.start);\n        }\n\n        if (computed) {\n          this.expect(types.bracketR);\n        }\n\n        if (state.optionalChainMember) {\n          _node11.optional = optional;\n          return this.finishNode(_node11, \"OptionalMemberExpression\");\n        } else {\n          return this.finishNode(_node11, \"MemberExpression\");\n        }\n      } else if (!noCalls && this.match(types.parenL)) {\n        var oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n        var oldYieldPos = this.state.yieldPos;\n        var oldAwaitPos = this.state.awaitPos;\n        this.state.maybeInArrowParameters = true;\n        this.state.yieldPos = -1;\n        this.state.awaitPos = -1;\n        this.next();\n\n        var _node12 = this.startNodeAt(startPos, startLoc);\n\n        _node12.callee = base;\n\n        if (state.optionalChainMember) {\n          _node12.optional = optional;\n        }\n\n        if (optional) {\n          _node12.arguments = this.parseCallExpressionArguments(types.parenR, false);\n        } else {\n          _node12.arguments = this.parseCallExpressionArguments(types.parenR, state.maybeAsyncArrow, base.type === \"Import\", base.type !== \"Super\", _node12);\n        }\n\n        this.finishCallExpression(_node12, state.optionalChainMember);\n\n        if (state.maybeAsyncArrow && this.shouldParseAsyncArrow() && !optional) {\n          state.stop = true;\n          _node12 = this.parseAsyncArrowFromCallExpression(this.startNodeAt(startPos, startLoc), _node12);\n          this.checkYieldAwaitInDefaultParams();\n          this.state.yieldPos = oldYieldPos;\n          this.state.awaitPos = oldAwaitPos;\n        } else {\n          this.toReferencedListDeep(_node12.arguments);\n          if (oldYieldPos !== -1) this.state.yieldPos = oldYieldPos;\n\n          if (!this.isAwaitAllowed() && !oldMaybeInArrowParameters || oldAwaitPos !== -1) {\n            this.state.awaitPos = oldAwaitPos;\n          }\n        }\n\n        this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n        return _node12;\n      } else if (this.match(types.backQuote)) {\n        return this.parseTaggedTemplateExpression(startPos, startLoc, base, state);\n      } else {\n        state.stop = true;\n        return base;\n      }\n    }\n  }, {\n    key: \"parseTaggedTemplateExpression\",\n    value: function parseTaggedTemplateExpression(startPos, startLoc, base, state, typeArguments) {\n      var node = this.startNodeAt(startPos, startLoc);\n      node.tag = base;\n      node.quasi = this.parseTemplate(true);\n      if (typeArguments) node.typeParameters = typeArguments;\n\n      if (state.optionalChainMember) {\n        this.raise(startPos, ErrorMessages.OptionalChainingNoTemplate);\n      }\n\n      return this.finishNode(node, \"TaggedTemplateExpression\");\n    }\n  }, {\n    key: \"atPossibleAsyncArrow\",\n    value: function atPossibleAsyncArrow(base) {\n      return base.type === \"Identifier\" && base.name === \"async\" && this.state.lastTokEnd === base.end && !this.canInsertSemicolon() && base.end - base.start === 5 && base.start === this.state.potentialArrowAt;\n    }\n  }, {\n    key: \"finishCallExpression\",\n    value: function finishCallExpression(node, optional) {\n      if (node.callee.type === \"Import\") {\n        if (node.arguments.length === 2) {\n          this.expectPlugin(\"moduleAttributes\");\n        }\n\n        if (node.arguments.length === 0 || node.arguments.length > 2) {\n          this.raise(node.start, ErrorMessages.ImportCallArity, this.hasPlugin(\"moduleAttributes\") ? \"one or two arguments\" : \"one argument\");\n        } else {\n          for (var _i = 0, _node$arguments = node.arguments; _i < _node$arguments.length; _i++) {\n            var arg = _node$arguments[_i];\n\n            if (arg.type === \"SpreadElement\") {\n              this.raise(arg.start, ErrorMessages.ImportCallSpreadArgument);\n            }\n          }\n        }\n      }\n\n      return this.finishNode(node, optional ? \"OptionalCallExpression\" : \"CallExpression\");\n    }\n  }, {\n    key: \"parseCallExpressionArguments\",\n    value: function parseCallExpressionArguments(close, possibleAsyncArrow, dynamicImport, allowPlaceholder, nodeForExtra) {\n      var elts = [];\n      var innerParenStart;\n      var first = true;\n      var oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n      this.state.inFSharpPipelineDirectBody = false;\n\n      while (!this.eat(close)) {\n        if (first) {\n          first = false;\n        } else {\n          this.expect(types.comma);\n\n          if (this.match(close)) {\n            if (dynamicImport && !this.hasPlugin(\"moduleAttributes\")) {\n              this.raise(this.state.lastTokStart, ErrorMessages.ImportCallArgumentTrailingComma);\n            }\n\n            if (nodeForExtra) {\n              this.addExtra(nodeForExtra, \"trailingComma\", this.state.lastTokStart);\n            }\n\n            this.next();\n            break;\n          }\n        }\n\n        if (this.match(types.parenL) && !innerParenStart) {\n          innerParenStart = this.state.start;\n        }\n\n        elts.push(this.parseExprListItem(false, possibleAsyncArrow ? new ExpressionErrors() : undefined, possibleAsyncArrow ? {\n          start: 0\n        } : undefined, allowPlaceholder));\n      }\n\n      if (possibleAsyncArrow && innerParenStart && this.shouldParseAsyncArrow()) {\n        this.unexpected();\n      }\n\n      this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n      return elts;\n    }\n  }, {\n    key: \"shouldParseAsyncArrow\",\n    value: function shouldParseAsyncArrow() {\n      return this.match(types.arrow) && !this.canInsertSemicolon();\n    }\n  }, {\n    key: \"parseAsyncArrowFromCallExpression\",\n    value: function parseAsyncArrowFromCallExpression(node, call) {\n      var _call$extra;\n\n      this.expect(types.arrow);\n      this.parseArrowExpression(node, call.arguments, true, (_call$extra = call.extra) == null ? void 0 : _call$extra.trailingComma);\n      return node;\n    }\n  }, {\n    key: \"parseNoCallExpr\",\n    value: function parseNoCallExpr() {\n      var startPos = this.state.start;\n      var startLoc = this.state.startLoc;\n      return this.parseSubscripts(this.parseExprAtom(), startPos, startLoc, true);\n    }\n  }, {\n    key: \"parseExprAtom\",\n    value: function parseExprAtom(refExpressionErrors) {\n      if (this.state.type === types.slash) this.readRegexp();\n      var canBeArrow = this.state.potentialArrowAt === this.state.start;\n      var node;\n\n      switch (this.state.type) {\n        case types._super:\n          node = this.startNode();\n          this.next();\n\n          if (this.match(types.parenL) && !this.scope.allowDirectSuper && !this.options.allowSuperOutsideMethod) {\n            this.raise(node.start, ErrorMessages.SuperNotAllowed);\n          } else if (!this.scope.allowSuper && !this.options.allowSuperOutsideMethod) {\n            this.raise(node.start, ErrorMessages.UnexpectedSuper);\n          }\n\n          if (!this.match(types.parenL) && !this.match(types.bracketL) && !this.match(types.dot)) {\n            this.raise(node.start, ErrorMessages.UnsupportedSuper);\n          }\n\n          return this.finishNode(node, \"Super\");\n\n        case types._import:\n          node = this.startNode();\n          this.next();\n\n          if (this.match(types.dot)) {\n            return this.parseImportMetaProperty(node);\n          }\n\n          if (!this.match(types.parenL)) {\n            this.raise(this.state.lastTokStart, ErrorMessages.UnsupportedImport);\n          }\n\n          return this.finishNode(node, \"Import\");\n\n        case types._this:\n          node = this.startNode();\n          this.next();\n          return this.finishNode(node, \"ThisExpression\");\n\n        case types.name:\n          {\n            node = this.startNode();\n            var containsEsc = this.state.containsEsc;\n            var id = this.parseIdentifier();\n\n            if (!containsEsc && id.name === \"async\" && this.match(types._function) && !this.canInsertSemicolon()) {\n              var _last4 = this.state.context.length - 1;\n\n              if (this.state.context[_last4] !== types$1.functionStatement) {\n                throw new Error(\"Internal error\");\n              }\n\n              this.state.context[_last4] = types$1.functionExpression;\n              this.next();\n              return this.parseFunction(node, undefined, true);\n            } else if (canBeArrow && !containsEsc && id.name === \"async\" && this.match(types.name) && !this.canInsertSemicolon()) {\n              var oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n              var oldMaybeInAsyncArrowHead = this.state.maybeInAsyncArrowHead;\n              var oldYieldPos = this.state.yieldPos;\n              var oldAwaitPos = this.state.awaitPos;\n              this.state.maybeInArrowParameters = true;\n              this.state.maybeInAsyncArrowHead = true;\n              this.state.yieldPos = -1;\n              this.state.awaitPos = -1;\n              var params = [this.parseIdentifier()];\n              this.expect(types.arrow);\n              this.checkYieldAwaitInDefaultParams();\n              this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n              this.state.maybeInAsyncArrowHead = oldMaybeInAsyncArrowHead;\n              this.state.yieldPos = oldYieldPos;\n              this.state.awaitPos = oldAwaitPos;\n              this.parseArrowExpression(node, params, true);\n              return node;\n            }\n\n            if (canBeArrow && this.match(types.arrow) && !this.canInsertSemicolon()) {\n              this.next();\n              this.parseArrowExpression(node, [id], false);\n              return node;\n            }\n\n            return id;\n          }\n\n        case types._do:\n          {\n            this.expectPlugin(\"doExpressions\");\n\n            var _node13 = this.startNode();\n\n            this.next();\n            var oldLabels = this.state.labels;\n            this.state.labels = [];\n            _node13.body = this.parseBlock();\n            this.state.labels = oldLabels;\n            return this.finishNode(_node13, \"DoExpression\");\n          }\n\n        case types.regexp:\n          {\n            var value = this.state.value;\n            node = this.parseLiteral(value.value, \"RegExpLiteral\");\n            node.pattern = value.pattern;\n            node.flags = value.flags;\n            return node;\n          }\n\n        case types.num:\n          return this.parseLiteral(this.state.value, \"NumericLiteral\");\n\n        case types.bigint:\n          return this.parseLiteral(this.state.value, \"BigIntLiteral\");\n\n        case types.string:\n          return this.parseLiteral(this.state.value, \"StringLiteral\");\n\n        case types._null:\n          node = this.startNode();\n          this.next();\n          return this.finishNode(node, \"NullLiteral\");\n\n        case types._true:\n        case types._false:\n          return this.parseBooleanLiteral();\n\n        case types.parenL:\n          return this.parseParenAndDistinguishExpression(canBeArrow);\n\n        case types.bracketBarL:\n        case types.bracketHashL:\n          {\n            this.expectPlugin(\"recordAndTuple\");\n            var oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n            var close = this.state.type === types.bracketBarL ? types.bracketBarR : types.bracketR;\n            this.state.inFSharpPipelineDirectBody = false;\n            node = this.startNode();\n            this.next();\n            node.elements = this.parseExprList(close, false, refExpressionErrors, node);\n            this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n            return this.finishNode(node, \"TupleExpression\");\n          }\n\n        case types.bracketL:\n          {\n            var _oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n            this.state.inFSharpPipelineDirectBody = false;\n            node = this.startNode();\n            this.next();\n            node.elements = this.parseExprList(types.bracketR, true, refExpressionErrors, node);\n\n            if (!this.state.maybeInArrowParameters) {\n              this.toReferencedList(node.elements);\n            }\n\n            this.state.inFSharpPipelineDirectBody = _oldInFSharpPipelineDirectBody;\n            return this.finishNode(node, \"ArrayExpression\");\n          }\n\n        case types.braceBarL:\n        case types.braceHashL:\n          {\n            this.expectPlugin(\"recordAndTuple\");\n            var _oldInFSharpPipelineDirectBody2 = this.state.inFSharpPipelineDirectBody;\n\n            var _close = this.state.type === types.braceBarL ? types.braceBarR : types.braceR;\n\n            this.state.inFSharpPipelineDirectBody = false;\n            var ret = this.parseObj(_close, false, true, refExpressionErrors);\n            this.state.inFSharpPipelineDirectBody = _oldInFSharpPipelineDirectBody2;\n            return ret;\n          }\n\n        case types.braceL:\n          {\n            var _oldInFSharpPipelineDirectBody3 = this.state.inFSharpPipelineDirectBody;\n            this.state.inFSharpPipelineDirectBody = false;\n\n            var _ret = this.parseObj(types.braceR, false, false, refExpressionErrors);\n\n            this.state.inFSharpPipelineDirectBody = _oldInFSharpPipelineDirectBody3;\n            return _ret;\n          }\n\n        case types._function:\n          return this.parseFunctionExpression();\n\n        case types.at:\n          this.parseDecorators();\n\n        case types._class:\n          node = this.startNode();\n          this.takeDecorators(node);\n          return this.parseClass(node, false);\n\n        case types._new:\n          return this.parseNew();\n\n        case types.backQuote:\n          return this.parseTemplate(false);\n\n        case types.doubleColon:\n          {\n            node = this.startNode();\n            this.next();\n            node.object = null;\n            var callee = node.callee = this.parseNoCallExpr();\n\n            if (callee.type === \"MemberExpression\") {\n              return this.finishNode(node, \"BindExpression\");\n            } else {\n              throw this.raise(callee.start, ErrorMessages.UnsupportedBind);\n            }\n          }\n\n        case types.hash:\n          {\n            if (this.state.inPipeline) {\n              node = this.startNode();\n\n              if (this.getPluginOption(\"pipelineOperator\", \"proposal\") !== \"smart\") {\n                this.raise(node.start, ErrorMessages.PrimaryTopicRequiresSmartPipeline);\n              }\n\n              this.next();\n\n              if (!this.primaryTopicReferenceIsAllowedInCurrentTopicContext()) {\n                this.raise(node.start, ErrorMessages.PrimaryTopicNotAllowed);\n              }\n\n              this.registerTopicReference();\n              return this.finishNode(node, \"PipelinePrimaryTopicReference\");\n            }\n\n            var nextCh = this.input.codePointAt(this.state.end);\n\n            if (isIdentifierStart(nextCh) || nextCh === 92) {\n              var start = this.state.start;\n              node = this.parseMaybePrivateName(true);\n\n              if (this.match(types._in)) {\n                this.expectPlugin(\"privateIn\");\n                this.classScope.usePrivateName(node.id.name, node.start);\n              } else if (this.hasPlugin(\"privateIn\")) {\n                this.raise(this.state.start, ErrorMessages.PrivateInExpectedIn, node.id.name);\n              } else {\n                throw this.unexpected(start);\n              }\n\n              return node;\n            }\n          }\n\n        case types.relational:\n          {\n            if (this.state.value === \"<\") {\n              var lookaheadCh = this.input.codePointAt(this.nextTokenStart());\n\n              if (isIdentifierStart(lookaheadCh) || lookaheadCh === 62) {\n                this.expectOnePlugin([\"jsx\", \"flow\", \"typescript\"]);\n              }\n            }\n          }\n\n        default:\n          throw this.unexpected();\n      }\n    }\n  }, {\n    key: \"parseBooleanLiteral\",\n    value: function parseBooleanLiteral() {\n      var node = this.startNode();\n      node.value = this.match(types._true);\n      this.next();\n      return this.finishNode(node, \"BooleanLiteral\");\n    }\n  }, {\n    key: \"parseMaybePrivateName\",\n    value: function parseMaybePrivateName(isPrivateNameAllowed) {\n      var isPrivate = this.match(types.hash);\n\n      if (isPrivate) {\n        this.expectOnePlugin([\"classPrivateProperties\", \"classPrivateMethods\"]);\n\n        if (!isPrivateNameAllowed) {\n          this.raise(this.state.pos, ErrorMessages.UnexpectedPrivateField);\n        }\n\n        var node = this.startNode();\n        this.next();\n        this.assertNoSpace(\"Unexpected space between # and identifier\");\n        node.id = this.parseIdentifier(true);\n        return this.finishNode(node, \"PrivateName\");\n      } else {\n        return this.parseIdentifier(true);\n      }\n    }\n  }, {\n    key: \"parseFunctionExpression\",\n    value: function parseFunctionExpression() {\n      var node = this.startNode();\n      var meta = this.startNode();\n      this.next();\n      meta = this.createIdentifier(meta, \"function\");\n\n      if (this.prodParam.hasYield && this.eat(types.dot)) {\n        return this.parseMetaProperty(node, meta, \"sent\");\n      }\n\n      return this.parseFunction(node);\n    }\n  }, {\n    key: \"parseMetaProperty\",\n    value: function parseMetaProperty(node, meta, propertyName) {\n      node.meta = meta;\n\n      if (meta.name === \"function\" && propertyName === \"sent\") {\n        if (this.isContextual(propertyName)) {\n          this.expectPlugin(\"functionSent\");\n        } else if (!this.hasPlugin(\"functionSent\")) {\n          this.unexpected();\n        }\n      }\n\n      var containsEsc = this.state.containsEsc;\n      node.property = this.parseIdentifier(true);\n\n      if (node.property.name !== propertyName || containsEsc) {\n        this.raise(node.property.start, ErrorMessages.UnsupportedMetaProperty, meta.name, propertyName);\n      }\n\n      return this.finishNode(node, \"MetaProperty\");\n    }\n  }, {\n    key: \"parseImportMetaProperty\",\n    value: function parseImportMetaProperty(node) {\n      var id = this.createIdentifier(this.startNodeAtNode(node), \"import\");\n      this.expect(types.dot);\n\n      if (this.isContextual(\"meta\")) {\n        if (!this.inModule) {\n          this.raiseWithData(id.start, {\n            code: \"BABEL_PARSER_SOURCETYPE_MODULE_REQUIRED\"\n          }, ErrorMessages.ImportMetaOutsideModule);\n        }\n\n        this.sawUnambiguousESM = true;\n      }\n\n      return this.parseMetaProperty(node, id, \"meta\");\n    }\n  }, {\n    key: \"parseLiteral\",\n    value: function parseLiteral(value, type, startPos, startLoc) {\n      startPos = startPos || this.state.start;\n      startLoc = startLoc || this.state.startLoc;\n      var node = this.startNodeAt(startPos, startLoc);\n      this.addExtra(node, \"rawValue\", value);\n      this.addExtra(node, \"raw\", this.input.slice(startPos, this.state.end));\n      node.value = value;\n      this.next();\n      return this.finishNode(node, type);\n    }\n  }, {\n    key: \"parseParenAndDistinguishExpression\",\n    value: function parseParenAndDistinguishExpression(canBeArrow) {\n      var startPos = this.state.start;\n      var startLoc = this.state.startLoc;\n      var val;\n      this.expect(types.parenL);\n      var oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n      var oldYieldPos = this.state.yieldPos;\n      var oldAwaitPos = this.state.awaitPos;\n      var oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n      this.state.maybeInArrowParameters = true;\n      this.state.yieldPos = -1;\n      this.state.awaitPos = -1;\n      this.state.inFSharpPipelineDirectBody = false;\n      var innerStartPos = this.state.start;\n      var innerStartLoc = this.state.startLoc;\n      var exprList = [];\n      var refExpressionErrors = new ExpressionErrors();\n      var refNeedsArrowPos = {\n        start: 0\n      };\n      var first = true;\n      var spreadStart;\n      var optionalCommaStart;\n\n      while (!this.match(types.parenR)) {\n        if (first) {\n          first = false;\n        } else {\n          this.expect(types.comma, refNeedsArrowPos.start || null);\n\n          if (this.match(types.parenR)) {\n            optionalCommaStart = this.state.start;\n            break;\n          }\n        }\n\n        if (this.match(types.ellipsis)) {\n          var spreadNodeStartPos = this.state.start;\n          var spreadNodeStartLoc = this.state.startLoc;\n          spreadStart = this.state.start;\n          exprList.push(this.parseParenItem(this.parseRestBinding(), spreadNodeStartPos, spreadNodeStartLoc));\n          this.checkCommaAfterRest(41);\n          break;\n        } else {\n          exprList.push(this.parseMaybeAssign(false, refExpressionErrors, this.parseParenItem, refNeedsArrowPos));\n        }\n      }\n\n      var innerEndPos = this.state.start;\n      var innerEndLoc = this.state.startLoc;\n      this.expect(types.parenR);\n      this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n      this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n      var arrowNode = this.startNodeAt(startPos, startLoc);\n\n      if (canBeArrow && this.shouldParseArrow() && (arrowNode = this.parseArrow(arrowNode))) {\n        if (!this.isAwaitAllowed() && !this.state.maybeInAsyncArrowHead) {\n          this.state.awaitPos = oldAwaitPos;\n        }\n\n        this.checkYieldAwaitInDefaultParams();\n        this.state.yieldPos = oldYieldPos;\n        this.state.awaitPos = oldAwaitPos;\n\n        for (var _i2 = 0; _i2 < exprList.length; _i2++) {\n          var param = exprList[_i2];\n\n          if (param.extra && param.extra.parenthesized) {\n            this.unexpected(param.extra.parenStart);\n          }\n        }\n\n        this.parseArrowExpression(arrowNode, exprList, false);\n        return arrowNode;\n      }\n\n      if (oldYieldPos !== -1) this.state.yieldPos = oldYieldPos;\n      if (oldAwaitPos !== -1) this.state.awaitPos = oldAwaitPos;\n\n      if (!exprList.length) {\n        this.unexpected(this.state.lastTokStart);\n      }\n\n      if (optionalCommaStart) this.unexpected(optionalCommaStart);\n      if (spreadStart) this.unexpected(spreadStart);\n      this.checkExpressionErrors(refExpressionErrors, true);\n      if (refNeedsArrowPos.start) this.unexpected(refNeedsArrowPos.start);\n      this.toReferencedListDeep(exprList, true);\n\n      if (exprList.length > 1) {\n        val = this.startNodeAt(innerStartPos, innerStartLoc);\n        val.expressions = exprList;\n        this.finishNodeAt(val, \"SequenceExpression\", innerEndPos, innerEndLoc);\n      } else {\n        val = exprList[0];\n      }\n\n      if (!this.options.createParenthesizedExpressions) {\n        this.addExtra(val, \"parenthesized\", true);\n        this.addExtra(val, \"parenStart\", startPos);\n        return val;\n      }\n\n      var parenExpression = this.startNodeAt(startPos, startLoc);\n      parenExpression.expression = val;\n      this.finishNode(parenExpression, \"ParenthesizedExpression\");\n      return parenExpression;\n    }\n  }, {\n    key: \"shouldParseArrow\",\n    value: function shouldParseArrow() {\n      return !this.canInsertSemicolon();\n    }\n  }, {\n    key: \"parseArrow\",\n    value: function parseArrow(node) {\n      if (this.eat(types.arrow)) {\n        return node;\n      }\n    }\n  }, {\n    key: \"parseParenItem\",\n    value: function parseParenItem(node, startPos, startLoc) {\n      return node;\n    }\n  }, {\n    key: \"parseNew\",\n    value: function parseNew() {\n      var node = this.startNode();\n      var meta = this.startNode();\n      this.next();\n      meta = this.createIdentifier(meta, \"new\");\n\n      if (this.eat(types.dot)) {\n        var metaProp = this.parseMetaProperty(node, meta, \"target\");\n\n        if (!this.scope.inNonArrowFunction && !this.scope.inClass) {\n          var error = ErrorMessages.UnexpectedNewTarget;\n\n          if (this.hasPlugin(\"classProperties\")) {\n            error += \" or class properties\";\n          }\n\n          this.raise(metaProp.start, error);\n        }\n\n        return metaProp;\n      }\n\n      node.callee = this.parseNoCallExpr();\n\n      if (node.callee.type === \"Import\") {\n        this.raise(node.callee.start, ErrorMessages.ImportCallNotNewExpression);\n      } else if (node.callee.type === \"OptionalMemberExpression\" || node.callee.type === \"OptionalCallExpression\") {\n        this.raise(this.state.lastTokEnd, ErrorMessages.OptionalChainingNoNew);\n      } else if (this.eat(types.questionDot)) {\n        this.raise(this.state.start, ErrorMessages.OptionalChainingNoNew);\n      }\n\n      this.parseNewArguments(node);\n      return this.finishNode(node, \"NewExpression\");\n    }\n  }, {\n    key: \"parseNewArguments\",\n    value: function parseNewArguments(node) {\n      if (this.eat(types.parenL)) {\n        var args = this.parseExprList(types.parenR);\n        this.toReferencedList(args);\n        node.arguments = args;\n      } else {\n        node.arguments = [];\n      }\n    }\n  }, {\n    key: \"parseTemplateElement\",\n    value: function parseTemplateElement(isTagged) {\n      var elem = this.startNode();\n\n      if (this.state.value === null) {\n        if (!isTagged) {\n          this.raise(this.state.start + 1, ErrorMessages.InvalidEscapeSequenceTemplate);\n        }\n      }\n\n      elem.value = {\n        raw: this.input.slice(this.state.start, this.state.end).replace(/\\r\\n?/g, \"\\n\"),\n        cooked: this.state.value\n      };\n      this.next();\n      elem.tail = this.match(types.backQuote);\n      return this.finishNode(elem, \"TemplateElement\");\n    }\n  }, {\n    key: \"parseTemplate\",\n    value: function parseTemplate(isTagged) {\n      var node = this.startNode();\n      this.next();\n      node.expressions = [];\n      var curElt = this.parseTemplateElement(isTagged);\n      node.quasis = [curElt];\n\n      while (!curElt.tail) {\n        this.expect(types.dollarBraceL);\n        node.expressions.push(this.parseExpression());\n        this.expect(types.braceR);\n        node.quasis.push(curElt = this.parseTemplateElement(isTagged));\n      }\n\n      this.next();\n      return this.finishNode(node, \"TemplateLiteral\");\n    }\n  }, {\n    key: \"parseObj\",\n    value: function parseObj(close, isPattern, isRecord, refExpressionErrors) {\n      var propHash = Object.create(null);\n      var first = true;\n      var node = this.startNode();\n      node.properties = [];\n      this.next();\n\n      while (!this.eat(close)) {\n        if (first) {\n          first = false;\n        } else {\n          this.expect(types.comma);\n\n          if (this.match(close)) {\n            this.addExtra(node, \"trailingComma\", this.state.lastTokStart);\n            this.next();\n            break;\n          }\n        }\n\n        var prop = this.parseObjectMember(isPattern, refExpressionErrors);\n\n        if (!isPattern) {\n          this.checkProto(prop, isRecord, propHash, refExpressionErrors);\n        }\n\n        if (isRecord && prop.type !== \"ObjectProperty\" && prop.type !== \"SpreadElement\") {\n          this.raise(prop.start, ErrorMessages.InvalidRecordProperty);\n        }\n\n        if (prop.shorthand) {\n          this.addExtra(prop, \"shorthand\", true);\n        }\n\n        node.properties.push(prop);\n      }\n\n      var type = \"ObjectExpression\";\n\n      if (isPattern) {\n        type = \"ObjectPattern\";\n      } else if (isRecord) {\n        type = \"RecordExpression\";\n      }\n\n      return this.finishNode(node, type);\n    }\n  }, {\n    key: \"isAsyncProp\",\n    value: function isAsyncProp(prop) {\n      return !prop.computed && prop.key.type === \"Identifier\" && prop.key.name === \"async\" && (this.isLiteralPropertyName() || this.match(types.bracketL) || this.match(types.star)) && !this.hasPrecedingLineBreak();\n    }\n  }, {\n    key: \"parseObjectMember\",\n    value: function parseObjectMember(isPattern, refExpressionErrors) {\n      var decorators = [];\n\n      if (this.match(types.at)) {\n        if (this.hasPlugin(\"decorators\")) {\n          this.raise(this.state.start, ErrorMessages.UnsupportedPropertyDecorator);\n        }\n\n        while (this.match(types.at)) {\n          decorators.push(this.parseDecorator());\n        }\n      }\n\n      var prop = this.startNode();\n      var isGenerator = false;\n      var isAsync = false;\n      var startPos;\n      var startLoc;\n\n      if (this.match(types.ellipsis)) {\n        if (decorators.length) this.unexpected();\n\n        if (isPattern) {\n          this.next();\n          prop.argument = this.parseIdentifier();\n          this.checkCommaAfterRest(125);\n          return this.finishNode(prop, \"RestElement\");\n        }\n\n        return this.parseSpread();\n      }\n\n      if (decorators.length) {\n        prop.decorators = decorators;\n        decorators = [];\n      }\n\n      prop.method = false;\n\n      if (isPattern || refExpressionErrors) {\n        startPos = this.state.start;\n        startLoc = this.state.startLoc;\n      }\n\n      if (!isPattern) {\n        isGenerator = this.eat(types.star);\n      }\n\n      var containsEsc = this.state.containsEsc;\n      this.parsePropertyName(prop, false);\n\n      if (!isPattern && !containsEsc && !isGenerator && this.isAsyncProp(prop)) {\n        isAsync = true;\n        isGenerator = this.eat(types.star);\n        this.parsePropertyName(prop, false);\n      } else {\n        isAsync = false;\n      }\n\n      this.parseObjPropValue(prop, startPos, startLoc, isGenerator, isAsync, isPattern, refExpressionErrors, containsEsc);\n      return prop;\n    }\n  }, {\n    key: \"isGetterOrSetterMethod\",\n    value: function isGetterOrSetterMethod(prop, isPattern) {\n      return !isPattern && !prop.computed && prop.key.type === \"Identifier\" && (prop.key.name === \"get\" || prop.key.name === \"set\") && (this.isLiteralPropertyName() || this.match(types.bracketL));\n    }\n  }, {\n    key: \"getGetterSetterExpectedParamCount\",\n    value: function getGetterSetterExpectedParamCount(method) {\n      return method.kind === \"get\" ? 0 : 1;\n    }\n  }, {\n    key: \"checkGetterSetterParams\",\n    value: function checkGetterSetterParams(method) {\n      var paramCount = this.getGetterSetterExpectedParamCount(method);\n      var start = method.start;\n\n      if (method.params.length !== paramCount) {\n        if (method.kind === \"get\") {\n          this.raise(start, ErrorMessages.BadGetterArity);\n        } else {\n          this.raise(start, ErrorMessages.BadSetterArity);\n        }\n      }\n\n      if (method.kind === \"set\" && method.params[method.params.length - 1].type === \"RestElement\") {\n        this.raise(start, ErrorMessages.BadSetterRestParameter);\n      }\n    }\n  }, {\n    key: \"parseObjectMethod\",\n    value: function parseObjectMethod(prop, isGenerator, isAsync, isPattern, containsEsc) {\n      if (isAsync || isGenerator || this.match(types.parenL)) {\n        if (isPattern) this.unexpected();\n        prop.kind = \"method\";\n        prop.method = true;\n        return this.parseMethod(prop, isGenerator, isAsync, false, false, \"ObjectMethod\");\n      }\n\n      if (!containsEsc && this.isGetterOrSetterMethod(prop, isPattern)) {\n        if (isGenerator || isAsync) this.unexpected();\n        prop.kind = prop.key.name;\n        this.parsePropertyName(prop, false);\n        this.parseMethod(prop, false, false, false, false, \"ObjectMethod\");\n        this.checkGetterSetterParams(prop);\n        return prop;\n      }\n    }\n  }, {\n    key: \"parseObjectProperty\",\n    value: function parseObjectProperty(prop, startPos, startLoc, isPattern, refExpressionErrors) {\n      prop.shorthand = false;\n\n      if (this.eat(types.colon)) {\n        prop.value = isPattern ? this.parseMaybeDefault(this.state.start, this.state.startLoc) : this.parseMaybeAssign(false, refExpressionErrors);\n        return this.finishNode(prop, \"ObjectProperty\");\n      }\n\n      if (!prop.computed && prop.key.type === \"Identifier\") {\n        this.checkReservedWord(prop.key.name, prop.key.start, true, true);\n\n        if (isPattern) {\n          prop.value = this.parseMaybeDefault(startPos, startLoc, prop.key.__clone());\n        } else if (this.match(types.eq) && refExpressionErrors) {\n          if (refExpressionErrors.shorthandAssign === -1) {\n            refExpressionErrors.shorthandAssign = this.state.start;\n          }\n\n          prop.value = this.parseMaybeDefault(startPos, startLoc, prop.key.__clone());\n        } else {\n          prop.value = prop.key.__clone();\n        }\n\n        prop.shorthand = true;\n        return this.finishNode(prop, \"ObjectProperty\");\n      }\n    }\n  }, {\n    key: \"parseObjPropValue\",\n    value: function parseObjPropValue(prop, startPos, startLoc, isGenerator, isAsync, isPattern, refExpressionErrors, containsEsc) {\n      var node = this.parseObjectMethod(prop, isGenerator, isAsync, isPattern, containsEsc) || this.parseObjectProperty(prop, startPos, startLoc, isPattern, refExpressionErrors);\n      if (!node) this.unexpected();\n      return node;\n    }\n  }, {\n    key: \"parsePropertyName\",\n    value: function parsePropertyName(prop, isPrivateNameAllowed) {\n      if (this.eat(types.bracketL)) {\n        prop.computed = true;\n        prop.key = this.parseMaybeAssign();\n        this.expect(types.bracketR);\n      } else {\n        var oldInPropertyName = this.state.inPropertyName;\n        this.state.inPropertyName = true;\n        prop.key = this.match(types.num) || this.match(types.string) || this.match(types.bigint) ? this.parseExprAtom() : this.parseMaybePrivateName(isPrivateNameAllowed);\n\n        if (prop.key.type !== \"PrivateName\") {\n          prop.computed = false;\n        }\n\n        this.state.inPropertyName = oldInPropertyName;\n      }\n\n      return prop.key;\n    }\n  }, {\n    key: \"initFunction\",\n    value: function initFunction(node, isAsync) {\n      node.id = null;\n      node.generator = false;\n      node.async = !!isAsync;\n    }\n  }, {\n    key: \"parseMethod\",\n    value: function parseMethod(node, isGenerator, isAsync, isConstructor, allowDirectSuper, type) {\n      var inClassScope = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : false;\n      var oldYieldPos = this.state.yieldPos;\n      var oldAwaitPos = this.state.awaitPos;\n      this.state.yieldPos = -1;\n      this.state.awaitPos = -1;\n      this.initFunction(node, isAsync);\n      node.generator = !!isGenerator;\n      var allowModifiers = isConstructor;\n      this.scope.enter(SCOPE_FUNCTION | SCOPE_SUPER | (inClassScope ? SCOPE_CLASS : 0) | (allowDirectSuper ? SCOPE_DIRECT_SUPER : 0));\n      this.prodParam.enter(functionFlags(isAsync, node.generator));\n      this.parseFunctionParams(node, allowModifiers);\n      this.parseFunctionBodyAndFinish(node, type, true);\n      this.prodParam.exit();\n      this.scope.exit();\n      this.state.yieldPos = oldYieldPos;\n      this.state.awaitPos = oldAwaitPos;\n      return node;\n    }\n  }, {\n    key: \"parseArrowExpression\",\n    value: function parseArrowExpression(node, params, isAsync, trailingCommaPos) {\n      this.scope.enter(SCOPE_FUNCTION | SCOPE_ARROW);\n      this.prodParam.enter(functionFlags(isAsync, false));\n      this.initFunction(node, isAsync);\n      var oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n      var oldYieldPos = this.state.yieldPos;\n      var oldAwaitPos = this.state.awaitPos;\n\n      if (params) {\n        this.state.maybeInArrowParameters = true;\n        this.setArrowFunctionParameters(node, params, trailingCommaPos);\n      }\n\n      this.state.maybeInArrowParameters = false;\n      this.state.yieldPos = -1;\n      this.state.awaitPos = -1;\n      this.parseFunctionBody(node, true);\n      this.prodParam.exit();\n      this.scope.exit();\n      this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n      this.state.yieldPos = oldYieldPos;\n      this.state.awaitPos = oldAwaitPos;\n      return this.finishNode(node, \"ArrowFunctionExpression\");\n    }\n  }, {\n    key: \"setArrowFunctionParameters\",\n    value: function setArrowFunctionParameters(node, params, trailingCommaPos) {\n      node.params = this.toAssignableList(params, trailingCommaPos);\n    }\n  }, {\n    key: \"parseFunctionBodyAndFinish\",\n    value: function parseFunctionBodyAndFinish(node, type) {\n      var isMethod = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      this.parseFunctionBody(node, false, isMethod);\n      this.finishNode(node, type);\n    }\n  }, {\n    key: \"parseFunctionBody\",\n    value: function parseFunctionBody(node, allowExpression) {\n      var _this37 = this;\n\n      var isMethod = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      var isExpression = allowExpression && !this.match(types.braceL);\n      var oldInParameters = this.state.inParameters;\n      this.state.inParameters = false;\n\n      if (isExpression) {\n        node.body = this.parseMaybeAssign();\n        this.checkParams(node, false, allowExpression, false);\n      } else {\n        var oldStrict = this.state.strict;\n        var oldLabels = this.state.labels;\n        this.state.labels = [];\n        this.prodParam.enter(this.prodParam.currentFlags() | PARAM_RETURN);\n        node.body = this.parseBlock(true, false, function (hasStrictModeDirective) {\n          var nonSimple = !_this37.isSimpleParamList(node.params);\n\n          if (hasStrictModeDirective && nonSimple) {\n            var errorPos = (node.kind === \"method\" || node.kind === \"constructor\") && !!node.key ? node.key.end : node.start;\n\n            _this37.raise(errorPos, ErrorMessages.IllegalLanguageModeDirective);\n          }\n\n          var strictModeChanged = !oldStrict && _this37.state.strict;\n\n          _this37.checkParams(node, !_this37.state.strict && !allowExpression && !isMethod && !nonSimple, allowExpression, strictModeChanged);\n\n          if (_this37.state.strict && node.id) {\n            _this37.checkLVal(node.id, BIND_OUTSIDE, undefined, \"function name\", undefined, strictModeChanged);\n          }\n        });\n        this.prodParam.exit();\n        this.state.labels = oldLabels;\n      }\n\n      this.state.inParameters = oldInParameters;\n    }\n  }, {\n    key: \"isSimpleParamList\",\n    value: function isSimpleParamList(params) {\n      for (var i = 0, len = params.length; i < len; i++) {\n        if (params[i].type !== \"Identifier\") return false;\n      }\n\n      return true;\n    }\n  }, {\n    key: \"checkParams\",\n    value: function checkParams(node, allowDuplicates, isArrowFunction) {\n      var strictModeChanged = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n      var nameHash = Object.create(null);\n\n      for (var i = 0; i < node.params.length; i++) {\n        this.checkLVal(node.params[i], BIND_VAR, allowDuplicates ? null : nameHash, \"function parameter list\", undefined, strictModeChanged);\n      }\n    }\n  }, {\n    key: \"parseExprList\",\n    value: function parseExprList(close, allowEmpty, refExpressionErrors, nodeForExtra) {\n      var elts = [];\n      var first = true;\n\n      while (!this.eat(close)) {\n        if (first) {\n          first = false;\n        } else {\n          this.expect(types.comma);\n\n          if (this.match(close)) {\n            if (nodeForExtra) {\n              this.addExtra(nodeForExtra, \"trailingComma\", this.state.lastTokStart);\n            }\n\n            this.next();\n            break;\n          }\n        }\n\n        elts.push(this.parseExprListItem(allowEmpty, refExpressionErrors));\n      }\n\n      return elts;\n    }\n  }, {\n    key: \"parseExprListItem\",\n    value: function parseExprListItem(allowEmpty, refExpressionErrors, refNeedsArrowPos, allowPlaceholder) {\n      var elt;\n\n      if (this.match(types.comma)) {\n        if (!allowEmpty) {\n          this.raise(this.state.pos, ErrorMessages.UnexpectedToken, \",\");\n        }\n\n        elt = null;\n      } else if (this.match(types.ellipsis)) {\n        var spreadNodeStartPos = this.state.start;\n        var spreadNodeStartLoc = this.state.startLoc;\n        elt = this.parseParenItem(this.parseSpread(refExpressionErrors, refNeedsArrowPos), spreadNodeStartPos, spreadNodeStartLoc);\n      } else if (this.match(types.question)) {\n        this.expectPlugin(\"partialApplication\");\n\n        if (!allowPlaceholder) {\n          this.raise(this.state.start, ErrorMessages.UnexpectedArgumentPlaceholder);\n        }\n\n        var node = this.startNode();\n        this.next();\n        elt = this.finishNode(node, \"ArgumentPlaceholder\");\n      } else {\n        elt = this.parseMaybeAssign(false, refExpressionErrors, this.parseParenItem, refNeedsArrowPos);\n      }\n\n      return elt;\n    }\n  }, {\n    key: \"parseIdentifier\",\n    value: function parseIdentifier(liberal) {\n      var node = this.startNode();\n      var name = this.parseIdentifierName(node.start, liberal);\n      return this.createIdentifier(node, name);\n    }\n  }, {\n    key: \"createIdentifier\",\n    value: function createIdentifier(node, name) {\n      node.name = name;\n      node.loc.identifierName = name;\n      return this.finishNode(node, \"Identifier\");\n    }\n  }, {\n    key: \"parseIdentifierName\",\n    value: function parseIdentifierName(pos, liberal) {\n      var name;\n\n      if (this.match(types.name)) {\n        name = this.state.value;\n      } else if (this.state.type.keyword) {\n        name = this.state.type.keyword;\n        var context = this.state.context;\n\n        if ((name === \"class\" || name === \"function\") && context[context.length - 1].token === \"function\") {\n          context.pop();\n        }\n      } else {\n        throw this.unexpected();\n      }\n\n      if (liberal) {\n        this.state.type = types.name;\n      } else {\n        this.checkReservedWord(name, this.state.start, !!this.state.type.keyword, false);\n      }\n\n      this.next();\n      return name;\n    }\n  }, {\n    key: \"checkReservedWord\",\n    value: function checkReservedWord(word, startLoc, checkKeywords, isBinding) {\n      if (this.prodParam.hasYield && word === \"yield\") {\n        this.raise(startLoc, ErrorMessages.YieldBindingIdentifier);\n        return;\n      }\n\n      if (word === \"await\") {\n        if (this.prodParam.hasAwait) {\n          this.raise(startLoc, ErrorMessages.AwaitBindingIdentifier);\n          return;\n        }\n\n        if (this.state.awaitPos === -1 && (this.state.maybeInAsyncArrowHead || this.isAwaitAllowed())) {\n          this.state.awaitPos = this.state.start;\n        }\n      }\n\n      if (this.scope.inClass && !this.scope.inNonArrowFunction && word === \"arguments\") {\n        this.raise(startLoc, ErrorMessages.ArgumentsDisallowedInInitializer);\n        return;\n      }\n\n      if (checkKeywords && isKeyword(word)) {\n        this.raise(startLoc, ErrorMessages.UnexpectedKeyword, word);\n        return;\n      }\n\n      var reservedTest = !this.state.strict ? isReservedWord : isBinding ? isStrictBindReservedWord : isStrictReservedWord;\n\n      if (reservedTest(word, this.inModule)) {\n        if (!this.prodParam.hasAwait && word === \"await\") {\n          this.raise(startLoc, ErrorMessages.AwaitNotInAsyncFunction);\n        } else {\n          this.raise(startLoc, ErrorMessages.UnexpectedReservedWord, word);\n        }\n      }\n    }\n  }, {\n    key: \"isAwaitAllowed\",\n    value: function isAwaitAllowed() {\n      if (this.scope.inFunction) return this.prodParam.hasAwait;\n      if (this.options.allowAwaitOutsideFunction) return true;\n\n      if (this.hasPlugin(\"topLevelAwait\")) {\n        return this.inModule && this.prodParam.hasAwait;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"parseAwait\",\n    value: function parseAwait() {\n      var node = this.startNode();\n      this.next();\n\n      if (this.state.inParameters) {\n        this.raise(node.start, ErrorMessages.AwaitExpressionFormalParameter);\n      } else if (this.state.awaitPos === -1) {\n        this.state.awaitPos = node.start;\n      }\n\n      if (this.eat(types.star)) {\n        this.raise(node.start, ErrorMessages.ObsoleteAwaitStar);\n      }\n\n      if (!this.scope.inFunction && !this.options.allowAwaitOutsideFunction) {\n        if (this.hasPrecedingLineBreak() || this.match(types.plusMin) || this.match(types.parenL) || this.match(types.bracketL) || this.match(types.backQuote) || this.match(types.regexp) || this.match(types.slash) || this.hasPlugin(\"v8intrinsic\") && this.match(types.modulo)) {\n          this.ambiguousScriptDifferentAst = true;\n        } else {\n          this.sawUnambiguousESM = true;\n        }\n      }\n\n      if (!this.state.soloAwait) {\n        node.argument = this.parseMaybeUnary();\n      }\n\n      return this.finishNode(node, \"AwaitExpression\");\n    }\n  }, {\n    key: \"parseYield\",\n    value: function parseYield(noIn) {\n      var node = this.startNode();\n\n      if (this.state.inParameters) {\n        this.raise(node.start, ErrorMessages.YieldInParameter);\n      } else if (this.state.yieldPos === -1) {\n        this.state.yieldPos = node.start;\n      }\n\n      this.next();\n\n      if (this.match(types.semi) || !this.match(types.star) && !this.state.type.startsExpr || this.hasPrecedingLineBreak()) {\n        node.delegate = false;\n        node.argument = null;\n      } else {\n        node.delegate = this.eat(types.star);\n        node.argument = this.parseMaybeAssign(noIn);\n      }\n\n      return this.finishNode(node, \"YieldExpression\");\n    }\n  }, {\n    key: \"checkPipelineAtInfixOperator\",\n    value: function checkPipelineAtInfixOperator(left, leftStartPos) {\n      if (this.getPluginOption(\"pipelineOperator\", \"proposal\") === \"smart\") {\n        if (left.type === \"SequenceExpression\") {\n          this.raise(leftStartPos, ErrorMessages.PipelineHeadSequenceExpression);\n        }\n      }\n    }\n  }, {\n    key: \"parseSmartPipelineBody\",\n    value: function parseSmartPipelineBody(childExpression, startPos, startLoc) {\n      var pipelineStyle = this.checkSmartPipelineBodyStyle(childExpression);\n      this.checkSmartPipelineBodyEarlyErrors(childExpression, pipelineStyle, startPos);\n      return this.parseSmartPipelineBodyInStyle(childExpression, pipelineStyle, startPos, startLoc);\n    }\n  }, {\n    key: \"checkSmartPipelineBodyEarlyErrors\",\n    value: function checkSmartPipelineBodyEarlyErrors(childExpression, pipelineStyle, startPos) {\n      if (this.match(types.arrow)) {\n        throw this.raise(this.state.start, ErrorMessages.PipelineBodyNoArrow);\n      } else if (pipelineStyle === \"PipelineTopicExpression\" && childExpression.type === \"SequenceExpression\") {\n        this.raise(startPos, ErrorMessages.PipelineBodySequenceExpression);\n      }\n    }\n  }, {\n    key: \"parseSmartPipelineBodyInStyle\",\n    value: function parseSmartPipelineBodyInStyle(childExpression, pipelineStyle, startPos, startLoc) {\n      var bodyNode = this.startNodeAt(startPos, startLoc);\n\n      switch (pipelineStyle) {\n        case \"PipelineBareFunction\":\n          bodyNode.callee = childExpression;\n          break;\n\n        case \"PipelineBareConstructor\":\n          bodyNode.callee = childExpression.callee;\n          break;\n\n        case \"PipelineBareAwaitedFunction\":\n          bodyNode.callee = childExpression.argument;\n          break;\n\n        case \"PipelineTopicExpression\":\n          if (!this.topicReferenceWasUsedInCurrentTopicContext()) {\n            this.raise(startPos, ErrorMessages.PipelineTopicUnused);\n          }\n\n          bodyNode.expression = childExpression;\n          break;\n\n        default:\n          throw new Error(\"Internal @babel/parser error: Unknown pipeline style (\".concat(pipelineStyle, \")\"));\n      }\n\n      return this.finishNode(bodyNode, pipelineStyle);\n    }\n  }, {\n    key: \"checkSmartPipelineBodyStyle\",\n    value: function checkSmartPipelineBodyStyle(expression) {\n      switch (expression.type) {\n        default:\n          return this.isSimpleReference(expression) ? \"PipelineBareFunction\" : \"PipelineTopicExpression\";\n      }\n    }\n  }, {\n    key: \"isSimpleReference\",\n    value: function isSimpleReference(expression) {\n      switch (expression.type) {\n        case \"MemberExpression\":\n          return !expression.computed && this.isSimpleReference(expression.object);\n\n        case \"Identifier\":\n          return true;\n\n        default:\n          return false;\n      }\n    }\n  }, {\n    key: \"withTopicPermittingContext\",\n    value: function withTopicPermittingContext(callback) {\n      var outerContextTopicState = this.state.topicContext;\n      this.state.topicContext = {\n        maxNumOfResolvableTopics: 1,\n        maxTopicIndex: null\n      };\n\n      try {\n        return callback();\n      } finally {\n        this.state.topicContext = outerContextTopicState;\n      }\n    }\n  }, {\n    key: \"withTopicForbiddingContext\",\n    value: function withTopicForbiddingContext(callback) {\n      var outerContextTopicState = this.state.topicContext;\n      this.state.topicContext = {\n        maxNumOfResolvableTopics: 0,\n        maxTopicIndex: null\n      };\n\n      try {\n        return callback();\n      } finally {\n        this.state.topicContext = outerContextTopicState;\n      }\n    }\n  }, {\n    key: \"withSoloAwaitPermittingContext\",\n    value: function withSoloAwaitPermittingContext(callback) {\n      var outerContextSoloAwaitState = this.state.soloAwait;\n      this.state.soloAwait = true;\n\n      try {\n        return callback();\n      } finally {\n        this.state.soloAwait = outerContextSoloAwaitState;\n      }\n    }\n  }, {\n    key: \"registerTopicReference\",\n    value: function registerTopicReference() {\n      this.state.topicContext.maxTopicIndex = 0;\n    }\n  }, {\n    key: \"primaryTopicReferenceIsAllowedInCurrentTopicContext\",\n    value: function primaryTopicReferenceIsAllowedInCurrentTopicContext() {\n      return this.state.topicContext.maxNumOfResolvableTopics >= 1;\n    }\n  }, {\n    key: \"topicReferenceWasUsedInCurrentTopicContext\",\n    value: function topicReferenceWasUsedInCurrentTopicContext() {\n      return this.state.topicContext.maxTopicIndex != null && this.state.topicContext.maxTopicIndex >= 0;\n    }\n  }, {\n    key: \"parseFSharpPipelineBody\",\n    value: function parseFSharpPipelineBody(prec, noIn) {\n      var startPos = this.state.start;\n      var startLoc = this.state.startLoc;\n      this.state.potentialArrowAt = this.state.start;\n      var oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n      this.state.inFSharpPipelineDirectBody = true;\n      var ret = this.parseExprOp(this.parseMaybeUnary(), startPos, startLoc, prec, noIn);\n      this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n      return ret;\n    }\n  }]);\n\n  return ExpressionParser;\n}(LValParser);\n\nvar loopLabel = {\n  kind: \"loop\"\n},\n    switchLabel = {\n  kind: \"switch\"\n};\nvar FUNC_NO_FLAGS = 0,\n    FUNC_STATEMENT = 1,\n    FUNC_HANGING_STATEMENT = 2,\n    FUNC_NULLABLE_ID = 4;\n\nvar StatementParser = /*#__PURE__*/function (_ExpressionParser) {\n  _inherits(StatementParser, _ExpressionParser);\n\n  var _super16 = _createSuper(StatementParser);\n\n  function StatementParser() {\n    _classCallCheck(this, StatementParser);\n\n    return _super16.apply(this, arguments);\n  }\n\n  _createClass(StatementParser, [{\n    key: \"parseTopLevel\",\n    value: function parseTopLevel(file, program) {\n      program.sourceType = this.options.sourceType;\n      program.interpreter = this.parseInterpreterDirective();\n      this.parseBlockBody(program, true, true, types.eof);\n\n      if (this.inModule && !this.options.allowUndeclaredExports && this.scope.undefinedExports.size > 0) {\n        for (var _i = 0, _Array$from = Array.from(this.scope.undefinedExports); _i < _Array$from.length; _i++) {\n          var _Array$from$_i = _slicedToArray(_Array$from[_i], 1),\n              name = _Array$from$_i[0];\n\n          var pos = this.scope.undefinedExports.get(name);\n          this.raise(pos, ErrorMessages.ModuleExportUndefined, name);\n        }\n      }\n\n      file.program = this.finishNode(program, \"Program\");\n      file.comments = this.state.comments;\n      if (this.options.tokens) file.tokens = this.tokens;\n      return this.finishNode(file, \"File\");\n    }\n  }, {\n    key: \"stmtToDirective\",\n    value: function stmtToDirective(stmt) {\n      var expr = stmt.expression;\n      var directiveLiteral = this.startNodeAt(expr.start, expr.loc.start);\n      var directive = this.startNodeAt(stmt.start, stmt.loc.start);\n      var raw = this.input.slice(expr.start, expr.end);\n      var val = directiveLiteral.value = raw.slice(1, -1);\n      this.addExtra(directiveLiteral, \"raw\", raw);\n      this.addExtra(directiveLiteral, \"rawValue\", val);\n      directive.value = this.finishNodeAt(directiveLiteral, \"DirectiveLiteral\", expr.end, expr.loc.end);\n      return this.finishNodeAt(directive, \"Directive\", stmt.end, stmt.loc.end);\n    }\n  }, {\n    key: \"parseInterpreterDirective\",\n    value: function parseInterpreterDirective() {\n      if (!this.match(types.interpreterDirective)) {\n        return null;\n      }\n\n      var node = this.startNode();\n      node.value = this.state.value;\n      this.next();\n      return this.finishNode(node, \"InterpreterDirective\");\n    }\n  }, {\n    key: \"isLet\",\n    value: function isLet(context) {\n      if (!this.isContextual(\"let\")) {\n        return false;\n      }\n\n      var next = this.nextTokenStart();\n      var nextCh = this.input.charCodeAt(next);\n      if (nextCh === 91) return true;\n      if (context) return false;\n      if (nextCh === 123) return true;\n\n      if (isIdentifierStart(nextCh)) {\n        var pos = next + 1;\n\n        while (isIdentifierChar(this.input.charCodeAt(pos))) {\n          ++pos;\n        }\n\n        var ident = this.input.slice(next, pos);\n        if (!keywordRelationalOperator.test(ident)) return true;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"parseStatement\",\n    value: function parseStatement(context, topLevel) {\n      if (this.match(types.at)) {\n        this.parseDecorators(true);\n      }\n\n      return this.parseStatementContent(context, topLevel);\n    }\n  }, {\n    key: \"parseStatementContent\",\n    value: function parseStatementContent(context, topLevel) {\n      var starttype = this.state.type;\n      var node = this.startNode();\n      var kind;\n\n      if (this.isLet(context)) {\n        starttype = types._var;\n        kind = \"let\";\n      }\n\n      switch (starttype) {\n        case types._break:\n        case types._continue:\n          return this.parseBreakContinueStatement(node, starttype.keyword);\n\n        case types._debugger:\n          return this.parseDebuggerStatement(node);\n\n        case types._do:\n          return this.parseDoStatement(node);\n\n        case types._for:\n          return this.parseForStatement(node);\n\n        case types._function:\n          if (this.lookaheadCharCode() === 46) break;\n\n          if (context) {\n            if (this.state.strict) {\n              this.raise(this.state.start, ErrorMessages.StrictFunction);\n            } else if (context !== \"if\" && context !== \"label\") {\n              this.raise(this.state.start, ErrorMessages.SloppyFunction);\n            }\n          }\n\n          return this.parseFunctionStatement(node, false, !context);\n\n        case types._class:\n          if (context) this.unexpected();\n          return this.parseClass(node, true);\n\n        case types._if:\n          return this.parseIfStatement(node);\n\n        case types._return:\n          return this.parseReturnStatement(node);\n\n        case types._switch:\n          return this.parseSwitchStatement(node);\n\n        case types._throw:\n          return this.parseThrowStatement(node);\n\n        case types._try:\n          return this.parseTryStatement(node);\n\n        case types._const:\n        case types._var:\n          kind = kind || this.state.value;\n\n          if (context && kind !== \"var\") {\n            this.raise(this.state.start, ErrorMessages.UnexpectedLexicalDeclaration);\n          }\n\n          return this.parseVarStatement(node, kind);\n\n        case types._while:\n          return this.parseWhileStatement(node);\n\n        case types._with:\n          return this.parseWithStatement(node);\n\n        case types.braceL:\n          return this.parseBlock();\n\n        case types.semi:\n          return this.parseEmptyStatement(node);\n\n        case types._export:\n        case types._import:\n          {\n            var nextTokenCharCode = this.lookaheadCharCode();\n\n            if (nextTokenCharCode === 40 || nextTokenCharCode === 46) {\n              break;\n            }\n\n            if (!this.options.allowImportExportEverywhere && !topLevel) {\n              this.raise(this.state.start, ErrorMessages.UnexpectedImportExport);\n            }\n\n            this.next();\n            var result;\n\n            if (starttype === types._import) {\n              result = this.parseImport(node);\n\n              if (result.type === \"ImportDeclaration\" && (!result.importKind || result.importKind === \"value\")) {\n                this.sawUnambiguousESM = true;\n              }\n            } else {\n              result = this.parseExport(node);\n\n              if (result.type === \"ExportNamedDeclaration\" && (!result.exportKind || result.exportKind === \"value\") || result.type === \"ExportAllDeclaration\" && (!result.exportKind || result.exportKind === \"value\") || result.type === \"ExportDefaultDeclaration\") {\n                this.sawUnambiguousESM = true;\n              }\n            }\n\n            this.assertModuleNodeAllowed(node);\n            return result;\n          }\n\n        default:\n          {\n            if (this.isAsyncFunction()) {\n              if (context) {\n                this.raise(this.state.start, ErrorMessages.AsyncFunctionInSingleStatementContext);\n              }\n\n              this.next();\n              return this.parseFunctionStatement(node, true, !context);\n            }\n          }\n      }\n\n      var maybeName = this.state.value;\n      var expr = this.parseExpression();\n\n      if (starttype === types.name && expr.type === \"Identifier\" && this.eat(types.colon)) {\n        return this.parseLabeledStatement(node, maybeName, expr, context);\n      } else {\n        return this.parseExpressionStatement(node, expr);\n      }\n    }\n  }, {\n    key: \"assertModuleNodeAllowed\",\n    value: function assertModuleNodeAllowed(node) {\n      if (!this.options.allowImportExportEverywhere && !this.inModule) {\n        this.raiseWithData(node.start, {\n          code: \"BABEL_PARSER_SOURCETYPE_MODULE_REQUIRED\"\n        }, ErrorMessages.ImportOutsideModule);\n      }\n    }\n  }, {\n    key: \"takeDecorators\",\n    value: function takeDecorators(node) {\n      var decorators = this.state.decoratorStack[this.state.decoratorStack.length - 1];\n\n      if (decorators.length) {\n        node.decorators = decorators;\n        this.resetStartLocationFromNode(node, decorators[0]);\n        this.state.decoratorStack[this.state.decoratorStack.length - 1] = [];\n      }\n    }\n  }, {\n    key: \"canHaveLeadingDecorator\",\n    value: function canHaveLeadingDecorator() {\n      return this.match(types._class);\n    }\n  }, {\n    key: \"parseDecorators\",\n    value: function parseDecorators(allowExport) {\n      var currentContextDecorators = this.state.decoratorStack[this.state.decoratorStack.length - 1];\n\n      while (this.match(types.at)) {\n        var decorator = this.parseDecorator();\n        currentContextDecorators.push(decorator);\n      }\n\n      if (this.match(types._export)) {\n        if (!allowExport) {\n          this.unexpected();\n        }\n\n        if (this.hasPlugin(\"decorators\") && !this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")) {\n          this.raise(this.state.start, ErrorMessages.DecoratorExportClass);\n        }\n      } else if (!this.canHaveLeadingDecorator()) {\n        throw this.raise(this.state.start, ErrorMessages.UnexpectedLeadingDecorator);\n      }\n    }\n  }, {\n    key: \"parseDecorator\",\n    value: function parseDecorator() {\n      this.expectOnePlugin([\"decorators-legacy\", \"decorators\"]);\n      var node = this.startNode();\n      this.next();\n\n      if (this.hasPlugin(\"decorators\")) {\n        this.state.decoratorStack.push([]);\n        var startPos = this.state.start;\n        var startLoc = this.state.startLoc;\n        var expr;\n\n        if (this.eat(types.parenL)) {\n          expr = this.parseExpression();\n          this.expect(types.parenR);\n        } else {\n          expr = this.parseIdentifier(false);\n\n          while (this.eat(types.dot)) {\n            var _node14 = this.startNodeAt(startPos, startLoc);\n\n            _node14.object = expr;\n            _node14.property = this.parseIdentifier(true);\n            _node14.computed = false;\n            expr = this.finishNode(_node14, \"MemberExpression\");\n          }\n        }\n\n        node.expression = this.parseMaybeDecoratorArguments(expr);\n        this.state.decoratorStack.pop();\n      } else {\n        node.expression = this.parseExprSubscripts();\n      }\n\n      return this.finishNode(node, \"Decorator\");\n    }\n  }, {\n    key: \"parseMaybeDecoratorArguments\",\n    value: function parseMaybeDecoratorArguments(expr) {\n      if (this.eat(types.parenL)) {\n        var node = this.startNodeAtNode(expr);\n        node.callee = expr;\n        node.arguments = this.parseCallExpressionArguments(types.parenR, false);\n        this.toReferencedList(node.arguments);\n        return this.finishNode(node, \"CallExpression\");\n      }\n\n      return expr;\n    }\n  }, {\n    key: \"parseBreakContinueStatement\",\n    value: function parseBreakContinueStatement(node, keyword) {\n      var isBreak = keyword === \"break\";\n      this.next();\n\n      if (this.isLineTerminator()) {\n        node.label = null;\n      } else {\n        node.label = this.parseIdentifier();\n        this.semicolon();\n      }\n\n      this.verifyBreakContinue(node, keyword);\n      return this.finishNode(node, isBreak ? \"BreakStatement\" : \"ContinueStatement\");\n    }\n  }, {\n    key: \"verifyBreakContinue\",\n    value: function verifyBreakContinue(node, keyword) {\n      var isBreak = keyword === \"break\";\n      var i;\n\n      for (i = 0; i < this.state.labels.length; ++i) {\n        var lab = this.state.labels[i];\n\n        if (node.label == null || lab.name === node.label.name) {\n          if (lab.kind != null && (isBreak || lab.kind === \"loop\")) break;\n          if (node.label && isBreak) break;\n        }\n      }\n\n      if (i === this.state.labels.length) {\n        this.raise(node.start, ErrorMessages.IllegalBreakContinue, keyword);\n      }\n    }\n  }, {\n    key: \"parseDebuggerStatement\",\n    value: function parseDebuggerStatement(node) {\n      this.next();\n      this.semicolon();\n      return this.finishNode(node, \"DebuggerStatement\");\n    }\n  }, {\n    key: \"parseHeaderExpression\",\n    value: function parseHeaderExpression() {\n      this.expect(types.parenL);\n      var val = this.parseExpression();\n      this.expect(types.parenR);\n      return val;\n    }\n  }, {\n    key: \"parseDoStatement\",\n    value: function parseDoStatement(node) {\n      var _this38 = this;\n\n      this.next();\n      this.state.labels.push(loopLabel);\n      node.body = this.withTopicForbiddingContext(function () {\n        return _this38.parseStatement(\"do\");\n      });\n      this.state.labels.pop();\n      this.expect(types._while);\n      node.test = this.parseHeaderExpression();\n      this.eat(types.semi);\n      return this.finishNode(node, \"DoWhileStatement\");\n    }\n  }, {\n    key: \"parseForStatement\",\n    value: function parseForStatement(node) {\n      this.next();\n      this.state.labels.push(loopLabel);\n      var awaitAt = -1;\n\n      if (this.isAwaitAllowed() && this.eatContextual(\"await\")) {\n        awaitAt = this.state.lastTokStart;\n      }\n\n      this.scope.enter(SCOPE_OTHER);\n      this.expect(types.parenL);\n\n      if (this.match(types.semi)) {\n        if (awaitAt > -1) {\n          this.unexpected(awaitAt);\n        }\n\n        return this.parseFor(node, null);\n      }\n\n      var isLet = this.isLet();\n\n      if (this.match(types._var) || this.match(types._const) || isLet) {\n        var _init = this.startNode();\n\n        var kind = isLet ? \"let\" : this.state.value;\n        this.next();\n        this.parseVar(_init, true, kind);\n        this.finishNode(_init, \"VariableDeclaration\");\n\n        if ((this.match(types._in) || this.isContextual(\"of\")) && _init.declarations.length === 1) {\n          return this.parseForIn(node, _init, awaitAt);\n        }\n\n        if (awaitAt > -1) {\n          this.unexpected(awaitAt);\n        }\n\n        return this.parseFor(node, _init);\n      }\n\n      var refExpressionErrors = new ExpressionErrors();\n      var init = this.parseExpression(true, refExpressionErrors);\n\n      if (this.match(types._in) || this.isContextual(\"of\")) {\n        this.toAssignable(init);\n        var description = this.isContextual(\"of\") ? \"for-of statement\" : \"for-in statement\";\n        this.checkLVal(init, undefined, undefined, description);\n        return this.parseForIn(node, init, awaitAt);\n      } else {\n        this.checkExpressionErrors(refExpressionErrors, true);\n      }\n\n      if (awaitAt > -1) {\n        this.unexpected(awaitAt);\n      }\n\n      return this.parseFor(node, init);\n    }\n  }, {\n    key: \"parseFunctionStatement\",\n    value: function parseFunctionStatement(node, isAsync, declarationPosition) {\n      this.next();\n      return this.parseFunction(node, FUNC_STATEMENT | (declarationPosition ? 0 : FUNC_HANGING_STATEMENT), isAsync);\n    }\n  }, {\n    key: \"parseIfStatement\",\n    value: function parseIfStatement(node) {\n      this.next();\n      node.test = this.parseHeaderExpression();\n      node.consequent = this.parseStatement(\"if\");\n      node.alternate = this.eat(types._else) ? this.parseStatement(\"if\") : null;\n      return this.finishNode(node, \"IfStatement\");\n    }\n  }, {\n    key: \"parseReturnStatement\",\n    value: function parseReturnStatement(node) {\n      if (!this.prodParam.hasReturn && !this.options.allowReturnOutsideFunction) {\n        this.raise(this.state.start, ErrorMessages.IllegalReturn);\n      }\n\n      this.next();\n\n      if (this.isLineTerminator()) {\n        node.argument = null;\n      } else {\n        node.argument = this.parseExpression();\n        this.semicolon();\n      }\n\n      return this.finishNode(node, \"ReturnStatement\");\n    }\n  }, {\n    key: \"parseSwitchStatement\",\n    value: function parseSwitchStatement(node) {\n      this.next();\n      node.discriminant = this.parseHeaderExpression();\n      var cases = node.cases = [];\n      this.expect(types.braceL);\n      this.state.labels.push(switchLabel);\n      this.scope.enter(SCOPE_OTHER);\n      var cur;\n\n      for (var sawDefault; !this.match(types.braceR);) {\n        if (this.match(types._case) || this.match(types._default)) {\n          var isCase = this.match(types._case);\n          if (cur) this.finishNode(cur, \"SwitchCase\");\n          cases.push(cur = this.startNode());\n          cur.consequent = [];\n          this.next();\n\n          if (isCase) {\n            cur.test = this.parseExpression();\n          } else {\n            if (sawDefault) {\n              this.raise(this.state.lastTokStart, ErrorMessages.MultipleDefaultsInSwitch);\n            }\n\n            sawDefault = true;\n            cur.test = null;\n          }\n\n          this.expect(types.colon);\n        } else {\n          if (cur) {\n            cur.consequent.push(this.parseStatement(null));\n          } else {\n            this.unexpected();\n          }\n        }\n      }\n\n      this.scope.exit();\n      if (cur) this.finishNode(cur, \"SwitchCase\");\n      this.next();\n      this.state.labels.pop();\n      return this.finishNode(node, \"SwitchStatement\");\n    }\n  }, {\n    key: \"parseThrowStatement\",\n    value: function parseThrowStatement(node) {\n      this.next();\n\n      if (lineBreak.test(this.input.slice(this.state.lastTokEnd, this.state.start))) {\n        this.raise(this.state.lastTokEnd, ErrorMessages.NewlineAfterThrow);\n      }\n\n      node.argument = this.parseExpression();\n      this.semicolon();\n      return this.finishNode(node, \"ThrowStatement\");\n    }\n  }, {\n    key: \"parseTryStatement\",\n    value: function parseTryStatement(node) {\n      var _this39 = this;\n\n      this.next();\n      node.block = this.parseBlock();\n      node.handler = null;\n\n      if (this.match(types._catch)) {\n        var clause = this.startNode();\n        this.next();\n\n        if (this.match(types.parenL)) {\n          this.expect(types.parenL);\n          clause.param = this.parseBindingAtom();\n          var simple = clause.param.type === \"Identifier\";\n          this.scope.enter(simple ? SCOPE_SIMPLE_CATCH : 0);\n          this.checkLVal(clause.param, BIND_LEXICAL, null, \"catch clause\");\n          this.expect(types.parenR);\n        } else {\n          clause.param = null;\n          this.scope.enter(SCOPE_OTHER);\n        }\n\n        clause.body = this.withTopicForbiddingContext(function () {\n          return _this39.parseBlock(false, false);\n        });\n        this.scope.exit();\n        node.handler = this.finishNode(clause, \"CatchClause\");\n      }\n\n      node.finalizer = this.eat(types._finally) ? this.parseBlock() : null;\n\n      if (!node.handler && !node.finalizer) {\n        this.raise(node.start, ErrorMessages.NoCatchOrFinally);\n      }\n\n      return this.finishNode(node, \"TryStatement\");\n    }\n  }, {\n    key: \"parseVarStatement\",\n    value: function parseVarStatement(node, kind) {\n      this.next();\n      this.parseVar(node, false, kind);\n      this.semicolon();\n      return this.finishNode(node, \"VariableDeclaration\");\n    }\n  }, {\n    key: \"parseWhileStatement\",\n    value: function parseWhileStatement(node) {\n      var _this40 = this;\n\n      this.next();\n      node.test = this.parseHeaderExpression();\n      this.state.labels.push(loopLabel);\n      node.body = this.withTopicForbiddingContext(function () {\n        return _this40.parseStatement(\"while\");\n      });\n      this.state.labels.pop();\n      return this.finishNode(node, \"WhileStatement\");\n    }\n  }, {\n    key: \"parseWithStatement\",\n    value: function parseWithStatement(node) {\n      var _this41 = this;\n\n      if (this.state.strict) {\n        this.raise(this.state.start, ErrorMessages.StrictWith);\n      }\n\n      this.next();\n      node.object = this.parseHeaderExpression();\n      node.body = this.withTopicForbiddingContext(function () {\n        return _this41.parseStatement(\"with\");\n      });\n      return this.finishNode(node, \"WithStatement\");\n    }\n  }, {\n    key: \"parseEmptyStatement\",\n    value: function parseEmptyStatement(node) {\n      this.next();\n      return this.finishNode(node, \"EmptyStatement\");\n    }\n  }, {\n    key: \"parseLabeledStatement\",\n    value: function parseLabeledStatement(node, maybeName, expr, context) {\n      for (var _i2 = 0, _this$state$labels = this.state.labels; _i2 < _this$state$labels.length; _i2++) {\n        var label = _this$state$labels[_i2];\n\n        if (label.name === maybeName) {\n          this.raise(expr.start, ErrorMessages.LabelRedeclaration, maybeName);\n        }\n      }\n\n      var kind = this.state.type.isLoop ? \"loop\" : this.match(types._switch) ? \"switch\" : null;\n\n      for (var i = this.state.labels.length - 1; i >= 0; i--) {\n        var _label = this.state.labels[i];\n\n        if (_label.statementStart === node.start) {\n          _label.statementStart = this.state.start;\n          _label.kind = kind;\n        } else {\n          break;\n        }\n      }\n\n      this.state.labels.push({\n        name: maybeName,\n        kind: kind,\n        statementStart: this.state.start\n      });\n      node.body = this.parseStatement(context ? context.indexOf(\"label\") === -1 ? context + \"label\" : context : \"label\");\n      this.state.labels.pop();\n      node.label = expr;\n      return this.finishNode(node, \"LabeledStatement\");\n    }\n  }, {\n    key: \"parseExpressionStatement\",\n    value: function parseExpressionStatement(node, expr) {\n      node.expression = expr;\n      this.semicolon();\n      return this.finishNode(node, \"ExpressionStatement\");\n    }\n  }, {\n    key: \"parseBlock\",\n    value: function parseBlock() {\n      var allowDirectives = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      var createNewLexicalScope = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      var afterBlockParse = arguments.length > 2 ? arguments[2] : undefined;\n      var node = this.startNode();\n      this.expect(types.braceL);\n\n      if (createNewLexicalScope) {\n        this.scope.enter(SCOPE_OTHER);\n      }\n\n      this.parseBlockBody(node, allowDirectives, false, types.braceR, afterBlockParse);\n\n      if (createNewLexicalScope) {\n        this.scope.exit();\n      }\n\n      return this.finishNode(node, \"BlockStatement\");\n    }\n  }, {\n    key: \"isValidDirective\",\n    value: function isValidDirective(stmt) {\n      return stmt.type === \"ExpressionStatement\" && stmt.expression.type === \"StringLiteral\" && !stmt.expression.extra.parenthesized;\n    }\n  }, {\n    key: \"parseBlockBody\",\n    value: function parseBlockBody(node, allowDirectives, topLevel, end, afterBlockParse) {\n      var body = node.body = [];\n      var directives = node.directives = [];\n      this.parseBlockOrModuleBlockBody(body, allowDirectives ? directives : undefined, topLevel, end, afterBlockParse);\n    }\n  }, {\n    key: \"parseBlockOrModuleBlockBody\",\n    value: function parseBlockOrModuleBlockBody(body, directives, topLevel, end, afterBlockParse) {\n      var octalPositions = [];\n      var oldStrict = this.state.strict;\n      var hasStrictModeDirective = false;\n      var parsedNonDirective = false;\n\n      while (!this.match(end)) {\n        if (!parsedNonDirective && this.state.octalPositions.length) {\n          octalPositions.push.apply(octalPositions, _toConsumableArray(this.state.octalPositions));\n        }\n\n        var stmt = this.parseStatement(null, topLevel);\n\n        if (directives && !parsedNonDirective && this.isValidDirective(stmt)) {\n          var directive = this.stmtToDirective(stmt);\n          directives.push(directive);\n\n          if (!hasStrictModeDirective && directive.value.value === \"use strict\") {\n            hasStrictModeDirective = true;\n            this.setStrict(true);\n          }\n\n          continue;\n        }\n\n        parsedNonDirective = true;\n        body.push(stmt);\n      }\n\n      if (this.state.strict && octalPositions.length) {\n        for (var _i3 = 0; _i3 < octalPositions.length; _i3++) {\n          var pos = octalPositions[_i3];\n          this.raise(pos, ErrorMessages.StrictOctalLiteral);\n        }\n      }\n\n      if (afterBlockParse) {\n        afterBlockParse.call(this, hasStrictModeDirective);\n      }\n\n      if (!oldStrict) {\n        this.setStrict(false);\n      }\n\n      this.next();\n    }\n  }, {\n    key: \"parseFor\",\n    value: function parseFor(node, init) {\n      var _this42 = this;\n\n      node.init = init;\n      this.expect(types.semi);\n      node.test = this.match(types.semi) ? null : this.parseExpression();\n      this.expect(types.semi);\n      node.update = this.match(types.parenR) ? null : this.parseExpression();\n      this.expect(types.parenR);\n      node.body = this.withTopicForbiddingContext(function () {\n        return _this42.parseStatement(\"for\");\n      });\n      this.scope.exit();\n      this.state.labels.pop();\n      return this.finishNode(node, \"ForStatement\");\n    }\n  }, {\n    key: \"parseForIn\",\n    value: function parseForIn(node, init, awaitAt) {\n      var _this43 = this;\n\n      var isForIn = this.match(types._in);\n      this.next();\n\n      if (isForIn) {\n        if (awaitAt > -1) this.unexpected(awaitAt);\n      } else {\n        node.await = awaitAt > -1;\n      }\n\n      if (init.type === \"VariableDeclaration\" && init.declarations[0].init != null && (!isForIn || this.state.strict || init.kind !== \"var\" || init.declarations[0].id.type !== \"Identifier\")) {\n        this.raise(init.start, ErrorMessages.ForInOfLoopInitializer, isForIn ? \"for-in\" : \"for-of\");\n      } else if (init.type === \"AssignmentPattern\") {\n        this.raise(init.start, ErrorMessages.InvalidLhs, \"for-loop\");\n      }\n\n      node.left = init;\n      node.right = isForIn ? this.parseExpression() : this.parseMaybeAssign();\n      this.expect(types.parenR);\n      node.body = this.withTopicForbiddingContext(function () {\n        return _this43.parseStatement(\"for\");\n      });\n      this.scope.exit();\n      this.state.labels.pop();\n      return this.finishNode(node, isForIn ? \"ForInStatement\" : \"ForOfStatement\");\n    }\n  }, {\n    key: \"parseVar\",\n    value: function parseVar(node, isFor, kind) {\n      var declarations = node.declarations = [];\n      var isTypescript = this.hasPlugin(\"typescript\");\n      node.kind = kind;\n\n      for (;;) {\n        var decl = this.startNode();\n        this.parseVarId(decl, kind);\n\n        if (this.eat(types.eq)) {\n          decl.init = this.parseMaybeAssign(isFor);\n        } else {\n          if (kind === \"const\" && !(this.match(types._in) || this.isContextual(\"of\"))) {\n            if (!isTypescript) {\n              this.unexpected();\n            }\n          } else if (decl.id.type !== \"Identifier\" && !(isFor && (this.match(types._in) || this.isContextual(\"of\")))) {\n            this.raise(this.state.lastTokEnd, ErrorMessages.DeclarationMissingInitializer, \"Complex binding patterns\");\n          }\n\n          decl.init = null;\n        }\n\n        declarations.push(this.finishNode(decl, \"VariableDeclarator\"));\n        if (!this.eat(types.comma)) break;\n      }\n\n      return node;\n    }\n  }, {\n    key: \"parseVarId\",\n    value: function parseVarId(decl, kind) {\n      decl.id = this.parseBindingAtom();\n      this.checkLVal(decl.id, kind === \"var\" ? BIND_VAR : BIND_LEXICAL, undefined, \"variable declaration\", kind !== \"var\");\n    }\n  }, {\n    key: \"parseFunction\",\n    value: function parseFunction(node) {\n      var _this44 = this;\n\n      var statement = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : FUNC_NO_FLAGS;\n      var isAsync = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      var isStatement = statement & FUNC_STATEMENT;\n      var isHangingStatement = statement & FUNC_HANGING_STATEMENT;\n      var requireId = !!isStatement && !(statement & FUNC_NULLABLE_ID);\n      this.initFunction(node, isAsync);\n\n      if (this.match(types.star) && isHangingStatement) {\n        this.raise(this.state.start, ErrorMessages.GeneratorInSingleStatementContext);\n      }\n\n      node.generator = this.eat(types.star);\n\n      if (isStatement) {\n        node.id = this.parseFunctionId(requireId);\n      }\n\n      var oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n      var oldYieldPos = this.state.yieldPos;\n      var oldAwaitPos = this.state.awaitPos;\n      this.state.maybeInArrowParameters = false;\n      this.state.yieldPos = -1;\n      this.state.awaitPos = -1;\n      this.scope.enter(SCOPE_FUNCTION);\n      this.prodParam.enter(functionFlags(isAsync, node.generator));\n\n      if (!isStatement) {\n        node.id = this.parseFunctionId();\n      }\n\n      this.parseFunctionParams(node);\n      this.withTopicForbiddingContext(function () {\n        _this44.parseFunctionBodyAndFinish(node, isStatement ? \"FunctionDeclaration\" : \"FunctionExpression\");\n      });\n      this.prodParam.exit();\n      this.scope.exit();\n\n      if (isStatement && !isHangingStatement) {\n        this.registerFunctionStatementId(node);\n      }\n\n      this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n      this.state.yieldPos = oldYieldPos;\n      this.state.awaitPos = oldAwaitPos;\n      return node;\n    }\n  }, {\n    key: \"parseFunctionId\",\n    value: function parseFunctionId(requireId) {\n      return requireId || this.match(types.name) ? this.parseIdentifier() : null;\n    }\n  }, {\n    key: \"parseFunctionParams\",\n    value: function parseFunctionParams(node, allowModifiers) {\n      var oldInParameters = this.state.inParameters;\n      this.state.inParameters = true;\n      this.expect(types.parenL);\n      node.params = this.parseBindingList(types.parenR, 41, false, allowModifiers);\n      this.state.inParameters = oldInParameters;\n      this.checkYieldAwaitInDefaultParams();\n    }\n  }, {\n    key: \"registerFunctionStatementId\",\n    value: function registerFunctionStatementId(node) {\n      if (!node.id) return;\n      this.scope.declareName(node.id.name, this.state.strict || node.generator || node.async ? this.scope.treatFunctionsAsVar ? BIND_VAR : BIND_LEXICAL : BIND_FUNCTION, node.id.start);\n    }\n  }, {\n    key: \"parseClass\",\n    value: function parseClass(node, isStatement, optionalId) {\n      this.next();\n      this.takeDecorators(node);\n      var oldStrict = this.state.strict;\n      this.state.strict = true;\n      this.parseClassId(node, isStatement, optionalId);\n      this.parseClassSuper(node);\n      node.body = this.parseClassBody(!!node.superClass, oldStrict);\n      this.state.strict = oldStrict;\n      return this.finishNode(node, isStatement ? \"ClassDeclaration\" : \"ClassExpression\");\n    }\n  }, {\n    key: \"isClassProperty\",\n    value: function isClassProperty() {\n      return this.match(types.eq) || this.match(types.semi) || this.match(types.braceR);\n    }\n  }, {\n    key: \"isClassMethod\",\n    value: function isClassMethod() {\n      return this.match(types.parenL);\n    }\n  }, {\n    key: \"isNonstaticConstructor\",\n    value: function isNonstaticConstructor(method) {\n      return !method.computed && !method.static && (method.key.name === \"constructor\" || method.key.value === \"constructor\");\n    }\n  }, {\n    key: \"parseClassBody\",\n    value: function parseClassBody(constructorAllowsSuper, oldStrict) {\n      var _this45 = this;\n\n      this.classScope.enter();\n      var state = {\n        hadConstructor: false\n      };\n      var decorators = [];\n      var classBody = this.startNode();\n      classBody.body = [];\n      this.expect(types.braceL);\n      this.withTopicForbiddingContext(function () {\n        while (!_this45.match(types.braceR)) {\n          if (_this45.eat(types.semi)) {\n            if (decorators.length > 0) {\n              throw _this45.raise(_this45.state.lastTokEnd, ErrorMessages.DecoratorSemicolon);\n            }\n\n            continue;\n          }\n\n          if (_this45.match(types.at)) {\n            decorators.push(_this45.parseDecorator());\n            continue;\n          }\n\n          var member = _this45.startNode();\n\n          if (decorators.length) {\n            member.decorators = decorators;\n\n            _this45.resetStartLocationFromNode(member, decorators[0]);\n\n            decorators = [];\n          }\n\n          _this45.parseClassMember(classBody, member, state, constructorAllowsSuper);\n\n          if (member.kind === \"constructor\" && member.decorators && member.decorators.length > 0) {\n            _this45.raise(member.start, ErrorMessages.DecoratorConstructor);\n          }\n        }\n      });\n\n      if (!oldStrict) {\n        this.state.strict = false;\n      }\n\n      this.next();\n\n      if (decorators.length) {\n        throw this.raise(this.state.start, ErrorMessages.TrailingDecorator);\n      }\n\n      this.classScope.exit();\n      return this.finishNode(classBody, \"ClassBody\");\n    }\n  }, {\n    key: \"parseClassMemberFromModifier\",\n    value: function parseClassMemberFromModifier(classBody, member) {\n      var containsEsc = this.state.containsEsc;\n      var key = this.parseIdentifier(true);\n\n      if (this.isClassMethod()) {\n        var method = member;\n        method.kind = \"method\";\n        method.computed = false;\n        method.key = key;\n        method.static = false;\n        this.pushClassMethod(classBody, method, false, false, false, false);\n        return true;\n      } else if (this.isClassProperty()) {\n        var prop = member;\n        prop.computed = false;\n        prop.key = key;\n        prop.static = false;\n        classBody.body.push(this.parseClassProperty(prop));\n        return true;\n      } else if (containsEsc) {\n        throw this.unexpected();\n      }\n\n      return false;\n    }\n  }, {\n    key: \"parseClassMember\",\n    value: function parseClassMember(classBody, member, state, constructorAllowsSuper) {\n      var isStatic = this.isContextual(\"static\");\n\n      if (isStatic && this.parseClassMemberFromModifier(classBody, member)) {\n        return;\n      }\n\n      this.parseClassMemberWithIsStatic(classBody, member, state, isStatic, constructorAllowsSuper);\n    }\n  }, {\n    key: \"parseClassMemberWithIsStatic\",\n    value: function parseClassMemberWithIsStatic(classBody, member, state, isStatic, constructorAllowsSuper) {\n      var publicMethod = member;\n      var privateMethod = member;\n      var publicProp = member;\n      var privateProp = member;\n      var method = publicMethod;\n      var publicMember = publicMethod;\n      member.static = isStatic;\n\n      if (this.eat(types.star)) {\n        method.kind = \"method\";\n        this.parseClassPropertyName(method);\n\n        if (method.key.type === \"PrivateName\") {\n          this.pushClassPrivateMethod(classBody, privateMethod, true, false);\n          return;\n        }\n\n        if (this.isNonstaticConstructor(publicMethod)) {\n          this.raise(publicMethod.key.start, ErrorMessages.ConstructorIsGenerator);\n        }\n\n        this.pushClassMethod(classBody, publicMethod, true, false, false, false);\n        return;\n      }\n\n      var containsEsc = this.state.containsEsc;\n      var key = this.parseClassPropertyName(member);\n      var isPrivate = key.type === \"PrivateName\";\n      var isSimple = key.type === \"Identifier\";\n      var maybeQuestionTokenStart = this.state.start;\n      this.parsePostMemberNameModifiers(publicMember);\n\n      if (this.isClassMethod()) {\n        method.kind = \"method\";\n\n        if (isPrivate) {\n          this.pushClassPrivateMethod(classBody, privateMethod, false, false);\n          return;\n        }\n\n        var isConstructor = this.isNonstaticConstructor(publicMethod);\n        var allowsDirectSuper = false;\n\n        if (isConstructor) {\n          publicMethod.kind = \"constructor\";\n\n          if (state.hadConstructor && !this.hasPlugin(\"typescript\")) {\n            this.raise(key.start, ErrorMessages.DuplicateConstructor);\n          }\n\n          state.hadConstructor = true;\n          allowsDirectSuper = constructorAllowsSuper;\n        }\n\n        this.pushClassMethod(classBody, publicMethod, false, false, isConstructor, allowsDirectSuper);\n      } else if (this.isClassProperty()) {\n        if (isPrivate) {\n          this.pushClassPrivateProperty(classBody, privateProp);\n        } else {\n          this.pushClassProperty(classBody, publicProp);\n        }\n      } else if (isSimple && key.name === \"async\" && !containsEsc && !this.isLineTerminator()) {\n        var isGenerator = this.eat(types.star);\n\n        if (publicMember.optional) {\n          this.unexpected(maybeQuestionTokenStart);\n        }\n\n        method.kind = \"method\";\n        this.parseClassPropertyName(method);\n        this.parsePostMemberNameModifiers(publicMember);\n\n        if (method.key.type === \"PrivateName\") {\n          this.pushClassPrivateMethod(classBody, privateMethod, isGenerator, true);\n        } else {\n          if (this.isNonstaticConstructor(publicMethod)) {\n            this.raise(publicMethod.key.start, ErrorMessages.ConstructorIsAsync);\n          }\n\n          this.pushClassMethod(classBody, publicMethod, isGenerator, true, false, false);\n        }\n      } else if (isSimple && (key.name === \"get\" || key.name === \"set\") && !containsEsc && !(this.match(types.star) && this.isLineTerminator())) {\n        method.kind = key.name;\n        this.parseClassPropertyName(publicMethod);\n\n        if (method.key.type === \"PrivateName\") {\n          this.pushClassPrivateMethod(classBody, privateMethod, false, false);\n        } else {\n          if (this.isNonstaticConstructor(publicMethod)) {\n            this.raise(publicMethod.key.start, ErrorMessages.ConstructorIsAccessor);\n          }\n\n          this.pushClassMethod(classBody, publicMethod, false, false, false, false);\n        }\n\n        this.checkGetterSetterParams(publicMethod);\n      } else if (this.isLineTerminator()) {\n        if (isPrivate) {\n          this.pushClassPrivateProperty(classBody, privateProp);\n        } else {\n          this.pushClassProperty(classBody, publicProp);\n        }\n      } else {\n        this.unexpected();\n      }\n    }\n  }, {\n    key: \"parseClassPropertyName\",\n    value: function parseClassPropertyName(member) {\n      var key = this.parsePropertyName(member, true);\n\n      if (!member.computed && member.static && (key.name === \"prototype\" || key.value === \"prototype\")) {\n        this.raise(key.start, ErrorMessages.StaticPrototype);\n      }\n\n      if (key.type === \"PrivateName\" && key.id.name === \"constructor\") {\n        this.raise(key.start, ErrorMessages.ConstructorClassPrivateField);\n      }\n\n      return key;\n    }\n  }, {\n    key: \"pushClassProperty\",\n    value: function pushClassProperty(classBody, prop) {\n      if (!prop.computed && (prop.key.name === \"constructor\" || prop.key.value === \"constructor\")) {\n        this.raise(prop.key.start, ErrorMessages.ConstructorClassField);\n      }\n\n      classBody.body.push(this.parseClassProperty(prop));\n    }\n  }, {\n    key: \"pushClassPrivateProperty\",\n    value: function pushClassPrivateProperty(classBody, prop) {\n      this.expectPlugin(\"classPrivateProperties\", prop.key.start);\n      var node = this.parseClassPrivateProperty(prop);\n      classBody.body.push(node);\n      this.classScope.declarePrivateName(node.key.id.name, CLASS_ELEMENT_OTHER, node.key.start);\n    }\n  }, {\n    key: \"pushClassMethod\",\n    value: function pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {\n      classBody.body.push(this.parseMethod(method, isGenerator, isAsync, isConstructor, allowsDirectSuper, \"ClassMethod\", true));\n    }\n  }, {\n    key: \"pushClassPrivateMethod\",\n    value: function pushClassPrivateMethod(classBody, method, isGenerator, isAsync) {\n      this.expectPlugin(\"classPrivateMethods\", method.key.start);\n      var node = this.parseMethod(method, isGenerator, isAsync, false, false, \"ClassPrivateMethod\", true);\n      classBody.body.push(node);\n      var kind = node.kind === \"get\" ? node.static ? CLASS_ELEMENT_STATIC_GETTER : CLASS_ELEMENT_INSTANCE_GETTER : node.kind === \"set\" ? node.static ? CLASS_ELEMENT_STATIC_SETTER : CLASS_ELEMENT_INSTANCE_SETTER : CLASS_ELEMENT_OTHER;\n      this.classScope.declarePrivateName(node.key.id.name, kind, node.key.start);\n    }\n  }, {\n    key: \"parsePostMemberNameModifiers\",\n    value: function parsePostMemberNameModifiers(methodOrProp) {}\n  }, {\n    key: \"parseAccessModifier\",\n    value: function parseAccessModifier() {\n      return undefined;\n    }\n  }, {\n    key: \"parseClassPrivateProperty\",\n    value: function parseClassPrivateProperty(node) {\n      this.scope.enter(SCOPE_CLASS | SCOPE_SUPER);\n      this.prodParam.enter(PARAM);\n      node.value = this.eat(types.eq) ? this.parseMaybeAssign() : null;\n      this.semicolon();\n      this.prodParam.exit();\n      this.scope.exit();\n      return this.finishNode(node, \"ClassPrivateProperty\");\n    }\n  }, {\n    key: \"parseClassProperty\",\n    value: function parseClassProperty(node) {\n      if (!node.typeAnnotation) {\n        this.expectPlugin(\"classProperties\");\n      }\n\n      this.scope.enter(SCOPE_CLASS | SCOPE_SUPER);\n      this.prodParam.enter(PARAM);\n\n      if (this.match(types.eq)) {\n        this.expectPlugin(\"classProperties\");\n        this.next();\n        node.value = this.parseMaybeAssign();\n      } else {\n        node.value = null;\n      }\n\n      this.semicolon();\n      this.prodParam.exit();\n      this.scope.exit();\n      return this.finishNode(node, \"ClassProperty\");\n    }\n  }, {\n    key: \"parseClassId\",\n    value: function parseClassId(node, isStatement, optionalId) {\n      var bindingType = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : BIND_CLASS;\n\n      if (this.match(types.name)) {\n        node.id = this.parseIdentifier();\n\n        if (isStatement) {\n          this.checkLVal(node.id, bindingType, undefined, \"class name\");\n        }\n      } else {\n        if (optionalId || !isStatement) {\n          node.id = null;\n        } else {\n          this.unexpected(null, ErrorMessages.MissingClassName);\n        }\n      }\n    }\n  }, {\n    key: \"parseClassSuper\",\n    value: function parseClassSuper(node) {\n      node.superClass = this.eat(types._extends) ? this.parseExprSubscripts() : null;\n    }\n  }, {\n    key: \"parseExport\",\n    value: function parseExport(node) {\n      var hasDefault = this.maybeParseExportDefaultSpecifier(node);\n      var parseAfterDefault = !hasDefault || this.eat(types.comma);\n      var hasStar = parseAfterDefault && this.eatExportStar(node);\n      var hasNamespace = hasStar && this.maybeParseExportNamespaceSpecifier(node);\n      var parseAfterNamespace = parseAfterDefault && (!hasNamespace || this.eat(types.comma));\n      var isFromRequired = hasDefault || hasStar;\n\n      if (hasStar && !hasNamespace) {\n        if (hasDefault) this.unexpected();\n        this.parseExportFrom(node, true);\n        return this.finishNode(node, \"ExportAllDeclaration\");\n      }\n\n      var hasSpecifiers = this.maybeParseExportNamedSpecifiers(node);\n\n      if (hasDefault && parseAfterDefault && !hasStar && !hasSpecifiers || hasNamespace && parseAfterNamespace && !hasSpecifiers) {\n        throw this.unexpected(null, types.braceL);\n      }\n\n      var hasDeclaration;\n\n      if (isFromRequired || hasSpecifiers) {\n        hasDeclaration = false;\n        this.parseExportFrom(node, isFromRequired);\n      } else {\n        hasDeclaration = this.maybeParseExportDeclaration(node);\n      }\n\n      if (isFromRequired || hasSpecifiers || hasDeclaration) {\n        this.checkExport(node, true, false, !!node.source);\n        return this.finishNode(node, \"ExportNamedDeclaration\");\n      }\n\n      if (this.eat(types._default)) {\n        node.declaration = this.parseExportDefaultExpression();\n        this.checkExport(node, true, true);\n        return this.finishNode(node, \"ExportDefaultDeclaration\");\n      }\n\n      throw this.unexpected(null, types.braceL);\n    }\n  }, {\n    key: \"eatExportStar\",\n    value: function eatExportStar(node) {\n      return this.eat(types.star);\n    }\n  }, {\n    key: \"maybeParseExportDefaultSpecifier\",\n    value: function maybeParseExportDefaultSpecifier(node) {\n      if (this.isExportDefaultSpecifier()) {\n        this.expectPlugin(\"exportDefaultFrom\");\n        var specifier = this.startNode();\n        specifier.exported = this.parseIdentifier(true);\n        node.specifiers = [this.finishNode(specifier, \"ExportDefaultSpecifier\")];\n        return true;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"maybeParseExportNamespaceSpecifier\",\n    value: function maybeParseExportNamespaceSpecifier(node) {\n      if (this.isContextual(\"as\")) {\n        if (!node.specifiers) node.specifiers = [];\n        var specifier = this.startNodeAt(this.state.lastTokStart, this.state.lastTokStartLoc);\n        this.next();\n        specifier.exported = this.parseIdentifier(true);\n        node.specifiers.push(this.finishNode(specifier, \"ExportNamespaceSpecifier\"));\n        return true;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"maybeParseExportNamedSpecifiers\",\n    value: function maybeParseExportNamedSpecifiers(node) {\n      if (this.match(types.braceL)) {\n        var _node$specifiers2;\n\n        if (!node.specifiers) node.specifiers = [];\n\n        (_node$specifiers2 = node.specifiers).push.apply(_node$specifiers2, _toConsumableArray(this.parseExportSpecifiers()));\n\n        node.source = null;\n        node.declaration = null;\n        return true;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"maybeParseExportDeclaration\",\n    value: function maybeParseExportDeclaration(node) {\n      if (this.shouldParseExportDeclaration()) {\n        if (this.isContextual(\"async\")) {\n          var next = this.nextTokenStart();\n\n          if (!this.isUnparsedContextual(next, \"function\")) {\n            this.unexpected(next, types._function);\n          }\n        }\n\n        node.specifiers = [];\n        node.source = null;\n        node.declaration = this.parseExportDeclaration(node);\n        return true;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"isAsyncFunction\",\n    value: function isAsyncFunction() {\n      if (!this.isContextual(\"async\")) return false;\n      var next = this.nextTokenStart();\n      return !lineBreak.test(this.input.slice(this.state.pos, next)) && this.isUnparsedContextual(next, \"function\");\n    }\n  }, {\n    key: \"parseExportDefaultExpression\",\n    value: function parseExportDefaultExpression() {\n      var expr = this.startNode();\n      var isAsync = this.isAsyncFunction();\n\n      if (this.match(types._function) || isAsync) {\n        this.next();\n\n        if (isAsync) {\n          this.next();\n        }\n\n        return this.parseFunction(expr, FUNC_STATEMENT | FUNC_NULLABLE_ID, isAsync);\n      } else if (this.match(types._class)) {\n        return this.parseClass(expr, true, true);\n      } else if (this.match(types.at)) {\n        if (this.hasPlugin(\"decorators\") && this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")) {\n          this.raise(this.state.start, ErrorMessages.DecoratorBeforeExport);\n        }\n\n        this.parseDecorators(false);\n        return this.parseClass(expr, true, true);\n      } else if (this.match(types._const) || this.match(types._var) || this.isLet()) {\n        throw this.raise(this.state.start, ErrorMessages.UnsupportedDefaultExport);\n      } else {\n        var res = this.parseMaybeAssign();\n        this.semicolon();\n        return res;\n      }\n    }\n  }, {\n    key: \"parseExportDeclaration\",\n    value: function parseExportDeclaration(node) {\n      return this.parseStatement(null);\n    }\n  }, {\n    key: \"isExportDefaultSpecifier\",\n    value: function isExportDefaultSpecifier() {\n      if (this.match(types.name)) {\n        var value = this.state.value;\n\n        if (value === \"async\" || value === \"let\") {\n          return false;\n        }\n\n        if ((value === \"type\" || value === \"interface\") && !this.state.containsEsc) {\n          var l = this.lookahead();\n\n          if (l.type === types.name && l.value !== \"from\" || l.type === types.braceL) {\n            this.expectOnePlugin([\"flow\", \"typescript\"]);\n            return false;\n          }\n        }\n      } else if (!this.match(types._default)) {\n        return false;\n      }\n\n      var next = this.nextTokenStart();\n      var hasFrom = this.isUnparsedContextual(next, \"from\");\n\n      if (this.input.charCodeAt(next) === 44 || this.match(types.name) && hasFrom) {\n        return true;\n      }\n\n      if (this.match(types._default) && hasFrom) {\n        var nextAfterFrom = this.input.charCodeAt(this.nextTokenStartSince(next + 4));\n        return nextAfterFrom === 34 || nextAfterFrom === 39;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"parseExportFrom\",\n    value: function parseExportFrom(node, expect) {\n      if (this.eatContextual(\"from\")) {\n        node.source = this.parseImportSource();\n        this.checkExport(node);\n      } else {\n        if (expect) {\n          this.unexpected();\n        } else {\n          node.source = null;\n        }\n      }\n\n      this.semicolon();\n    }\n  }, {\n    key: \"shouldParseExportDeclaration\",\n    value: function shouldParseExportDeclaration() {\n      if (this.match(types.at)) {\n        this.expectOnePlugin([\"decorators\", \"decorators-legacy\"]);\n\n        if (this.hasPlugin(\"decorators\")) {\n          if (this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")) {\n            this.unexpected(this.state.start, ErrorMessages.DecoratorBeforeExport);\n          } else {\n            return true;\n          }\n        }\n      }\n\n      return this.state.type.keyword === \"var\" || this.state.type.keyword === \"const\" || this.state.type.keyword === \"function\" || this.state.type.keyword === \"class\" || this.isLet() || this.isAsyncFunction();\n    }\n  }, {\n    key: \"checkExport\",\n    value: function checkExport(node, checkNames, isDefault, isFrom) {\n      if (checkNames) {\n        if (isDefault) {\n          this.checkDuplicateExports(node, \"default\");\n\n          if (this.hasPlugin(\"exportDefaultFrom\")) {\n            var _declaration$extra;\n\n            var declaration = node.declaration;\n\n            if (declaration.type === \"Identifier\" && declaration.name === \"from\" && declaration.end - declaration.start === 4 && !((_declaration$extra = declaration.extra) == null ? void 0 : _declaration$extra.parenthesized)) {\n              this.raise(declaration.start, ErrorMessages.ExportDefaultFromAsIdentifier);\n            }\n          }\n        } else if (node.specifiers && node.specifiers.length) {\n          for (var _i4 = 0, _node$specifiers = node.specifiers; _i4 < _node$specifiers.length; _i4++) {\n            var specifier = _node$specifiers[_i4];\n            this.checkDuplicateExports(specifier, specifier.exported.name);\n\n            if (!isFrom && specifier.local) {\n              this.checkReservedWord(specifier.local.name, specifier.local.start, true, false);\n              this.scope.checkLocalExport(specifier.local);\n            }\n          }\n        } else if (node.declaration) {\n          if (node.declaration.type === \"FunctionDeclaration\" || node.declaration.type === \"ClassDeclaration\") {\n            var id = node.declaration.id;\n            if (!id) throw new Error(\"Assertion failure\");\n            this.checkDuplicateExports(node, id.name);\n          } else if (node.declaration.type === \"VariableDeclaration\") {\n            for (var _i5 = 0, _node$declaration$dec = node.declaration.declarations; _i5 < _node$declaration$dec.length; _i5++) {\n              var _declaration = _node$declaration$dec[_i5];\n              this.checkDeclaration(_declaration.id);\n            }\n          }\n        }\n      }\n\n      var currentContextDecorators = this.state.decoratorStack[this.state.decoratorStack.length - 1];\n\n      if (currentContextDecorators.length) {\n        var isClass = node.declaration && (node.declaration.type === \"ClassDeclaration\" || node.declaration.type === \"ClassExpression\");\n\n        if (!node.declaration || !isClass) {\n          throw this.raise(node.start, ErrorMessages.UnsupportedDecoratorExport);\n        }\n\n        this.takeDecorators(node.declaration);\n      }\n    }\n  }, {\n    key: \"checkDeclaration\",\n    value: function checkDeclaration(node) {\n      if (node.type === \"Identifier\") {\n        this.checkDuplicateExports(node, node.name);\n      } else if (node.type === \"ObjectPattern\") {\n        for (var _i6 = 0, _node$properties = node.properties; _i6 < _node$properties.length; _i6++) {\n          var prop = _node$properties[_i6];\n          this.checkDeclaration(prop);\n        }\n      } else if (node.type === \"ArrayPattern\") {\n        for (var _i7 = 0, _node$elements = node.elements; _i7 < _node$elements.length; _i7++) {\n          var elem = _node$elements[_i7];\n\n          if (elem) {\n            this.checkDeclaration(elem);\n          }\n        }\n      } else if (node.type === \"ObjectProperty\") {\n        this.checkDeclaration(node.value);\n      } else if (node.type === \"RestElement\") {\n        this.checkDeclaration(node.argument);\n      } else if (node.type === \"AssignmentPattern\") {\n        this.checkDeclaration(node.left);\n      }\n    }\n  }, {\n    key: \"checkDuplicateExports\",\n    value: function checkDuplicateExports(node, name) {\n      if (this.state.exportedIdentifiers.indexOf(name) > -1) {\n        this.raise(node.start, name === \"default\" ? ErrorMessages.DuplicateDefaultExport : ErrorMessages.DuplicateExport, name);\n      }\n\n      this.state.exportedIdentifiers.push(name);\n    }\n  }, {\n    key: \"parseExportSpecifiers\",\n    value: function parseExportSpecifiers() {\n      var nodes = [];\n      var first = true;\n      this.expect(types.braceL);\n\n      while (!this.eat(types.braceR)) {\n        if (first) {\n          first = false;\n        } else {\n          this.expect(types.comma);\n          if (this.eat(types.braceR)) break;\n        }\n\n        var node = this.startNode();\n        node.local = this.parseIdentifier(true);\n        node.exported = this.eatContextual(\"as\") ? this.parseIdentifier(true) : node.local.__clone();\n        nodes.push(this.finishNode(node, \"ExportSpecifier\"));\n      }\n\n      return nodes;\n    }\n  }, {\n    key: \"parseImport\",\n    value: function parseImport(node) {\n      node.specifiers = [];\n\n      if (!this.match(types.string)) {\n        var hasDefault = this.maybeParseDefaultImportSpecifier(node);\n        var parseNext = !hasDefault || this.eat(types.comma);\n        var hasStar = parseNext && this.maybeParseStarImportSpecifier(node);\n        if (parseNext && !hasStar) this.parseNamedImportSpecifiers(node);\n        this.expectContextual(\"from\");\n      }\n\n      node.source = this.parseImportSource();\n      var attributes = this.maybeParseModuleAttributes();\n\n      if (attributes) {\n        node.attributes = attributes;\n      }\n\n      this.semicolon();\n      return this.finishNode(node, \"ImportDeclaration\");\n    }\n  }, {\n    key: \"parseImportSource\",\n    value: function parseImportSource() {\n      if (!this.match(types.string)) this.unexpected();\n      return this.parseExprAtom();\n    }\n  }, {\n    key: \"shouldParseDefaultImport\",\n    value: function shouldParseDefaultImport(node) {\n      return this.match(types.name);\n    }\n  }, {\n    key: \"parseImportSpecifierLocal\",\n    value: function parseImportSpecifierLocal(node, specifier, type, contextDescription) {\n      specifier.local = this.parseIdentifier();\n      this.checkLVal(specifier.local, BIND_LEXICAL, undefined, contextDescription);\n      node.specifiers.push(this.finishNode(specifier, type));\n    }\n  }, {\n    key: \"maybeParseModuleAttributes\",\n    value: function maybeParseModuleAttributes() {\n      if (this.match(types._with) && !this.hasPrecedingLineBreak()) {\n        this.expectPlugin(\"moduleAttributes\");\n        this.next();\n      } else {\n        if (this.hasPlugin(\"moduleAttributes\")) return [];\n        return null;\n      }\n\n      var attrs = [];\n      var attributes = new Set();\n\n      do {\n        var node = this.startNode();\n        node.key = this.parseIdentifier(true);\n\n        if (node.key.name !== \"type\") {\n          this.raise(node.key.start, ErrorMessages.ModuleAttributeDifferentFromType, node.key.name);\n        }\n\n        if (attributes.has(node.key.name)) {\n          this.raise(node.key.start, ErrorMessages.ModuleAttributesWithDuplicateKeys, node.key.name);\n        }\n\n        attributes.add(node.key.name);\n        this.expect(types.colon);\n\n        if (!this.match(types.string)) {\n          throw this.unexpected(this.state.start, ErrorMessages.ModuleAttributeInvalidValue);\n        }\n\n        node.value = this.parseLiteral(this.state.value, \"StringLiteral\");\n        this.finishNode(node, \"ImportAttribute\");\n        attrs.push(node);\n      } while (this.eat(types.comma));\n\n      return attrs;\n    }\n  }, {\n    key: \"maybeParseDefaultImportSpecifier\",\n    value: function maybeParseDefaultImportSpecifier(node) {\n      if (this.shouldParseDefaultImport(node)) {\n        this.parseImportSpecifierLocal(node, this.startNode(), \"ImportDefaultSpecifier\", \"default import specifier\");\n        return true;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"maybeParseStarImportSpecifier\",\n    value: function maybeParseStarImportSpecifier(node) {\n      if (this.match(types.star)) {\n        var specifier = this.startNode();\n        this.next();\n        this.expectContextual(\"as\");\n        this.parseImportSpecifierLocal(node, specifier, \"ImportNamespaceSpecifier\", \"import namespace specifier\");\n        return true;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"parseNamedImportSpecifiers\",\n    value: function parseNamedImportSpecifiers(node) {\n      var first = true;\n      this.expect(types.braceL);\n\n      while (!this.eat(types.braceR)) {\n        if (first) {\n          first = false;\n        } else {\n          if (this.eat(types.colon)) {\n            throw this.raise(this.state.start, ErrorMessages.DestructureNamedImport);\n          }\n\n          this.expect(types.comma);\n          if (this.eat(types.braceR)) break;\n        }\n\n        this.parseImportSpecifier(node);\n      }\n    }\n  }, {\n    key: \"parseImportSpecifier\",\n    value: function parseImportSpecifier(node) {\n      var specifier = this.startNode();\n      specifier.imported = this.parseIdentifier(true);\n\n      if (this.eatContextual(\"as\")) {\n        specifier.local = this.parseIdentifier();\n      } else {\n        this.checkReservedWord(specifier.imported.name, specifier.start, true, true);\n        specifier.local = specifier.imported.__clone();\n      }\n\n      this.checkLVal(specifier.local, BIND_LEXICAL, undefined, \"import specifier\");\n      node.specifiers.push(this.finishNode(specifier, \"ImportSpecifier\"));\n    }\n  }]);\n\n  return StatementParser;\n}(ExpressionParser);\n\nvar ClassScope = function ClassScope() {\n  _classCallCheck(this, ClassScope);\n\n  this.privateNames = new Set();\n  this.loneAccessors = new Map();\n  this.undefinedPrivateNames = new Map();\n};\n\nvar ClassScopeHandler = /*#__PURE__*/function () {\n  function ClassScopeHandler(raise) {\n    _classCallCheck(this, ClassScopeHandler);\n\n    this.stack = [];\n    this.undefinedPrivateNames = new Map();\n    this.raise = raise;\n  }\n\n  _createClass(ClassScopeHandler, [{\n    key: \"current\",\n    value: function current() {\n      return this.stack[this.stack.length - 1];\n    }\n  }, {\n    key: \"enter\",\n    value: function enter() {\n      this.stack.push(new ClassScope());\n    }\n  }, {\n    key: \"exit\",\n    value: function exit() {\n      var oldClassScope = this.stack.pop();\n      var current = this.current();\n\n      for (var _i = 0, _Array$from = Array.from(oldClassScope.undefinedPrivateNames); _i < _Array$from.length; _i++) {\n        var _Array$from$_i2 = _slicedToArray(_Array$from[_i], 2),\n            name = _Array$from$_i2[0],\n            pos = _Array$from$_i2[1];\n\n        if (current) {\n          if (!current.undefinedPrivateNames.has(name)) {\n            current.undefinedPrivateNames.set(name, pos);\n          }\n        } else {\n          this.raise(pos, ErrorMessages.InvalidPrivateFieldResolution, name);\n        }\n      }\n    }\n  }, {\n    key: \"declarePrivateName\",\n    value: function declarePrivateName(name, elementType, pos) {\n      var classScope = this.current();\n      var redefined = classScope.privateNames.has(name);\n\n      if (elementType & CLASS_ELEMENT_KIND_ACCESSOR) {\n        var accessor = redefined && classScope.loneAccessors.get(name);\n\n        if (accessor) {\n          var oldStatic = accessor & CLASS_ELEMENT_FLAG_STATIC;\n          var newStatic = elementType & CLASS_ELEMENT_FLAG_STATIC;\n          var oldKind = accessor & CLASS_ELEMENT_KIND_ACCESSOR;\n          var newKind = elementType & CLASS_ELEMENT_KIND_ACCESSOR;\n          redefined = oldKind === newKind || oldStatic !== newStatic;\n          if (!redefined) classScope.loneAccessors.delete(name);\n        } else if (!redefined) {\n          classScope.loneAccessors.set(name, elementType);\n        }\n      }\n\n      if (redefined) {\n        this.raise(pos, ErrorMessages.PrivateNameRedeclaration, name);\n      }\n\n      classScope.privateNames.add(name);\n      classScope.undefinedPrivateNames.delete(name);\n    }\n  }, {\n    key: \"usePrivateName\",\n    value: function usePrivateName(name, pos) {\n      var classScope;\n\n      for (var _i2 = 0, _this$stack = this.stack; _i2 < _this$stack.length; _i2++) {\n        classScope = _this$stack[_i2];\n        if (classScope.privateNames.has(name)) return;\n      }\n\n      if (classScope) {\n        classScope.undefinedPrivateNames.set(name, pos);\n      } else {\n        this.raise(pos, ErrorMessages.InvalidPrivateFieldResolution, name);\n      }\n    }\n  }]);\n\n  return ClassScopeHandler;\n}();\n\nvar Parser = /*#__PURE__*/function (_StatementParser) {\n  _inherits(Parser, _StatementParser);\n\n  var _super17 = _createSuper(Parser);\n\n  function Parser(options, input) {\n    var _this46;\n\n    _classCallCheck(this, Parser);\n\n    options = getOptions(options);\n    _this46 = _super17.call(this, options, input);\n\n    var ScopeHandler = _this46.getScopeHandler();\n\n    _this46.options = options;\n    _this46.inModule = _this46.options.sourceType === \"module\";\n    _this46.scope = new ScopeHandler(_this46.raise.bind(_assertThisInitialized(_this46)), _this46.inModule);\n    _this46.prodParam = new ProductionParameterHandler();\n    _this46.classScope = new ClassScopeHandler(_this46.raise.bind(_assertThisInitialized(_this46)));\n    _this46.plugins = pluginsMap(_this46.options.plugins);\n    _this46.filename = options.sourceFilename;\n    return _this46;\n  }\n\n  _createClass(Parser, [{\n    key: \"getScopeHandler\",\n    value: function getScopeHandler() {\n      return ScopeHandler;\n    }\n  }, {\n    key: \"parse\",\n    value: function parse() {\n      var paramFlags = PARAM;\n\n      if (this.hasPlugin(\"topLevelAwait\") && this.inModule) {\n        paramFlags |= PARAM_AWAIT;\n      }\n\n      this.scope.enter(SCOPE_PROGRAM);\n      this.prodParam.enter(paramFlags);\n      var file = this.startNode();\n      var program = this.startNode();\n      this.nextToken();\n      file.errors = null;\n      this.parseTopLevel(file, program);\n      file.errors = this.state.errors;\n      return file;\n    }\n  }]);\n\n  return Parser;\n}(StatementParser);\n\nfunction pluginsMap(plugins) {\n  var pluginMap = new Map();\n\n  for (var _i = 0; _i < plugins.length; _i++) {\n    var plugin = plugins[_i];\n\n    var _ref15 = Array.isArray(plugin) ? plugin : [plugin, {}],\n        _ref16 = _slicedToArray(_ref15, 2),\n        name = _ref16[0],\n        options = _ref16[1];\n\n    if (!pluginMap.has(name)) pluginMap.set(name, options || {});\n  }\n\n  return pluginMap;\n}\n\nfunction parse(input, options) {\n  var _options;\n\n  if (((_options = options) == null ? void 0 : _options.sourceType) === \"unambiguous\") {\n    options = Object.assign({}, options);\n\n    try {\n      options.sourceType = \"module\";\n      var parser = getParser(options, input);\n      var ast = parser.parse();\n\n      if (parser.sawUnambiguousESM) {\n        return ast;\n      }\n\n      if (parser.ambiguousScriptDifferentAst) {\n        try {\n          options.sourceType = \"script\";\n          return getParser(options, input).parse();\n        } catch (_unused) {}\n      } else {\n        ast.program.sourceType = \"script\";\n      }\n\n      return ast;\n    } catch (moduleError) {\n      try {\n        options.sourceType = \"script\";\n        return getParser(options, input).parse();\n      } catch (_unused2) {}\n\n      throw moduleError;\n    }\n  } else {\n    return getParser(options, input).parse();\n  }\n}\n\nfunction parseExpression(input, options) {\n  var parser = getParser(options, input);\n\n  if (parser.options.strictMode) {\n    parser.state.strict = true;\n  }\n\n  return parser.getExpression();\n}\n\nfunction getParser(options, input) {\n  var cls = Parser;\n\n  if (options == null ? void 0 : options.plugins) {\n    validatePlugins(options.plugins);\n    cls = getParserClass(options.plugins);\n  }\n\n  return new cls(options, input);\n}\n\nvar parserClassCache = {};\n\nfunction getParserClass(pluginsFromOptions) {\n  var pluginList = mixinPluginNames.filter(function (name) {\n    return hasPlugin(pluginsFromOptions, name);\n  });\n  var key = pluginList.join(\"/\");\n  var cls = parserClassCache[key];\n\n  if (!cls) {\n    cls = Parser;\n\n    for (var _i = 0; _i < pluginList.length; _i++) {\n      var plugin = pluginList[_i];\n      cls = mixinPlugins[plugin](cls);\n    }\n\n    parserClassCache[key] = cls;\n  }\n\n  return cls;\n}\n\nexports.parse = parse;\nexports.parseExpression = parseExpression;\nexports.tokTypes = types;","map":{"version":3,"sources":["../src/tokenizer/types.js","../src/util/scopeflags.js","../src/util/whitespace.js","../src/util/location.js","../src/parser/base.js","../src/parser/comments.js","../src/parser/error-message.js","../src/parser/error.js","../src/plugins/estree.js","../src/tokenizer/context.js","../../babel-helper-validator-identifier/src/identifier.js","../../babel-helper-validator-identifier/src/keyword.js","../src/util/identifier.js","../src/plugins/flow.js","../src/plugins/jsx/xhtml.js","../src/plugins/jsx/index.js","../src/util/scope.js","../src/plugins/typescript/scope.js","../src/util/production-parameter.js","../src/plugins/typescript/index.js","../src/plugins/placeholders.js","../src/plugins/v8intrinsic.js","../src/plugin-utils.js","../src/options.js","../src/tokenizer/state.js","../src/tokenizer/index.js","../src/parser/util.js","../src/parser/node.js","../src/parser/lval.js","../src/parser/expression.js","../src/parser/statement.js","../src/util/class-scope.js","../src/parser/index.js","../src/index.js"],"names":["beforeExpr","startsExpr","isLoop","isAssign","prefix","postfix","constructor","conf","keywords","options","token","binop","types","num","bigint","regexp","string","name","eof","bracketL","bracketHashL","bracketBarL","bracketR","bracketBarR","braceL","braceBarL","braceHashL","braceR","braceBarR","parenL","parenR","comma","semi","colon","doubleColon","dot","question","questionDot","arrow","template","ellipsis","backQuote","dollarBraceL","at","hash","interpreterDirective","eq","assign","incDec","bang","tilde","pipeline","createBinop","nullishCoalescing","logicalOR","logicalAND","bitwiseOR","bitwiseXOR","bitwiseAND","equality","relational","bitShift","plusMin","modulo","star","slash","exponent","rightAssociative","_break","createKeyword","_case","_catch","_continue","_debugger","_default","_do","_else","_finally","_for","_function","_if","_return","_switch","_throw","_try","_var","_const","_while","_with","_new","_this","_super","_class","_extends","_export","_import","_null","_true","_false","_in","_instanceof","_typeof","_void","_delete","SCOPE_OTHER","SCOPE_PROGRAM","SCOPE_FUNCTION","SCOPE_ARROW","SCOPE_SIMPLE_CATCH","SCOPE_SUPER","SCOPE_DIRECT_SUPER","SCOPE_CLASS","SCOPE_TS_MODULE","SCOPE_VAR","BIND_KIND_VALUE","BIND_KIND_TYPE","BIND_SCOPE_VAR","BIND_SCOPE_LEXICAL","BIND_SCOPE_FUNCTION","BIND_FLAGS_NONE","BIND_FLAGS_CLASS","BIND_FLAGS_TS_ENUM","BIND_FLAGS_TS_CONST_ENUM","BIND_FLAGS_TS_EXPORT_ONLY","BIND_CLASS","BIND_LEXICAL","BIND_VAR","BIND_FUNCTION","BIND_TS_INTERFACE","BIND_TS_TYPE","BIND_TS_ENUM","BIND_TS_AMBIENT","BIND_NONE","BIND_OUTSIDE","BIND_TS_CONST_ENUM","BIND_TS_NAMESPACE","CLASS_ELEMENT_FLAG_STATIC","CLASS_ELEMENT_KIND_GETTER","CLASS_ELEMENT_KIND_SETTER","CLASS_ELEMENT_KIND_ACCESSOR","CLASS_ELEMENT_STATIC_GETTER","CLASS_ELEMENT_STATIC_SETTER","CLASS_ELEMENT_INSTANCE_GETTER","CLASS_ELEMENT_INSTANCE_SETTER","CLASS_ELEMENT_OTHER","lineBreak","lineBreakG","skipWhiteSpace","line","lineStart","match","offset","stack","comment","lastElement","i","elements","j","newTrailingComments","leadingComment","node","trailingComments","lastInStack","last","firstChild","lastChild","leadingComments","firstTrailingCommentIndex","ErrorMessages","ArgumentsDisallowedInInitializer","AsyncFunctionInSingleStatementContext","AwaitBindingIdentifier","AwaitExpressionFormalParameter","AwaitNotInAsyncFunction","BadGetterArity","BadSetterArity","BadSetterRestParameter","ConstructorClassField","ConstructorClassPrivateField","ConstructorIsAccessor","ConstructorIsAsync","ConstructorIsGenerator","DeclarationMissingInitializer","DecoratorBeforeExport","DecoratorConstructor","DecoratorExportClass","DecoratorSemicolon","DeletePrivateField","DestructureNamedImport","DuplicateConstructor","DuplicateDefaultExport","DuplicateExport","DuplicateProto","DuplicateRegExpFlags","ElementAfterRest","EscapedCharNotAnIdentifier","ExportDefaultFromAsIdentifier","ForInOfLoopInitializer","GeneratorInSingleStatementContext","IllegalBreakContinue","IllegalLanguageModeDirective","IllegalReturn","ImportCallArgumentTrailingComma","ImportCallArity","ImportCallNotNewExpression","ImportCallSpreadArgument","ImportMetaOutsideModule","ImportOutsideModule","InvalidBigIntLiteral","InvalidCodePoint","InvalidDigit","InvalidEscapeSequence","InvalidEscapeSequenceTemplate","InvalidEscapedReservedWord","InvalidIdentifier","InvalidLhs","InvalidLhsBinding","InvalidNumber","InvalidOrUnexpectedToken","InvalidParenthesizedAssignment","InvalidPrivateFieldResolution","InvalidPropertyBindingPattern","InvalidRecordProperty","InvalidRestAssignmentPattern","LabelRedeclaration","LetInLexicalBinding","MalformedRegExpFlags","MissingClassName","MissingEqInAssignment","MissingUnicodeEscape","MixingCoalesceWithLogical","ModuleAttributeDifferentFromType","ModuleAttributeInvalidValue","ModuleAttributesWithDuplicateKeys","ModuleExportUndefined","MultipleDefaultsInSwitch","NewlineAfterThrow","NoCatchOrFinally","NumberIdentifier","NumericSeparatorInEscapeSequence","ObsoleteAwaitStar","OptionalChainingNoNew","OptionalChainingNoTemplate","ParamDupe","PatternHasAccessor","PatternHasMethod","PipelineBodyNoArrow","PipelineBodySequenceExpression","PipelineHeadSequenceExpression","PipelineTopicUnused","PrimaryTopicNotAllowed","PrimaryTopicRequiresSmartPipeline","PrivateInExpectedIn","PrivateNameRedeclaration","RecordExpressionBarIncorrectEndSyntaxType","RecordExpressionBarIncorrectStartSyntaxType","RecordExpressionHashIncorrectStartSyntaxType","RecordNoProto","RestTrailingComma","SloppyFunction","StaticPrototype","StrictDelete","StrictEvalArguments","StrictEvalArgumentsBinding","StrictFunction","StrictOctalLiteral","StrictWith","SuperNotAllowed","SuperPrivateField","TrailingDecorator","TupleExpressionBarIncorrectEndSyntaxType","TupleExpressionBarIncorrectStartSyntaxType","TupleExpressionHashIncorrectStartSyntaxType","UnexpectedArgumentPlaceholder","UnexpectedAwaitAfterPipelineBody","UnexpectedDigitAfterHash","UnexpectedImportExport","UnexpectedKeyword","UnexpectedLeadingDecorator","UnexpectedLexicalDeclaration","UnexpectedNewTarget","UnexpectedNumericSeparator","UnexpectedPrivateField","UnexpectedReservedWord","UnexpectedSuper","UnexpectedToken","UnexpectedTokenUnaryExponentiation","UnsupportedBind","UnsupportedDecoratorExport","UnsupportedDefaultExport","UnsupportedImport","UnsupportedMetaProperty","UnsupportedParameterDecorator","UnsupportedPropertyDecorator","UnsupportedSuper","UnterminatedComment","UnterminatedRegExp","UnterminatedString","UnterminatedTemplate","VarRedeclaration","YieldBindingIdentifier","YieldInParameter","ZeroDigitNumericSeparator","pos","loc","getLineInfo","message","errorTemplate","params","err","Object","superClass","flags","regex","pattern","bigInt","BigInt","String","directiveLiteral","directive","stmt","expression","isSimpleProperty","prop","paramCount","start","method","Errors","bindingType","expr","value","directiveStatements","d","classBody","tt","isMethod","inClassScope","funcNode","type","braceStatement","braceExpression","templateQuasi","parenStatement","parenExpression","p","functionExpression","functionStatement","out","allowed","prevType","statementParens","nonASCIIidentifierStartChars","nonASCIIidentifierChars","nonASCIIidentifierStart","nonASCIIidentifier","astralIdentifierStartCodes","astralIdentifierCodes","length","set","code","isInAstralSet","reservedWords","keyword","strict","strictBind","reservedWordsStrictSet","reservedWordsStrictBindSet","inModule","word","isReservedWord","isStrictReservedWord","isStrictBindOnlyReservedWord","keywordRelationalOperator","current","next","reservedTypes","FlowErrors","AmbiguousConditionalArrow","AmbiguousDeclareModuleKind","AssignReservedType","DeclareClassElement","DeclareClassFieldInitializer","DuplicateDeclareModuleExports","EnumBooleanMemberNotInitialized","EnumDuplicateMemberName","EnumInconsistentMemberValues","EnumInvalidExplicitType","EnumInvalidExplicitTypeUnknownSupplied","EnumInvalidMemberInitializerPrimaryType","EnumInvalidMemberInitializerSymbolType","EnumInvalidMemberInitializerUnknownType","EnumInvalidMemberName","EnumNumberMemberNotInitialized","EnumStringMemberInconsistentlyInitailized","ImportTypeShorthandOnlyInPureImport","InexactInsideExact","InexactInsideNonObject","InexactVariance","InvalidNonTypeImportInDeclareModule","MissingTypeParamDefault","NestedDeclareModule","NestedFlowComment","OptionalBindingPattern","SpreadVariance","TypeBeforeInitializer","TypeCastInPattern","UnexpectedExplicitInexactInObject","UnexpectedReservedType","UnexpectedReservedUnderscore","UnexpectedSpaceBetweenModuloChecks","UnexpectedSpreadType","UnexpectedSubtractionOperand","UnexpectedTokenAfterTypeParameter","UnsupportedDeclareExportKind","UnsupportedStatementInDeclareModule","UnterminatedFlowComment","bodyElement","state","exportSuggestions","const","let","interface","list1","list2","list","test","FLOW_PRAGMA_REGEX","matches","oldInType","tok","moduloLoc","moduloPos","checksLoc","predicate","id","typeNode","typeContainer","tmp","bodyNode","body","kind","hasModuleExport","isEsModuleType","label","suggestion","isClass","allowStatic","allowExact","allowSpread","allowProto","allowInexact","declaration","requireDefault","nodeStart","variance","ident","defaultRequired","typeParameter","oldNoAnonFunctionType","valueNode","inexact","endDelim","exact","isStatic","protoStart","inexactStart","lookahead","propOrInexact","isInexactToken","optional","property","startPos","startLoc","node2","typeAnnotation","lh","rest","isGroupedType","param","allowPrimitiveOverride","result","refNeedsArrowPos","originalNoArrowAt","failed","invalid","noArrowAt","valid","consequent","arrows","partition","parse","typeCastNode","decl","declarationNode","hasNamespace","member","isIteratorStart","element","exprList","implemented","key","typeParameters","hasTypeImportKind","isMaybeDefaultImport","specifier","firstIdentLoc","firstIdent","specifierTypeKind","isBinding","as_ident","nodeIsTypeImport","specifierIsTypeImport","jsx","context","tc","arrowExpression","isArrowFunction","canBeArrow","base","abort","subscriptState","targs","fileNode","end","shiftToFirstNonWhiteSpace","ch2","ch3","memberName","enumName","suppliedType","endOfInit","literal","init","explicitType","seenNames","members","booleanMembers","numberMembers","stringMembers","defaultedMembers","memberNode","initializedMembers","nameLoc","empty","boolsLen","numsLen","strsLen","defaultedLen","entities","quot","amp","apos","lt","gt","nbsp","iexcl","cent","pound","curren","yen","brvbar","sect","uml","copy","ordf","laquo","not","shy","reg","macr","deg","plusmn","sup2","sup3","acute","micro","para","middot","cedil","sup1","ordm","raquo","frac14","frac12","frac34","iquest","Agrave","Aacute","Acirc","Atilde","Auml","Aring","AElig","Ccedil","Egrave","Eacute","Ecirc","Euml","Igrave","Iacute","Icirc","Iuml","ETH","Ntilde","Ograve","Oacute","Ocirc","Otilde","Ouml","times","Oslash","Ugrave","Uacute","Ucirc","Uuml","Yacute","THORN","szlig","agrave","aacute","acirc","atilde","auml","aring","aelig","ccedil","egrave","eacute","ecirc","euml","igrave","iacute","icirc","iuml","eth","ntilde","ograve","oacute","ocirc","otilde","ouml","divide","oslash","ugrave","uacute","ucirc","uuml","yacute","thorn","yuml","OElig","oelig","Scaron","scaron","Yuml","fnof","circ","Alpha","Beta","Gamma","Delta","Epsilon","Zeta","Eta","Theta","Iota","Kappa","Lambda","Mu","Nu","Xi","Omicron","Pi","Rho","Sigma","Tau","Upsilon","Phi","Chi","Psi","Omega","alpha","beta","gamma","delta","epsilon","zeta","eta","theta","iota","kappa","lambda","mu","nu","xi","omicron","pi","rho","sigmaf","sigma","tau","upsilon","phi","chi","psi","omega","thetasym","upsih","piv","ensp","emsp","thinsp","zwnj","zwj","lrm","rlm","ndash","mdash","lsquo","rsquo","sbquo","ldquo","rdquo","bdquo","dagger","Dagger","bull","hellip","permil","prime","Prime","lsaquo","rsaquo","oline","frasl","euro","image","weierp","real","trade","alefsym","larr","uarr","rarr","darr","harr","crarr","lArr","uArr","rArr","dArr","hArr","forall","part","exist","nabla","isin","notin","ni","prod","sum","minus","lowast","radic","infin","ang","and","or","cap","cup","int","there4","sim","cong","asymp","ne","equiv","le","ge","sub","sup","nsub","sube","supe","oplus","otimes","perp","sdot","lceil","rceil","lfloor","rfloor","lang","rang","loz","spades","clubs","hearts","diams","HEX_NUMBER","DECIMAL_NUMBER","JsxErrors","AttributeIsEmpty","MissingClosingTagFragment","MissingClosingTagElement","UnsupportedJsxValue","UnterminatedJsxContent","UnwrappedAdjacentJSXElements","object","getQualifiedJSXName","chunkStart","ch","isNewLine","normalizeCRLF","str","count","entity","parseInt","XHTMLEntities","isIdentifierChar","newNode","attributes","children","openingElement","closingElement","contents","isFragment","isIdentifierStart","curContext","var","lexical","functions","scopeStack","undefinedExports","undefinedPrivateNames","scope","isConst","wasConst","PARAM","PARAM_YIELD","PARAM_AWAIT","PARAM_RETURN","isAsync","isGenerator","x","TSErrors","ClassMethodHasDeclare","ClassMethodHasReadonly","DeclareClassFieldHasInitializer","DuplicateModifier","EmptyHeritageClauseType","IndexSignatureHasAbstract","IndexSignatureHasAccessibility","IndexSignatureHasStatic","OptionalTypeBeforeRequired","PatternIsOptional","PrivateElementHasAbstract","PrivateElementHasAccessibility","TemplateTypeHasSubstitution","TypeAnnotationAfterAssign","UnexpectedReadonly","UnexpectedTypeAnnotation","UnexpectedTypeCastInParameter","UnsupportedImportTypeArgument","UnsupportedParameterPropertyKind","UnsupportedSignatureParameterKind","modifier","allowedModifiers","modified","parseElement","nonNull","returnTokenRequired","returnToken","signature","nodeAny","readonly","idx","seenOptionalElement","elementNode","restNode","optionalTypeNode","templateNode","thisKeyword","keywordTypeFromName","nextToken","operator","kw","parseConstituentType","braceStackCounter","t","asserts","thisTypePredicate","typePredicateVariable","containsEsc","eatColon","assert","originalStart","delimitedList","oldContext","cb","nested","inner","isExport","res","f","starttype","nany","mod","cls","oldMaybeInArrowParameters","oldYieldPos","oldAwaitPos","accessibility","left","elt","pp","decorators","bodilessType","nonNullExpression","asyncArrowFn","typeArguments","args","ahead","importNode","methodOrProp","isDeclare","ct","typeCast","returnType","call","baseCount","firstParam","hasContextParam","isFinished","isStatement","placeholder","optionalId","specifiers","hasStarImport","v8IntrinsicStart","identifier","plugin","Array","PIPELINE_PROPOSALS","RECORD_AND_TUPLE_SYNTAX_TYPES","hasPlugin","decoratorsBeforeExport","getPluginOption","moduleAttributesVerionPluginOption","mixinPlugins","estree","flow","typescript","v8intrinsic","placeholders","mixinPluginNames","defaultOptions","sourceType","sourceFilename","startLine","allowAwaitOutsideFunction","allowReturnOutsideFunction","allowImportExportEverywhere","allowSuperOutsideMethod","allowUndeclaredExports","plugins","strictMode","ranges","tokens","createParenthesizedExpressions","errorRecovery","opts","maxNumOfResolvableTopics","maxTopicIndex","keys","val","VALID_REGEX_FLAGS","forbiddenNumericSeparatorSiblings","decBinOct","hex","allowedNumericSeparatorSiblings","input","old","curr","skip","override","block","loop","isWhitespace","nextPos","width","exprAllowed","size","next2","escaped","inClass","content","mods","char","charCode","allowNumSeparator","forbiddenSiblings","radix","allowedSiblings","total","e","len","prev","Number","isBigInt","isFloat","isNonOctalDecimalInt","octal","underscorePos","parseFloat","codePos","containsInvalid","throwOnInvalid","octalStr","n","escStart","identifierCheck","esc","keywordTypes","parent","update","extra","afterNext","op","nameEnd","nameStart","messageOrType","missingPlugin","names","oldState","abortSignal","fn","failState","error","thrown","aborted","doubleProto","shorthandAssign","parser","endLoc","locationNode","unwrapParenthesizedExpression","parenthesized","isLast","arg","elts","first","allowEmpty","strictModeChanged","isStrictBindReservedWord","checkClashes","disallowLetBinding","elem","protoRef","refExpressionErrors","paramFlags","afterLeftParse","ownExpressionErrors","potentialArrowAt","prec","logical","coalesce","nextOp","optionalChainMember","maybeAsyncArrow","stop","oldMaybeInAsyncArrowHead","noCalls","computed","oldInFSharpPipelineDirectBody","dynamicImport","innerParenStart","possibleAsyncArrow","oldLabels","close","ret","callee","nextCh","lookaheadCh","isPrivate","meta","propertyName","innerStartPos","innerStartLoc","optionalCommaStart","spreadNodeStartPos","spreadNodeStartLoc","spreadStart","innerEndPos","innerEndLoc","arrowNode","metaProp","raw","cooked","curElt","propHash","isRecord","isPattern","oldInPropertyName","allowModifiers","allowDirectSuper","functionFlags","isExpression","allowExpression","oldInParameters","oldStrict","hasStrictModeDirective","nonSimple","errorPos","nameHash","allowDuplicates","checkKeywords","isKeyword","reservedTest","pipelineStyle","childExpression","outerContextTopicState","callback","outerContextSoloAwaitState","loopLabel","switchLabel","FUNC_NO_FLAGS","FUNC_STATEMENT","FUNC_HANGING_STATEMENT","FUNC_NULLABLE_ID","program","file","nextTokenCharCode","maybeName","currentContextDecorators","decorator","isBreak","lab","awaitAt","isLet","description","declarationPosition","cases","isCase","cur","sawDefault","clause","simple","statementStart","allowDirectives","createNewLexicalScope","directives","octalPositions","parsedNonDirective","afterBlockParse","isForIn","declarations","isTypescript","isFor","statement","isHangingStatement","requireId","hadConstructor","publicMethod","privateMethod","publicProp","privateProp","publicMember","isSimple","maybeQuestionTokenStart","isConstructor","allowsDirectSuper","hasDefault","parseAfterDefault","hasStar","parseAfterNamespace","isFromRequired","hasSpecifiers","hasDeclaration","l","hasFrom","nextAfterFrom","nodes","parseNext","attrs","oldClassScope","classScope","redefined","elementType","accessor","oldStatic","newStatic","oldKind","newKind","getOptions","ScopeHandler","pluginsMap","pluginMap","getParser","ast","validatePlugins","getParserClass","parserClassCache","pluginList"],"mappings":"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","sourcesContent":["// @flow\n\n// ## Token types\n\n// The assignment of fine-grained, information-carrying type objects\n// allows the tokenizer to store the information it has about a\n// token in a way that is very cheap for the parser to look up.\n\n// All token type variables start with an underscore, to make them\n// easy to recognize.\n\n// The `beforeExpr` property is used to disambiguate between regular\n// expressions and divisions. It is set on all token types that can\n// be followed by an expression (thus, a slash after them would be a\n// regular expression).\n\n// The `startsExpr` property is used to determine whether an expression\n// may be the “argument” subexpression of a `yield` expression or\n// `yield` statement. It is set on all token types that may be at the\n// start of a subexpression.\n\n// `isLoop` marks a keyword as starting a loop, which is important\n// to know when parsing a label, in order to allow or disallow\n// continue jumps to that label.\n\nconst beforeExpr = true;\nconst startsExpr = true;\nconst isLoop = true;\nconst isAssign = true;\nconst prefix = true;\nconst postfix = true;\n\ntype TokenOptions = {\n  keyword?: string,\n  beforeExpr?: boolean,\n  startsExpr?: boolean,\n  rightAssociative?: boolean,\n  isLoop?: boolean,\n  isAssign?: boolean,\n  prefix?: boolean,\n  postfix?: boolean,\n  binop?: ?number,\n};\n\nexport class TokenType {\n  label: string;\n  keyword: ?string;\n  beforeExpr: boolean;\n  startsExpr: boolean;\n  rightAssociative: boolean;\n  isLoop: boolean;\n  isAssign: boolean;\n  prefix: boolean;\n  postfix: boolean;\n  binop: ?number;\n  updateContext: ?(prevType: TokenType) => void;\n\n  constructor(label: string, conf: TokenOptions = {}) {\n    this.label = label;\n    this.keyword = conf.keyword;\n    this.beforeExpr = !!conf.beforeExpr;\n    this.startsExpr = !!conf.startsExpr;\n    this.rightAssociative = !!conf.rightAssociative;\n    this.isLoop = !!conf.isLoop;\n    this.isAssign = !!conf.isAssign;\n    this.prefix = !!conf.prefix;\n    this.postfix = !!conf.postfix;\n    this.binop = conf.binop != null ? conf.binop : null;\n    this.updateContext = null;\n  }\n}\n\nexport const keywords = new Map<string, TokenType>();\n\nfunction createKeyword(name: string, options: TokenOptions = {}): TokenType {\n  options.keyword = name;\n  const token = new TokenType(name, options);\n  keywords.set(name, token);\n  return token;\n}\n\nfunction createBinop(name: string, binop: number) {\n  return new TokenType(name, { beforeExpr, binop });\n}\n\nexport const types: { [name: string]: TokenType } = {\n  num: new TokenType(\"num\", { startsExpr }),\n  bigint: new TokenType(\"bigint\", { startsExpr }),\n  regexp: new TokenType(\"regexp\", { startsExpr }),\n  string: new TokenType(\"string\", { startsExpr }),\n  name: new TokenType(\"name\", { startsExpr }),\n  eof: new TokenType(\"eof\"),\n\n  // Punctuation token types.\n  bracketL: new TokenType(\"[\", { beforeExpr, startsExpr }),\n  bracketHashL: new TokenType(\"#[\", { beforeExpr, startsExpr }),\n  bracketBarL: new TokenType(\"[|\", { beforeExpr, startsExpr }),\n  bracketR: new TokenType(\"]\"),\n  bracketBarR: new TokenType(\"|]\"),\n  braceL: new TokenType(\"{\", { beforeExpr, startsExpr }),\n  braceBarL: new TokenType(\"{|\", { beforeExpr, startsExpr }),\n  braceHashL: new TokenType(\"#{\", { beforeExpr, startsExpr }),\n  braceR: new TokenType(\"}\"),\n  braceBarR: new TokenType(\"|}\"),\n  parenL: new TokenType(\"(\", { beforeExpr, startsExpr }),\n  parenR: new TokenType(\")\"),\n  comma: new TokenType(\",\", { beforeExpr }),\n  semi: new TokenType(\";\", { beforeExpr }),\n  colon: new TokenType(\":\", { beforeExpr }),\n  doubleColon: new TokenType(\"::\", { beforeExpr }),\n  dot: new TokenType(\".\"),\n  question: new TokenType(\"?\", { beforeExpr }),\n  questionDot: new TokenType(\"?.\"),\n  arrow: new TokenType(\"=>\", { beforeExpr }),\n  template: new TokenType(\"template\"),\n  ellipsis: new TokenType(\"...\", { beforeExpr }),\n  backQuote: new TokenType(\"`\", { startsExpr }),\n  dollarBraceL: new TokenType(\"${\", { beforeExpr, startsExpr }),\n  at: new TokenType(\"@\"),\n  hash: new TokenType(\"#\", { startsExpr }),\n\n  // Special hashbang token.\n  interpreterDirective: new TokenType(\"#!...\"),\n\n  // Operators. These carry several kinds of properties to help the\n  // parser use them properly (the presence of these properties is\n  // what categorizes them as operators).\n  //\n  // `binop`, when present, specifies that this operator is a binary\n  // operator, and will refer to its precedence.\n  //\n  // `prefix` and `postfix` mark the operator as a prefix or postfix\n  // unary operator.\n  //\n  // `isAssign` marks all of `=`, `+=`, `-=` etcetera, which act as\n  // binary operators with a very low precedence, that should result\n  // in AssignmentExpression nodes.\n\n  eq: new TokenType(\"=\", { beforeExpr, isAssign }),\n  assign: new TokenType(\"_=\", { beforeExpr, isAssign }),\n  incDec: new TokenType(\"++/--\", { prefix, postfix, startsExpr }),\n  bang: new TokenType(\"!\", { beforeExpr, prefix, startsExpr }),\n  tilde: new TokenType(\"~\", { beforeExpr, prefix, startsExpr }),\n  pipeline: createBinop(\"|>\", 0),\n  nullishCoalescing: createBinop(\"??\", 1),\n  logicalOR: createBinop(\"||\", 1),\n  logicalAND: createBinop(\"&&\", 2),\n  bitwiseOR: createBinop(\"|\", 3),\n  bitwiseXOR: createBinop(\"^\", 4),\n  bitwiseAND: createBinop(\"&\", 5),\n  equality: createBinop(\"==/!=/===/!==\", 6),\n  relational: createBinop(\"</>/<=/>=\", 7),\n  bitShift: createBinop(\"<</>>/>>>\", 8),\n  plusMin: new TokenType(\"+/-\", { beforeExpr, binop: 9, prefix, startsExpr }),\n  // startsExpr: required by v8intrinsic plugin\n  modulo: new TokenType(\"%\", { beforeExpr, binop: 10, startsExpr }),\n  star: createBinop(\"*\", 10),\n  slash: createBinop(\"/\", 10),\n  exponent: new TokenType(\"**\", {\n    beforeExpr,\n    binop: 11,\n    rightAssociative: true,\n  }),\n\n  // Keywords\n  // Don't forget to update packages/babel-helper-validator-identifier/src/keyword.js\n  // when new keywords are added\n  _break: createKeyword(\"break\"),\n  _case: createKeyword(\"case\", { beforeExpr }),\n  _catch: createKeyword(\"catch\"),\n  _continue: createKeyword(\"continue\"),\n  _debugger: createKeyword(\"debugger\"),\n  _default: createKeyword(\"default\", { beforeExpr }),\n  _do: createKeyword(\"do\", { isLoop, beforeExpr }),\n  _else: createKeyword(\"else\", { beforeExpr }),\n  _finally: createKeyword(\"finally\"),\n  _for: createKeyword(\"for\", { isLoop }),\n  _function: createKeyword(\"function\", { startsExpr }),\n  _if: createKeyword(\"if\"),\n  _return: createKeyword(\"return\", { beforeExpr }),\n  _switch: createKeyword(\"switch\"),\n  _throw: createKeyword(\"throw\", { beforeExpr, prefix, startsExpr }),\n  _try: createKeyword(\"try\"),\n  _var: createKeyword(\"var\"),\n  _const: createKeyword(\"const\"),\n  _while: createKeyword(\"while\", { isLoop }),\n  _with: createKeyword(\"with\"),\n  _new: createKeyword(\"new\", { beforeExpr, startsExpr }),\n  _this: createKeyword(\"this\", { startsExpr }),\n  _super: createKeyword(\"super\", { startsExpr }),\n  _class: createKeyword(\"class\", { startsExpr }),\n  _extends: createKeyword(\"extends\", { beforeExpr }),\n  _export: createKeyword(\"export\"),\n  _import: createKeyword(\"import\", { startsExpr }),\n  _null: createKeyword(\"null\", { startsExpr }),\n  _true: createKeyword(\"true\", { startsExpr }),\n  _false: createKeyword(\"false\", { startsExpr }),\n  _in: createKeyword(\"in\", { beforeExpr, binop: 7 }),\n  _instanceof: createKeyword(\"instanceof\", { beforeExpr, binop: 7 }),\n  _typeof: createKeyword(\"typeof\", { beforeExpr, prefix, startsExpr }),\n  _void: createKeyword(\"void\", { beforeExpr, prefix, startsExpr }),\n  _delete: createKeyword(\"delete\", { beforeExpr, prefix, startsExpr }),\n};\n","// @flow\n\n// Each scope gets a bitset that may contain these flags\n// prettier-ignore\nexport const SCOPE_OTHER        = 0b00000000,\n             SCOPE_PROGRAM      = 0b00000001,\n             SCOPE_FUNCTION     = 0b00000010,\n             SCOPE_ARROW        = 0b00000100,\n             SCOPE_SIMPLE_CATCH = 0b00001000,\n             SCOPE_SUPER        = 0b00010000,\n             SCOPE_DIRECT_SUPER = 0b00100000,\n             SCOPE_CLASS        = 0b01000000,\n             SCOPE_TS_MODULE    = 0b10000000,\n             SCOPE_VAR = SCOPE_PROGRAM | SCOPE_FUNCTION | SCOPE_TS_MODULE;\n\nexport type ScopeFlags =\n  | typeof SCOPE_OTHER\n  | typeof SCOPE_PROGRAM\n  | typeof SCOPE_FUNCTION\n  | typeof SCOPE_VAR\n  | typeof SCOPE_ARROW\n  | typeof SCOPE_SIMPLE_CATCH\n  | typeof SCOPE_SUPER\n  | typeof SCOPE_DIRECT_SUPER\n  | typeof SCOPE_CLASS;\n\n// These flags are meant to be _only_ used inside the Scope class (or subclasses).\n// prettier-ignore\nexport const BIND_KIND_VALUE           = 0b00000_0000_01,\n             BIND_KIND_TYPE            = 0b00000_0000_10,\n             // Used in checkLVal and declareName to determine the type of a binding\n             BIND_SCOPE_VAR            = 0b00000_0001_00, // Var-style binding\n             BIND_SCOPE_LEXICAL        = 0b00000_0010_00, // Let- or const-style binding\n             BIND_SCOPE_FUNCTION       = 0b00000_0100_00, // Function declaration\n             BIND_SCOPE_OUTSIDE        = 0b00000_1000_00, // Special case for function names as\n                                                   // bound inside the function\n             // Misc flags\n             BIND_FLAGS_NONE           = 0b00001_0000_00,\n             BIND_FLAGS_CLASS          = 0b00010_0000_00,\n             BIND_FLAGS_TS_ENUM        = 0b00100_0000_00,\n             BIND_FLAGS_TS_CONST_ENUM  = 0b01000_0000_00,\n             BIND_FLAGS_TS_EXPORT_ONLY = 0b10000_0000_00;\n\n// These flags are meant to be _only_ used by Scope consumers\n// prettier-ignore\n/*                              =    is value?    |    is type?    |      scope          |    misc flags    */\nexport const BIND_CLASS         = BIND_KIND_VALUE | BIND_KIND_TYPE | BIND_SCOPE_LEXICAL  | BIND_FLAGS_CLASS  ,\n             BIND_LEXICAL       = BIND_KIND_VALUE | 0              | BIND_SCOPE_LEXICAL  | 0                 ,\n             BIND_VAR           = BIND_KIND_VALUE | 0              | BIND_SCOPE_VAR      | 0                 ,\n             BIND_FUNCTION      = BIND_KIND_VALUE | 0              | BIND_SCOPE_FUNCTION | 0                 ,\n             BIND_TS_INTERFACE  = 0               | BIND_KIND_TYPE | 0                   | BIND_FLAGS_CLASS  ,\n             BIND_TS_TYPE       = 0               | BIND_KIND_TYPE | 0                   | 0                 ,\n             BIND_TS_ENUM       = BIND_KIND_VALUE | BIND_KIND_TYPE | BIND_SCOPE_LEXICAL  | BIND_FLAGS_TS_ENUM,\n             BIND_TS_AMBIENT    = 0               | 0              | 0            | BIND_FLAGS_TS_EXPORT_ONLY,\n             // These bindings don't introduce anything in the scope. They are used for assignments and\n             // function expressions IDs.\n             BIND_NONE          = 0               | 0              | 0                   | BIND_FLAGS_NONE   ,\n             BIND_OUTSIDE       = BIND_KIND_VALUE | 0              | 0                   | BIND_FLAGS_NONE   ,\n\n             BIND_TS_CONST_ENUM = BIND_TS_ENUM | BIND_FLAGS_TS_CONST_ENUM,\n             BIND_TS_NAMESPACE  = 0               | 0              | 0            | BIND_FLAGS_TS_EXPORT_ONLY;\n\nexport type BindingTypes =\n  | typeof BIND_NONE\n  | typeof BIND_OUTSIDE\n  | typeof BIND_VAR\n  | typeof BIND_LEXICAL\n  | typeof BIND_CLASS\n  | typeof BIND_FUNCTION\n  | typeof BIND_TS_INTERFACE\n  | typeof BIND_TS_TYPE\n  | typeof BIND_TS_ENUM\n  | typeof BIND_TS_AMBIENT\n  | typeof BIND_TS_NAMESPACE;\n\n// prettier-ignore\nexport const CLASS_ELEMENT_FLAG_STATIC = 0b1_00,\n             CLASS_ELEMENT_KIND_GETTER = 0b0_10,\n             CLASS_ELEMENT_KIND_SETTER = 0b0_01,\n             CLASS_ELEMENT_KIND_ACCESSOR = CLASS_ELEMENT_KIND_GETTER | CLASS_ELEMENT_KIND_SETTER;\n\n// prettier-ignore\nexport const CLASS_ELEMENT_STATIC_GETTER   = CLASS_ELEMENT_KIND_GETTER | CLASS_ELEMENT_FLAG_STATIC,\n             CLASS_ELEMENT_STATIC_SETTER   = CLASS_ELEMENT_KIND_SETTER | CLASS_ELEMENT_FLAG_STATIC,\n             CLASS_ELEMENT_INSTANCE_GETTER = CLASS_ELEMENT_KIND_GETTER,\n             CLASS_ELEMENT_INSTANCE_SETTER = CLASS_ELEMENT_KIND_SETTER,\n             CLASS_ELEMENT_OTHER           = 0;\n\nexport type ClassElementTypes =\n  | typeof CLASS_ELEMENT_STATIC_GETTER\n  | typeof CLASS_ELEMENT_STATIC_SETTER\n  | typeof CLASS_ELEMENT_INSTANCE_GETTER\n  | typeof CLASS_ELEMENT_INSTANCE_SETTER\n  | typeof CLASS_ELEMENT_OTHER;\n","// @flow\n\nimport * as charCodes from \"charcodes\";\n\n// Matches a whole line break (where CRLF is considered a single\n// line break). Used to count lines.\nexport const lineBreak = /\\r\\n?|[\\n\\u2028\\u2029]/;\nexport const lineBreakG = new RegExp(lineBreak.source, \"g\");\n\n// https://tc39.github.io/ecma262/#sec-line-terminators\nexport function isNewLine(code: number): boolean {\n  switch (code) {\n    case charCodes.lineFeed:\n    case charCodes.carriageReturn:\n    case charCodes.lineSeparator:\n    case charCodes.paragraphSeparator:\n      return true;\n\n    default:\n      return false;\n  }\n}\n\nexport const skipWhiteSpace = /(?:\\s|\\/\\/.*|\\/\\*[^]*?\\*\\/)*/g;\n\n// https://tc39.github.io/ecma262/#sec-white-space\nexport function isWhitespace(code: number): boolean {\n  switch (code) {\n    case 0x0009: // CHARACTER TABULATION\n    case 0x000b: // LINE TABULATION\n    case 0x000c: // FORM FEED\n    case charCodes.space:\n    case charCodes.nonBreakingSpace:\n    case charCodes.oghamSpaceMark:\n    case 0x2000: // EN QUAD\n    case 0x2001: // EM QUAD\n    case 0x2002: // EN SPACE\n    case 0x2003: // EM SPACE\n    case 0x2004: // THREE-PER-EM SPACE\n    case 0x2005: // FOUR-PER-EM SPACE\n    case 0x2006: // SIX-PER-EM SPACE\n    case 0x2007: // FIGURE SPACE\n    case 0x2008: // PUNCTUATION SPACE\n    case 0x2009: // THIN SPACE\n    case 0x200a: // HAIR SPACE\n    case 0x202f: // NARROW NO-BREAK SPACE\n    case 0x205f: // MEDIUM MATHEMATICAL SPACE\n    case 0x3000: // IDEOGRAPHIC SPACE\n    case 0xfeff: // ZERO WIDTH NO-BREAK SPACE\n      return true;\n\n    default:\n      return false;\n  }\n}\n","// @flow\n\nimport { lineBreakG } from \"./whitespace\";\n\nexport type Pos = {\n  start: number,\n};\n\n// These are used when `options.locations` is on, for the\n// `startLoc` and `endLoc` properties.\n\nexport class Position {\n  line: number;\n  column: number;\n\n  constructor(line: number, col: number) {\n    this.line = line;\n    this.column = col;\n  }\n}\n\nexport class SourceLocation {\n  start: Position;\n  end: Position;\n  filename: string;\n  identifierName: ?string;\n\n  constructor(start: Position, end?: Position) {\n    this.start = start;\n    // $FlowIgnore (may start as null, but initialized later)\n    this.end = end;\n  }\n}\n\n// The `getLineInfo` function is mostly useful when the\n// `locations` option is off (for performance reasons) and you\n// want to find the line/column position for a given character\n// offset. `input` should be the code string that the offset refers\n// into.\n\nexport function getLineInfo(input: string, offset: number): Position {\n  let line = 1;\n  let lineStart = 0;\n  let match;\n  lineBreakG.lastIndex = 0;\n  while ((match = lineBreakG.exec(input)) && match.index < offset) {\n    line++;\n    lineStart = lineBreakG.lastIndex;\n  }\n\n  return new Position(line, offset - lineStart);\n}\n","// @flow\n\nimport type { Options } from \"../options\";\nimport type State from \"../tokenizer/state\";\nimport type { PluginsMap } from \"./index\";\nimport type ScopeHandler from \"../util/scope\";\nimport type ClassScopeHandler from \"../util/class-scope\";\nimport type ProductionParameterHandler from \"../util/production-parameter\";\n\nexport default class BaseParser {\n  // Properties set by constructor in index.js\n  options: Options;\n  inModule: boolean;\n  scope: ScopeHandler<*>;\n  classScope: ClassScopeHandler;\n  prodParam: ProductionParameterHandler;\n  plugins: PluginsMap;\n  filename: ?string;\n  sawUnambiguousESM: boolean = false;\n  ambiguousScriptDifferentAst: boolean = false;\n\n  // Initialized by Tokenizer\n  state: State;\n  // input and length are not in state as they are constant and we do\n  // not want to ever copy them, which happens if state gets cloned\n  input: string;\n  length: number;\n\n  hasPlugin(name: string): boolean {\n    return this.plugins.has(name);\n  }\n\n  getPluginOption(plugin: string, name: string) {\n    // $FlowIssue\n    if (this.hasPlugin(plugin)) return this.plugins.get(plugin)[name];\n  }\n}\n","// @flow\n\n/**\n * Based on the comment attachment algorithm used in espree and estraverse.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n * * Redistributions of source code must retain the above copyright\n *   notice, this list of conditions and the following disclaimer.\n * * Redistributions in binary form must reproduce the above copyright\n *   notice, this list of conditions and the following disclaimer in the\n *   documentation and/or other materials provided with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport BaseParser from \"./base\";\nimport type { Comment, Node } from \"../types\";\n\nfunction last<T>(stack: $ReadOnlyArray<T>): T {\n  return stack[stack.length - 1];\n}\n\nexport default class CommentsParser extends BaseParser {\n  addComment(comment: Comment): void {\n    if (this.filename) comment.loc.filename = this.filename;\n    this.state.trailingComments.push(comment);\n    this.state.leadingComments.push(comment);\n  }\n\n  adjustCommentsAfterTrailingComma(\n    node: Node,\n    elements: (Node | null)[],\n    // When the current node is followed by a token which hasn't a respective AST node, we\n    // need to take all the trailing comments to prevent them from being attached to an\n    // unrelated node. e.g. in\n    //     var { x } /* cmt */ = { y }\n    // we don't want /* cmt */ to be attached to { y }.\n    // On the other hand, in\n    //     fn(x) [new line] /* cmt */ [new line] y\n    // /* cmt */ is both a trailing comment of fn(x) and a leading comment of y\n    takeAllComments?: boolean,\n  ) {\n    if (this.state.leadingComments.length === 0) {\n      return;\n    }\n\n    let lastElement = null;\n    let i = elements.length;\n    while (lastElement === null && i > 0) {\n      lastElement = elements[--i];\n    }\n    if (lastElement === null) {\n      return;\n    }\n\n    for (let j = 0; j < this.state.leadingComments.length; j++) {\n      if (\n        this.state.leadingComments[j].end < this.state.commentPreviousNode.end\n      ) {\n        this.state.leadingComments.splice(j, 1);\n        j--;\n      }\n    }\n\n    const newTrailingComments = [];\n    for (let i = 0; i < this.state.leadingComments.length; i++) {\n      const leadingComment = this.state.leadingComments[i];\n      if (leadingComment.end < node.end) {\n        newTrailingComments.push(leadingComment);\n\n        // Perf: we don't need to splice if we are going to reset the array anyway\n        if (!takeAllComments) {\n          this.state.leadingComments.splice(i, 1);\n          i--;\n        }\n      } else {\n        if (node.trailingComments === undefined) {\n          node.trailingComments = [];\n        }\n        node.trailingComments.push(leadingComment);\n      }\n    }\n    if (takeAllComments) this.state.leadingComments = [];\n\n    if (newTrailingComments.length > 0) {\n      lastElement.trailingComments = newTrailingComments;\n    } else if (lastElement.trailingComments !== undefined) {\n      lastElement.trailingComments = [];\n    }\n  }\n\n  processComment(node: Node): void {\n    if (node.type === \"Program\" && node.body.length > 0) return;\n\n    const stack = this.state.commentStack;\n\n    let firstChild, lastChild, trailingComments, i, j;\n\n    if (this.state.trailingComments.length > 0) {\n      // If the first comment in trailingComments comes after the\n      // current node, then we're good - all comments in the array will\n      // come after the node and so it's safe to add them as official\n      // trailingComments.\n      if (this.state.trailingComments[0].start >= node.end) {\n        trailingComments = this.state.trailingComments;\n        this.state.trailingComments = [];\n      } else {\n        // Otherwise, if the first comment doesn't come after the\n        // current node, that means we have a mix of leading and trailing\n        // comments in the array and that leadingComments contains the\n        // same items as trailingComments. Reset trailingComments to\n        // zero items and we'll handle this by evaluating leadingComments\n        // later.\n        this.state.trailingComments.length = 0;\n      }\n    } else if (stack.length > 0) {\n      const lastInStack = last(stack);\n      if (\n        lastInStack.trailingComments &&\n        lastInStack.trailingComments[0].start >= node.end\n      ) {\n        trailingComments = lastInStack.trailingComments;\n        delete lastInStack.trailingComments;\n      }\n    }\n\n    // Eating the stack.\n    if (stack.length > 0 && last(stack).start >= node.start) {\n      firstChild = stack.pop();\n    }\n\n    while (stack.length > 0 && last(stack).start >= node.start) {\n      lastChild = stack.pop();\n    }\n\n    if (!lastChild && firstChild) lastChild = firstChild;\n\n    // Adjust comments that follow a trailing comma on the last element in a\n    // comma separated list of nodes to be the trailing comments on the last\n    // element\n    if (firstChild) {\n      switch (node.type) {\n        case \"ObjectExpression\":\n          this.adjustCommentsAfterTrailingComma(node, node.properties);\n          break;\n        case \"ObjectPattern\":\n          this.adjustCommentsAfterTrailingComma(node, node.properties, true);\n          break;\n        case \"CallExpression\":\n          this.adjustCommentsAfterTrailingComma(node, node.arguments);\n          break;\n        case \"ArrayExpression\":\n          this.adjustCommentsAfterTrailingComma(node, node.elements);\n          break;\n        case \"ArrayPattern\":\n          this.adjustCommentsAfterTrailingComma(node, node.elements, true);\n          break;\n      }\n    } else if (\n      this.state.commentPreviousNode &&\n      ((this.state.commentPreviousNode.type === \"ImportSpecifier\" &&\n        node.type !== \"ImportSpecifier\") ||\n        (this.state.commentPreviousNode.type === \"ExportSpecifier\" &&\n          node.type !== \"ExportSpecifier\"))\n    ) {\n      this.adjustCommentsAfterTrailingComma(node, [\n        this.state.commentPreviousNode,\n      ]);\n    }\n\n    if (lastChild) {\n      if (lastChild.leadingComments) {\n        if (\n          lastChild !== node &&\n          lastChild.leadingComments.length > 0 &&\n          last(lastChild.leadingComments).end <= node.start\n        ) {\n          node.leadingComments = lastChild.leadingComments;\n          delete lastChild.leadingComments;\n        } else {\n          // A leading comment for an anonymous class had been stolen by its first ClassMethod,\n          // so this takes back the leading comment.\n          // See also: https://github.com/eslint/espree/issues/158\n          for (i = lastChild.leadingComments.length - 2; i >= 0; --i) {\n            if (lastChild.leadingComments[i].end <= node.start) {\n              node.leadingComments = lastChild.leadingComments.splice(0, i + 1);\n              break;\n            }\n          }\n        }\n      }\n    } else if (this.state.leadingComments.length > 0) {\n      if (last(this.state.leadingComments).end <= node.start) {\n        if (this.state.commentPreviousNode) {\n          for (j = 0; j < this.state.leadingComments.length; j++) {\n            if (\n              this.state.leadingComments[j].end <\n              this.state.commentPreviousNode.end\n            ) {\n              this.state.leadingComments.splice(j, 1);\n              j--;\n            }\n          }\n        }\n        if (this.state.leadingComments.length > 0) {\n          node.leadingComments = this.state.leadingComments;\n          this.state.leadingComments = [];\n        }\n      } else {\n        // https://github.com/eslint/espree/issues/2\n        //\n        // In special cases, such as return (without a value) and\n        // debugger, all comments will end up as leadingComments and\n        // will otherwise be eliminated. This step runs when the\n        // commentStack is empty and there are comments left\n        // in leadingComments.\n        //\n        // This loop figures out the stopping point between the actual\n        // leading and trailing comments by finding the location of the\n        // first comment that comes after the given node.\n        for (i = 0; i < this.state.leadingComments.length; i++) {\n          if (this.state.leadingComments[i].end > node.start) {\n            break;\n          }\n        }\n\n        // Split the array based on the location of the first comment\n        // that comes after the node. Keep in mind that this could\n        // result in an empty array, and if so, the array must be\n        // deleted.\n        const leadingComments = this.state.leadingComments.slice(0, i);\n\n        if (leadingComments.length) {\n          node.leadingComments = leadingComments;\n        }\n\n        // Similarly, trailing comments are attached later. The variable\n        // must be reset to null if there are no trailing comments.\n        trailingComments = this.state.leadingComments.slice(i);\n        if (trailingComments.length === 0) {\n          trailingComments = null;\n        }\n      }\n    }\n\n    this.state.commentPreviousNode = node;\n\n    if (trailingComments) {\n      if (\n        trailingComments.length &&\n        trailingComments[0].start >= node.start &&\n        last(trailingComments).end <= node.end\n      ) {\n        node.innerComments = trailingComments;\n      } else {\n        // TrailingComments maybe contain innerComments\n        const firstTrailingCommentIndex = trailingComments.findIndex(\n          comment => comment.end >= node.end,\n        );\n\n        if (firstTrailingCommentIndex > 0) {\n          node.innerComments = trailingComments.slice(\n            0,\n            firstTrailingCommentIndex,\n          );\n          node.trailingComments = trailingComments.slice(\n            firstTrailingCommentIndex,\n          );\n        } else {\n          node.trailingComments = trailingComments;\n        }\n      }\n    }\n\n    stack.push(node);\n  }\n}\n","// @flow\n/* eslint sort-keys: \"error\" */\n\n// The Errors key follows https://cs.chromium.org/chromium/src/v8/src/common/message-template.h unless it does not exist\nexport const ErrorMessages = Object.freeze({\n  ArgumentsDisallowedInInitializer:\n    \"'arguments' is not allowed in class field initializer\",\n  AsyncFunctionInSingleStatementContext:\n    \"Async functions can only be declared at the top level or inside a block\",\n  AwaitBindingIdentifier:\n    \"Can not use 'await' as identifier inside an async function\",\n  AwaitExpressionFormalParameter:\n    \"await is not allowed in async function parameters\",\n  AwaitNotInAsyncFunction:\n    \"Can not use keyword 'await' outside an async function\",\n  BadGetterArity: \"getter must not have any formal parameters\",\n  BadSetterArity: \"setter must have exactly one formal parameter\",\n  BadSetterRestParameter:\n    \"setter function argument must not be a rest parameter\",\n  ConstructorClassField: \"Classes may not have a field named 'constructor'\",\n  ConstructorClassPrivateField:\n    \"Classes may not have a private field named '#constructor'\",\n  ConstructorIsAccessor: \"Class constructor may not be an accessor\",\n  ConstructorIsAsync: \"Constructor can't be an async function\",\n  ConstructorIsGenerator: \"Constructor can't be a generator\",\n  DeclarationMissingInitializer: \"%0 require an initialization value\",\n  DecoratorBeforeExport:\n    \"Decorators must be placed *before* the 'export' keyword. You can set the 'decoratorsBeforeExport' option to false to use the 'export @decorator class {}' syntax\",\n  DecoratorConstructor:\n    \"Decorators can't be used with a constructor. Did you mean '@dec class { ... }'?\",\n  DecoratorExportClass:\n    \"Using the export keyword between a decorator and a class is not allowed. Please use `export @dec class` instead.\",\n  DecoratorSemicolon: \"Decorators must not be followed by a semicolon\",\n  DeletePrivateField: \"Deleting a private field is not allowed\",\n  DestructureNamedImport:\n    \"ES2015 named imports do not destructure. Use another statement for destructuring after the import.\",\n  DuplicateConstructor: \"Duplicate constructor in the same class\",\n  DuplicateDefaultExport: \"Only one default export allowed per module.\",\n  DuplicateExport:\n    \"`%0` has already been exported. Exported identifiers must be unique.\",\n  DuplicateProto: \"Redefinition of __proto__ property\",\n  DuplicateRegExpFlags: \"Duplicate regular expression flag\",\n  ElementAfterRest: \"Rest element must be last element\",\n  EscapedCharNotAnIdentifier: \"Invalid Unicode escape\",\n  ExportDefaultFromAsIdentifier:\n    \"'from' is not allowed as an identifier after 'export default'\",\n  ForInOfLoopInitializer:\n    \"%0 loop variable declaration may not have an initializer\",\n  GeneratorInSingleStatementContext:\n    \"Generators can only be declared at the top level or inside a block\",\n  IllegalBreakContinue: \"Unsyntactic %0\",\n  IllegalLanguageModeDirective:\n    \"Illegal 'use strict' directive in function with non-simple parameter list\",\n  IllegalReturn: \"'return' outside of function\",\n  ImportCallArgumentTrailingComma:\n    \"Trailing comma is disallowed inside import(...) arguments\",\n  ImportCallArity: \"import() requires exactly %0\",\n  ImportCallNotNewExpression: \"Cannot use new with import(...)\",\n  ImportCallSpreadArgument: \"... is not allowed in import()\",\n  ImportMetaOutsideModule: `import.meta may appear only with 'sourceType: \"module\"'`,\n  ImportOutsideModule: `'import' and 'export' may appear only with 'sourceType: \"module\"'`,\n  InvalidBigIntLiteral: \"Invalid BigIntLiteral\",\n  InvalidCodePoint: \"Code point out of bounds\",\n  InvalidDigit: \"Expected number in radix %0\",\n  InvalidEscapeSequence: \"Bad character escape sequence\",\n  InvalidEscapeSequenceTemplate: \"Invalid escape sequence in template\",\n  InvalidEscapedReservedWord: \"Escape sequence in keyword %0\",\n  InvalidIdentifier: \"Invalid identifier %0\",\n  InvalidLhs: \"Invalid left-hand side in %0\",\n  InvalidLhsBinding: \"Binding invalid left-hand side in %0\",\n  InvalidNumber: \"Invalid number\",\n  InvalidOrUnexpectedToken: \"Unexpected character '%0'\",\n  InvalidParenthesizedAssignment: \"Invalid parenthesized assignment pattern\",\n  InvalidPrivateFieldResolution: \"Private name #%0 is not defined\",\n  InvalidPropertyBindingPattern: \"Binding member expression\",\n  InvalidRecordProperty:\n    \"Only properties and spread elements are allowed in record definitions\",\n  InvalidRestAssignmentPattern: \"Invalid rest operator's argument\",\n  LabelRedeclaration: \"Label '%0' is already declared\",\n  LetInLexicalBinding:\n    \"'let' is not allowed to be used as a name in 'let' or 'const' declarations.\",\n  MalformedRegExpFlags: \"Invalid regular expression flag\",\n  MissingClassName: \"A class name is required\",\n  MissingEqInAssignment:\n    \"Only '=' operator can be used for specifying default value.\",\n  MissingUnicodeEscape: \"Expecting Unicode escape sequence \\\\uXXXX\",\n  MixingCoalesceWithLogical:\n    \"Nullish coalescing operator(??) requires parens when mixing with logical operators\",\n  ModuleAttributeDifferentFromType:\n    \"The only accepted module attribute is `type`\",\n  ModuleAttributeInvalidValue:\n    \"Only string literals are allowed as module attribute values\",\n  ModuleAttributesWithDuplicateKeys:\n    'Duplicate key \"%0\" is not allowed in module attributes',\n  ModuleExportUndefined: \"Export '%0' is not defined\",\n  MultipleDefaultsInSwitch: \"Multiple default clauses\",\n  NewlineAfterThrow: \"Illegal newline after throw\",\n  NoCatchOrFinally: \"Missing catch or finally clause\",\n  NumberIdentifier: \"Identifier directly after number\",\n  NumericSeparatorInEscapeSequence:\n    \"Numeric separators are not allowed inside unicode escape sequences or hex escape sequences\",\n  ObsoleteAwaitStar:\n    \"await* has been removed from the async functions proposal. Use Promise.all() instead.\",\n  OptionalChainingNoNew:\n    \"constructors in/after an Optional Chain are not allowed\",\n  OptionalChainingNoTemplate:\n    \"Tagged Template Literals are not allowed in optionalChain\",\n  ParamDupe: \"Argument name clash\",\n  PatternHasAccessor: \"Object pattern can't contain getter or setter\",\n  PatternHasMethod: \"Object pattern can't contain methods\",\n  PipelineBodyNoArrow:\n    'Unexpected arrow \"=>\" after pipeline body; arrow function in pipeline body must be parenthesized',\n  PipelineBodySequenceExpression:\n    \"Pipeline body may not be a comma-separated sequence expression\",\n  PipelineHeadSequenceExpression:\n    \"Pipeline head should not be a comma-separated sequence expression\",\n  PipelineTopicUnused:\n    \"Pipeline is in topic style but does not use topic reference\",\n  PrimaryTopicNotAllowed:\n    \"Topic reference was used in a lexical context without topic binding\",\n  PrimaryTopicRequiresSmartPipeline:\n    \"Primary Topic Reference found but pipelineOperator not passed 'smart' for 'proposal' option.\",\n  PrivateInExpectedIn:\n    \"Private names are only allowed in property accesses (`obj.#%0`) or in `in` expressions (`#%0 in obj`)\",\n  PrivateNameRedeclaration: \"Duplicate private name #%0\",\n  RecordExpressionBarIncorrectEndSyntaxType:\n    \"Record expressions ending with '|}' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'\",\n  RecordExpressionBarIncorrectStartSyntaxType:\n    \"Record expressions starting with '{|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'\",\n  RecordExpressionHashIncorrectStartSyntaxType:\n    \"Record expressions starting with '#{' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'\",\n  RecordNoProto: \"'__proto__' is not allowed in Record expressions\",\n  RestTrailingComma: \"Unexpected trailing comma after rest element\",\n  SloppyFunction:\n    \"In non-strict mode code, functions can only be declared at top level, inside a block, or as the body of an if statement\",\n  StaticPrototype: \"Classes may not have static property named prototype\",\n  StrictDelete: \"Deleting local variable in strict mode\",\n  StrictEvalArguments: \"Assigning to '%0' in strict mode\",\n  StrictEvalArgumentsBinding: \"Binding '%0' in strict mode\",\n  StrictFunction:\n    \"In strict mode code, functions can only be declared at top level or inside a block\",\n  StrictOctalLiteral: \"Legacy octal literals are not allowed in strict mode\",\n  StrictWith: \"'with' in strict mode\",\n  SuperNotAllowed:\n    \"super() is only valid inside a class constructor of a subclass. Maybe a typo in the method name ('constructor') or not extending another class?\",\n  SuperPrivateField: \"Private fields can't be accessed on super\",\n  TrailingDecorator: \"Decorators must be attached to a class element\",\n  TupleExpressionBarIncorrectEndSyntaxType:\n    \"Tuple expressions ending with '|]' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'\",\n  TupleExpressionBarIncorrectStartSyntaxType:\n    \"Tuple expressions starting with '[|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'\",\n  TupleExpressionHashIncorrectStartSyntaxType:\n    \"Tuple expressions starting with '#[' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'\",\n  UnexpectedArgumentPlaceholder: \"Unexpected argument placeholder\",\n  UnexpectedAwaitAfterPipelineBody:\n    'Unexpected \"await\" after pipeline body; await must have parentheses in minimal proposal',\n  UnexpectedDigitAfterHash: \"Unexpected digit after hash token\",\n  UnexpectedImportExport:\n    \"'import' and 'export' may only appear at the top level\",\n  UnexpectedKeyword: \"Unexpected keyword '%0'\",\n  UnexpectedLeadingDecorator:\n    \"Leading decorators must be attached to a class declaration\",\n  UnexpectedLexicalDeclaration:\n    \"Lexical declaration cannot appear in a single-statement context\",\n  UnexpectedNewTarget: \"new.target can only be used in functions\",\n  UnexpectedNumericSeparator:\n    \"A numeric separator is only allowed between two digits\",\n  UnexpectedPrivateField:\n    \"Private names can only be used as the name of a class element (i.e. class C { #p = 42; #m() {} } )\\n or a property of member expression (i.e. this.#p).\",\n  UnexpectedReservedWord: \"Unexpected reserved word '%0'\",\n  UnexpectedSuper: \"super is only allowed in object methods and classes\",\n  UnexpectedToken: \"Unexpected token '%0'\",\n  UnexpectedTokenUnaryExponentiation:\n    \"Illegal expression. Wrap left hand side or entire exponentiation in parentheses.\",\n  UnsupportedBind: \"Binding should be performed on object property.\",\n  UnsupportedDecoratorExport:\n    \"A decorated export must export a class declaration\",\n  UnsupportedDefaultExport:\n    \"Only expressions, functions or classes are allowed as the `default` export.\",\n  UnsupportedImport: \"import can only be used in import() or import.meta\",\n  UnsupportedMetaProperty: \"The only valid meta property for %0 is %0.%1\",\n  UnsupportedParameterDecorator:\n    \"Decorators cannot be used to decorate parameters\",\n  UnsupportedPropertyDecorator:\n    \"Decorators cannot be used to decorate object literal properties\",\n  UnsupportedSuper:\n    \"super can only be used with function calls (i.e. super()) or in property accesses (i.e. super.prop or super[prop])\",\n  UnterminatedComment: \"Unterminated comment\",\n  UnterminatedRegExp: \"Unterminated regular expression\",\n  UnterminatedString: \"Unterminated string constant\",\n  UnterminatedTemplate: \"Unterminated template\",\n  VarRedeclaration: \"Identifier '%0' has already been declared\",\n  YieldBindingIdentifier:\n    \"Can not use 'yield' as identifier inside a generator\",\n  YieldInParameter: \"yield is not allowed in generator parameters\",\n  ZeroDigitNumericSeparator:\n    \"Numeric separator can not be used after leading 0\",\n});\n","// @flow\n/* eslint sort-keys: \"error\" */\nimport { getLineInfo, type Position } from \"../util/location\";\nimport CommentsParser from \"./comments\";\n\n// This function is used to raise exceptions on parse errors. It\n// takes an offset integer (into the current `input`) to indicate\n// the location of the error, attaches the position to the end\n// of the error message, and then raises a `SyntaxError` with that\n// message.\n\ntype ErrorContext = {\n  pos: number,\n  loc: Position,\n  missingPlugin?: Array<string>,\n  code?: string,\n};\n\nexport { ErrorMessages as Errors } from \"./error-message.js\";\n\nexport default class ParserError extends CommentsParser {\n  // Forward-declaration: defined in tokenizer/index.js\n  /*::\n  +isLookahead: boolean;\n  */\n\n  getLocationForPosition(pos: number): Position {\n    let loc;\n    if (pos === this.state.start) loc = this.state.startLoc;\n    else if (pos === this.state.lastTokStart) loc = this.state.lastTokStartLoc;\n    else if (pos === this.state.end) loc = this.state.endLoc;\n    else if (pos === this.state.lastTokEnd) loc = this.state.lastTokEndLoc;\n    else loc = getLineInfo(this.input, pos);\n\n    return loc;\n  }\n\n  raise(pos: number, errorTemplate: string, ...params: any): Error | empty {\n    return this.raiseWithData(pos, undefined, errorTemplate, ...params);\n  }\n\n  raiseWithData(\n    pos: number,\n    data?: {\n      missingPlugin?: Array<string>,\n      code?: string,\n    },\n    errorTemplate: string,\n    ...params: any\n  ): Error | empty {\n    const loc = this.getLocationForPosition(pos);\n    const message =\n      errorTemplate.replace(/%(\\d+)/g, (_, i: number) => params[i]) +\n      ` (${loc.line}:${loc.column})`;\n    return this._raise(Object.assign(({ loc, pos }: Object), data), message);\n  }\n\n  _raise(errorContext: ErrorContext, message: string): Error | empty {\n    // $FlowIgnore\n    const err: SyntaxError & ErrorContext = new SyntaxError(message);\n    Object.assign(err, errorContext);\n    if (this.options.errorRecovery) {\n      if (!this.isLookahead) this.state.errors.push(err);\n      return err;\n    } else {\n      throw err;\n    }\n  }\n}\n","// @flow\n\nimport { types as tt, TokenType } from \"../tokenizer/types\";\nimport type Parser from \"../parser\";\nimport type { ExpressionErrors } from \"../parser/util\";\nimport * as N from \"../types\";\nimport type { Position } from \"../util/location\";\nimport { type BindingTypes, BIND_NONE } from \"../util/scopeflags\";\nimport { Errors } from \"../parser/error\";\n\nfunction isSimpleProperty(node: N.Node): boolean {\n  return (\n    node != null &&\n    node.type === \"Property\" &&\n    node.kind === \"init\" &&\n    node.method === false\n  );\n}\n\nexport default (superClass: Class<Parser>): Class<Parser> =>\n  class extends superClass {\n    estreeParseRegExpLiteral({ pattern, flags }: N.RegExpLiteral): N.Node {\n      let regex = null;\n      try {\n        regex = new RegExp(pattern, flags);\n      } catch (e) {\n        // In environments that don't support these flags value will\n        // be null as the regex can't be represented natively.\n      }\n      const node = this.estreeParseLiteral(regex);\n      node.regex = { pattern, flags };\n\n      return node;\n    }\n\n    estreeParseBigIntLiteral(value: any): N.Node {\n      // https://github.com/estree/estree/blob/master/es2020.md#bigintliteral\n      // $FlowIgnore\n      const bigInt = typeof BigInt !== \"undefined\" ? BigInt(value) : null;\n      const node = this.estreeParseLiteral(bigInt);\n      node.bigint = String(node.value || value);\n\n      return node;\n    }\n\n    estreeParseLiteral(value: any): N.Node {\n      return this.parseLiteral(value, \"Literal\");\n    }\n\n    directiveToStmt(directive: N.Directive): N.ExpressionStatement {\n      const directiveLiteral = directive.value;\n\n      const stmt = this.startNodeAt(directive.start, directive.loc.start);\n      const expression = this.startNodeAt(\n        directiveLiteral.start,\n        directiveLiteral.loc.start,\n      );\n\n      expression.value = directiveLiteral.value;\n      expression.raw = directiveLiteral.extra.raw;\n\n      stmt.expression = this.finishNodeAt(\n        expression,\n        \"Literal\",\n        directiveLiteral.end,\n        directiveLiteral.loc.end,\n      );\n      stmt.directive = directiveLiteral.extra.raw.slice(1, -1);\n\n      return this.finishNodeAt(\n        stmt,\n        \"ExpressionStatement\",\n        directive.end,\n        directive.loc.end,\n      );\n    }\n\n    // ==================================\n    // Overrides\n    // ==================================\n\n    initFunction(\n      node: N.BodilessFunctionOrMethodBase,\n      isAsync: ?boolean,\n    ): void {\n      super.initFunction(node, isAsync);\n      node.expression = false;\n    }\n\n    checkDeclaration(node: N.Pattern | N.ObjectProperty): void {\n      if (isSimpleProperty(node)) {\n        this.checkDeclaration(((node: any): N.EstreeProperty).value);\n      } else {\n        super.checkDeclaration(node);\n      }\n    }\n\n    checkGetterSetterParams(method: N.ObjectMethod | N.ClassMethod): void {\n      const prop = ((method: any): N.EstreeProperty | N.EstreeMethodDefinition);\n      const paramCount = prop.kind === \"get\" ? 0 : 1;\n      const start = prop.start;\n      if (prop.value.params.length !== paramCount) {\n        if (method.kind === \"get\") {\n          this.raise(start, Errors.BadGetterArity);\n        } else {\n          this.raise(start, Errors.BadSetterArity);\n        }\n      } else if (\n        prop.kind === \"set\" &&\n        prop.value.params[0].type === \"RestElement\"\n      ) {\n        this.raise(start, Errors.BadSetterRestParameter);\n      }\n    }\n\n    checkLVal(\n      expr: N.Expression,\n      bindingType: BindingTypes = BIND_NONE,\n      checkClashes: ?{ [key: string]: boolean },\n      contextDescription: string,\n      disallowLetBinding?: boolean,\n    ): void {\n      switch (expr.type) {\n        case \"ObjectPattern\":\n          expr.properties.forEach(prop => {\n            this.checkLVal(\n              prop.type === \"Property\" ? prop.value : prop,\n              bindingType,\n              checkClashes,\n              \"object destructuring pattern\",\n              disallowLetBinding,\n            );\n          });\n          break;\n        default:\n          super.checkLVal(\n            expr,\n            bindingType,\n            checkClashes,\n            contextDescription,\n            disallowLetBinding,\n          );\n      }\n    }\n\n    checkProto(\n      prop: N.ObjectMember | N.SpreadElement,\n      isRecord: boolean,\n      protoRef: { used: boolean },\n      refExpressionErrors: ?ExpressionErrors,\n    ): void {\n      // $FlowIgnore: check prop.method and fallback to super method\n      if (prop.method) {\n        return;\n      }\n      super.checkProto(prop, isRecord, protoRef, refExpressionErrors);\n    }\n\n    isValidDirective(stmt: N.Statement): boolean {\n      return (\n        stmt.type === \"ExpressionStatement\" &&\n        stmt.expression.type === \"Literal\" &&\n        typeof stmt.expression.value === \"string\" &&\n        !stmt.expression.extra?.parenthesized\n      );\n    }\n\n    stmtToDirective(stmt: N.Statement): N.Directive {\n      const directive = super.stmtToDirective(stmt);\n      const value = stmt.expression.value;\n\n      // Reset value to the actual value as in estree mode we want\n      // the stmt to have the real value and not the raw value\n      directive.value.value = value;\n\n      return directive;\n    }\n\n    parseBlockBody(\n      node: N.BlockStatementLike,\n      allowDirectives: ?boolean,\n      topLevel: boolean,\n      end: TokenType,\n    ): void {\n      super.parseBlockBody(node, allowDirectives, topLevel, end);\n\n      const directiveStatements = node.directives.map(d =>\n        this.directiveToStmt(d),\n      );\n      node.body = directiveStatements.concat(node.body);\n      // $FlowIgnore - directives isn't optional in the type definition\n      delete node.directives;\n    }\n\n    pushClassMethod(\n      classBody: N.ClassBody,\n      method: N.ClassMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowsDirectSuper: boolean,\n    ): void {\n      this.parseMethod(\n        method,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowsDirectSuper,\n        \"ClassMethod\",\n        true,\n      );\n      if (method.typeParameters) {\n        // $FlowIgnore\n        method.value.typeParameters = method.typeParameters;\n        delete method.typeParameters;\n      }\n      classBody.body.push(method);\n    }\n\n    parseExprAtom(refExpressionErrors?: ?ExpressionErrors): N.Expression {\n      switch (this.state.type) {\n        case tt.num:\n        case tt.string:\n          return this.estreeParseLiteral(this.state.value);\n\n        case tt.regexp:\n          return this.estreeParseRegExpLiteral(this.state.value);\n\n        case tt.bigint:\n          return this.estreeParseBigIntLiteral(this.state.value);\n\n        case tt._null:\n          return this.estreeParseLiteral(null);\n\n        case tt._true:\n          return this.estreeParseLiteral(true);\n\n        case tt._false:\n          return this.estreeParseLiteral(false);\n\n        default:\n          return super.parseExprAtom(refExpressionErrors);\n      }\n    }\n\n    parseLiteral<T: N.Literal>(\n      value: any,\n      type: /*T[\"kind\"]*/ string,\n      startPos?: number,\n      startLoc?: Position,\n    ): T {\n      const node = super.parseLiteral(value, type, startPos, startLoc);\n      node.raw = node.extra.raw;\n      delete node.extra;\n\n      return node;\n    }\n\n    parseFunctionBody(\n      node: N.Function,\n      allowExpression: ?boolean,\n      isMethod?: boolean = false,\n    ): void {\n      super.parseFunctionBody(node, allowExpression, isMethod);\n      node.expression = node.body.type !== \"BlockStatement\";\n    }\n\n    parseMethod<T: N.MethodLike>(\n      node: T,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowDirectSuper: boolean,\n      type: string,\n      inClassScope: boolean = false,\n    ): T {\n      let funcNode = this.startNode();\n      funcNode.kind = node.kind; // provide kind, so super method correctly sets state\n      funcNode = super.parseMethod(\n        funcNode,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowDirectSuper,\n        type,\n        inClassScope,\n      );\n      funcNode.type = \"FunctionExpression\";\n      delete funcNode.kind;\n      // $FlowIgnore\n      node.value = funcNode;\n\n      type = type === \"ClassMethod\" ? \"MethodDefinition\" : type;\n      return this.finishNode(node, type);\n    }\n\n    parseObjectMethod(\n      prop: N.ObjectMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isPattern: boolean,\n      containsEsc: boolean,\n    ): ?N.ObjectMethod {\n      const node: N.EstreeProperty = (super.parseObjectMethod(\n        prop,\n        isGenerator,\n        isAsync,\n        isPattern,\n        containsEsc,\n      ): any);\n\n      if (node) {\n        node.type = \"Property\";\n        if (((node: any): N.ClassMethod).kind === \"method\") node.kind = \"init\";\n        node.shorthand = false;\n      }\n\n      return (node: any);\n    }\n\n    parseObjectProperty(\n      prop: N.ObjectProperty,\n      startPos: ?number,\n      startLoc: ?Position,\n      isPattern: boolean,\n      refExpressionErrors: ?ExpressionErrors,\n    ): ?N.ObjectProperty {\n      const node: N.EstreeProperty = (super.parseObjectProperty(\n        prop,\n        startPos,\n        startLoc,\n        isPattern,\n        refExpressionErrors,\n      ): any);\n\n      if (node) {\n        node.kind = \"init\";\n        node.type = \"Property\";\n      }\n\n      return (node: any);\n    }\n\n    toAssignable(node: N.Node): N.Node {\n      if (isSimpleProperty(node)) {\n        this.toAssignable(node.value);\n\n        return node;\n      }\n\n      return super.toAssignable(node);\n    }\n\n    toAssignableObjectExpressionProp(prop: N.Node, isLast: boolean) {\n      if (prop.kind === \"get\" || prop.kind === \"set\") {\n        throw this.raise(prop.key.start, Errors.PatternHasAccessor);\n      } else if (prop.method) {\n        throw this.raise(prop.key.start, Errors.PatternHasMethod);\n      } else {\n        super.toAssignableObjectExpressionProp(prop, isLast);\n      }\n    }\n\n    finishCallExpression<T: N.CallExpression | N.OptionalCallExpression>(\n      node: T,\n      optional: boolean,\n    ): N.Expression {\n      super.finishCallExpression(node, optional);\n\n      if (node.callee.type === \"Import\") {\n        ((node: N.Node): N.EstreeImportExpression).type = \"ImportExpression\";\n        ((node: N.Node): N.EstreeImportExpression).source = node.arguments[0];\n        // $FlowIgnore - arguments isn't optional in the type definition\n        delete node.arguments;\n        // $FlowIgnore - callee isn't optional in the type definition\n        delete node.callee;\n      } else if (node.type === \"CallExpression\") {\n        (node: N.Node).optional = false;\n      }\n\n      return node;\n    }\n\n    toReferencedListDeep(\n      exprList: $ReadOnlyArray<?N.Expression>,\n      isParenthesizedExpr?: boolean,\n    ): void {\n      // ImportExpressions do not have an arguments array.\n      if (!exprList) {\n        return;\n      }\n\n      super.toReferencedListDeep(exprList, isParenthesizedExpr);\n    }\n\n    parseExport(node: N.Node) {\n      super.parseExport(node);\n\n      switch (node.type) {\n        case \"ExportAllDeclaration\":\n          node.exported = null;\n          break;\n\n        case \"ExportNamedDeclaration\":\n          if (\n            node.specifiers.length === 1 &&\n            node.specifiers[0].type === \"ExportNamespaceSpecifier\"\n          ) {\n            node.type = \"ExportAllDeclaration\";\n            node.exported = node.specifiers[0].exported;\n            delete node.specifiers;\n          }\n\n          break;\n      }\n\n      return node;\n    }\n\n    parseSubscript(...args) {\n      const node = super.parseSubscript(...args);\n\n      if (node.type === \"MemberExpression\") {\n        node.optional = false;\n      }\n\n      return node;\n    }\n  };\n","// @flow\n\n// The algorithm used to determine whether a regexp can appear at a\n// given point in the program is loosely based on sweet.js' approach.\n// See https://github.com/mozilla/sweet.js/wiki/design\n\nimport { types as tt } from \"./types\";\nimport { lineBreak } from \"../util/whitespace\";\n\nexport class TokContext {\n  constructor(\n    token: string,\n    isExpr?: boolean,\n    preserveSpace?: boolean,\n    override?: ?Function, // Takes a Tokenizer as a this-parameter, and returns void.\n  ) {\n    this.token = token;\n    this.isExpr = !!isExpr;\n    this.preserveSpace = !!preserveSpace;\n    this.override = override;\n  }\n\n  token: string;\n  isExpr: boolean;\n  preserveSpace: boolean;\n  override: ?Function;\n}\n\nexport const types: {\n  [key: string]: TokContext,\n} = {\n  braceStatement: new TokContext(\"{\", false),\n  braceExpression: new TokContext(\"{\", true),\n  templateQuasi: new TokContext(\"${\", false),\n  parenStatement: new TokContext(\"(\", false),\n  parenExpression: new TokContext(\"(\", true),\n  template: new TokContext(\"`\", true, true, p => p.readTmplToken()),\n  functionExpression: new TokContext(\"function\", true),\n  functionStatement: new TokContext(\"function\", false),\n};\n\n// Token-specific context update code\n\ntt.parenR.updateContext = tt.braceR.updateContext = function () {\n  if (this.state.context.length === 1) {\n    this.state.exprAllowed = true;\n    return;\n  }\n\n  let out = this.state.context.pop();\n  if (out === types.braceStatement && this.curContext().token === \"function\") {\n    out = this.state.context.pop();\n  }\n\n  this.state.exprAllowed = !out.isExpr;\n};\n\ntt.name.updateContext = function (prevType) {\n  let allowed = false;\n  if (prevType !== tt.dot) {\n    if (\n      (this.state.value === \"of\" &&\n        !this.state.exprAllowed &&\n        prevType !== tt._function &&\n        prevType !== tt._class) ||\n      (this.state.value === \"yield\" && this.prodParam.hasYield)\n    ) {\n      allowed = true;\n    }\n  }\n  this.state.exprAllowed = allowed;\n\n  if (this.state.isIterator) {\n    this.state.isIterator = false;\n  }\n};\n\ntt.braceL.updateContext = function (prevType) {\n  this.state.context.push(\n    this.braceIsBlock(prevType) ? types.braceStatement : types.braceExpression,\n  );\n  this.state.exprAllowed = true;\n};\n\ntt.dollarBraceL.updateContext = function () {\n  this.state.context.push(types.templateQuasi);\n  this.state.exprAllowed = true;\n};\n\ntt.parenL.updateContext = function (prevType) {\n  const statementParens =\n    prevType === tt._if ||\n    prevType === tt._for ||\n    prevType === tt._with ||\n    prevType === tt._while;\n  this.state.context.push(\n    statementParens ? types.parenStatement : types.parenExpression,\n  );\n  this.state.exprAllowed = true;\n};\n\ntt.incDec.updateContext = function () {\n  // tokExprAllowed stays unchanged\n};\n\ntt._function.updateContext = tt._class.updateContext = function (prevType) {\n  if (prevType === tt.dot || prevType === tt.questionDot) {\n    // when function/class follows dot/questionDot, it is part of\n    // (optional)MemberExpression, then we don't need to push new token context\n  } else if (\n    prevType.beforeExpr &&\n    prevType !== tt.semi &&\n    prevType !== tt._else &&\n    !(\n      prevType === tt._return &&\n      lineBreak.test(this.input.slice(this.state.lastTokEnd, this.state.start))\n    ) &&\n    !(\n      (prevType === tt.colon || prevType === tt.braceL) &&\n      this.curContext() === types.b_stat\n    )\n  ) {\n    this.state.context.push(types.functionExpression);\n  } else {\n    this.state.context.push(types.functionStatement);\n  }\n\n  this.state.exprAllowed = false;\n};\n\ntt.backQuote.updateContext = function () {\n  if (this.curContext() === types.template) {\n    this.state.context.pop();\n  } else {\n    this.state.context.push(types.template);\n  }\n  this.state.exprAllowed = false;\n};\n\ntt.star.updateContext = function () {\n  this.state.exprAllowed = false;\n};\n","// @flow\n\nimport * as charCodes from \"charcodes\";\n\n// ## Character categories\n\n// Big ugly regular expressions that match characters in the\n// whitespace, identifier, and identifier-start categories. These\n// are only applied when a character is found to actually have a\n// code point between 0x80 and 0xffff.\n// Generated by `scripts/generate-identifier-regex.js`.\n\n/* prettier-ignore */\nlet nonASCIIidentifierStartChars = \"\\xaa\\xb5\\xba\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02c1\\u02c6-\\u02d1\\u02e0-\\u02e4\\u02ec\\u02ee\\u0370-\\u0374\\u0376\\u0377\\u037a-\\u037d\\u037f\\u0386\\u0388-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5\\u03f7-\\u0481\\u048a-\\u052f\\u0531-\\u0556\\u0559\\u0560-\\u0588\\u05d0-\\u05ea\\u05ef-\\u05f2\\u0620-\\u064a\\u066e\\u066f\\u0671-\\u06d3\\u06d5\\u06e5\\u06e6\\u06ee\\u06ef\\u06fa-\\u06fc\\u06ff\\u0710\\u0712-\\u072f\\u074d-\\u07a5\\u07b1\\u07ca-\\u07ea\\u07f4\\u07f5\\u07fa\\u0800-\\u0815\\u081a\\u0824\\u0828\\u0840-\\u0858\\u0860-\\u086a\\u08a0-\\u08b4\\u08b6-\\u08c7\\u0904-\\u0939\\u093d\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098c\\u098f\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bd\\u09ce\\u09dc\\u09dd\\u09df-\\u09e1\\u09f0\\u09f1\\u09fc\\u0a05-\\u0a0a\\u0a0f\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32\\u0a33\\u0a35\\u0a36\\u0a38\\u0a39\\u0a59-\\u0a5c\\u0a5e\\u0a72-\\u0a74\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2\\u0ab3\\u0ab5-\\u0ab9\\u0abd\\u0ad0\\u0ae0\\u0ae1\\u0af9\\u0b05-\\u0b0c\\u0b0f\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32\\u0b33\\u0b35-\\u0b39\\u0b3d\\u0b5c\\u0b5d\\u0b5f-\\u0b61\\u0b71\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99\\u0b9a\\u0b9c\\u0b9e\\u0b9f\\u0ba3\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bd0\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c39\\u0c3d\\u0c58-\\u0c5a\\u0c60\\u0c61\\u0c80\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbd\\u0cde\\u0ce0\\u0ce1\\u0cf1\\u0cf2\\u0d04-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d3a\\u0d3d\\u0d4e\\u0d54-\\u0d56\\u0d5f-\\u0d61\\u0d7a-\\u0d7f\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0e01-\\u0e30\\u0e32\\u0e33\\u0e40-\\u0e46\\u0e81\\u0e82\\u0e84\\u0e86-\\u0e8a\\u0e8c-\\u0ea3\\u0ea5\\u0ea7-\\u0eb0\\u0eb2\\u0eb3\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0edc-\\u0edf\\u0f00\\u0f40-\\u0f47\\u0f49-\\u0f6c\\u0f88-\\u0f8c\\u1000-\\u102a\\u103f\\u1050-\\u1055\\u105a-\\u105d\\u1061\\u1065\\u1066\\u106e-\\u1070\\u1075-\\u1081\\u108e\\u10a0-\\u10c5\\u10c7\\u10cd\\u10d0-\\u10fa\\u10fc-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u1380-\\u138f\\u13a0-\\u13f5\\u13f8-\\u13fd\\u1401-\\u166c\\u166f-\\u167f\\u1681-\\u169a\\u16a0-\\u16ea\\u16ee-\\u16f8\\u1700-\\u170c\\u170e-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176c\\u176e-\\u1770\\u1780-\\u17b3\\u17d7\\u17dc\\u1820-\\u1878\\u1880-\\u18a8\\u18aa\\u18b0-\\u18f5\\u1900-\\u191e\\u1950-\\u196d\\u1970-\\u1974\\u1980-\\u19ab\\u19b0-\\u19c9\\u1a00-\\u1a16\\u1a20-\\u1a54\\u1aa7\\u1b05-\\u1b33\\u1b45-\\u1b4b\\u1b83-\\u1ba0\\u1bae\\u1baf\\u1bba-\\u1be5\\u1c00-\\u1c23\\u1c4d-\\u1c4f\\u1c5a-\\u1c7d\\u1c80-\\u1c88\\u1c90-\\u1cba\\u1cbd-\\u1cbf\\u1ce9-\\u1cec\\u1cee-\\u1cf3\\u1cf5\\u1cf6\\u1cfa\\u1d00-\\u1dbf\\u1e00-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u2071\\u207f\\u2090-\\u209c\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2118-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u2160-\\u2188\\u2c00-\\u2c2e\\u2c30-\\u2c5e\\u2c60-\\u2ce4\\u2ceb-\\u2cee\\u2cf2\\u2cf3\\u2d00-\\u2d25\\u2d27\\u2d2d\\u2d30-\\u2d67\\u2d6f\\u2d80-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303c\\u3041-\\u3096\\u309b-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312f\\u3131-\\u318e\\u31a0-\\u31bf\\u31f0-\\u31ff\\u3400-\\u4dbf\\u4e00-\\u9ffc\\ua000-\\ua48c\\ua4d0-\\ua4fd\\ua500-\\ua60c\\ua610-\\ua61f\\ua62a\\ua62b\\ua640-\\ua66e\\ua67f-\\ua69d\\ua6a0-\\ua6ef\\ua717-\\ua71f\\ua722-\\ua788\\ua78b-\\ua7bf\\ua7c2-\\ua7ca\\ua7f5-\\ua801\\ua803-\\ua805\\ua807-\\ua80a\\ua80c-\\ua822\\ua840-\\ua873\\ua882-\\ua8b3\\ua8f2-\\ua8f7\\ua8fb\\ua8fd\\ua8fe\\ua90a-\\ua925\\ua930-\\ua946\\ua960-\\ua97c\\ua984-\\ua9b2\\ua9cf\\ua9e0-\\ua9e4\\ua9e6-\\ua9ef\\ua9fa-\\ua9fe\\uaa00-\\uaa28\\uaa40-\\uaa42\\uaa44-\\uaa4b\\uaa60-\\uaa76\\uaa7a\\uaa7e-\\uaaaf\\uaab1\\uaab5\\uaab6\\uaab9-\\uaabd\\uaac0\\uaac2\\uaadb-\\uaadd\\uaae0-\\uaaea\\uaaf2-\\uaaf4\\uab01-\\uab06\\uab09-\\uab0e\\uab11-\\uab16\\uab20-\\uab26\\uab28-\\uab2e\\uab30-\\uab5a\\uab5c-\\uab69\\uab70-\\uabe2\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\ufb1d\\ufb1f-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40\\ufb41\\ufb43\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb\\ufe70-\\ufe74\\ufe76-\\ufefc\\uff21-\\uff3a\\uff41-\\uff5a\\uff66-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc\";\n/* prettier-ignore */\nlet nonASCIIidentifierChars = \"\\u200c\\u200d\\xb7\\u0300-\\u036f\\u0387\\u0483-\\u0487\\u0591-\\u05bd\\u05bf\\u05c1\\u05c2\\u05c4\\u05c5\\u05c7\\u0610-\\u061a\\u064b-\\u0669\\u0670\\u06d6-\\u06dc\\u06df-\\u06e4\\u06e7\\u06e8\\u06ea-\\u06ed\\u06f0-\\u06f9\\u0711\\u0730-\\u074a\\u07a6-\\u07b0\\u07c0-\\u07c9\\u07eb-\\u07f3\\u07fd\\u0816-\\u0819\\u081b-\\u0823\\u0825-\\u0827\\u0829-\\u082d\\u0859-\\u085b\\u08d3-\\u08e1\\u08e3-\\u0903\\u093a-\\u093c\\u093e-\\u094f\\u0951-\\u0957\\u0962\\u0963\\u0966-\\u096f\\u0981-\\u0983\\u09bc\\u09be-\\u09c4\\u09c7\\u09c8\\u09cb-\\u09cd\\u09d7\\u09e2\\u09e3\\u09e6-\\u09ef\\u09fe\\u0a01-\\u0a03\\u0a3c\\u0a3e-\\u0a42\\u0a47\\u0a48\\u0a4b-\\u0a4d\\u0a51\\u0a66-\\u0a71\\u0a75\\u0a81-\\u0a83\\u0abc\\u0abe-\\u0ac5\\u0ac7-\\u0ac9\\u0acb-\\u0acd\\u0ae2\\u0ae3\\u0ae6-\\u0aef\\u0afa-\\u0aff\\u0b01-\\u0b03\\u0b3c\\u0b3e-\\u0b44\\u0b47\\u0b48\\u0b4b-\\u0b4d\\u0b55-\\u0b57\\u0b62\\u0b63\\u0b66-\\u0b6f\\u0b82\\u0bbe-\\u0bc2\\u0bc6-\\u0bc8\\u0bca-\\u0bcd\\u0bd7\\u0be6-\\u0bef\\u0c00-\\u0c04\\u0c3e-\\u0c44\\u0c46-\\u0c48\\u0c4a-\\u0c4d\\u0c55\\u0c56\\u0c62\\u0c63\\u0c66-\\u0c6f\\u0c81-\\u0c83\\u0cbc\\u0cbe-\\u0cc4\\u0cc6-\\u0cc8\\u0cca-\\u0ccd\\u0cd5\\u0cd6\\u0ce2\\u0ce3\\u0ce6-\\u0cef\\u0d00-\\u0d03\\u0d3b\\u0d3c\\u0d3e-\\u0d44\\u0d46-\\u0d48\\u0d4a-\\u0d4d\\u0d57\\u0d62\\u0d63\\u0d66-\\u0d6f\\u0d81-\\u0d83\\u0dca\\u0dcf-\\u0dd4\\u0dd6\\u0dd8-\\u0ddf\\u0de6-\\u0def\\u0df2\\u0df3\\u0e31\\u0e34-\\u0e3a\\u0e47-\\u0e4e\\u0e50-\\u0e59\\u0eb1\\u0eb4-\\u0ebc\\u0ec8-\\u0ecd\\u0ed0-\\u0ed9\\u0f18\\u0f19\\u0f20-\\u0f29\\u0f35\\u0f37\\u0f39\\u0f3e\\u0f3f\\u0f71-\\u0f84\\u0f86\\u0f87\\u0f8d-\\u0f97\\u0f99-\\u0fbc\\u0fc6\\u102b-\\u103e\\u1040-\\u1049\\u1056-\\u1059\\u105e-\\u1060\\u1062-\\u1064\\u1067-\\u106d\\u1071-\\u1074\\u1082-\\u108d\\u108f-\\u109d\\u135d-\\u135f\\u1369-\\u1371\\u1712-\\u1714\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17b4-\\u17d3\\u17dd\\u17e0-\\u17e9\\u180b-\\u180d\\u1810-\\u1819\\u18a9\\u1920-\\u192b\\u1930-\\u193b\\u1946-\\u194f\\u19d0-\\u19da\\u1a17-\\u1a1b\\u1a55-\\u1a5e\\u1a60-\\u1a7c\\u1a7f-\\u1a89\\u1a90-\\u1a99\\u1ab0-\\u1abd\\u1abf\\u1ac0\\u1b00-\\u1b04\\u1b34-\\u1b44\\u1b50-\\u1b59\\u1b6b-\\u1b73\\u1b80-\\u1b82\\u1ba1-\\u1bad\\u1bb0-\\u1bb9\\u1be6-\\u1bf3\\u1c24-\\u1c37\\u1c40-\\u1c49\\u1c50-\\u1c59\\u1cd0-\\u1cd2\\u1cd4-\\u1ce8\\u1ced\\u1cf4\\u1cf7-\\u1cf9\\u1dc0-\\u1df9\\u1dfb-\\u1dff\\u203f\\u2040\\u2054\\u20d0-\\u20dc\\u20e1\\u20e5-\\u20f0\\u2cef-\\u2cf1\\u2d7f\\u2de0-\\u2dff\\u302a-\\u302f\\u3099\\u309a\\ua620-\\ua629\\ua66f\\ua674-\\ua67d\\ua69e\\ua69f\\ua6f0\\ua6f1\\ua802\\ua806\\ua80b\\ua823-\\ua827\\ua82c\\ua880\\ua881\\ua8b4-\\ua8c5\\ua8d0-\\ua8d9\\ua8e0-\\ua8f1\\ua8ff-\\ua909\\ua926-\\ua92d\\ua947-\\ua953\\ua980-\\ua983\\ua9b3-\\ua9c0\\ua9d0-\\ua9d9\\ua9e5\\ua9f0-\\ua9f9\\uaa29-\\uaa36\\uaa43\\uaa4c\\uaa4d\\uaa50-\\uaa59\\uaa7b-\\uaa7d\\uaab0\\uaab2-\\uaab4\\uaab7\\uaab8\\uaabe\\uaabf\\uaac1\\uaaeb-\\uaaef\\uaaf5\\uaaf6\\uabe3-\\uabea\\uabec\\uabed\\uabf0-\\uabf9\\ufb1e\\ufe00-\\ufe0f\\ufe20-\\ufe2f\\ufe33\\ufe34\\ufe4d-\\ufe4f\\uff10-\\uff19\\uff3f\";\n\nconst nonASCIIidentifierStart = new RegExp(\n  \"[\" + nonASCIIidentifierStartChars + \"]\",\n);\nconst nonASCIIidentifier = new RegExp(\n  \"[\" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + \"]\",\n);\n\nnonASCIIidentifierStartChars = nonASCIIidentifierChars = null;\n\n// These are a run-length and offset-encoded representation of the\n// >0xffff code points that are a valid part of identifiers. The\n// offset starts at 0x10000, and each pair of numbers represents an\n// offset to the next range, and then a size of the range. They were\n// generated by `scripts/generate-identifier-regex.js`.\n/* prettier-ignore */\n/* prettier-ignore */\nconst astralIdentifierStartCodes = [0,11,2,25,2,18,2,1,2,14,3,13,35,122,70,52,268,28,4,48,48,31,14,29,6,37,11,29,3,35,5,7,2,4,43,157,19,35,5,35,5,39,9,51,157,310,10,21,11,7,153,5,3,0,2,43,2,1,4,0,3,22,11,22,10,30,66,18,2,1,11,21,11,25,71,55,7,1,65,0,16,3,2,2,2,28,43,28,4,28,36,7,2,27,28,53,11,21,11,18,14,17,111,72,56,50,14,50,14,35,349,41,7,1,79,28,11,0,9,21,107,20,28,22,13,52,76,44,33,24,27,35,30,0,3,0,9,34,4,0,13,47,15,3,22,0,2,0,36,17,2,24,85,6,2,0,2,3,2,14,2,9,8,46,39,7,3,1,3,21,2,6,2,1,2,4,4,0,19,0,13,4,159,52,19,3,21,2,31,47,21,1,2,0,185,46,42,3,37,47,21,0,60,42,14,0,72,26,230,43,117,63,32,7,3,0,3,7,2,1,2,23,16,0,2,0,95,7,3,38,17,0,2,0,29,0,11,39,8,0,22,0,12,45,20,0,35,56,264,8,2,36,18,0,50,29,113,6,2,1,2,37,22,0,26,5,2,1,2,31,15,0,328,18,190,0,80,921,103,110,18,195,2749,1070,4050,582,8634,568,8,30,114,29,19,47,17,3,32,20,6,18,689,63,129,74,6,0,67,12,65,1,2,0,29,6135,9,1237,43,8,8952,286,50,2,18,3,9,395,2309,106,6,12,4,8,8,9,5991,84,2,70,2,1,3,0,3,1,3,3,2,11,2,0,2,6,2,64,2,3,3,7,2,6,2,27,2,3,2,4,2,0,4,6,2,339,3,24,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,7,2357,44,11,6,17,0,370,43,1301,196,60,67,8,0,1205,3,2,26,2,1,2,0,3,0,2,9,2,3,2,0,2,0,7,0,5,0,2,0,2,0,2,2,2,1,2,0,3,0,2,0,2,0,2,0,2,0,2,1,2,0,3,3,2,6,2,3,2,3,2,0,2,9,2,16,6,2,2,4,2,16,4421,42717,35,4148,12,221,3,5761,15,7472,3104,541,1507,4938];\n/* prettier-ignore */\nconst astralIdentifierCodes = [509,0,227,0,150,4,294,9,1368,2,2,1,6,3,41,2,5,0,166,1,574,3,9,9,370,1,154,10,176,2,54,14,32,9,16,3,46,10,54,9,7,2,37,13,2,9,6,1,45,0,13,2,49,13,9,3,2,11,83,11,7,0,161,11,6,9,7,3,56,1,2,6,3,1,3,2,10,0,11,1,3,6,4,4,193,17,10,9,5,0,82,19,13,9,214,6,3,8,28,1,83,16,16,9,82,12,9,9,84,14,5,9,243,14,166,9,71,5,2,1,3,3,2,0,2,1,13,9,120,6,3,6,4,0,29,9,41,6,2,3,9,0,10,10,47,15,406,7,2,7,17,9,57,21,2,13,123,5,4,0,2,1,2,6,2,0,9,9,49,4,2,1,2,4,9,9,330,3,19306,9,135,4,60,6,26,9,1014,0,2,54,8,3,82,0,12,1,19628,1,5319,4,4,5,9,7,3,6,31,3,149,2,1418,49,513,54,5,49,9,0,15,0,23,4,2,14,1361,6,2,16,3,6,2,1,2,4,262,6,10,9,419,13,1495,6,110,6,6,9,4759,9,787719,239];\n\n// This has a complexity linear to the value of the code. The\n// assumption is that looking up astral identifier characters is\n// rare.\nfunction isInAstralSet(code: number, set: $ReadOnlyArray<number>): boolean {\n  let pos = 0x10000;\n  for (let i = 0, length = set.length; i < length; i += 2) {\n    pos += set[i];\n    if (pos > code) return false;\n\n    pos += set[i + 1];\n    if (pos >= code) return true;\n  }\n  return false;\n}\n\n// Test whether a given character code starts an identifier.\n\nexport function isIdentifierStart(code: number): boolean {\n  if (code < charCodes.uppercaseA) return code === charCodes.dollarSign;\n  if (code <= charCodes.uppercaseZ) return true;\n  if (code < charCodes.lowercaseA) return code === charCodes.underscore;\n  if (code <= charCodes.lowercaseZ) return true;\n  if (code <= 0xffff) {\n    return (\n      code >= 0xaa && nonASCIIidentifierStart.test(String.fromCharCode(code))\n    );\n  }\n  return isInAstralSet(code, astralIdentifierStartCodes);\n}\n\n// Test whether a given character is part of an identifier.\n\nexport function isIdentifierChar(code: number): boolean {\n  if (code < charCodes.digit0) return code === charCodes.dollarSign;\n  if (code < charCodes.colon) return true;\n  if (code < charCodes.uppercaseA) return false;\n  if (code <= charCodes.uppercaseZ) return true;\n  if (code < charCodes.lowercaseA) return code === charCodes.underscore;\n  if (code <= charCodes.lowercaseZ) return true;\n  if (code <= 0xffff) {\n    return code >= 0xaa && nonASCIIidentifier.test(String.fromCharCode(code));\n  }\n  return (\n    isInAstralSet(code, astralIdentifierStartCodes) ||\n    isInAstralSet(code, astralIdentifierCodes)\n  );\n}\n\n// Test whether a given string is a valid identifier name\n\nexport function isIdentifierName(name: string): boolean {\n  let isFirst = true;\n  for (const char of Array.from(name)) {\n    const cp = char.codePointAt(0);\n    if (isFirst) {\n      if (!isIdentifierStart(cp)) {\n        return false;\n      }\n      isFirst = false;\n    } else if (!isIdentifierChar(cp)) {\n      return false;\n    }\n  }\n  return !isFirst;\n}\n","// @flow\n\nconst reservedWords = {\n  keyword: [\n    \"break\",\n    \"case\",\n    \"catch\",\n    \"continue\",\n    \"debugger\",\n    \"default\",\n    \"do\",\n    \"else\",\n    \"finally\",\n    \"for\",\n    \"function\",\n    \"if\",\n    \"return\",\n    \"switch\",\n    \"throw\",\n    \"try\",\n    \"var\",\n    \"const\",\n    \"while\",\n    \"with\",\n    \"new\",\n    \"this\",\n    \"super\",\n    \"class\",\n    \"extends\",\n    \"export\",\n    \"import\",\n    \"null\",\n    \"true\",\n    \"false\",\n    \"in\",\n    \"instanceof\",\n    \"typeof\",\n    \"void\",\n    \"delete\",\n  ],\n  strict: [\n    \"implements\",\n    \"interface\",\n    \"let\",\n    \"package\",\n    \"private\",\n    \"protected\",\n    \"public\",\n    \"static\",\n    \"yield\",\n  ],\n  strictBind: [\"eval\", \"arguments\"],\n};\nconst keywords = new Set(reservedWords.keyword);\nconst reservedWordsStrictSet = new Set(reservedWords.strict);\nconst reservedWordsStrictBindSet = new Set(reservedWords.strictBind);\n\n/**\n * Checks if word is a reserved word in non-strict mode\n */\nexport function isReservedWord(word: string, inModule: boolean): boolean {\n  return (inModule && word === \"await\") || word === \"enum\";\n}\n\n/**\n * Checks if word is a reserved word in non-binding strict mode\n *\n * Includes non-strict reserved words\n */\nexport function isStrictReservedWord(word: string, inModule: boolean): boolean {\n  return isReservedWord(word, inModule) || reservedWordsStrictSet.has(word);\n}\n\n/**\n * Checks if word is a reserved word in binding strict mode, but it is allowed as\n * a normal identifier.\n */\nexport function isStrictBindOnlyReservedWord(word: string): boolean {\n  return reservedWordsStrictBindSet.has(word);\n}\n\n/**\n * Checks if word is a reserved word in binding strict mode\n *\n * Includes non-strict reserved words and non-binding strict reserved words\n */\nexport function isStrictBindReservedWord(\n  word: string,\n  inModule: boolean,\n): boolean {\n  return (\n    isStrictReservedWord(word, inModule) || isStrictBindOnlyReservedWord(word)\n  );\n}\n\nexport function isKeyword(word: string): boolean {\n  return keywords.has(word);\n}\n","/* eslint max-len: 0 */\n\n// @flow\n\nimport * as charCodes from \"charcodes\";\n\nexport {\n  isIdentifierStart,\n  isIdentifierChar,\n  isReservedWord,\n  isStrictBindOnlyReservedWord,\n  isStrictBindReservedWord,\n  isStrictReservedWord,\n  isKeyword,\n} from \"@babel/helper-validator-identifier\";\n\nexport const keywordRelationalOperator = /^in(stanceof)?$/;\n\n// Test whether a current state character code and next character code is @\n\nexport function isIteratorStart(current: number, next: number): boolean {\n  return current === charCodes.atSign && next === charCodes.atSign;\n}\n","// @flow\n\n/*:: declare var invariant; */\n\n// Error messages are colocated with the plugin.\n/* eslint-disable @babel/development-internal/dry-error-messages */\n\nimport type Parser from \"../parser\";\nimport { types as tt, type TokenType } from \"../tokenizer/types\";\nimport * as N from \"../types\";\nimport type { Options } from \"../options\";\nimport type { Pos, Position } from \"../util/location\";\nimport type State from \"../tokenizer/state\";\nimport { types as tc } from \"../tokenizer/context\";\nimport * as charCodes from \"charcodes\";\nimport { isIteratorStart } from \"../util/identifier\";\nimport {\n  type BindingTypes,\n  BIND_NONE,\n  BIND_LEXICAL,\n  BIND_VAR,\n  BIND_FUNCTION,\n  SCOPE_ARROW,\n  SCOPE_FUNCTION,\n  SCOPE_OTHER,\n} from \"../util/scopeflags\";\nimport type { ExpressionErrors } from \"../parser/util\";\nimport { Errors } from \"../parser/error\";\n\nconst reservedTypes = new Set([\n  \"_\",\n  \"any\",\n  \"bool\",\n  \"boolean\",\n  \"empty\",\n  \"extends\",\n  \"false\",\n  \"interface\",\n  \"mixed\",\n  \"null\",\n  \"number\",\n  \"static\",\n  \"string\",\n  \"true\",\n  \"typeof\",\n  \"void\",\n]);\n\n/* eslint sort-keys: \"error\" */\n// The Errors key follows https://github.com/facebook/flow/blob/master/src/parser/parse_error.ml unless it does not exist\nconst FlowErrors = Object.freeze({\n  AmbiguousConditionalArrow:\n    \"Ambiguous expression: wrap the arrow functions in parentheses to disambiguate.\",\n  AmbiguousDeclareModuleKind:\n    \"Found both `declare module.exports` and `declare export` in the same module. Modules can only have 1 since they are either an ES module or they are a CommonJS module\",\n  AssignReservedType: \"Cannot overwrite reserved type %0\",\n  DeclareClassElement:\n    \"The `declare` modifier can only appear on class fields.\",\n  DeclareClassFieldInitializer:\n    \"Initializers are not allowed in fields with the `declare` modifier.\",\n  DuplicateDeclareModuleExports: \"Duplicate `declare module.exports` statement\",\n  EnumBooleanMemberNotInitialized:\n    \"Boolean enum members need to be initialized. Use either `%0 = true,` or `%0 = false,` in enum `%1`.\",\n  EnumDuplicateMemberName:\n    \"Enum member names need to be unique, but the name `%0` has already been used before in enum `%1`.\",\n  EnumInconsistentMemberValues:\n    \"Enum `%0` has inconsistent member initializers. Either use no initializers, or consistently use literals (either booleans, numbers, or strings) for all member initializers.\",\n  EnumInvalidExplicitType:\n    \"Enum type `%1` is not valid. Use one of `boolean`, `number`, `string`, or `symbol` in enum `%0`.\",\n  EnumInvalidExplicitTypeUnknownSupplied:\n    \"Supplied enum type is not valid. Use one of `boolean`, `number`, `string`, or `symbol` in enum `%0`.\",\n  EnumInvalidMemberInitializerPrimaryType:\n    \"Enum `%0` has type `%2`, so the initializer of `%1` needs to be a %2 literal.\",\n  EnumInvalidMemberInitializerSymbolType:\n    \"Symbol enum members cannot be initialized. Use `%1,` in enum `%0`.\",\n  EnumInvalidMemberInitializerUnknownType:\n    \"The enum member initializer for `%1` needs to be a literal (either a boolean, number, or string) in enum `%0`.\",\n  EnumInvalidMemberName:\n    \"Enum member names cannot start with lowercase 'a' through 'z'. Instead of using `%0`, consider using `%1`, in enum `%2`.\",\n  EnumNumberMemberNotInitialized:\n    \"Number enum members need to be initialized, e.g. `%1 = 1` in enum `%0`.\",\n  EnumStringMemberInconsistentlyInitailized:\n    \"String enum members need to consistently either all use initializers, or use no initializers, in enum `%0`.\",\n  ImportTypeShorthandOnlyInPureImport:\n    \"The `type` and `typeof` keywords on named imports can only be used on regular `import` statements. It cannot be used with `import type` or `import typeof` statements\",\n  InexactInsideExact:\n    \"Explicit inexact syntax cannot appear inside an explicit exact object type\",\n  InexactInsideNonObject:\n    \"Explicit inexact syntax cannot appear in class or interface definitions\",\n  InexactVariance: \"Explicit inexact syntax cannot have variance\",\n  InvalidNonTypeImportInDeclareModule:\n    \"Imports within a `declare module` body must always be `import type` or `import typeof`\",\n  MissingTypeParamDefault:\n    \"Type parameter declaration needs a default, since a preceding type parameter declaration has a default.\",\n  NestedDeclareModule:\n    \"`declare module` cannot be used inside another `declare module`\",\n  NestedFlowComment: \"Cannot have a flow comment inside another flow comment\",\n  OptionalBindingPattern:\n    \"A binding pattern parameter cannot be optional in an implementation signature.\",\n  SpreadVariance: \"Spread properties cannot have variance\",\n  TypeBeforeInitializer:\n    \"Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`\",\n  TypeCastInPattern:\n    \"The type cast expression is expected to be wrapped with parenthesis\",\n  UnexpectedExplicitInexactInObject:\n    \"Explicit inexact syntax must appear at the end of an inexact object\",\n  UnexpectedReservedType: \"Unexpected reserved type %0\",\n  UnexpectedReservedUnderscore:\n    \"`_` is only allowed as a type argument to call or new\",\n  UnexpectedSpaceBetweenModuloChecks:\n    \"Spaces between `%` and `checks` are not allowed here.\",\n  UnexpectedSpreadType:\n    \"Spread operator cannot appear in class or interface definitions\",\n  UnexpectedSubtractionOperand:\n    'Unexpected token, expected \"number\" or \"bigint\"',\n  UnexpectedTokenAfterTypeParameter:\n    \"Expected an arrow function after this type parameter declaration\",\n  UnsupportedDeclareExportKind:\n    \"`declare export %0` is not supported. Use `%1` instead\",\n  UnsupportedStatementInDeclareModule:\n    \"Only declares and type imports are allowed inside declare module\",\n  UnterminatedFlowComment: \"Unterminated flow-comment\",\n});\n/* eslint-disable sort-keys */\n\nfunction isEsModuleType(bodyElement: N.Node): boolean {\n  return (\n    bodyElement.type === \"DeclareExportAllDeclaration\" ||\n    (bodyElement.type === \"DeclareExportDeclaration\" &&\n      (!bodyElement.declaration ||\n        (bodyElement.declaration.type !== \"TypeAlias\" &&\n          bodyElement.declaration.type !== \"InterfaceDeclaration\")))\n  );\n}\n\nfunction hasTypeImportKind(node: N.Node): boolean {\n  return node.importKind === \"type\" || node.importKind === \"typeof\";\n}\n\nfunction isMaybeDefaultImport(state: State): boolean {\n  return (\n    (state.type === tt.name || !!state.type.keyword) && state.value !== \"from\"\n  );\n}\n\nconst exportSuggestions = {\n  const: \"declare export var\",\n  let: \"declare export var\",\n  type: \"export type\",\n  interface: \"export interface\",\n};\n\n// Like Array#filter, but returns a tuple [ acceptedElements, discardedElements ]\nfunction partition<T>(\n  list: T[],\n  test: (T, number, T[]) => ?boolean,\n): [T[], T[]] {\n  const list1 = [];\n  const list2 = [];\n  for (let i = 0; i < list.length; i++) {\n    (test(list[i], i, list) ? list1 : list2).push(list[i]);\n  }\n  return [list1, list2];\n}\n\nconst FLOW_PRAGMA_REGEX = /\\*?\\s*@((?:no)?flow)\\b/;\n\n// Flow enums types\ntype EnumExplicitType = null | \"boolean\" | \"number\" | \"string\" | \"symbol\";\ntype EnumContext = {|\n  enumName: string,\n  explicitType: EnumExplicitType,\n  memberName: string,\n|};\ntype EnumMemberInit =\n  | {| type: \"number\", pos: number, value: N.Node |}\n  | {| type: \"string\", pos: number, value: N.Node |}\n  | {| type: \"boolean\", pos: number, value: N.Node |}\n  | {| type: \"invalid\", pos: number |}\n  | {| type: \"none\", pos: number |};\n\nexport default (superClass: Class<Parser>): Class<Parser> =>\n  class extends superClass {\n    // The value of the @flow/@noflow pragma. Initially undefined, transitions\n    // to \"@flow\" or \"@noflow\" if we see a pragma. Transitions to null if we are\n    // past the initial comment.\n    flowPragma: void | null | \"flow\" | \"noflow\";\n\n    constructor(options: ?Options, input: string) {\n      super(options, input);\n      this.flowPragma = undefined;\n    }\n\n    shouldParseTypes(): boolean {\n      return this.getPluginOption(\"flow\", \"all\") || this.flowPragma === \"flow\";\n    }\n\n    shouldParseEnums(): boolean {\n      return !!this.getPluginOption(\"flow\", \"enums\");\n    }\n\n    finishToken(type: TokenType, val: any): void {\n      if (\n        type !== tt.string &&\n        type !== tt.semi &&\n        type !== tt.interpreterDirective\n      ) {\n        if (this.flowPragma === undefined) {\n          this.flowPragma = null;\n        }\n      }\n      return super.finishToken(type, val);\n    }\n\n    addComment(comment: N.Comment): void {\n      if (this.flowPragma === undefined) {\n        // Try to parse a flow pragma.\n        const matches = FLOW_PRAGMA_REGEX.exec(comment.value);\n        if (!matches) {\n          // do nothing\n        } else if (matches[1] === \"flow\") {\n          this.flowPragma = \"flow\";\n        } else if (matches[1] === \"noflow\") {\n          this.flowPragma = \"noflow\";\n        } else {\n          throw new Error(\"Unexpected flow pragma\");\n        }\n      }\n      return super.addComment(comment);\n    }\n\n    flowParseTypeInitialiser(tok?: TokenType): N.FlowType {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      this.expect(tok || tt.colon);\n\n      const type = this.flowParseType();\n      this.state.inType = oldInType;\n      return type;\n    }\n\n    flowParsePredicate(): N.FlowType {\n      const node = this.startNode();\n      const moduloLoc = this.state.startLoc;\n      const moduloPos = this.state.start;\n      this.expect(tt.modulo);\n      const checksLoc = this.state.startLoc;\n      this.expectContextual(\"checks\");\n      // Force '%' and 'checks' to be adjacent\n      if (\n        moduloLoc.line !== checksLoc.line ||\n        moduloLoc.column !== checksLoc.column - 1\n      ) {\n        this.raise(moduloPos, FlowErrors.UnexpectedSpaceBetweenModuloChecks);\n      }\n      if (this.eat(tt.parenL)) {\n        node.value = this.parseExpression();\n        this.expect(tt.parenR);\n        return this.finishNode(node, \"DeclaredPredicate\");\n      } else {\n        return this.finishNode(node, \"InferredPredicate\");\n      }\n    }\n\n    flowParseTypeAndPredicateInitialiser(): [?N.FlowType, ?N.FlowPredicate] {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      this.expect(tt.colon);\n      let type = null;\n      let predicate = null;\n      if (this.match(tt.modulo)) {\n        this.state.inType = oldInType;\n        predicate = this.flowParsePredicate();\n      } else {\n        type = this.flowParseType();\n        this.state.inType = oldInType;\n        if (this.match(tt.modulo)) {\n          predicate = this.flowParsePredicate();\n        }\n      }\n      return [type, predicate];\n    }\n\n    flowParseDeclareClass(node: N.FlowDeclareClass): N.FlowDeclareClass {\n      this.next();\n      this.flowParseInterfaceish(node, /*isClass*/ true);\n      return this.finishNode(node, \"DeclareClass\");\n    }\n\n    flowParseDeclareFunction(\n      node: N.FlowDeclareFunction,\n    ): N.FlowDeclareFunction {\n      this.next();\n\n      const id = (node.id = this.parseIdentifier());\n\n      const typeNode = this.startNode();\n      const typeContainer = this.startNode();\n\n      if (this.isRelational(\"<\")) {\n        typeNode.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        typeNode.typeParameters = null;\n      }\n\n      this.expect(tt.parenL);\n      const tmp = this.flowParseFunctionTypeParams();\n      typeNode.params = tmp.params;\n      typeNode.rest = tmp.rest;\n      this.expect(tt.parenR);\n\n      [\n        // $FlowFixMe (destructuring not supported yet)\n        typeNode.returnType,\n        // $FlowFixMe (destructuring not supported yet)\n        node.predicate,\n      ] = this.flowParseTypeAndPredicateInitialiser();\n\n      typeContainer.typeAnnotation = this.finishNode(\n        typeNode,\n        \"FunctionTypeAnnotation\",\n      );\n\n      id.typeAnnotation = this.finishNode(typeContainer, \"TypeAnnotation\");\n\n      this.resetEndLocation(id);\n      this.semicolon();\n\n      return this.finishNode(node, \"DeclareFunction\");\n    }\n\n    flowParseDeclare(\n      node: N.FlowDeclare,\n      insideModule?: boolean,\n    ): N.FlowDeclare {\n      if (this.match(tt._class)) {\n        return this.flowParseDeclareClass(node);\n      } else if (this.match(tt._function)) {\n        return this.flowParseDeclareFunction(node);\n      } else if (this.match(tt._var)) {\n        return this.flowParseDeclareVariable(node);\n      } else if (this.eatContextual(\"module\")) {\n        if (this.match(tt.dot)) {\n          return this.flowParseDeclareModuleExports(node);\n        } else {\n          if (insideModule) {\n            this.raise(this.state.lastTokStart, FlowErrors.NestedDeclareModule);\n          }\n          return this.flowParseDeclareModule(node);\n        }\n      } else if (this.isContextual(\"type\")) {\n        return this.flowParseDeclareTypeAlias(node);\n      } else if (this.isContextual(\"opaque\")) {\n        return this.flowParseDeclareOpaqueType(node);\n      } else if (this.isContextual(\"interface\")) {\n        return this.flowParseDeclareInterface(node);\n      } else if (this.match(tt._export)) {\n        return this.flowParseDeclareExportDeclaration(node, insideModule);\n      } else {\n        throw this.unexpected();\n      }\n    }\n\n    flowParseDeclareVariable(\n      node: N.FlowDeclareVariable,\n    ): N.FlowDeclareVariable {\n      this.next();\n      node.id = this.flowParseTypeAnnotatableIdentifier(\n        /*allowPrimitiveOverride*/ true,\n      );\n      this.scope.declareName(node.id.name, BIND_VAR, node.id.start);\n      this.semicolon();\n      return this.finishNode(node, \"DeclareVariable\");\n    }\n\n    flowParseDeclareModule(node: N.FlowDeclareModule): N.FlowDeclareModule {\n      this.scope.enter(SCOPE_OTHER);\n\n      if (this.match(tt.string)) {\n        node.id = this.parseExprAtom();\n      } else {\n        node.id = this.parseIdentifier();\n      }\n\n      const bodyNode = (node.body = this.startNode());\n      const body = (bodyNode.body = []);\n      this.expect(tt.braceL);\n      while (!this.match(tt.braceR)) {\n        let bodyNode = this.startNode();\n\n        if (this.match(tt._import)) {\n          this.next();\n          if (!this.isContextual(\"type\") && !this.match(tt._typeof)) {\n            this.raise(\n              this.state.lastTokStart,\n              FlowErrors.InvalidNonTypeImportInDeclareModule,\n            );\n          }\n          this.parseImport(bodyNode);\n        } else {\n          this.expectContextual(\n            \"declare\",\n            FlowErrors.UnsupportedStatementInDeclareModule,\n          );\n\n          bodyNode = this.flowParseDeclare(bodyNode, true);\n        }\n\n        body.push(bodyNode);\n      }\n\n      this.scope.exit();\n\n      this.expect(tt.braceR);\n\n      this.finishNode(bodyNode, \"BlockStatement\");\n\n      let kind = null;\n      let hasModuleExport = false;\n      body.forEach(bodyElement => {\n        if (isEsModuleType(bodyElement)) {\n          if (kind === \"CommonJS\") {\n            this.raise(\n              bodyElement.start,\n              FlowErrors.AmbiguousDeclareModuleKind,\n            );\n          }\n          kind = \"ES\";\n        } else if (bodyElement.type === \"DeclareModuleExports\") {\n          if (hasModuleExport) {\n            this.raise(\n              bodyElement.start,\n              FlowErrors.DuplicateDeclareModuleExports,\n            );\n          }\n          if (kind === \"ES\") {\n            this.raise(\n              bodyElement.start,\n              FlowErrors.AmbiguousDeclareModuleKind,\n            );\n          }\n          kind = \"CommonJS\";\n          hasModuleExport = true;\n        }\n      });\n\n      node.kind = kind || \"CommonJS\";\n      return this.finishNode(node, \"DeclareModule\");\n    }\n\n    flowParseDeclareExportDeclaration(\n      node: N.FlowDeclareExportDeclaration,\n      insideModule: ?boolean,\n    ): N.FlowDeclareExportDeclaration {\n      this.expect(tt._export);\n\n      if (this.eat(tt._default)) {\n        if (this.match(tt._function) || this.match(tt._class)) {\n          // declare export default class ...\n          // declare export default function ...\n          node.declaration = this.flowParseDeclare(this.startNode());\n        } else {\n          // declare export default [type];\n          node.declaration = this.flowParseType();\n          this.semicolon();\n        }\n        node.default = true;\n\n        return this.finishNode(node, \"DeclareExportDeclaration\");\n      } else {\n        if (\n          this.match(tt._const) ||\n          this.isLet() ||\n          ((this.isContextual(\"type\") || this.isContextual(\"interface\")) &&\n            !insideModule)\n        ) {\n          const label = this.state.value;\n          const suggestion = exportSuggestions[label];\n\n          throw this.raise(\n            this.state.start,\n            FlowErrors.UnsupportedDeclareExportKind,\n            label,\n            suggestion,\n          );\n        }\n\n        if (\n          this.match(tt._var) || // declare export var ...\n          this.match(tt._function) || // declare export function ...\n          this.match(tt._class) || // declare export class ...\n          this.isContextual(\"opaque\") // declare export opaque ..\n        ) {\n          node.declaration = this.flowParseDeclare(this.startNode());\n          node.default = false;\n\n          return this.finishNode(node, \"DeclareExportDeclaration\");\n        } else if (\n          this.match(tt.star) || // declare export * from ''\n          this.match(tt.braceL) || // declare export {} ...\n          this.isContextual(\"interface\") || // declare export interface ...\n          this.isContextual(\"type\") || // declare export type ...\n          this.isContextual(\"opaque\") // declare export opaque type ...\n        ) {\n          node = this.parseExport(node);\n          if (node.type === \"ExportNamedDeclaration\") {\n            // flow does not support the ExportNamedDeclaration\n            // $FlowIgnore\n            node.type = \"ExportDeclaration\";\n            // $FlowFixMe\n            node.default = false;\n            delete node.exportKind;\n          }\n\n          // $FlowIgnore\n          node.type = \"Declare\" + node.type;\n\n          return node;\n        }\n      }\n\n      throw this.unexpected();\n    }\n\n    flowParseDeclareModuleExports(\n      node: N.FlowDeclareModuleExports,\n    ): N.FlowDeclareModuleExports {\n      this.next();\n      this.expectContextual(\"exports\");\n      node.typeAnnotation = this.flowParseTypeAnnotation();\n      this.semicolon();\n\n      return this.finishNode(node, \"DeclareModuleExports\");\n    }\n\n    flowParseDeclareTypeAlias(\n      node: N.FlowDeclareTypeAlias,\n    ): N.FlowDeclareTypeAlias {\n      this.next();\n      this.flowParseTypeAlias(node);\n      // Don't do finishNode as we don't want to process comments twice\n      node.type = \"DeclareTypeAlias\";\n      return node;\n    }\n\n    flowParseDeclareOpaqueType(\n      node: N.FlowDeclareOpaqueType,\n    ): N.FlowDeclareOpaqueType {\n      this.next();\n      this.flowParseOpaqueType(node, true);\n      // Don't do finishNode as we don't want to process comments twice\n      node.type = \"DeclareOpaqueType\";\n      return node;\n    }\n\n    flowParseDeclareInterface(\n      node: N.FlowDeclareInterface,\n    ): N.FlowDeclareInterface {\n      this.next();\n      this.flowParseInterfaceish(node);\n      return this.finishNode(node, \"DeclareInterface\");\n    }\n\n    // Interfaces\n\n    flowParseInterfaceish(\n      node: N.FlowDeclare,\n      isClass?: boolean = false,\n    ): void {\n      node.id = this.flowParseRestrictedIdentifier(\n        /* liberal */ !isClass,\n        /* declaration */ true,\n      );\n\n      this.scope.declareName(\n        node.id.name,\n        isClass ? BIND_FUNCTION : BIND_LEXICAL,\n        node.id.start,\n      );\n\n      if (this.isRelational(\"<\")) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        node.typeParameters = null;\n      }\n\n      node.extends = [];\n      node.implements = [];\n      node.mixins = [];\n\n      if (this.eat(tt._extends)) {\n        do {\n          node.extends.push(this.flowParseInterfaceExtends());\n        } while (!isClass && this.eat(tt.comma));\n      }\n\n      if (this.isContextual(\"mixins\")) {\n        this.next();\n        do {\n          node.mixins.push(this.flowParseInterfaceExtends());\n        } while (this.eat(tt.comma));\n      }\n\n      if (this.isContextual(\"implements\")) {\n        this.next();\n        do {\n          node.implements.push(this.flowParseInterfaceExtends());\n        } while (this.eat(tt.comma));\n      }\n\n      node.body = this.flowParseObjectType({\n        allowStatic: isClass,\n        allowExact: false,\n        allowSpread: false,\n        allowProto: isClass,\n        allowInexact: false,\n      });\n    }\n\n    flowParseInterfaceExtends(): N.FlowInterfaceExtends {\n      const node = this.startNode();\n\n      node.id = this.flowParseQualifiedTypeIdentifier();\n      if (this.isRelational(\"<\")) {\n        node.typeParameters = this.flowParseTypeParameterInstantiation();\n      } else {\n        node.typeParameters = null;\n      }\n\n      return this.finishNode(node, \"InterfaceExtends\");\n    }\n\n    flowParseInterface(node: N.FlowInterface): N.FlowInterface {\n      this.flowParseInterfaceish(node);\n      return this.finishNode(node, \"InterfaceDeclaration\");\n    }\n\n    checkNotUnderscore(word: string) {\n      if (word === \"_\") {\n        this.raise(this.state.start, FlowErrors.UnexpectedReservedUnderscore);\n      }\n    }\n\n    checkReservedType(word: string, startLoc: number, declaration?: boolean) {\n      if (!reservedTypes.has(word)) return;\n\n      this.raise(\n        startLoc,\n        declaration\n          ? FlowErrors.AssignReservedType\n          : FlowErrors.UnexpectedReservedType,\n        word,\n      );\n    }\n\n    flowParseRestrictedIdentifier(\n      liberal?: boolean,\n      declaration?: boolean,\n    ): N.Identifier {\n      this.checkReservedType(this.state.value, this.state.start, declaration);\n      return this.parseIdentifier(liberal);\n    }\n\n    // Type aliases\n\n    flowParseTypeAlias(node: N.FlowTypeAlias): N.FlowTypeAlias {\n      node.id = this.flowParseRestrictedIdentifier(\n        /* liberal */ false,\n        /* declaration */ true,\n      );\n      this.scope.declareName(node.id.name, BIND_LEXICAL, node.id.start);\n\n      if (this.isRelational(\"<\")) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        node.typeParameters = null;\n      }\n\n      node.right = this.flowParseTypeInitialiser(tt.eq);\n      this.semicolon();\n\n      return this.finishNode(node, \"TypeAlias\");\n    }\n\n    flowParseOpaqueType(\n      node: N.FlowOpaqueType,\n      declare: boolean,\n    ): N.FlowOpaqueType {\n      this.expectContextual(\"type\");\n      node.id = this.flowParseRestrictedIdentifier(\n        /* liberal */ true,\n        /* declaration */ true,\n      );\n      this.scope.declareName(node.id.name, BIND_LEXICAL, node.id.start);\n\n      if (this.isRelational(\"<\")) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        node.typeParameters = null;\n      }\n\n      // Parse the supertype\n      node.supertype = null;\n      if (this.match(tt.colon)) {\n        node.supertype = this.flowParseTypeInitialiser(tt.colon);\n      }\n\n      node.impltype = null;\n      if (!declare) {\n        node.impltype = this.flowParseTypeInitialiser(tt.eq);\n      }\n      this.semicolon();\n\n      return this.finishNode(node, \"OpaqueType\");\n    }\n\n    // Type annotations\n\n    flowParseTypeParameter(requireDefault?: boolean = false): N.TypeParameter {\n      const nodeStart = this.state.start;\n\n      const node = this.startNode();\n\n      const variance = this.flowParseVariance();\n\n      const ident = this.flowParseTypeAnnotatableIdentifier();\n      node.name = ident.name;\n      node.variance = variance;\n      node.bound = ident.typeAnnotation;\n\n      if (this.match(tt.eq)) {\n        this.eat(tt.eq);\n        node.default = this.flowParseType();\n      } else {\n        if (requireDefault) {\n          this.raise(nodeStart, FlowErrors.MissingTypeParamDefault);\n        }\n      }\n\n      return this.finishNode(node, \"TypeParameter\");\n    }\n\n    flowParseTypeParameterDeclaration(): N.TypeParameterDeclaration {\n      const oldInType = this.state.inType;\n      const node = this.startNode();\n      node.params = [];\n\n      this.state.inType = true;\n\n      // istanbul ignore else: this condition is already checked at all call sites\n      if (this.isRelational(\"<\") || this.match(tt.jsxTagStart)) {\n        this.next();\n      } else {\n        this.unexpected();\n      }\n\n      let defaultRequired = false;\n\n      do {\n        const typeParameter = this.flowParseTypeParameter(defaultRequired);\n\n        node.params.push(typeParameter);\n\n        if (typeParameter.default) {\n          defaultRequired = true;\n        }\n\n        if (!this.isRelational(\">\")) {\n          this.expect(tt.comma);\n        }\n      } while (!this.isRelational(\">\"));\n      this.expectRelational(\">\");\n\n      this.state.inType = oldInType;\n\n      return this.finishNode(node, \"TypeParameterDeclaration\");\n    }\n\n    flowParseTypeParameterInstantiation(): N.TypeParameterInstantiation {\n      const node = this.startNode();\n      const oldInType = this.state.inType;\n      node.params = [];\n\n      this.state.inType = true;\n\n      this.expectRelational(\"<\");\n      const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n      this.state.noAnonFunctionType = false;\n      while (!this.isRelational(\">\")) {\n        node.params.push(this.flowParseType());\n        if (!this.isRelational(\">\")) {\n          this.expect(tt.comma);\n        }\n      }\n      this.state.noAnonFunctionType = oldNoAnonFunctionType;\n      this.expectRelational(\">\");\n\n      this.state.inType = oldInType;\n\n      return this.finishNode(node, \"TypeParameterInstantiation\");\n    }\n\n    flowParseTypeParameterInstantiationCallOrNew(): N.TypeParameterInstantiation {\n      const node = this.startNode();\n      const oldInType = this.state.inType;\n      node.params = [];\n\n      this.state.inType = true;\n\n      this.expectRelational(\"<\");\n      while (!this.isRelational(\">\")) {\n        node.params.push(this.flowParseTypeOrImplicitInstantiation());\n        if (!this.isRelational(\">\")) {\n          this.expect(tt.comma);\n        }\n      }\n      this.expectRelational(\">\");\n\n      this.state.inType = oldInType;\n\n      return this.finishNode(node, \"TypeParameterInstantiation\");\n    }\n\n    flowParseInterfaceType(): N.FlowInterfaceType {\n      const node = this.startNode();\n      this.expectContextual(\"interface\");\n\n      node.extends = [];\n      if (this.eat(tt._extends)) {\n        do {\n          node.extends.push(this.flowParseInterfaceExtends());\n        } while (this.eat(tt.comma));\n      }\n\n      node.body = this.flowParseObjectType({\n        allowStatic: false,\n        allowExact: false,\n        allowSpread: false,\n        allowProto: false,\n        allowInexact: false,\n      });\n\n      return this.finishNode(node, \"InterfaceTypeAnnotation\");\n    }\n\n    flowParseObjectPropertyKey(): N.Expression {\n      return this.match(tt.num) || this.match(tt.string)\n        ? this.parseExprAtom()\n        : this.parseIdentifier(true);\n    }\n\n    flowParseObjectTypeIndexer(\n      node: N.FlowObjectTypeIndexer,\n      isStatic: boolean,\n      variance: ?N.FlowVariance,\n    ): N.FlowObjectTypeIndexer {\n      node.static = isStatic;\n\n      // Note: bracketL has already been consumed\n      if (this.lookahead().type === tt.colon) {\n        node.id = this.flowParseObjectPropertyKey();\n        node.key = this.flowParseTypeInitialiser();\n      } else {\n        node.id = null;\n        node.key = this.flowParseType();\n      }\n      this.expect(tt.bracketR);\n      node.value = this.flowParseTypeInitialiser();\n      node.variance = variance;\n\n      return this.finishNode(node, \"ObjectTypeIndexer\");\n    }\n\n    flowParseObjectTypeInternalSlot(\n      node: N.FlowObjectTypeInternalSlot,\n      isStatic: boolean,\n    ): N.FlowObjectTypeInternalSlot {\n      node.static = isStatic;\n      // Note: both bracketL have already been consumed\n      node.id = this.flowParseObjectPropertyKey();\n      this.expect(tt.bracketR);\n      this.expect(tt.bracketR);\n      if (this.isRelational(\"<\") || this.match(tt.parenL)) {\n        node.method = true;\n        node.optional = false;\n        node.value = this.flowParseObjectTypeMethodish(\n          this.startNodeAt(node.start, node.loc.start),\n        );\n      } else {\n        node.method = false;\n        if (this.eat(tt.question)) {\n          node.optional = true;\n        }\n        node.value = this.flowParseTypeInitialiser();\n      }\n      return this.finishNode(node, \"ObjectTypeInternalSlot\");\n    }\n\n    flowParseObjectTypeMethodish(\n      node: N.FlowFunctionTypeAnnotation,\n    ): N.FlowFunctionTypeAnnotation {\n      node.params = [];\n      node.rest = null;\n      node.typeParameters = null;\n\n      if (this.isRelational(\"<\")) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n\n      this.expect(tt.parenL);\n      while (!this.match(tt.parenR) && !this.match(tt.ellipsis)) {\n        node.params.push(this.flowParseFunctionTypeParam());\n        if (!this.match(tt.parenR)) {\n          this.expect(tt.comma);\n        }\n      }\n\n      if (this.eat(tt.ellipsis)) {\n        node.rest = this.flowParseFunctionTypeParam();\n      }\n      this.expect(tt.parenR);\n      node.returnType = this.flowParseTypeInitialiser();\n\n      return this.finishNode(node, \"FunctionTypeAnnotation\");\n    }\n\n    flowParseObjectTypeCallProperty(\n      node: N.FlowObjectTypeCallProperty,\n      isStatic: boolean,\n    ): N.FlowObjectTypeCallProperty {\n      const valueNode = this.startNode();\n      node.static = isStatic;\n      node.value = this.flowParseObjectTypeMethodish(valueNode);\n      return this.finishNode(node, \"ObjectTypeCallProperty\");\n    }\n\n    flowParseObjectType({\n      allowStatic,\n      allowExact,\n      allowSpread,\n      allowProto,\n      allowInexact,\n    }: {\n      allowStatic: boolean,\n      allowExact: boolean,\n      allowSpread: boolean,\n      allowProto: boolean,\n      allowInexact: boolean,\n    }): N.FlowObjectTypeAnnotation {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n\n      const nodeStart = this.startNode();\n\n      nodeStart.callProperties = [];\n      nodeStart.properties = [];\n      nodeStart.indexers = [];\n      nodeStart.internalSlots = [];\n\n      let endDelim;\n      let exact;\n      let inexact = false;\n      if (allowExact && this.match(tt.braceBarL)) {\n        this.expect(tt.braceBarL);\n        endDelim = tt.braceBarR;\n        exact = true;\n      } else {\n        this.expect(tt.braceL);\n        endDelim = tt.braceR;\n        exact = false;\n      }\n\n      nodeStart.exact = exact;\n\n      while (!this.match(endDelim)) {\n        let isStatic = false;\n        let protoStart: ?number = null;\n        let inexactStart: ?number = null;\n        const node = this.startNode();\n\n        if (allowProto && this.isContextual(\"proto\")) {\n          const lookahead = this.lookahead();\n\n          if (lookahead.type !== tt.colon && lookahead.type !== tt.question) {\n            this.next();\n            protoStart = this.state.start;\n            allowStatic = false;\n          }\n        }\n\n        if (allowStatic && this.isContextual(\"static\")) {\n          const lookahead = this.lookahead();\n\n          // static is a valid identifier name\n          if (lookahead.type !== tt.colon && lookahead.type !== tt.question) {\n            this.next();\n            isStatic = true;\n          }\n        }\n\n        const variance = this.flowParseVariance();\n\n        if (this.eat(tt.bracketL)) {\n          if (protoStart != null) {\n            this.unexpected(protoStart);\n          }\n          if (this.eat(tt.bracketL)) {\n            if (variance) {\n              this.unexpected(variance.start);\n            }\n            nodeStart.internalSlots.push(\n              this.flowParseObjectTypeInternalSlot(node, isStatic),\n            );\n          } else {\n            nodeStart.indexers.push(\n              this.flowParseObjectTypeIndexer(node, isStatic, variance),\n            );\n          }\n        } else if (this.match(tt.parenL) || this.isRelational(\"<\")) {\n          if (protoStart != null) {\n            this.unexpected(protoStart);\n          }\n          if (variance) {\n            this.unexpected(variance.start);\n          }\n          nodeStart.callProperties.push(\n            this.flowParseObjectTypeCallProperty(node, isStatic),\n          );\n        } else {\n          let kind = \"init\";\n\n          if (this.isContextual(\"get\") || this.isContextual(\"set\")) {\n            const lookahead = this.lookahead();\n            if (\n              lookahead.type === tt.name ||\n              lookahead.type === tt.string ||\n              lookahead.type === tt.num\n            ) {\n              kind = this.state.value;\n              this.next();\n            }\n          }\n\n          const propOrInexact = this.flowParseObjectTypeProperty(\n            node,\n            isStatic,\n            protoStart,\n            variance,\n            kind,\n            allowSpread,\n            allowInexact ?? !exact,\n          );\n\n          if (propOrInexact === null) {\n            inexact = true;\n            inexactStart = this.state.lastTokStart;\n          } else {\n            nodeStart.properties.push(propOrInexact);\n          }\n        }\n\n        this.flowObjectTypeSemicolon();\n\n        if (\n          inexactStart &&\n          !this.match(tt.braceR) &&\n          !this.match(tt.braceBarR)\n        ) {\n          this.raise(\n            inexactStart,\n            FlowErrors.UnexpectedExplicitInexactInObject,\n          );\n        }\n      }\n\n      this.expect(endDelim);\n\n      /* The inexact flag should only be added on ObjectTypeAnnotations that\n       * are not the body of an interface, declare interface, or declare class.\n       * Since spreads are only allowed in objec types, checking that is\n       * sufficient here.\n       */\n      if (allowSpread) {\n        nodeStart.inexact = inexact;\n      }\n\n      const out = this.finishNode(nodeStart, \"ObjectTypeAnnotation\");\n\n      this.state.inType = oldInType;\n\n      return out;\n    }\n\n    flowParseObjectTypeProperty(\n      node: N.FlowObjectTypeProperty | N.FlowObjectTypeSpreadProperty,\n      isStatic: boolean,\n      protoStart: ?number,\n      variance: ?N.FlowVariance,\n      kind: string,\n      allowSpread: boolean,\n      allowInexact: boolean,\n    ): (N.FlowObjectTypeProperty | N.FlowObjectTypeSpreadProperty) | null {\n      if (this.eat(tt.ellipsis)) {\n        const isInexactToken =\n          this.match(tt.comma) ||\n          this.match(tt.semi) ||\n          this.match(tt.braceR) ||\n          this.match(tt.braceBarR);\n\n        if (isInexactToken) {\n          if (!allowSpread) {\n            this.raise(\n              this.state.lastTokStart,\n              FlowErrors.InexactInsideNonObject,\n            );\n          } else if (!allowInexact) {\n            this.raise(this.state.lastTokStart, FlowErrors.InexactInsideExact);\n          }\n          if (variance) {\n            this.raise(variance.start, FlowErrors.InexactVariance);\n          }\n\n          return null;\n        }\n\n        if (!allowSpread) {\n          this.raise(this.state.lastTokStart, FlowErrors.UnexpectedSpreadType);\n        }\n        if (protoStart != null) {\n          this.unexpected(protoStart);\n        }\n        if (variance) {\n          this.raise(variance.start, FlowErrors.SpreadVariance);\n        }\n\n        node.argument = this.flowParseType();\n        return this.finishNode(node, \"ObjectTypeSpreadProperty\");\n      } else {\n        node.key = this.flowParseObjectPropertyKey();\n        node.static = isStatic;\n        node.proto = protoStart != null;\n        node.kind = kind;\n\n        let optional = false;\n        if (this.isRelational(\"<\") || this.match(tt.parenL)) {\n          // This is a method property\n          node.method = true;\n\n          if (protoStart != null) {\n            this.unexpected(protoStart);\n          }\n          if (variance) {\n            this.unexpected(variance.start);\n          }\n\n          node.value = this.flowParseObjectTypeMethodish(\n            this.startNodeAt(node.start, node.loc.start),\n          );\n          if (kind === \"get\" || kind === \"set\") {\n            this.flowCheckGetterSetterParams(node);\n          }\n        } else {\n          if (kind !== \"init\") this.unexpected();\n\n          node.method = false;\n\n          if (this.eat(tt.question)) {\n            optional = true;\n          }\n          node.value = this.flowParseTypeInitialiser();\n          node.variance = variance;\n        }\n\n        node.optional = optional;\n\n        return this.finishNode(node, \"ObjectTypeProperty\");\n      }\n    }\n\n    // This is similar to checkGetterSetterParams, but as\n    // @babel/parser uses non estree properties we cannot reuse it here\n    flowCheckGetterSetterParams(\n      property: N.FlowObjectTypeProperty | N.FlowObjectTypeSpreadProperty,\n    ): void {\n      const paramCount = property.kind === \"get\" ? 0 : 1;\n      const start = property.start;\n      const length =\n        property.value.params.length + (property.value.rest ? 1 : 0);\n      if (length !== paramCount) {\n        if (property.kind === \"get\") {\n          this.raise(start, Errors.BadGetterArity);\n        } else {\n          this.raise(start, Errors.BadSetterArity);\n        }\n      }\n\n      if (property.kind === \"set\" && property.value.rest) {\n        this.raise(start, Errors.BadSetterRestParameter);\n      }\n    }\n\n    flowObjectTypeSemicolon(): void {\n      if (\n        !this.eat(tt.semi) &&\n        !this.eat(tt.comma) &&\n        !this.match(tt.braceR) &&\n        !this.match(tt.braceBarR)\n      ) {\n        this.unexpected();\n      }\n    }\n\n    flowParseQualifiedTypeIdentifier(\n      startPos?: number,\n      startLoc?: Position,\n      id?: N.Identifier,\n    ): N.FlowQualifiedTypeIdentifier {\n      startPos = startPos || this.state.start;\n      startLoc = startLoc || this.state.startLoc;\n      let node = id || this.flowParseRestrictedIdentifier(true);\n\n      while (this.eat(tt.dot)) {\n        const node2 = this.startNodeAt(startPos, startLoc);\n        node2.qualification = node;\n        node2.id = this.flowParseRestrictedIdentifier(true);\n        node = this.finishNode(node2, \"QualifiedTypeIdentifier\");\n      }\n\n      return node;\n    }\n\n    flowParseGenericType(\n      startPos: number,\n      startLoc: Position,\n      id: N.Identifier,\n    ): N.FlowGenericTypeAnnotation {\n      const node = this.startNodeAt(startPos, startLoc);\n\n      node.typeParameters = null;\n      node.id = this.flowParseQualifiedTypeIdentifier(startPos, startLoc, id);\n\n      if (this.isRelational(\"<\")) {\n        node.typeParameters = this.flowParseTypeParameterInstantiation();\n      }\n\n      return this.finishNode(node, \"GenericTypeAnnotation\");\n    }\n\n    flowParseTypeofType(): N.FlowTypeofTypeAnnotation {\n      const node = this.startNode();\n      this.expect(tt._typeof);\n      node.argument = this.flowParsePrimaryType();\n      return this.finishNode(node, \"TypeofTypeAnnotation\");\n    }\n\n    flowParseTupleType(): N.FlowTupleTypeAnnotation {\n      const node = this.startNode();\n      node.types = [];\n      this.expect(tt.bracketL);\n      // We allow trailing commas\n      while (this.state.pos < this.length && !this.match(tt.bracketR)) {\n        node.types.push(this.flowParseType());\n        if (this.match(tt.bracketR)) break;\n        this.expect(tt.comma);\n      }\n      this.expect(tt.bracketR);\n      return this.finishNode(node, \"TupleTypeAnnotation\");\n    }\n\n    flowParseFunctionTypeParam(): N.FlowFunctionTypeParam {\n      let name = null;\n      let optional = false;\n      let typeAnnotation = null;\n      const node = this.startNode();\n      const lh = this.lookahead();\n      if (lh.type === tt.colon || lh.type === tt.question) {\n        name = this.parseIdentifier();\n        if (this.eat(tt.question)) {\n          optional = true;\n        }\n        typeAnnotation = this.flowParseTypeInitialiser();\n      } else {\n        typeAnnotation = this.flowParseType();\n      }\n      node.name = name;\n      node.optional = optional;\n      node.typeAnnotation = typeAnnotation;\n      return this.finishNode(node, \"FunctionTypeParam\");\n    }\n\n    reinterpretTypeAsFunctionTypeParam(\n      type: N.FlowType,\n    ): N.FlowFunctionTypeParam {\n      const node = this.startNodeAt(type.start, type.loc.start);\n      node.name = null;\n      node.optional = false;\n      node.typeAnnotation = type;\n      return this.finishNode(node, \"FunctionTypeParam\");\n    }\n\n    flowParseFunctionTypeParams(\n      params: N.FlowFunctionTypeParam[] = [],\n    ): { params: N.FlowFunctionTypeParam[], rest: ?N.FlowFunctionTypeParam } {\n      let rest: ?N.FlowFunctionTypeParam = null;\n      while (!this.match(tt.parenR) && !this.match(tt.ellipsis)) {\n        params.push(this.flowParseFunctionTypeParam());\n        if (!this.match(tt.parenR)) {\n          this.expect(tt.comma);\n        }\n      }\n      if (this.eat(tt.ellipsis)) {\n        rest = this.flowParseFunctionTypeParam();\n      }\n      return { params, rest };\n    }\n\n    flowIdentToTypeAnnotation(\n      startPos: number,\n      startLoc: Position,\n      node: N.FlowTypeAnnotation,\n      id: N.Identifier,\n    ): N.FlowTypeAnnotation {\n      switch (id.name) {\n        case \"any\":\n          return this.finishNode(node, \"AnyTypeAnnotation\");\n\n        case \"bool\":\n        case \"boolean\":\n          return this.finishNode(node, \"BooleanTypeAnnotation\");\n\n        case \"mixed\":\n          return this.finishNode(node, \"MixedTypeAnnotation\");\n\n        case \"empty\":\n          return this.finishNode(node, \"EmptyTypeAnnotation\");\n\n        case \"number\":\n          return this.finishNode(node, \"NumberTypeAnnotation\");\n\n        case \"string\":\n          return this.finishNode(node, \"StringTypeAnnotation\");\n\n        case \"symbol\":\n          return this.finishNode(node, \"SymbolTypeAnnotation\");\n\n        default:\n          this.checkNotUnderscore(id.name);\n          return this.flowParseGenericType(startPos, startLoc, id);\n      }\n    }\n\n    // The parsing of types roughly parallels the parsing of expressions, and\n    // primary types are kind of like primary expressions...they're the\n    // primitives with which other types are constructed.\n    flowParsePrimaryType(): N.FlowTypeAnnotation {\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      const node = this.startNode();\n      let tmp;\n      let type;\n      let isGroupedType = false;\n      const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n\n      switch (this.state.type) {\n        case tt.name:\n          if (this.isContextual(\"interface\")) {\n            return this.flowParseInterfaceType();\n          }\n\n          return this.flowIdentToTypeAnnotation(\n            startPos,\n            startLoc,\n            node,\n            this.parseIdentifier(),\n          );\n\n        case tt.braceL:\n          return this.flowParseObjectType({\n            allowStatic: false,\n            allowExact: false,\n            allowSpread: true,\n            allowProto: false,\n            allowInexact: true,\n          });\n\n        case tt.braceBarL:\n          return this.flowParseObjectType({\n            allowStatic: false,\n            allowExact: true,\n            allowSpread: true,\n            allowProto: false,\n            allowInexact: false,\n          });\n\n        case tt.bracketL:\n          this.state.noAnonFunctionType = false;\n          type = this.flowParseTupleType();\n          this.state.noAnonFunctionType = oldNoAnonFunctionType;\n          return type;\n\n        case tt.relational:\n          if (this.state.value === \"<\") {\n            node.typeParameters = this.flowParseTypeParameterDeclaration();\n            this.expect(tt.parenL);\n            tmp = this.flowParseFunctionTypeParams();\n            node.params = tmp.params;\n            node.rest = tmp.rest;\n            this.expect(tt.parenR);\n\n            this.expect(tt.arrow);\n\n            node.returnType = this.flowParseType();\n\n            return this.finishNode(node, \"FunctionTypeAnnotation\");\n          }\n          break;\n\n        case tt.parenL:\n          this.next();\n\n          // Check to see if this is actually a grouped type\n          if (!this.match(tt.parenR) && !this.match(tt.ellipsis)) {\n            if (this.match(tt.name)) {\n              const token = this.lookahead().type;\n              isGroupedType = token !== tt.question && token !== tt.colon;\n            } else {\n              isGroupedType = true;\n            }\n          }\n\n          if (isGroupedType) {\n            this.state.noAnonFunctionType = false;\n            type = this.flowParseType();\n            this.state.noAnonFunctionType = oldNoAnonFunctionType;\n\n            // A `,` or a `) =>` means this is an anonymous function type\n            if (\n              this.state.noAnonFunctionType ||\n              !(\n                this.match(tt.comma) ||\n                (this.match(tt.parenR) && this.lookahead().type === tt.arrow)\n              )\n            ) {\n              this.expect(tt.parenR);\n              return type;\n            } else {\n              // Eat a comma if there is one\n              this.eat(tt.comma);\n            }\n          }\n\n          if (type) {\n            tmp = this.flowParseFunctionTypeParams([\n              this.reinterpretTypeAsFunctionTypeParam(type),\n            ]);\n          } else {\n            tmp = this.flowParseFunctionTypeParams();\n          }\n\n          node.params = tmp.params;\n          node.rest = tmp.rest;\n\n          this.expect(tt.parenR);\n\n          this.expect(tt.arrow);\n\n          node.returnType = this.flowParseType();\n\n          node.typeParameters = null;\n\n          return this.finishNode(node, \"FunctionTypeAnnotation\");\n\n        case tt.string:\n          return this.parseLiteral(\n            this.state.value,\n            \"StringLiteralTypeAnnotation\",\n          );\n\n        case tt._true:\n        case tt._false:\n          node.value = this.match(tt._true);\n          this.next();\n          return this.finishNode(node, \"BooleanLiteralTypeAnnotation\");\n\n        case tt.plusMin:\n          if (this.state.value === \"-\") {\n            this.next();\n            if (this.match(tt.num)) {\n              return this.parseLiteral(\n                -this.state.value,\n                \"NumberLiteralTypeAnnotation\",\n                node.start,\n                node.loc.start,\n              );\n            }\n\n            if (this.match(tt.bigint)) {\n              return this.parseLiteral(\n                -this.state.value,\n                \"BigIntLiteralTypeAnnotation\",\n                node.start,\n                node.loc.start,\n              );\n            }\n\n            throw this.raise(\n              this.state.start,\n              FlowErrors.UnexpectedSubtractionOperand,\n            );\n          }\n\n          throw this.unexpected();\n        case tt.num:\n          return this.parseLiteral(\n            this.state.value,\n            \"NumberLiteralTypeAnnotation\",\n          );\n\n        case tt.bigint:\n          return this.parseLiteral(\n            this.state.value,\n            \"BigIntLiteralTypeAnnotation\",\n          );\n\n        case tt._void:\n          this.next();\n          return this.finishNode(node, \"VoidTypeAnnotation\");\n\n        case tt._null:\n          this.next();\n          return this.finishNode(node, \"NullLiteralTypeAnnotation\");\n\n        case tt._this:\n          this.next();\n          return this.finishNode(node, \"ThisTypeAnnotation\");\n\n        case tt.star:\n          this.next();\n          return this.finishNode(node, \"ExistsTypeAnnotation\");\n\n        default:\n          if (this.state.type.keyword === \"typeof\") {\n            return this.flowParseTypeofType();\n          } else if (this.state.type.keyword) {\n            const label = this.state.type.label;\n            this.next();\n            return super.createIdentifier(node, label);\n          }\n      }\n\n      throw this.unexpected();\n    }\n\n    flowParsePostfixType(): N.FlowTypeAnnotation {\n      const startPos = this.state.start,\n        startLoc = this.state.startLoc;\n      let type = this.flowParsePrimaryType();\n      while (this.match(tt.bracketL) && !this.canInsertSemicolon()) {\n        const node = this.startNodeAt(startPos, startLoc);\n        node.elementType = type;\n        this.expect(tt.bracketL);\n        this.expect(tt.bracketR);\n        type = this.finishNode(node, \"ArrayTypeAnnotation\");\n      }\n      return type;\n    }\n\n    flowParsePrefixType(): N.FlowTypeAnnotation {\n      const node = this.startNode();\n      if (this.eat(tt.question)) {\n        node.typeAnnotation = this.flowParsePrefixType();\n        return this.finishNode(node, \"NullableTypeAnnotation\");\n      } else {\n        return this.flowParsePostfixType();\n      }\n    }\n\n    flowParseAnonFunctionWithoutParens(): N.FlowTypeAnnotation {\n      const param = this.flowParsePrefixType();\n      if (!this.state.noAnonFunctionType && this.eat(tt.arrow)) {\n        // TODO: This should be a type error. Passing in a SourceLocation, and it expects a Position.\n        const node = this.startNodeAt(param.start, param.loc.start);\n        node.params = [this.reinterpretTypeAsFunctionTypeParam(param)];\n        node.rest = null;\n        node.returnType = this.flowParseType();\n        node.typeParameters = null;\n        return this.finishNode(node, \"FunctionTypeAnnotation\");\n      }\n      return param;\n    }\n\n    flowParseIntersectionType(): N.FlowTypeAnnotation {\n      const node = this.startNode();\n      this.eat(tt.bitwiseAND);\n      const type = this.flowParseAnonFunctionWithoutParens();\n      node.types = [type];\n      while (this.eat(tt.bitwiseAND)) {\n        node.types.push(this.flowParseAnonFunctionWithoutParens());\n      }\n      return node.types.length === 1\n        ? type\n        : this.finishNode(node, \"IntersectionTypeAnnotation\");\n    }\n\n    flowParseUnionType(): N.FlowTypeAnnotation {\n      const node = this.startNode();\n      this.eat(tt.bitwiseOR);\n      const type = this.flowParseIntersectionType();\n      node.types = [type];\n      while (this.eat(tt.bitwiseOR)) {\n        node.types.push(this.flowParseIntersectionType());\n      }\n      return node.types.length === 1\n        ? type\n        : this.finishNode(node, \"UnionTypeAnnotation\");\n    }\n\n    flowParseType(): N.FlowTypeAnnotation {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      const type = this.flowParseUnionType();\n      this.state.inType = oldInType;\n      // Ensure that a brace after a function generic type annotation is a\n      // statement, except in arrow functions (noAnonFunctionType)\n      this.state.exprAllowed =\n        this.state.exprAllowed || this.state.noAnonFunctionType;\n      return type;\n    }\n\n    flowParseTypeOrImplicitInstantiation(): N.FlowTypeAnnotation {\n      if (this.state.type === tt.name && this.state.value === \"_\") {\n        const startPos = this.state.start;\n        const startLoc = this.state.startLoc;\n        const node = this.parseIdentifier();\n        return this.flowParseGenericType(startPos, startLoc, node);\n      } else {\n        return this.flowParseType();\n      }\n    }\n\n    flowParseTypeAnnotation(): N.FlowTypeAnnotation {\n      const node = this.startNode();\n      node.typeAnnotation = this.flowParseTypeInitialiser();\n      return this.finishNode(node, \"TypeAnnotation\");\n    }\n\n    flowParseTypeAnnotatableIdentifier(\n      allowPrimitiveOverride?: boolean,\n    ): N.Identifier {\n      const ident = allowPrimitiveOverride\n        ? this.parseIdentifier()\n        : this.flowParseRestrictedIdentifier();\n      if (this.match(tt.colon)) {\n        ident.typeAnnotation = this.flowParseTypeAnnotation();\n        this.resetEndLocation(ident);\n      }\n      return ident;\n    }\n\n    typeCastToParameter(node: N.Node): N.Node {\n      node.expression.typeAnnotation = node.typeAnnotation;\n\n      this.resetEndLocation(\n        node.expression,\n        node.typeAnnotation.end,\n        node.typeAnnotation.loc.end,\n      );\n\n      return node.expression;\n    }\n\n    flowParseVariance(): ?N.FlowVariance {\n      let variance = null;\n      if (this.match(tt.plusMin)) {\n        variance = this.startNode();\n        if (this.state.value === \"+\") {\n          variance.kind = \"plus\";\n        } else {\n          variance.kind = \"minus\";\n        }\n        this.next();\n        this.finishNode(variance, \"Variance\");\n      }\n      return variance;\n    }\n\n    // ==================================\n    // Overrides\n    // ==================================\n\n    parseFunctionBody(\n      node: N.Function,\n      allowExpressionBody: ?boolean,\n      isMethod?: boolean = false,\n    ): void {\n      if (allowExpressionBody) {\n        return this.forwardNoArrowParamsConversionAt(node, () =>\n          super.parseFunctionBody(node, true, isMethod),\n        );\n      }\n\n      return super.parseFunctionBody(node, false, isMethod);\n    }\n\n    parseFunctionBodyAndFinish(\n      node: N.BodilessFunctionOrMethodBase,\n      type: string,\n      isMethod?: boolean = false,\n    ): void {\n      if (this.match(tt.colon)) {\n        const typeNode = this.startNode();\n\n        [\n          // $FlowFixMe (destructuring not supported yet)\n          typeNode.typeAnnotation,\n          // $FlowFixMe (destructuring not supported yet)\n          node.predicate,\n        ] = this.flowParseTypeAndPredicateInitialiser();\n\n        node.returnType = typeNode.typeAnnotation\n          ? this.finishNode(typeNode, \"TypeAnnotation\")\n          : null;\n      }\n\n      super.parseFunctionBodyAndFinish(node, type, isMethod);\n    }\n\n    // interfaces and enums\n    parseStatement(context: ?string, topLevel?: boolean): N.Statement {\n      // strict mode handling of `interface` since it's a reserved word\n      if (\n        this.state.strict &&\n        this.match(tt.name) &&\n        this.state.value === \"interface\"\n      ) {\n        const node = this.startNode();\n        this.next();\n        return this.flowParseInterface(node);\n      } else if (this.shouldParseEnums() && this.isContextual(\"enum\")) {\n        const node = this.startNode();\n        this.next();\n        return this.flowParseEnumDeclaration(node);\n      } else {\n        const stmt = super.parseStatement(context, topLevel);\n        // We will parse a flow pragma in any comment before the first statement.\n        if (this.flowPragma === undefined && !this.isValidDirective(stmt)) {\n          this.flowPragma = null;\n        }\n        return stmt;\n      }\n    }\n\n    // declares, interfaces and type aliases\n    parseExpressionStatement(\n      node: N.ExpressionStatement,\n      expr: N.Expression,\n    ): N.ExpressionStatement {\n      if (expr.type === \"Identifier\") {\n        if (expr.name === \"declare\") {\n          if (\n            this.match(tt._class) ||\n            this.match(tt.name) ||\n            this.match(tt._function) ||\n            this.match(tt._var) ||\n            this.match(tt._export)\n          ) {\n            return this.flowParseDeclare(node);\n          }\n        } else if (this.match(tt.name)) {\n          if (expr.name === \"interface\") {\n            return this.flowParseInterface(node);\n          } else if (expr.name === \"type\") {\n            return this.flowParseTypeAlias(node);\n          } else if (expr.name === \"opaque\") {\n            return this.flowParseOpaqueType(node, false);\n          }\n        }\n      }\n\n      return super.parseExpressionStatement(node, expr);\n    }\n\n    // export type\n    shouldParseExportDeclaration(): boolean {\n      return (\n        this.isContextual(\"type\") ||\n        this.isContextual(\"interface\") ||\n        this.isContextual(\"opaque\") ||\n        (this.shouldParseEnums() && this.isContextual(\"enum\")) ||\n        super.shouldParseExportDeclaration()\n      );\n    }\n\n    isExportDefaultSpecifier(): boolean {\n      if (\n        this.match(tt.name) &&\n        (this.state.value === \"type\" ||\n          this.state.value === \"interface\" ||\n          this.state.value === \"opaque\" ||\n          (this.shouldParseEnums() && this.state.value === \"enum\"))\n      ) {\n        return false;\n      }\n\n      return super.isExportDefaultSpecifier();\n    }\n\n    parseExportDefaultExpression(): N.Expression | N.Declaration {\n      if (this.shouldParseEnums() && this.isContextual(\"enum\")) {\n        const node = this.startNode();\n        this.next();\n        return this.flowParseEnumDeclaration(node);\n      }\n      return super.parseExportDefaultExpression();\n    }\n\n    parseConditional(\n      expr: N.Expression,\n      noIn: ?boolean,\n      startPos: number,\n      startLoc: Position,\n      refNeedsArrowPos?: ?Pos,\n    ): N.Expression {\n      if (!this.match(tt.question)) return expr;\n\n      // only use the expensive \"tryParse\" method if there is a question mark\n      // and if we come from inside parens\n      if (refNeedsArrowPos) {\n        const result = this.tryParse(() =>\n          super.parseConditional(expr, noIn, startPos, startLoc),\n        );\n\n        if (!result.node) {\n          // $FlowIgnore\n          refNeedsArrowPos.start = result.error.pos || this.state.start;\n          return expr;\n        }\n\n        if (result.error) this.state = result.failState;\n        return result.node;\n      }\n\n      this.expect(tt.question);\n      const state = this.state.clone();\n      const originalNoArrowAt = this.state.noArrowAt;\n      const node = this.startNodeAt(startPos, startLoc);\n      let { consequent, failed } = this.tryParseConditionalConsequent();\n      let [valid, invalid] = this.getArrowLikeExpressions(consequent);\n\n      if (failed || invalid.length > 0) {\n        const noArrowAt = [...originalNoArrowAt];\n\n        if (invalid.length > 0) {\n          this.state = state;\n          this.state.noArrowAt = noArrowAt;\n\n          for (let i = 0; i < invalid.length; i++) {\n            noArrowAt.push(invalid[i].start);\n          }\n\n          ({ consequent, failed } = this.tryParseConditionalConsequent());\n          [valid, invalid] = this.getArrowLikeExpressions(consequent);\n        }\n\n        if (failed && valid.length > 1) {\n          // if there are two or more possible correct ways of parsing, throw an\n          // error.\n          // e.g.   Source: a ? (b): c => (d): e => f\n          //      Result 1: a ? b : (c => ((d): e => f))\n          //      Result 2: a ? ((b): c => d) : (e => f)\n          this.raise(state.start, FlowErrors.AmbiguousConditionalArrow);\n        }\n\n        if (failed && valid.length === 1) {\n          this.state = state;\n          this.state.noArrowAt = noArrowAt.concat(valid[0].start);\n          ({ consequent, failed } = this.tryParseConditionalConsequent());\n        }\n      }\n\n      this.getArrowLikeExpressions(consequent, true);\n\n      this.state.noArrowAt = originalNoArrowAt;\n      this.expect(tt.colon);\n\n      node.test = expr;\n      node.consequent = consequent;\n      node.alternate = this.forwardNoArrowParamsConversionAt(node, () =>\n        this.parseMaybeAssign(noIn, undefined, undefined, undefined),\n      );\n\n      return this.finishNode(node, \"ConditionalExpression\");\n    }\n\n    tryParseConditionalConsequent(): {\n      consequent: N.Expression,\n      failed: boolean,\n    } {\n      this.state.noArrowParamsConversionAt.push(this.state.start);\n\n      const consequent = this.parseMaybeAssign();\n      const failed = !this.match(tt.colon);\n\n      this.state.noArrowParamsConversionAt.pop();\n\n      return { consequent, failed };\n    }\n\n    // Given an expression, walks through out its arrow functions whose body is\n    // an expression and through out conditional expressions. It returns every\n    // function which has been parsed with a return type but could have been\n    // parenthesized expressions.\n    // These functions are separated into two arrays: one containing the ones\n    // whose parameters can be converted to assignable lists, one containing the\n    // others.\n    getArrowLikeExpressions(\n      node: N.Expression,\n      disallowInvalid?: boolean,\n    ): [N.ArrowFunctionExpression[], N.ArrowFunctionExpression[]] {\n      const stack = [node];\n      const arrows: N.ArrowFunctionExpression[] = [];\n\n      while (stack.length !== 0) {\n        const node = stack.pop();\n        if (node.type === \"ArrowFunctionExpression\") {\n          if (node.typeParameters || !node.returnType) {\n            // This is an arrow expression without ambiguity, so check its parameters\n            this.finishArrowValidation(node);\n          } else {\n            arrows.push(node);\n          }\n          stack.push(node.body);\n        } else if (node.type === \"ConditionalExpression\") {\n          stack.push(node.consequent);\n          stack.push(node.alternate);\n        }\n      }\n\n      if (disallowInvalid) {\n        arrows.forEach(node => this.finishArrowValidation(node));\n        return [arrows, []];\n      }\n\n      return partition(arrows, node =>\n        node.params.every(param => this.isAssignable(param, true)),\n      );\n    }\n\n    finishArrowValidation(node: N.ArrowFunctionExpression) {\n      this.toAssignableList(\n        // node.params is Expression[] instead of $ReadOnlyArray<Pattern> because it\n        // has not been converted yet.\n        ((node.params: any): N.Expression[]),\n        node.extra?.trailingComma,\n      );\n      // Enter scope, as checkParams defines bindings\n      this.scope.enter(SCOPE_FUNCTION | SCOPE_ARROW);\n      // Use super's method to force the parameters to be checked\n      super.checkParams(node, false, true);\n      this.scope.exit();\n    }\n\n    forwardNoArrowParamsConversionAt<T>(node: N.Node, parse: () => T): T {\n      let result: T;\n      if (this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {\n        this.state.noArrowParamsConversionAt.push(this.state.start);\n        result = parse();\n        this.state.noArrowParamsConversionAt.pop();\n      } else {\n        result = parse();\n      }\n\n      return result;\n    }\n\n    parseParenItem(\n      node: N.Expression,\n      startPos: number,\n      startLoc: Position,\n    ): N.Expression {\n      node = super.parseParenItem(node, startPos, startLoc);\n      if (this.eat(tt.question)) {\n        node.optional = true;\n        // Include questionmark in location of node\n        // Don't use this.finishNode() as otherwise we might process comments twice and\n        // include already consumed parens\n        this.resetEndLocation(node);\n      }\n\n      if (this.match(tt.colon)) {\n        const typeCastNode = this.startNodeAt(startPos, startLoc);\n        typeCastNode.expression = node;\n        typeCastNode.typeAnnotation = this.flowParseTypeAnnotation();\n\n        return this.finishNode(typeCastNode, \"TypeCastExpression\");\n      }\n\n      return node;\n    }\n\n    assertModuleNodeAllowed(node: N.Node) {\n      if (\n        (node.type === \"ImportDeclaration\" &&\n          (node.importKind === \"type\" || node.importKind === \"typeof\")) ||\n        (node.type === \"ExportNamedDeclaration\" &&\n          node.exportKind === \"type\") ||\n        (node.type === \"ExportAllDeclaration\" && node.exportKind === \"type\")\n      ) {\n        // Allow Flowtype imports and exports in all conditions because\n        // Flow itself does not care about 'sourceType'.\n        return;\n      }\n\n      super.assertModuleNodeAllowed(node);\n    }\n\n    parseExport(node: N.Node): N.AnyExport {\n      const decl = super.parseExport(node);\n      if (\n        decl.type === \"ExportNamedDeclaration\" ||\n        decl.type === \"ExportAllDeclaration\"\n      ) {\n        decl.exportKind = decl.exportKind || \"value\";\n      }\n      return decl;\n    }\n\n    parseExportDeclaration(node: N.ExportNamedDeclaration): ?N.Declaration {\n      if (this.isContextual(\"type\")) {\n        node.exportKind = \"type\";\n\n        const declarationNode = this.startNode();\n        this.next();\n\n        if (this.match(tt.braceL)) {\n          // export type { foo, bar };\n          node.specifiers = this.parseExportSpecifiers();\n          this.parseExportFrom(node);\n          return null;\n        } else {\n          // export type Foo = Bar;\n          return this.flowParseTypeAlias(declarationNode);\n        }\n      } else if (this.isContextual(\"opaque\")) {\n        node.exportKind = \"type\";\n\n        const declarationNode = this.startNode();\n        this.next();\n        // export opaque type Foo = Bar;\n        return this.flowParseOpaqueType(declarationNode, false);\n      } else if (this.isContextual(\"interface\")) {\n        node.exportKind = \"type\";\n        const declarationNode = this.startNode();\n        this.next();\n        return this.flowParseInterface(declarationNode);\n      } else if (this.shouldParseEnums() && this.isContextual(\"enum\")) {\n        node.exportKind = \"value\";\n        const declarationNode = this.startNode();\n        this.next();\n        return this.flowParseEnumDeclaration(declarationNode);\n      } else {\n        return super.parseExportDeclaration(node);\n      }\n    }\n\n    eatExportStar(node: N.Node): boolean {\n      if (super.eatExportStar(...arguments)) return true;\n\n      if (this.isContextual(\"type\") && this.lookahead().type === tt.star) {\n        node.exportKind = \"type\";\n        this.next();\n        this.next();\n        return true;\n      }\n\n      return false;\n    }\n\n    maybeParseExportNamespaceSpecifier(node: N.Node): boolean {\n      const pos = this.state.start;\n      const hasNamespace = super.maybeParseExportNamespaceSpecifier(node);\n      if (hasNamespace && node.exportKind === \"type\") {\n        this.unexpected(pos);\n      }\n      return hasNamespace;\n    }\n\n    parseClassId(node: N.Class, isStatement: boolean, optionalId: ?boolean) {\n      super.parseClassId(node, isStatement, optionalId);\n      if (this.isRelational(\"<\")) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n    }\n\n    parseClassMember(\n      classBody: N.ClassBody,\n      member: any,\n      state: { hadConstructor: boolean },\n      constructorAllowsSuper: boolean,\n    ): void {\n      const pos = this.state.start;\n      if (this.isContextual(\"declare\")) {\n        if (this.parseClassMemberFromModifier(classBody, member)) {\n          // 'declare' is a class element name\n          return;\n        }\n\n        member.declare = true;\n      }\n\n      super.parseClassMember(classBody, member, state, constructorAllowsSuper);\n\n      if (member.declare) {\n        if (\n          member.type !== \"ClassProperty\" &&\n          member.type !== \"ClassPrivateProperty\"\n        ) {\n          this.raise(pos, FlowErrors.DeclareClassElement);\n        } else if (member.value) {\n          this.raise(\n            member.value.start,\n            FlowErrors.DeclareClassFieldInitializer,\n          );\n        }\n      }\n    }\n\n    // ensure that inside flow types, we bypass the jsx parser plugin\n    getTokenFromCode(code: number): void {\n      const next = this.input.charCodeAt(this.state.pos + 1);\n      if (code === charCodes.leftCurlyBrace && next === charCodes.verticalBar) {\n        return this.finishOp(tt.braceBarL, 2);\n      } else if (\n        this.state.inType &&\n        (code === charCodes.greaterThan || code === charCodes.lessThan)\n      ) {\n        return this.finishOp(tt.relational, 1);\n      } else if (isIteratorStart(code, next)) {\n        this.state.isIterator = true;\n        return super.readWord();\n      } else {\n        return super.getTokenFromCode(code);\n      }\n    }\n\n    isAssignable(node: N.Node, isBinding?: boolean): boolean {\n      switch (node.type) {\n        case \"Identifier\":\n        case \"ObjectPattern\":\n        case \"ArrayPattern\":\n        case \"AssignmentPattern\":\n          return true;\n\n        case \"ObjectExpression\": {\n          const last = node.properties.length - 1;\n          return node.properties.every((prop, i) => {\n            return (\n              prop.type !== \"ObjectMethod\" &&\n              (i === last || prop.type === \"SpreadElement\") &&\n              this.isAssignable(prop)\n            );\n          });\n        }\n\n        case \"ObjectProperty\":\n          return this.isAssignable(node.value);\n\n        case \"SpreadElement\":\n          return this.isAssignable(node.argument);\n\n        case \"ArrayExpression\":\n          return node.elements.every(element => this.isAssignable(element));\n\n        case \"AssignmentExpression\":\n          return node.operator === \"=\";\n\n        case \"ParenthesizedExpression\":\n        case \"TypeCastExpression\":\n          return this.isAssignable(node.expression);\n\n        case \"MemberExpression\":\n        case \"OptionalMemberExpression\":\n          return !isBinding;\n\n        default:\n          return false;\n      }\n    }\n\n    toAssignable(node: N.Node): N.Node {\n      if (node.type === \"TypeCastExpression\") {\n        return super.toAssignable(this.typeCastToParameter(node));\n      } else {\n        return super.toAssignable(node);\n      }\n    }\n\n    // turn type casts that we found in function parameter head into type annotated params\n    toAssignableList(\n      exprList: N.Expression[],\n      trailingCommaPos?: ?number,\n    ): $ReadOnlyArray<N.Pattern> {\n      for (let i = 0; i < exprList.length; i++) {\n        const expr = exprList[i];\n        if (expr?.type === \"TypeCastExpression\") {\n          exprList[i] = this.typeCastToParameter(expr);\n        }\n      }\n      return super.toAssignableList(exprList, trailingCommaPos);\n    }\n\n    // this is a list of nodes, from something like a call expression, we need to filter the\n    // type casts that we've found that are illegal in this context\n    toReferencedList(\n      exprList: $ReadOnlyArray<?N.Expression>,\n      isParenthesizedExpr?: boolean,\n    ): $ReadOnlyArray<?N.Expression> {\n      for (let i = 0; i < exprList.length; i++) {\n        const expr = exprList[i];\n        if (\n          expr &&\n          expr.type === \"TypeCastExpression\" &&\n          !expr.extra?.parenthesized &&\n          (exprList.length > 1 || !isParenthesizedExpr)\n        ) {\n          this.raise(expr.typeAnnotation.start, FlowErrors.TypeCastInPattern);\n        }\n      }\n\n      return exprList;\n    }\n\n    checkLVal(\n      expr: N.Expression,\n      bindingType: BindingTypes = BIND_NONE,\n      checkClashes: ?{ [key: string]: boolean },\n      contextDescription: string,\n    ): void {\n      if (expr.type !== \"TypeCastExpression\") {\n        return super.checkLVal(\n          expr,\n          bindingType,\n          checkClashes,\n          contextDescription,\n        );\n      }\n    }\n\n    // parse class property type annotations\n    parseClassProperty(node: N.ClassProperty): N.ClassProperty {\n      if (this.match(tt.colon)) {\n        node.typeAnnotation = this.flowParseTypeAnnotation();\n      }\n      return super.parseClassProperty(node);\n    }\n\n    parseClassPrivateProperty(\n      node: N.ClassPrivateProperty,\n    ): N.ClassPrivateProperty {\n      if (this.match(tt.colon)) {\n        node.typeAnnotation = this.flowParseTypeAnnotation();\n      }\n      return super.parseClassPrivateProperty(node);\n    }\n\n    // determine whether or not we're currently in the position where a class method would appear\n    isClassMethod(): boolean {\n      return this.isRelational(\"<\") || super.isClassMethod();\n    }\n\n    // determine whether or not we're currently in the position where a class property would appear\n    isClassProperty(): boolean {\n      return this.match(tt.colon) || super.isClassProperty();\n    }\n\n    isNonstaticConstructor(method: N.ClassMethod | N.ClassProperty): boolean {\n      return !this.match(tt.colon) && super.isNonstaticConstructor(method);\n    }\n\n    // parse type parameters for class methods\n    pushClassMethod(\n      classBody: N.ClassBody,\n      method: N.ClassMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowsDirectSuper: boolean,\n    ): void {\n      if ((method: $FlowFixMe).variance) {\n        this.unexpected((method: $FlowFixMe).variance.start);\n      }\n      delete (method: $FlowFixMe).variance;\n      if (this.isRelational(\"<\")) {\n        method.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n\n      super.pushClassMethod(\n        classBody,\n        method,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowsDirectSuper,\n      );\n    }\n\n    pushClassPrivateMethod(\n      classBody: N.ClassBody,\n      method: N.ClassPrivateMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n    ): void {\n      if ((method: $FlowFixMe).variance) {\n        this.unexpected((method: $FlowFixMe).variance.start);\n      }\n      delete (method: $FlowFixMe).variance;\n      if (this.isRelational(\"<\")) {\n        method.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n\n      super.pushClassPrivateMethod(classBody, method, isGenerator, isAsync);\n    }\n\n    // parse a the super class type parameters and implements\n    parseClassSuper(node: N.Class): void {\n      super.parseClassSuper(node);\n      if (node.superClass && this.isRelational(\"<\")) {\n        node.superTypeParameters = this.flowParseTypeParameterInstantiation();\n      }\n      if (this.isContextual(\"implements\")) {\n        this.next();\n        const implemented: N.FlowClassImplements[] = (node.implements = []);\n        do {\n          const node = this.startNode();\n          node.id = this.flowParseRestrictedIdentifier(/*liberal*/ true);\n          if (this.isRelational(\"<\")) {\n            node.typeParameters = this.flowParseTypeParameterInstantiation();\n          } else {\n            node.typeParameters = null;\n          }\n          implemented.push(this.finishNode(node, \"ClassImplements\"));\n        } while (this.eat(tt.comma));\n      }\n    }\n\n    parsePropertyName(\n      node: N.ObjectOrClassMember | N.ClassMember | N.TsNamedTypeElementBase,\n      isPrivateNameAllowed: boolean,\n    ): N.Identifier {\n      const variance = this.flowParseVariance();\n      const key = super.parsePropertyName(node, isPrivateNameAllowed);\n      // $FlowIgnore (\"variance\" not defined on TsNamedTypeElementBase)\n      node.variance = variance;\n      return key;\n    }\n\n    // parse type parameters for object method shorthand\n    parseObjPropValue(\n      prop: N.ObjectMember,\n      startPos: ?number,\n      startLoc: ?Position,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isPattern: boolean,\n      refExpressionErrors: ?ExpressionErrors,\n      containsEsc: boolean,\n    ): void {\n      if ((prop: $FlowFixMe).variance) {\n        this.unexpected((prop: $FlowFixMe).variance.start);\n      }\n      delete (prop: $FlowFixMe).variance;\n\n      let typeParameters;\n\n      // method shorthand\n      if (this.isRelational(\"<\")) {\n        typeParameters = this.flowParseTypeParameterDeclaration();\n        if (!this.match(tt.parenL)) this.unexpected();\n      }\n\n      super.parseObjPropValue(\n        prop,\n        startPos,\n        startLoc,\n        isGenerator,\n        isAsync,\n        isPattern,\n        refExpressionErrors,\n        containsEsc,\n      );\n\n      // add typeParameters if we found them\n      if (typeParameters) {\n        (prop.value || prop).typeParameters = typeParameters;\n      }\n    }\n\n    parseAssignableListItemTypes(param: N.Pattern): N.Pattern {\n      if (this.eat(tt.question)) {\n        if (param.type !== \"Identifier\") {\n          this.raise(param.start, FlowErrors.OptionalBindingPattern);\n        }\n\n        ((param: any): N.Identifier).optional = true;\n      }\n      if (this.match(tt.colon)) {\n        param.typeAnnotation = this.flowParseTypeAnnotation();\n      }\n      this.resetEndLocation(param);\n      return param;\n    }\n\n    parseMaybeDefault(\n      startPos?: ?number,\n      startLoc?: ?Position,\n      left?: ?N.Pattern,\n    ): N.Pattern {\n      const node = super.parseMaybeDefault(startPos, startLoc, left);\n\n      if (\n        node.type === \"AssignmentPattern\" &&\n        node.typeAnnotation &&\n        node.right.start < node.typeAnnotation.start\n      ) {\n        this.raise(node.typeAnnotation.start, FlowErrors.TypeBeforeInitializer);\n      }\n\n      return node;\n    }\n\n    shouldParseDefaultImport(node: N.ImportDeclaration): boolean {\n      if (!hasTypeImportKind(node)) {\n        return super.shouldParseDefaultImport(node);\n      }\n\n      return isMaybeDefaultImport(this.state);\n    }\n\n    parseImportSpecifierLocal(\n      node: N.ImportDeclaration,\n      specifier: N.Node,\n      type: string,\n      contextDescription: string,\n    ): void {\n      specifier.local = hasTypeImportKind(node)\n        ? this.flowParseRestrictedIdentifier(\n            /* liberal */ true,\n            /* declaration */ true,\n          )\n        : this.parseIdentifier();\n\n      this.checkLVal(\n        specifier.local,\n        BIND_LEXICAL,\n        undefined,\n        contextDescription,\n      );\n      node.specifiers.push(this.finishNode(specifier, type));\n    }\n\n    // parse typeof and type imports\n    maybeParseDefaultImportSpecifier(node: N.ImportDeclaration): boolean {\n      node.importKind = \"value\";\n\n      let kind = null;\n      if (this.match(tt._typeof)) {\n        kind = \"typeof\";\n      } else if (this.isContextual(\"type\")) {\n        kind = \"type\";\n      }\n      if (kind) {\n        const lh = this.lookahead();\n\n        // import type * is not allowed\n        if (kind === \"type\" && lh.type === tt.star) {\n          this.unexpected(lh.start);\n        }\n\n        if (\n          isMaybeDefaultImport(lh) ||\n          lh.type === tt.braceL ||\n          lh.type === tt.star\n        ) {\n          this.next();\n          node.importKind = kind;\n        }\n      }\n\n      return super.maybeParseDefaultImportSpecifier(node);\n    }\n\n    // parse import-type/typeof shorthand\n    parseImportSpecifier(node: N.ImportDeclaration): void {\n      const specifier = this.startNode();\n      const firstIdentLoc = this.state.start;\n      const firstIdent = this.parseIdentifier(true);\n\n      let specifierTypeKind = null;\n      if (firstIdent.name === \"type\") {\n        specifierTypeKind = \"type\";\n      } else if (firstIdent.name === \"typeof\") {\n        specifierTypeKind = \"typeof\";\n      }\n\n      let isBinding = false;\n      if (this.isContextual(\"as\") && !this.isLookaheadContextual(\"as\")) {\n        const as_ident = this.parseIdentifier(true);\n        if (\n          specifierTypeKind !== null &&\n          !this.match(tt.name) &&\n          !this.state.type.keyword\n        ) {\n          // `import {type as ,` or `import {type as }`\n          specifier.imported = as_ident;\n          specifier.importKind = specifierTypeKind;\n          specifier.local = as_ident.__clone();\n        } else {\n          // `import {type as foo`\n          specifier.imported = firstIdent;\n          specifier.importKind = null;\n          specifier.local = this.parseIdentifier();\n        }\n      } else if (\n        specifierTypeKind !== null &&\n        (this.match(tt.name) || this.state.type.keyword)\n      ) {\n        // `import {type foo`\n        specifier.imported = this.parseIdentifier(true);\n        specifier.importKind = specifierTypeKind;\n        if (this.eatContextual(\"as\")) {\n          specifier.local = this.parseIdentifier();\n        } else {\n          isBinding = true;\n          specifier.local = specifier.imported.__clone();\n        }\n      } else {\n        isBinding = true;\n        specifier.imported = firstIdent;\n        specifier.importKind = null;\n        specifier.local = specifier.imported.__clone();\n      }\n\n      const nodeIsTypeImport = hasTypeImportKind(node);\n      const specifierIsTypeImport = hasTypeImportKind(specifier);\n\n      if (nodeIsTypeImport && specifierIsTypeImport) {\n        this.raise(\n          firstIdentLoc,\n          FlowErrors.ImportTypeShorthandOnlyInPureImport,\n        );\n      }\n\n      if (nodeIsTypeImport || specifierIsTypeImport) {\n        this.checkReservedType(\n          specifier.local.name,\n          specifier.local.start,\n          /* declaration */ true,\n        );\n      }\n\n      if (isBinding && !nodeIsTypeImport && !specifierIsTypeImport) {\n        this.checkReservedWord(\n          specifier.local.name,\n          specifier.start,\n          true,\n          true,\n        );\n      }\n\n      this.checkLVal(\n        specifier.local,\n        BIND_LEXICAL,\n        undefined,\n        \"import specifier\",\n      );\n      node.specifiers.push(this.finishNode(specifier, \"ImportSpecifier\"));\n    }\n\n    // parse function type parameters - function foo<T>() {}\n    parseFunctionParams(node: N.Function, allowModifiers?: boolean): void {\n      // $FlowFixMe\n      const kind = node.kind;\n      if (kind !== \"get\" && kind !== \"set\" && this.isRelational(\"<\")) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n      super.parseFunctionParams(node, allowModifiers);\n    }\n\n    // parse flow type annotations on variable declarator heads - let foo: string = bar\n    parseVarId(\n      decl: N.VariableDeclarator,\n      kind: \"var\" | \"let\" | \"const\",\n    ): void {\n      super.parseVarId(decl, kind);\n      if (this.match(tt.colon)) {\n        decl.id.typeAnnotation = this.flowParseTypeAnnotation();\n        this.resetEndLocation(decl.id); // set end position to end of type\n      }\n    }\n\n    // parse the return type of an async arrow function - let foo = (async (): number => {});\n    parseAsyncArrowFromCallExpression(\n      node: N.ArrowFunctionExpression,\n      call: N.CallExpression,\n    ): N.ArrowFunctionExpression {\n      if (this.match(tt.colon)) {\n        const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n        this.state.noAnonFunctionType = true;\n        node.returnType = this.flowParseTypeAnnotation();\n        this.state.noAnonFunctionType = oldNoAnonFunctionType;\n      }\n\n      return super.parseAsyncArrowFromCallExpression(node, call);\n    }\n\n    // todo description\n    shouldParseAsyncArrow(): boolean {\n      return this.match(tt.colon) || super.shouldParseAsyncArrow();\n    }\n\n    // We need to support type parameter declarations for arrow functions. This\n    // is tricky. There are three situations we need to handle\n    //\n    // 1. This is either JSX or an arrow function. We'll try JSX first. If that\n    //    fails, we'll try an arrow function. If that fails, we'll throw the JSX\n    //    error.\n    // 2. This is an arrow function. We'll parse the type parameter declaration,\n    //    parse the rest, make sure the rest is an arrow function, and go from\n    //    there\n    // 3. This is neither. Just call the super method\n    parseMaybeAssign(\n      noIn?: ?boolean,\n      refExpressionErrors?: ?ExpressionErrors,\n      afterLeftParse?: Function,\n      refNeedsArrowPos?: ?Pos,\n    ): N.Expression {\n      let state = null;\n\n      let jsx;\n\n      if (\n        this.hasPlugin(\"jsx\") &&\n        (this.match(tt.jsxTagStart) || this.isRelational(\"<\"))\n      ) {\n        state = this.state.clone();\n\n        jsx = this.tryParse(\n          () =>\n            super.parseMaybeAssign(\n              noIn,\n              refExpressionErrors,\n              afterLeftParse,\n              refNeedsArrowPos,\n            ),\n          state,\n        );\n        /*:: invariant(!jsx.aborted) */\n\n        if (!jsx.error) return jsx.node;\n\n        // Remove `tc.j_expr` and `tc.j_oTag` from context added\n        // by parsing `jsxTagStart` to stop the JSX plugin from\n        // messing with the tokens\n        const { context } = this.state;\n        if (context[context.length - 1] === tc.j_oTag) {\n          context.length -= 2;\n        } else if (context[context.length - 1] === tc.j_expr) {\n          context.length -= 1;\n        }\n      }\n\n      if (jsx?.error || this.isRelational(\"<\")) {\n        state = state || this.state.clone();\n\n        let typeParameters;\n\n        const arrow = this.tryParse(() => {\n          typeParameters = this.flowParseTypeParameterDeclaration();\n\n          const arrowExpression = this.forwardNoArrowParamsConversionAt(\n            typeParameters,\n            () =>\n              super.parseMaybeAssign(\n                noIn,\n                refExpressionErrors,\n                afterLeftParse,\n                refNeedsArrowPos,\n              ),\n          );\n          arrowExpression.typeParameters = typeParameters;\n          this.resetStartLocationFromNode(arrowExpression, typeParameters);\n\n          return arrowExpression;\n        }, state);\n\n        const arrowExpression: ?N.ArrowFunctionExpression =\n          arrow.node?.type === \"ArrowFunctionExpression\" ? arrow.node : null;\n\n        if (!arrow.error && arrowExpression) return arrowExpression;\n\n        // If we are here, both JSX and Flow parsing attemps failed.\n        // Give the precedence to the JSX error, except if JSX had an\n        // unrecoverable error while Flow didn't.\n        // If the error is recoverable, we can only re-report it if there is\n        // a node we can return.\n\n        if (jsx?.node) {\n          /*:: invariant(jsx.failState) */\n          this.state = jsx.failState;\n          return jsx.node;\n        }\n\n        if (arrowExpression) {\n          /*:: invariant(arrow.failState) */\n          this.state = arrow.failState;\n          return arrowExpression;\n        }\n\n        if (jsx?.thrown) throw jsx.error;\n        if (arrow.thrown) throw arrow.error;\n\n        /*:: invariant(typeParameters) */\n        throw this.raise(\n          typeParameters.start,\n          FlowErrors.UnexpectedTokenAfterTypeParameter,\n        );\n      }\n\n      return super.parseMaybeAssign(\n        noIn,\n        refExpressionErrors,\n        afterLeftParse,\n        refNeedsArrowPos,\n      );\n    }\n\n    // handle return types for arrow functions\n    parseArrow(node: N.ArrowFunctionExpression): ?N.ArrowFunctionExpression {\n      if (this.match(tt.colon)) {\n        const result = this.tryParse(() => {\n          const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n          this.state.noAnonFunctionType = true;\n\n          const typeNode = this.startNode();\n\n          [\n            // $FlowFixMe (destructuring not supported yet)\n            typeNode.typeAnnotation,\n            // $FlowFixMe (destructuring not supported yet)\n            node.predicate,\n          ] = this.flowParseTypeAndPredicateInitialiser();\n\n          this.state.noAnonFunctionType = oldNoAnonFunctionType;\n\n          if (this.canInsertSemicolon()) this.unexpected();\n          if (!this.match(tt.arrow)) this.unexpected();\n\n          return typeNode;\n        });\n\n        if (result.thrown) return null;\n        /*:: invariant(result.node) */\n\n        if (result.error) this.state = result.failState;\n\n        // assign after it is clear it is an arrow\n        node.returnType = result.node.typeAnnotation\n          ? this.finishNode(result.node, \"TypeAnnotation\")\n          : null;\n      }\n\n      return super.parseArrow(node);\n    }\n\n    shouldParseArrow(): boolean {\n      return this.match(tt.colon) || super.shouldParseArrow();\n    }\n\n    setArrowFunctionParameters(\n      node: N.ArrowFunctionExpression,\n      params: N.Expression[],\n    ): void {\n      if (this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {\n        node.params = params;\n      } else {\n        super.setArrowFunctionParameters(node, params);\n      }\n    }\n\n    checkParams(\n      node: N.Function,\n      allowDuplicates: boolean,\n      isArrowFunction: ?boolean,\n    ): void {\n      if (\n        isArrowFunction &&\n        this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1\n      ) {\n        return;\n      }\n\n      return super.checkParams(...arguments);\n    }\n\n    parseParenAndDistinguishExpression(canBeArrow: boolean): N.Expression {\n      return super.parseParenAndDistinguishExpression(\n        canBeArrow && this.state.noArrowAt.indexOf(this.state.start) === -1,\n      );\n    }\n\n    parseSubscripts(\n      base: N.Expression,\n      startPos: number,\n      startLoc: Position,\n      noCalls?: ?boolean,\n    ): N.Expression {\n      if (\n        base.type === \"Identifier\" &&\n        base.name === \"async\" &&\n        this.state.noArrowAt.indexOf(startPos) !== -1\n      ) {\n        this.next();\n\n        const node = this.startNodeAt(startPos, startLoc);\n        node.callee = base;\n        node.arguments = this.parseCallExpressionArguments(tt.parenR, false);\n        base = this.finishNode(node, \"CallExpression\");\n      } else if (\n        base.type === \"Identifier\" &&\n        base.name === \"async\" &&\n        this.isRelational(\"<\")\n      ) {\n        const state = this.state.clone();\n        const arrow = this.tryParse(\n          abort =>\n            this.parseAsyncArrowWithTypeParameters(startPos, startLoc) ||\n            abort(),\n          state,\n        );\n\n        if (!arrow.error && !arrow.aborted) return arrow.node;\n\n        const result = this.tryParse(\n          () => super.parseSubscripts(base, startPos, startLoc, noCalls),\n          state,\n        );\n\n        if (result.node && !result.error) return result.node;\n\n        if (arrow.node) {\n          this.state = arrow.failState;\n          return arrow.node;\n        }\n\n        if (result.node) {\n          this.state = result.failState;\n          return result.node;\n        }\n\n        throw arrow.error || result.error;\n      }\n\n      return super.parseSubscripts(base, startPos, startLoc, noCalls);\n    }\n\n    parseSubscript(\n      base: N.Expression,\n      startPos: number,\n      startLoc: Position,\n      noCalls: ?boolean,\n      subscriptState: N.ParseSubscriptState,\n    ): N.Expression {\n      if (this.match(tt.questionDot) && this.isLookaheadRelational(\"<\")) {\n        subscriptState.optionalChainMember = true;\n        if (noCalls) {\n          subscriptState.stop = true;\n          return base;\n        }\n        this.next();\n        const node: N.OptionalCallExpression = this.startNodeAt(\n          startPos,\n          startLoc,\n        );\n        node.callee = base;\n        node.typeArguments = this.flowParseTypeParameterInstantiation();\n        this.expect(tt.parenL);\n        // $FlowFixMe\n        node.arguments = this.parseCallExpressionArguments(tt.parenR, false);\n        node.optional = true;\n        return this.finishCallExpression(node, /* optional */ true);\n      } else if (\n        !noCalls &&\n        this.shouldParseTypes() &&\n        this.isRelational(\"<\")\n      ) {\n        const node = this.startNodeAt(startPos, startLoc);\n        node.callee = base;\n\n        const result = this.tryParse(() => {\n          node.typeArguments = this.flowParseTypeParameterInstantiationCallOrNew();\n          this.expect(tt.parenL);\n          node.arguments = this.parseCallExpressionArguments(tt.parenR, false);\n          if (subscriptState.optionalChainMember) node.optional = false;\n          return this.finishCallExpression(\n            node,\n            subscriptState.optionalChainMember,\n          );\n        });\n\n        if (result.node) {\n          if (result.error) this.state = result.failState;\n          return result.node;\n        }\n      }\n\n      return super.parseSubscript(\n        base,\n        startPos,\n        startLoc,\n        noCalls,\n        subscriptState,\n      );\n    }\n\n    parseNewArguments(node: N.NewExpression): void {\n      let targs = null;\n      if (this.shouldParseTypes() && this.isRelational(\"<\")) {\n        targs = this.tryParse(() =>\n          this.flowParseTypeParameterInstantiationCallOrNew(),\n        ).node;\n      }\n      node.typeArguments = targs;\n\n      super.parseNewArguments(node);\n    }\n\n    parseAsyncArrowWithTypeParameters(\n      startPos: number,\n      startLoc: Position,\n    ): ?N.ArrowFunctionExpression {\n      const node = this.startNodeAt(startPos, startLoc);\n      this.parseFunctionParams(node);\n      if (!this.parseArrow(node)) return;\n      return this.parseArrowExpression(\n        node,\n        /* params */ undefined,\n        /* isAsync */ true,\n      );\n    }\n\n    readToken_mult_modulo(code: number): void {\n      const next = this.input.charCodeAt(this.state.pos + 1);\n      if (\n        code === charCodes.asterisk &&\n        next === charCodes.slash &&\n        this.state.hasFlowComment\n      ) {\n        this.state.hasFlowComment = false;\n        this.state.pos += 2;\n        this.nextToken();\n        return;\n      }\n\n      super.readToken_mult_modulo(code);\n    }\n\n    readToken_pipe_amp(code: number): void {\n      const next = this.input.charCodeAt(this.state.pos + 1);\n      if (\n        code === charCodes.verticalBar &&\n        next === charCodes.rightCurlyBrace\n      ) {\n        // '|}'\n        this.finishOp(tt.braceBarR, 2);\n        return;\n      }\n\n      super.readToken_pipe_amp(code);\n    }\n\n    parseTopLevel(file: N.File, program: N.Program): N.File {\n      const fileNode = super.parseTopLevel(file, program);\n      if (this.state.hasFlowComment) {\n        this.raise(this.state.pos, FlowErrors.UnterminatedFlowComment);\n      }\n      return fileNode;\n    }\n\n    skipBlockComment(): void {\n      if (this.hasPlugin(\"flowComments\") && this.skipFlowComment()) {\n        if (this.state.hasFlowComment) {\n          this.unexpected(null, FlowErrors.NestedFlowComment);\n        }\n        this.hasFlowCommentCompletion();\n        this.state.pos += this.skipFlowComment();\n        this.state.hasFlowComment = true;\n        return;\n      }\n\n      if (this.state.hasFlowComment) {\n        const end = this.input.indexOf(\"*-/\", (this.state.pos += 2));\n        if (end === -1) {\n          throw this.raise(this.state.pos - 2, Errors.UnterminatedComment);\n        }\n        this.state.pos = end + 3;\n        return;\n      }\n\n      super.skipBlockComment();\n    }\n\n    skipFlowComment(): number | boolean {\n      const { pos } = this.state;\n      let shiftToFirstNonWhiteSpace = 2;\n      while (\n        [charCodes.space, charCodes.tab].includes(\n          this.input.charCodeAt(pos + shiftToFirstNonWhiteSpace),\n        )\n      ) {\n        shiftToFirstNonWhiteSpace++;\n      }\n\n      const ch2 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos);\n      const ch3 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos + 1);\n\n      if (ch2 === charCodes.colon && ch3 === charCodes.colon) {\n        return shiftToFirstNonWhiteSpace + 2; // check for /*::\n      }\n      if (\n        this.input.slice(\n          shiftToFirstNonWhiteSpace + pos,\n          shiftToFirstNonWhiteSpace + pos + 12,\n        ) === \"flow-include\"\n      ) {\n        return shiftToFirstNonWhiteSpace + 12; // check for /*flow-include\n      }\n      if (ch2 === charCodes.colon && ch3 !== charCodes.colon) {\n        return shiftToFirstNonWhiteSpace; // check for /*:, advance up to :\n      }\n      return false;\n    }\n\n    hasFlowCommentCompletion(): void {\n      const end = this.input.indexOf(\"*/\", this.state.pos);\n      if (end === -1) {\n        throw this.raise(this.state.pos, Errors.UnterminatedComment);\n      }\n    }\n\n    // Flow enum parsing\n\n    flowEnumErrorBooleanMemberNotInitialized(\n      pos: number,\n      { enumName, memberName }: { enumName: string, memberName: string },\n    ): void {\n      this.raise(\n        pos,\n        FlowErrors.EnumBooleanMemberNotInitialized,\n        memberName,\n        enumName,\n      );\n    }\n\n    flowEnumErrorInvalidMemberName(\n      pos: number,\n      { enumName, memberName }: { enumName: string, memberName: string },\n    ): void {\n      const suggestion = memberName[0].toUpperCase() + memberName.slice(1);\n      this.raise(\n        pos,\n        FlowErrors.EnumInvalidMemberName,\n        memberName,\n        suggestion,\n        enumName,\n      );\n    }\n\n    flowEnumErrorDuplicateMemberName(\n      pos: number,\n      { enumName, memberName }: { enumName: string, memberName: string },\n    ): void {\n      this.raise(pos, FlowErrors.EnumDuplicateMemberName, memberName, enumName);\n    }\n\n    flowEnumErrorInconsistentMemberValues(\n      pos: number,\n      { enumName }: { enumName: string },\n    ): void {\n      this.raise(pos, FlowErrors.EnumInconsistentMemberValues, enumName);\n    }\n\n    flowEnumErrorInvalidExplicitType(\n      pos: number,\n      {\n        enumName,\n        suppliedType,\n      }: { enumName: string, suppliedType: null | string },\n    ) {\n      return this.raise(\n        pos,\n        suppliedType === null\n          ? FlowErrors.EnumInvalidExplicitTypeUnknownSupplied\n          : FlowErrors.EnumInvalidExplicitType,\n        enumName,\n        suppliedType,\n      );\n    }\n\n    flowEnumErrorInvalidMemberInitializer(\n      pos: number,\n      { enumName, explicitType, memberName }: EnumContext,\n    ) {\n      let message = null;\n      switch (explicitType) {\n        case \"boolean\":\n        case \"number\":\n        case \"string\":\n          message = FlowErrors.EnumInvalidMemberInitializerPrimaryType;\n          break;\n        case \"symbol\":\n          message = FlowErrors.EnumInvalidMemberInitializerSymbolType;\n          break;\n        default:\n          // null\n          message = FlowErrors.EnumInvalidMemberInitializerUnknownType;\n      }\n      return this.raise(pos, message, enumName, memberName, explicitType);\n    }\n\n    flowEnumErrorNumberMemberNotInitialized(\n      pos: number,\n      { enumName, memberName }: { enumName: string, memberName: string },\n    ): void {\n      this.raise(\n        pos,\n        FlowErrors.EnumNumberMemberNotInitialized,\n        enumName,\n        memberName,\n      );\n    }\n\n    flowEnumErrorStringMemberInconsistentlyInitailized(\n      pos: number,\n      { enumName }: { enumName: string },\n    ): void {\n      this.raise(\n        pos,\n        FlowErrors.EnumStringMemberInconsistentlyInitailized,\n        enumName,\n      );\n    }\n\n    flowEnumMemberInit(): EnumMemberInit {\n      const startPos = this.state.start;\n      const endOfInit = () => this.match(tt.comma) || this.match(tt.braceR);\n      switch (this.state.type) {\n        case tt.num: {\n          const literal = this.parseLiteral(this.state.value, \"NumericLiteral\");\n          if (endOfInit()) {\n            return { type: \"number\", pos: literal.start, value: literal };\n          }\n          return { type: \"invalid\", pos: startPos };\n        }\n        case tt.string: {\n          const literal = this.parseLiteral(this.state.value, \"StringLiteral\");\n          if (endOfInit()) {\n            return { type: \"string\", pos: literal.start, value: literal };\n          }\n          return { type: \"invalid\", pos: startPos };\n        }\n        case tt._true:\n        case tt._false: {\n          const literal = this.parseBooleanLiteral();\n          if (endOfInit()) {\n            return {\n              type: \"boolean\",\n              pos: literal.start,\n              value: literal,\n            };\n          }\n          return { type: \"invalid\", pos: startPos };\n        }\n        default:\n          return { type: \"invalid\", pos: startPos };\n      }\n    }\n\n    flowEnumMemberRaw(): { id: N.Node, init: EnumMemberInit } {\n      const pos = this.state.start;\n      const id = this.parseIdentifier(true);\n      const init = this.eat(tt.eq)\n        ? this.flowEnumMemberInit()\n        : { type: \"none\", pos };\n      return { id, init };\n    }\n\n    flowEnumCheckExplicitTypeMismatch(\n      pos: number,\n      context: EnumContext,\n      expectedType: EnumExplicitType,\n    ): void {\n      const { explicitType } = context;\n      if (explicitType === null) {\n        return;\n      }\n      if (explicitType !== expectedType) {\n        this.flowEnumErrorInvalidMemberInitializer(pos, context);\n      }\n    }\n\n    flowEnumMembers({\n      enumName,\n      explicitType,\n    }: {\n      enumName: string,\n      explicitType: EnumExplicitType,\n    }): {|\n      booleanMembers: Array<N.Node>,\n      numberMembers: Array<N.Node>,\n      stringMembers: Array<N.Node>,\n      defaultedMembers: Array<N.Node>,\n    |} {\n      const seenNames = new Set();\n      const members = {\n        booleanMembers: [],\n        numberMembers: [],\n        stringMembers: [],\n        defaultedMembers: [],\n      };\n      while (!this.match(tt.braceR)) {\n        const memberNode = this.startNode();\n        const { id, init } = this.flowEnumMemberRaw();\n        const memberName = id.name;\n        if (memberName === \"\") {\n          continue;\n        }\n        if (/^[a-z]/.test(memberName)) {\n          this.flowEnumErrorInvalidMemberName(id.start, {\n            enumName,\n            memberName,\n          });\n        }\n        if (seenNames.has(memberName)) {\n          this.flowEnumErrorDuplicateMemberName(id.start, {\n            enumName,\n            memberName,\n          });\n        }\n        seenNames.add(memberName);\n        const context = { enumName, explicitType, memberName };\n        memberNode.id = id;\n        switch (init.type) {\n          case \"boolean\": {\n            this.flowEnumCheckExplicitTypeMismatch(\n              init.pos,\n              context,\n              \"boolean\",\n            );\n            memberNode.init = init.value;\n            members.booleanMembers.push(\n              this.finishNode(memberNode, \"EnumBooleanMember\"),\n            );\n            break;\n          }\n          case \"number\": {\n            this.flowEnumCheckExplicitTypeMismatch(init.pos, context, \"number\");\n            memberNode.init = init.value;\n            members.numberMembers.push(\n              this.finishNode(memberNode, \"EnumNumberMember\"),\n            );\n            break;\n          }\n          case \"string\": {\n            this.flowEnumCheckExplicitTypeMismatch(init.pos, context, \"string\");\n            memberNode.init = init.value;\n            members.stringMembers.push(\n              this.finishNode(memberNode, \"EnumStringMember\"),\n            );\n            break;\n          }\n          case \"invalid\": {\n            throw this.flowEnumErrorInvalidMemberInitializer(init.pos, context);\n          }\n          case \"none\": {\n            switch (explicitType) {\n              case \"boolean\":\n                this.flowEnumErrorBooleanMemberNotInitialized(\n                  init.pos,\n                  context,\n                );\n                break;\n              case \"number\":\n                this.flowEnumErrorNumberMemberNotInitialized(init.pos, context);\n                break;\n              default:\n                members.defaultedMembers.push(\n                  this.finishNode(memberNode, \"EnumDefaultedMember\"),\n                );\n            }\n          }\n        }\n\n        if (!this.match(tt.braceR)) {\n          this.expect(tt.comma);\n        }\n      }\n      return members;\n    }\n\n    flowEnumStringMembers(\n      initializedMembers: Array<N.Node>,\n      defaultedMembers: Array<N.Node>,\n      { enumName }: { enumName: string },\n    ): Array<N.Node> {\n      if (initializedMembers.length === 0) {\n        return defaultedMembers;\n      } else if (defaultedMembers.length === 0) {\n        return initializedMembers;\n      } else if (defaultedMembers.length > initializedMembers.length) {\n        for (const member of initializedMembers) {\n          this.flowEnumErrorStringMemberInconsistentlyInitailized(\n            member.start,\n            { enumName },\n          );\n        }\n        return defaultedMembers;\n      } else {\n        for (const member of defaultedMembers) {\n          this.flowEnumErrorStringMemberInconsistentlyInitailized(\n            member.start,\n            { enumName },\n          );\n        }\n        return initializedMembers;\n      }\n    }\n\n    flowEnumParseExplicitType({\n      enumName,\n    }: {\n      enumName: string,\n    }): EnumExplicitType {\n      if (this.eatContextual(\"of\")) {\n        if (!this.match(tt.name)) {\n          throw this.flowEnumErrorInvalidExplicitType(this.state.start, {\n            enumName,\n            suppliedType: null,\n          });\n        }\n\n        const { value } = this.state;\n        this.next();\n\n        if (\n          value !== \"boolean\" &&\n          value !== \"number\" &&\n          value !== \"string\" &&\n          value !== \"symbol\"\n        ) {\n          this.flowEnumErrorInvalidExplicitType(this.state.start, {\n            enumName,\n            suppliedType: value,\n          });\n        }\n\n        return value;\n      }\n      return null;\n    }\n\n    flowEnumBody(node: N.Node, { enumName, nameLoc }): N.Node {\n      const explicitType = this.flowEnumParseExplicitType({ enumName });\n      this.expect(tt.braceL);\n      const members = this.flowEnumMembers({ enumName, explicitType });\n\n      switch (explicitType) {\n        case \"boolean\":\n          node.explicitType = true;\n          node.members = members.booleanMembers;\n          this.expect(tt.braceR);\n          return this.finishNode(node, \"EnumBooleanBody\");\n        case \"number\":\n          node.explicitType = true;\n          node.members = members.numberMembers;\n          this.expect(tt.braceR);\n          return this.finishNode(node, \"EnumNumberBody\");\n        case \"string\":\n          node.explicitType = true;\n          node.members = this.flowEnumStringMembers(\n            members.stringMembers,\n            members.defaultedMembers,\n            { enumName },\n          );\n          this.expect(tt.braceR);\n          return this.finishNode(node, \"EnumStringBody\");\n        case \"symbol\":\n          node.members = members.defaultedMembers;\n          this.expect(tt.braceR);\n          return this.finishNode(node, \"EnumSymbolBody\");\n        default: {\n          // `explicitType` is `null`\n          const empty = () => {\n            node.members = [];\n            this.expect(tt.braceR);\n            return this.finishNode(node, \"EnumStringBody\");\n          };\n          node.explicitType = false;\n\n          const boolsLen = members.booleanMembers.length;\n          const numsLen = members.numberMembers.length;\n          const strsLen = members.stringMembers.length;\n          const defaultedLen = members.defaultedMembers.length;\n\n          if (!boolsLen && !numsLen && !strsLen && !defaultedLen) {\n            return empty();\n          } else if (!boolsLen && !numsLen) {\n            node.members = this.flowEnumStringMembers(\n              members.stringMembers,\n              members.defaultedMembers,\n              { enumName },\n            );\n            this.expect(tt.braceR);\n            return this.finishNode(node, \"EnumStringBody\");\n          } else if (!numsLen && !strsLen && boolsLen >= defaultedLen) {\n            for (const member of members.defaultedMembers) {\n              this.flowEnumErrorBooleanMemberNotInitialized(member.start, {\n                enumName,\n                memberName: member.id.name,\n              });\n            }\n            node.members = members.booleanMembers;\n            this.expect(tt.braceR);\n            return this.finishNode(node, \"EnumBooleanBody\");\n          } else if (!boolsLen && !strsLen && numsLen >= defaultedLen) {\n            for (const member of members.defaultedMembers) {\n              this.flowEnumErrorNumberMemberNotInitialized(member.start, {\n                enumName,\n                memberName: member.id.name,\n              });\n            }\n            node.members = members.numberMembers;\n            this.expect(tt.braceR);\n            return this.finishNode(node, \"EnumNumberBody\");\n          } else {\n            this.flowEnumErrorInconsistentMemberValues(nameLoc, { enumName });\n            return empty();\n          }\n        }\n      }\n    }\n\n    flowParseEnumDeclaration(node: N.Node): N.Node {\n      const id = this.parseIdentifier();\n      node.id = id;\n      node.body = this.flowEnumBody(this.startNode(), {\n        enumName: id.name,\n        nameLoc: id.start,\n      });\n      return this.finishNode(node, \"EnumDeclaration\");\n    }\n\n    updateContext(prevType: TokenType): void {\n      if (\n        this.match(tt.name) &&\n        this.state.value === \"of\" &&\n        prevType === tt.name &&\n        this.input.slice(this.state.lastTokStart, this.state.lastTokEnd) ===\n          \"interface\"\n      ) {\n        this.state.exprAllowed = false;\n      } else {\n        super.updateContext(prevType);\n      }\n    }\n  };\n","// @flow\n\nconst entities: { [name: string]: string } = {\n  quot: \"\\u0022\",\n  amp: \"&\",\n  apos: \"\\u0027\",\n  lt: \"<\",\n  gt: \">\",\n  nbsp: \"\\u00A0\",\n  iexcl: \"\\u00A1\",\n  cent: \"\\u00A2\",\n  pound: \"\\u00A3\",\n  curren: \"\\u00A4\",\n  yen: \"\\u00A5\",\n  brvbar: \"\\u00A6\",\n  sect: \"\\u00A7\",\n  uml: \"\\u00A8\",\n  copy: \"\\u00A9\",\n  ordf: \"\\u00AA\",\n  laquo: \"\\u00AB\",\n  not: \"\\u00AC\",\n  shy: \"\\u00AD\",\n  reg: \"\\u00AE\",\n  macr: \"\\u00AF\",\n  deg: \"\\u00B0\",\n  plusmn: \"\\u00B1\",\n  sup2: \"\\u00B2\",\n  sup3: \"\\u00B3\",\n  acute: \"\\u00B4\",\n  micro: \"\\u00B5\",\n  para: \"\\u00B6\",\n  middot: \"\\u00B7\",\n  cedil: \"\\u00B8\",\n  sup1: \"\\u00B9\",\n  ordm: \"\\u00BA\",\n  raquo: \"\\u00BB\",\n  frac14: \"\\u00BC\",\n  frac12: \"\\u00BD\",\n  frac34: \"\\u00BE\",\n  iquest: \"\\u00BF\",\n  Agrave: \"\\u00C0\",\n  Aacute: \"\\u00C1\",\n  Acirc: \"\\u00C2\",\n  Atilde: \"\\u00C3\",\n  Auml: \"\\u00C4\",\n  Aring: \"\\u00C5\",\n  AElig: \"\\u00C6\",\n  Ccedil: \"\\u00C7\",\n  Egrave: \"\\u00C8\",\n  Eacute: \"\\u00C9\",\n  Ecirc: \"\\u00CA\",\n  Euml: \"\\u00CB\",\n  Igrave: \"\\u00CC\",\n  Iacute: \"\\u00CD\",\n  Icirc: \"\\u00CE\",\n  Iuml: \"\\u00CF\",\n  ETH: \"\\u00D0\",\n  Ntilde: \"\\u00D1\",\n  Ograve: \"\\u00D2\",\n  Oacute: \"\\u00D3\",\n  Ocirc: \"\\u00D4\",\n  Otilde: \"\\u00D5\",\n  Ouml: \"\\u00D6\",\n  times: \"\\u00D7\",\n  Oslash: \"\\u00D8\",\n  Ugrave: \"\\u00D9\",\n  Uacute: \"\\u00DA\",\n  Ucirc: \"\\u00DB\",\n  Uuml: \"\\u00DC\",\n  Yacute: \"\\u00DD\",\n  THORN: \"\\u00DE\",\n  szlig: \"\\u00DF\",\n  agrave: \"\\u00E0\",\n  aacute: \"\\u00E1\",\n  acirc: \"\\u00E2\",\n  atilde: \"\\u00E3\",\n  auml: \"\\u00E4\",\n  aring: \"\\u00E5\",\n  aelig: \"\\u00E6\",\n  ccedil: \"\\u00E7\",\n  egrave: \"\\u00E8\",\n  eacute: \"\\u00E9\",\n  ecirc: \"\\u00EA\",\n  euml: \"\\u00EB\",\n  igrave: \"\\u00EC\",\n  iacute: \"\\u00ED\",\n  icirc: \"\\u00EE\",\n  iuml: \"\\u00EF\",\n  eth: \"\\u00F0\",\n  ntilde: \"\\u00F1\",\n  ograve: \"\\u00F2\",\n  oacute: \"\\u00F3\",\n  ocirc: \"\\u00F4\",\n  otilde: \"\\u00F5\",\n  ouml: \"\\u00F6\",\n  divide: \"\\u00F7\",\n  oslash: \"\\u00F8\",\n  ugrave: \"\\u00F9\",\n  uacute: \"\\u00FA\",\n  ucirc: \"\\u00FB\",\n  uuml: \"\\u00FC\",\n  yacute: \"\\u00FD\",\n  thorn: \"\\u00FE\",\n  yuml: \"\\u00FF\",\n  OElig: \"\\u0152\",\n  oelig: \"\\u0153\",\n  Scaron: \"\\u0160\",\n  scaron: \"\\u0161\",\n  Yuml: \"\\u0178\",\n  fnof: \"\\u0192\",\n  circ: \"\\u02C6\",\n  tilde: \"\\u02DC\",\n  Alpha: \"\\u0391\",\n  Beta: \"\\u0392\",\n  Gamma: \"\\u0393\",\n  Delta: \"\\u0394\",\n  Epsilon: \"\\u0395\",\n  Zeta: \"\\u0396\",\n  Eta: \"\\u0397\",\n  Theta: \"\\u0398\",\n  Iota: \"\\u0399\",\n  Kappa: \"\\u039A\",\n  Lambda: \"\\u039B\",\n  Mu: \"\\u039C\",\n  Nu: \"\\u039D\",\n  Xi: \"\\u039E\",\n  Omicron: \"\\u039F\",\n  Pi: \"\\u03A0\",\n  Rho: \"\\u03A1\",\n  Sigma: \"\\u03A3\",\n  Tau: \"\\u03A4\",\n  Upsilon: \"\\u03A5\",\n  Phi: \"\\u03A6\",\n  Chi: \"\\u03A7\",\n  Psi: \"\\u03A8\",\n  Omega: \"\\u03A9\",\n  alpha: \"\\u03B1\",\n  beta: \"\\u03B2\",\n  gamma: \"\\u03B3\",\n  delta: \"\\u03B4\",\n  epsilon: \"\\u03B5\",\n  zeta: \"\\u03B6\",\n  eta: \"\\u03B7\",\n  theta: \"\\u03B8\",\n  iota: \"\\u03B9\",\n  kappa: \"\\u03BA\",\n  lambda: \"\\u03BB\",\n  mu: \"\\u03BC\",\n  nu: \"\\u03BD\",\n  xi: \"\\u03BE\",\n  omicron: \"\\u03BF\",\n  pi: \"\\u03C0\",\n  rho: \"\\u03C1\",\n  sigmaf: \"\\u03C2\",\n  sigma: \"\\u03C3\",\n  tau: \"\\u03C4\",\n  upsilon: \"\\u03C5\",\n  phi: \"\\u03C6\",\n  chi: \"\\u03C7\",\n  psi: \"\\u03C8\",\n  omega: \"\\u03C9\",\n  thetasym: \"\\u03D1\",\n  upsih: \"\\u03D2\",\n  piv: \"\\u03D6\",\n  ensp: \"\\u2002\",\n  emsp: \"\\u2003\",\n  thinsp: \"\\u2009\",\n  zwnj: \"\\u200C\",\n  zwj: \"\\u200D\",\n  lrm: \"\\u200E\",\n  rlm: \"\\u200F\",\n  ndash: \"\\u2013\",\n  mdash: \"\\u2014\",\n  lsquo: \"\\u2018\",\n  rsquo: \"\\u2019\",\n  sbquo: \"\\u201A\",\n  ldquo: \"\\u201C\",\n  rdquo: \"\\u201D\",\n  bdquo: \"\\u201E\",\n  dagger: \"\\u2020\",\n  Dagger: \"\\u2021\",\n  bull: \"\\u2022\",\n  hellip: \"\\u2026\",\n  permil: \"\\u2030\",\n  prime: \"\\u2032\",\n  Prime: \"\\u2033\",\n  lsaquo: \"\\u2039\",\n  rsaquo: \"\\u203A\",\n  oline: \"\\u203E\",\n  frasl: \"\\u2044\",\n  euro: \"\\u20AC\",\n  image: \"\\u2111\",\n  weierp: \"\\u2118\",\n  real: \"\\u211C\",\n  trade: \"\\u2122\",\n  alefsym: \"\\u2135\",\n  larr: \"\\u2190\",\n  uarr: \"\\u2191\",\n  rarr: \"\\u2192\",\n  darr: \"\\u2193\",\n  harr: \"\\u2194\",\n  crarr: \"\\u21B5\",\n  lArr: \"\\u21D0\",\n  uArr: \"\\u21D1\",\n  rArr: \"\\u21D2\",\n  dArr: \"\\u21D3\",\n  hArr: \"\\u21D4\",\n  forall: \"\\u2200\",\n  part: \"\\u2202\",\n  exist: \"\\u2203\",\n  empty: \"\\u2205\",\n  nabla: \"\\u2207\",\n  isin: \"\\u2208\",\n  notin: \"\\u2209\",\n  ni: \"\\u220B\",\n  prod: \"\\u220F\",\n  sum: \"\\u2211\",\n  minus: \"\\u2212\",\n  lowast: \"\\u2217\",\n  radic: \"\\u221A\",\n  prop: \"\\u221D\",\n  infin: \"\\u221E\",\n  ang: \"\\u2220\",\n  and: \"\\u2227\",\n  or: \"\\u2228\",\n  cap: \"\\u2229\",\n  cup: \"\\u222A\",\n  int: \"\\u222B\",\n  there4: \"\\u2234\",\n  sim: \"\\u223C\",\n  cong: \"\\u2245\",\n  asymp: \"\\u2248\",\n  ne: \"\\u2260\",\n  equiv: \"\\u2261\",\n  le: \"\\u2264\",\n  ge: \"\\u2265\",\n  sub: \"\\u2282\",\n  sup: \"\\u2283\",\n  nsub: \"\\u2284\",\n  sube: \"\\u2286\",\n  supe: \"\\u2287\",\n  oplus: \"\\u2295\",\n  otimes: \"\\u2297\",\n  perp: \"\\u22A5\",\n  sdot: \"\\u22C5\",\n  lceil: \"\\u2308\",\n  rceil: \"\\u2309\",\n  lfloor: \"\\u230A\",\n  rfloor: \"\\u230B\",\n  lang: \"\\u2329\",\n  rang: \"\\u232A\",\n  loz: \"\\u25CA\",\n  spades: \"\\u2660\",\n  clubs: \"\\u2663\",\n  hearts: \"\\u2665\",\n  diams: \"\\u2666\",\n};\nexport default entities;\n","// @flow\n\n// Error messages are colocated with the plugin.\n/* eslint-disable @babel/development-internal/dry-error-messages */\n\nimport * as charCodes from \"charcodes\";\n\nimport XHTMLEntities from \"./xhtml\";\nimport type Parser from \"../../parser\";\nimport type { ExpressionErrors } from \"../../parser/util\";\nimport { TokenType, types as tt } from \"../../tokenizer/types\";\nimport { TokContext, types as tc } from \"../../tokenizer/context\";\nimport * as N from \"../../types\";\nimport { isIdentifierChar, isIdentifierStart } from \"../../util/identifier\";\nimport type { Position } from \"../../util/location\";\nimport { isNewLine } from \"../../util/whitespace\";\nimport { Errors } from \"../../parser/error\";\n\nconst HEX_NUMBER = /^[\\da-fA-F]+$/;\nconst DECIMAL_NUMBER = /^\\d+$/;\n\nconst JsxErrors = Object.freeze({\n  AttributeIsEmpty:\n    \"JSX attributes must only be assigned a non-empty expression\",\n  MissingClosingTagFragment: \"Expected corresponding JSX closing tag for <>\",\n  MissingClosingTagElement: \"Expected corresponding JSX closing tag for <%0>\",\n  UnsupportedJsxValue:\n    \"JSX value should be either an expression or a quoted JSX text\",\n  UnterminatedJsxContent: \"Unterminated JSX contents\",\n  UnwrappedAdjacentJSXElements:\n    \"Adjacent JSX elements must be wrapped in an enclosing tag. Did you want a JSX fragment <>...</>?\",\n});\n\n// Be aware that this file is always executed and not only when the plugin is enabled.\n// Therefore this contexts and tokens do always exist.\ntc.j_oTag = new TokContext(\"<tag\", false);\ntc.j_cTag = new TokContext(\"</tag\", false);\ntc.j_expr = new TokContext(\"<tag>...</tag>\", true, true);\n\ntt.jsxName = new TokenType(\"jsxName\");\ntt.jsxText = new TokenType(\"jsxText\", { beforeExpr: true });\ntt.jsxTagStart = new TokenType(\"jsxTagStart\", { startsExpr: true });\ntt.jsxTagEnd = new TokenType(\"jsxTagEnd\");\n\ntt.jsxTagStart.updateContext = function () {\n  this.state.context.push(tc.j_expr); // treat as beginning of JSX expression\n  this.state.context.push(tc.j_oTag); // start opening tag context\n  this.state.exprAllowed = false;\n};\n\ntt.jsxTagEnd.updateContext = function (prevType) {\n  const out = this.state.context.pop();\n  if ((out === tc.j_oTag && prevType === tt.slash) || out === tc.j_cTag) {\n    this.state.context.pop();\n    this.state.exprAllowed = this.curContext() === tc.j_expr;\n  } else {\n    this.state.exprAllowed = true;\n  }\n};\n\nfunction isFragment(object: ?N.JSXElement): boolean {\n  return object\n    ? object.type === \"JSXOpeningFragment\" ||\n        object.type === \"JSXClosingFragment\"\n    : false;\n}\n\n// Transforms JSX element name to string.\n\nfunction getQualifiedJSXName(\n  object: N.JSXIdentifier | N.JSXNamespacedName | N.JSXMemberExpression,\n): string {\n  if (object.type === \"JSXIdentifier\") {\n    return object.name;\n  }\n\n  if (object.type === \"JSXNamespacedName\") {\n    return object.namespace.name + \":\" + object.name.name;\n  }\n\n  if (object.type === \"JSXMemberExpression\") {\n    return (\n      getQualifiedJSXName(object.object) +\n      \".\" +\n      getQualifiedJSXName(object.property)\n    );\n  }\n\n  // istanbul ignore next\n  throw new Error(\"Node had unexpected type: \" + object.type);\n}\n\nexport default (superClass: Class<Parser>): Class<Parser> =>\n  class extends superClass {\n    // Reads inline JSX contents token.\n\n    jsxReadToken(): void {\n      let out = \"\";\n      let chunkStart = this.state.pos;\n      for (;;) {\n        if (this.state.pos >= this.length) {\n          throw this.raise(this.state.start, JsxErrors.UnterminatedJsxContent);\n        }\n\n        const ch = this.input.charCodeAt(this.state.pos);\n\n        switch (ch) {\n          case charCodes.lessThan:\n          case charCodes.leftCurlyBrace:\n            if (this.state.pos === this.state.start) {\n              if (ch === charCodes.lessThan && this.state.exprAllowed) {\n                ++this.state.pos;\n                return this.finishToken(tt.jsxTagStart);\n              }\n              return super.getTokenFromCode(ch);\n            }\n            out += this.input.slice(chunkStart, this.state.pos);\n            return this.finishToken(tt.jsxText, out);\n\n          case charCodes.ampersand:\n            out += this.input.slice(chunkStart, this.state.pos);\n            out += this.jsxReadEntity();\n            chunkStart = this.state.pos;\n            break;\n\n          default:\n            if (isNewLine(ch)) {\n              out += this.input.slice(chunkStart, this.state.pos);\n              out += this.jsxReadNewLine(true);\n              chunkStart = this.state.pos;\n            } else {\n              ++this.state.pos;\n            }\n        }\n      }\n    }\n\n    jsxReadNewLine(normalizeCRLF: boolean): string {\n      const ch = this.input.charCodeAt(this.state.pos);\n      let out;\n      ++this.state.pos;\n      if (\n        ch === charCodes.carriageReturn &&\n        this.input.charCodeAt(this.state.pos) === charCodes.lineFeed\n      ) {\n        ++this.state.pos;\n        out = normalizeCRLF ? \"\\n\" : \"\\r\\n\";\n      } else {\n        out = String.fromCharCode(ch);\n      }\n      ++this.state.curLine;\n      this.state.lineStart = this.state.pos;\n\n      return out;\n    }\n\n    jsxReadString(quote: number): void {\n      let out = \"\";\n      let chunkStart = ++this.state.pos;\n      for (;;) {\n        if (this.state.pos >= this.length) {\n          throw this.raise(this.state.start, Errors.UnterminatedString);\n        }\n\n        const ch = this.input.charCodeAt(this.state.pos);\n        if (ch === quote) break;\n        if (ch === charCodes.ampersand) {\n          out += this.input.slice(chunkStart, this.state.pos);\n          out += this.jsxReadEntity();\n          chunkStart = this.state.pos;\n        } else if (isNewLine(ch)) {\n          out += this.input.slice(chunkStart, this.state.pos);\n          out += this.jsxReadNewLine(false);\n          chunkStart = this.state.pos;\n        } else {\n          ++this.state.pos;\n        }\n      }\n      out += this.input.slice(chunkStart, this.state.pos++);\n      return this.finishToken(tt.string, out);\n    }\n\n    jsxReadEntity(): string {\n      let str = \"\";\n      let count = 0;\n      let entity;\n      let ch = this.input[this.state.pos];\n\n      const startPos = ++this.state.pos;\n      while (this.state.pos < this.length && count++ < 10) {\n        ch = this.input[this.state.pos++];\n        if (ch === \";\") {\n          if (str[0] === \"#\") {\n            if (str[1] === \"x\") {\n              str = str.substr(2);\n              if (HEX_NUMBER.test(str)) {\n                entity = String.fromCodePoint(parseInt(str, 16));\n              }\n            } else {\n              str = str.substr(1);\n              if (DECIMAL_NUMBER.test(str)) {\n                entity = String.fromCodePoint(parseInt(str, 10));\n              }\n            }\n          } else {\n            entity = XHTMLEntities[str];\n          }\n          break;\n        }\n        str += ch;\n      }\n      if (!entity) {\n        this.state.pos = startPos;\n        return \"&\";\n      }\n      return entity;\n    }\n\n    // Read a JSX identifier (valid tag or attribute name).\n    //\n    // Optimized version since JSX identifiers can\"t contain\n    // escape characters and so can be read as single slice.\n    // Also assumes that first character was already checked\n    // by isIdentifierStart in readToken.\n\n    jsxReadWord(): void {\n      let ch;\n      const start = this.state.pos;\n      do {\n        ch = this.input.charCodeAt(++this.state.pos);\n      } while (isIdentifierChar(ch) || ch === charCodes.dash);\n      return this.finishToken(\n        tt.jsxName,\n        this.input.slice(start, this.state.pos),\n      );\n    }\n\n    // Parse next token as JSX identifier\n\n    jsxParseIdentifier(): N.JSXIdentifier {\n      const node = this.startNode();\n      if (this.match(tt.jsxName)) {\n        node.name = this.state.value;\n      } else if (this.state.type.keyword) {\n        node.name = this.state.type.keyword;\n      } else {\n        this.unexpected();\n      }\n      this.next();\n      return this.finishNode(node, \"JSXIdentifier\");\n    }\n\n    // Parse namespaced identifier.\n\n    jsxParseNamespacedName(): N.JSXNamespacedName {\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      const name = this.jsxParseIdentifier();\n      if (!this.eat(tt.colon)) return name;\n\n      const node = this.startNodeAt(startPos, startLoc);\n      node.namespace = name;\n      node.name = this.jsxParseIdentifier();\n      return this.finishNode(node, \"JSXNamespacedName\");\n    }\n\n    // Parses element name in any form - namespaced, member\n    // or single identifier.\n\n    jsxParseElementName():\n      | N.JSXIdentifier\n      | N.JSXNamespacedName\n      | N.JSXMemberExpression {\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      let node = this.jsxParseNamespacedName();\n      if (node.type === \"JSXNamespacedName\") {\n        return node;\n      }\n      while (this.eat(tt.dot)) {\n        const newNode = this.startNodeAt(startPos, startLoc);\n        newNode.object = node;\n        newNode.property = this.jsxParseIdentifier();\n        node = this.finishNode(newNode, \"JSXMemberExpression\");\n      }\n      return node;\n    }\n\n    // Parses any type of JSX attribute value.\n\n    jsxParseAttributeValue(): N.Expression {\n      let node;\n      switch (this.state.type) {\n        case tt.braceL:\n          node = this.startNode();\n          this.next();\n          node = this.jsxParseExpressionContainer(node);\n          if (node.expression.type === \"JSXEmptyExpression\") {\n            this.raise(node.start, JsxErrors.AttributeIsEmpty);\n          }\n          return node;\n\n        case tt.jsxTagStart:\n        case tt.string:\n          return this.parseExprAtom();\n\n        default:\n          throw this.raise(this.state.start, JsxErrors.UnsupportedJsxValue);\n      }\n    }\n\n    // JSXEmptyExpression is unique type since it doesn't actually parse anything,\n    // and so it should start at the end of last read token (left brace) and finish\n    // at the beginning of the next one (right brace).\n\n    jsxParseEmptyExpression(): N.JSXEmptyExpression {\n      const node = this.startNodeAt(\n        this.state.lastTokEnd,\n        this.state.lastTokEndLoc,\n      );\n      return this.finishNodeAt(\n        node,\n        \"JSXEmptyExpression\",\n        this.state.start,\n        this.state.startLoc,\n      );\n    }\n\n    // Parse JSX spread child\n\n    jsxParseSpreadChild(node: N.JSXSpreadChild): N.JSXSpreadChild {\n      this.next(); // ellipsis\n      node.expression = this.parseExpression();\n      this.expect(tt.braceR);\n\n      return this.finishNode(node, \"JSXSpreadChild\");\n    }\n\n    // Parses JSX expression enclosed into curly brackets.\n\n    jsxParseExpressionContainer(\n      node: N.JSXExpressionContainer,\n    ): N.JSXExpressionContainer {\n      if (this.match(tt.braceR)) {\n        node.expression = this.jsxParseEmptyExpression();\n      } else {\n        node.expression = this.parseExpression();\n      }\n      this.expect(tt.braceR);\n      return this.finishNode(node, \"JSXExpressionContainer\");\n    }\n\n    // Parses following JSX attribute name-value pair.\n\n    jsxParseAttribute(): N.JSXAttribute {\n      const node = this.startNode();\n      if (this.eat(tt.braceL)) {\n        this.expect(tt.ellipsis);\n        node.argument = this.parseMaybeAssign();\n        this.expect(tt.braceR);\n        return this.finishNode(node, \"JSXSpreadAttribute\");\n      }\n      node.name = this.jsxParseNamespacedName();\n      node.value = this.eat(tt.eq) ? this.jsxParseAttributeValue() : null;\n      return this.finishNode(node, \"JSXAttribute\");\n    }\n\n    // Parses JSX opening tag starting after \"<\".\n\n    jsxParseOpeningElementAt(\n      startPos: number,\n      startLoc: Position,\n    ): N.JSXOpeningElement {\n      const node = this.startNodeAt(startPos, startLoc);\n      if (this.match(tt.jsxTagEnd)) {\n        this.expect(tt.jsxTagEnd);\n        return this.finishNode(node, \"JSXOpeningFragment\");\n      }\n      node.name = this.jsxParseElementName();\n      return this.jsxParseOpeningElementAfterName(node);\n    }\n\n    jsxParseOpeningElementAfterName(\n      node: N.JSXOpeningElement,\n    ): N.JSXOpeningElement {\n      const attributes: N.JSXAttribute[] = [];\n      while (!this.match(tt.slash) && !this.match(tt.jsxTagEnd)) {\n        attributes.push(this.jsxParseAttribute());\n      }\n      node.attributes = attributes;\n      node.selfClosing = this.eat(tt.slash);\n      this.expect(tt.jsxTagEnd);\n      return this.finishNode(node, \"JSXOpeningElement\");\n    }\n\n    // Parses JSX closing tag starting after \"</\".\n\n    jsxParseClosingElementAt(\n      startPos: number,\n      startLoc: Position,\n    ): N.JSXClosingElement {\n      const node = this.startNodeAt(startPos, startLoc);\n      if (this.match(tt.jsxTagEnd)) {\n        this.expect(tt.jsxTagEnd);\n        return this.finishNode(node, \"JSXClosingFragment\");\n      }\n      node.name = this.jsxParseElementName();\n      this.expect(tt.jsxTagEnd);\n      return this.finishNode(node, \"JSXClosingElement\");\n    }\n\n    // Parses entire JSX element, including it\"s opening tag\n    // (starting after \"<\"), attributes, contents and closing tag.\n\n    jsxParseElementAt(startPos: number, startLoc: Position): N.JSXElement {\n      const node = this.startNodeAt(startPos, startLoc);\n      const children = [];\n      const openingElement = this.jsxParseOpeningElementAt(startPos, startLoc);\n      let closingElement = null;\n\n      if (!openingElement.selfClosing) {\n        contents: for (;;) {\n          switch (this.state.type) {\n            case tt.jsxTagStart:\n              startPos = this.state.start;\n              startLoc = this.state.startLoc;\n              this.next();\n              if (this.eat(tt.slash)) {\n                closingElement = this.jsxParseClosingElementAt(\n                  startPos,\n                  startLoc,\n                );\n                break contents;\n              }\n              children.push(this.jsxParseElementAt(startPos, startLoc));\n              break;\n\n            case tt.jsxText:\n              children.push(this.parseExprAtom());\n              break;\n\n            case tt.braceL: {\n              const node = this.startNode();\n              this.next();\n              if (this.match(tt.ellipsis)) {\n                children.push(this.jsxParseSpreadChild(node));\n              } else {\n                children.push(this.jsxParseExpressionContainer(node));\n              }\n\n              break;\n            }\n            // istanbul ignore next - should never happen\n            default:\n              throw this.unexpected();\n          }\n        }\n\n        if (isFragment(openingElement) && !isFragment(closingElement)) {\n          this.raise(\n            // $FlowIgnore\n            closingElement.start,\n            JsxErrors.MissingClosingTagFragment,\n          );\n        } else if (!isFragment(openingElement) && isFragment(closingElement)) {\n          this.raise(\n            // $FlowIgnore\n            closingElement.start,\n            JsxErrors.MissingClosingTagElement,\n            getQualifiedJSXName(openingElement.name),\n          );\n        } else if (!isFragment(openingElement) && !isFragment(closingElement)) {\n          if (\n            // $FlowIgnore\n            getQualifiedJSXName(closingElement.name) !==\n            getQualifiedJSXName(openingElement.name)\n          ) {\n            this.raise(\n              // $FlowIgnore\n              closingElement.start,\n              JsxErrors.MissingClosingTagElement,\n              getQualifiedJSXName(openingElement.name),\n            );\n          }\n        }\n      }\n\n      if (isFragment(openingElement)) {\n        node.openingFragment = openingElement;\n        node.closingFragment = closingElement;\n      } else {\n        node.openingElement = openingElement;\n        node.closingElement = closingElement;\n      }\n      node.children = children;\n      if (this.isRelational(\"<\")) {\n        throw this.raise(\n          this.state.start,\n          JsxErrors.UnwrappedAdjacentJSXElements,\n        );\n      }\n\n      return isFragment(openingElement)\n        ? this.finishNode(node, \"JSXFragment\")\n        : this.finishNode(node, \"JSXElement\");\n    }\n\n    // Parses entire JSX element from current position.\n\n    jsxParseElement(): N.JSXElement {\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      this.next();\n      return this.jsxParseElementAt(startPos, startLoc);\n    }\n\n    // ==================================\n    // Overrides\n    // ==================================\n\n    parseExprAtom(refExpressionErrors: ?ExpressionErrors): N.Expression {\n      if (this.match(tt.jsxText)) {\n        return this.parseLiteral(this.state.value, \"JSXText\");\n      } else if (this.match(tt.jsxTagStart)) {\n        return this.jsxParseElement();\n      } else if (\n        this.isRelational(\"<\") &&\n        this.input.charCodeAt(this.state.pos) !== charCodes.exclamationMark\n      ) {\n        // In case we encounter an lt token here it will always be the start of\n        // jsx as the lt sign is not allowed in places that expect an expression\n        this.finishToken(tt.jsxTagStart);\n        return this.jsxParseElement();\n      } else {\n        return super.parseExprAtom(refExpressionErrors);\n      }\n    }\n\n    getTokenFromCode(code: number): void {\n      if (this.state.inPropertyName) return super.getTokenFromCode(code);\n\n      const context = this.curContext();\n\n      if (context === tc.j_expr) {\n        return this.jsxReadToken();\n      }\n\n      if (context === tc.j_oTag || context === tc.j_cTag) {\n        if (isIdentifierStart(code)) {\n          return this.jsxReadWord();\n        }\n\n        if (code === charCodes.greaterThan) {\n          ++this.state.pos;\n          return this.finishToken(tt.jsxTagEnd);\n        }\n\n        if (\n          (code === charCodes.quotationMark || code === charCodes.apostrophe) &&\n          context === tc.j_oTag\n        ) {\n          return this.jsxReadString(code);\n        }\n      }\n\n      if (\n        code === charCodes.lessThan &&\n        this.state.exprAllowed &&\n        this.input.charCodeAt(this.state.pos + 1) !== charCodes.exclamationMark\n      ) {\n        ++this.state.pos;\n        return this.finishToken(tt.jsxTagStart);\n      }\n\n      return super.getTokenFromCode(code);\n    }\n\n    updateContext(prevType: TokenType): void {\n      if (this.match(tt.braceL)) {\n        const curContext = this.curContext();\n        if (curContext === tc.j_oTag) {\n          this.state.context.push(tc.braceExpression);\n        } else if (curContext === tc.j_expr) {\n          this.state.context.push(tc.templateQuasi);\n        } else {\n          super.updateContext(prevType);\n        }\n        this.state.exprAllowed = true;\n      } else if (this.match(tt.slash) && prevType === tt.jsxTagStart) {\n        this.state.context.length -= 2; // do not consider JSX expr -> JSX open tag -> ... anymore\n        this.state.context.push(tc.j_cTag); // reconsider as closing tag context\n        this.state.exprAllowed = false;\n      } else {\n        return super.updateContext(prevType);\n      }\n    }\n  };\n","// @flow\nimport {\n  SCOPE_ARROW,\n  SCOPE_DIRECT_SUPER,\n  SCOPE_FUNCTION,\n  SCOPE_SIMPLE_CATCH,\n  SCOPE_SUPER,\n  SCOPE_PROGRAM,\n  SCOPE_VAR,\n  SCOPE_CLASS,\n  BIND_SCOPE_FUNCTION,\n  BIND_SCOPE_VAR,\n  BIND_SCOPE_LEXICAL,\n  BIND_KIND_VALUE,\n  type ScopeFlags,\n  type BindingTypes,\n} from \"./scopeflags\";\nimport * as N from \"../types\";\nimport { Errors } from \"../parser/error\";\n\n// Start an AST node, attaching a start offset.\nexport class Scope {\n  flags: ScopeFlags;\n  // A list of var-declared names in the current lexical scope\n  var: string[] = [];\n  // A list of lexically-declared names in the current lexical scope\n  lexical: string[] = [];\n  // A list of lexically-declared FunctionDeclaration names in the current lexical scope\n  functions: string[] = [];\n\n  constructor(flags: ScopeFlags) {\n    this.flags = flags;\n  }\n}\n\ntype raiseFunction = (number, string, ...any) => void;\n\n// The functions in this module keep track of declared variables in the\n// current scope in order to detect duplicate variable names.\nexport default class ScopeHandler<IScope: Scope = Scope> {\n  scopeStack: Array<IScope> = [];\n  raise: raiseFunction;\n  inModule: boolean;\n  undefinedExports: Map<string, number> = new Map();\n  undefinedPrivateNames: Map<string, number> = new Map();\n\n  constructor(raise: raiseFunction, inModule: boolean) {\n    this.raise = raise;\n    this.inModule = inModule;\n  }\n\n  get inFunction() {\n    return (this.currentVarScope().flags & SCOPE_FUNCTION) > 0;\n  }\n  get allowSuper() {\n    return (this.currentThisScope().flags & SCOPE_SUPER) > 0;\n  }\n  get allowDirectSuper() {\n    return (this.currentThisScope().flags & SCOPE_DIRECT_SUPER) > 0;\n  }\n  get inClass() {\n    return (this.currentThisScope().flags & SCOPE_CLASS) > 0;\n  }\n  get inNonArrowFunction() {\n    return (this.currentThisScope().flags & SCOPE_FUNCTION) > 0;\n  }\n  get treatFunctionsAsVar() {\n    return this.treatFunctionsAsVarInScope(this.currentScope());\n  }\n\n  createScope(flags: ScopeFlags): Scope {\n    return new Scope(flags);\n  }\n  // This method will be overwritten by subclasses\n  /*:: +createScope: (flags: ScopeFlags) => IScope; */\n\n  enter(flags: ScopeFlags) {\n    this.scopeStack.push(this.createScope(flags));\n  }\n\n  exit() {\n    this.scopeStack.pop();\n  }\n\n  // The spec says:\n  // > At the top level of a function, or script, function declarations are\n  // > treated like var declarations rather than like lexical declarations.\n  treatFunctionsAsVarInScope(scope: IScope): boolean {\n    return !!(\n      scope.flags & SCOPE_FUNCTION ||\n      (!this.inModule && scope.flags & SCOPE_PROGRAM)\n    );\n  }\n\n  declareName(name: string, bindingType: BindingTypes, pos: number) {\n    let scope = this.currentScope();\n    if (bindingType & BIND_SCOPE_LEXICAL || bindingType & BIND_SCOPE_FUNCTION) {\n      this.checkRedeclarationInScope(scope, name, bindingType, pos);\n\n      if (bindingType & BIND_SCOPE_FUNCTION) {\n        scope.functions.push(name);\n      } else {\n        scope.lexical.push(name);\n      }\n\n      if (bindingType & BIND_SCOPE_LEXICAL) {\n        this.maybeExportDefined(scope, name);\n      }\n    } else if (bindingType & BIND_SCOPE_VAR) {\n      for (let i = this.scopeStack.length - 1; i >= 0; --i) {\n        scope = this.scopeStack[i];\n        this.checkRedeclarationInScope(scope, name, bindingType, pos);\n        scope.var.push(name);\n        this.maybeExportDefined(scope, name);\n\n        if (scope.flags & SCOPE_VAR) break;\n      }\n    }\n    if (this.inModule && scope.flags & SCOPE_PROGRAM) {\n      this.undefinedExports.delete(name);\n    }\n  }\n\n  maybeExportDefined(scope: IScope, name: string) {\n    if (this.inModule && scope.flags & SCOPE_PROGRAM) {\n      this.undefinedExports.delete(name);\n    }\n  }\n\n  checkRedeclarationInScope(\n    scope: IScope,\n    name: string,\n    bindingType: BindingTypes,\n    pos: number,\n  ) {\n    if (this.isRedeclaredInScope(scope, name, bindingType)) {\n      this.raise(pos, Errors.VarRedeclaration, name);\n    }\n  }\n\n  isRedeclaredInScope(\n    scope: IScope,\n    name: string,\n    bindingType: BindingTypes,\n  ): boolean {\n    if (!(bindingType & BIND_KIND_VALUE)) return false;\n\n    if (bindingType & BIND_SCOPE_LEXICAL) {\n      return (\n        scope.lexical.indexOf(name) > -1 ||\n        scope.functions.indexOf(name) > -1 ||\n        scope.var.indexOf(name) > -1\n      );\n    }\n\n    if (bindingType & BIND_SCOPE_FUNCTION) {\n      return (\n        scope.lexical.indexOf(name) > -1 ||\n        (!this.treatFunctionsAsVarInScope(scope) &&\n          scope.var.indexOf(name) > -1)\n      );\n    }\n\n    return (\n      (scope.lexical.indexOf(name) > -1 &&\n        !(scope.flags & SCOPE_SIMPLE_CATCH && scope.lexical[0] === name)) ||\n      (!this.treatFunctionsAsVarInScope(scope) &&\n        scope.functions.indexOf(name) > -1)\n    );\n  }\n\n  checkLocalExport(id: N.Identifier) {\n    if (\n      this.scopeStack[0].lexical.indexOf(id.name) === -1 &&\n      this.scopeStack[0].var.indexOf(id.name) === -1 &&\n      // In strict mode, scope.functions will always be empty.\n      // Modules are strict by default, but the `scriptMode` option\n      // can overwrite this behavior.\n      this.scopeStack[0].functions.indexOf(id.name) === -1\n    ) {\n      this.undefinedExports.set(id.name, id.start);\n    }\n  }\n\n  currentScope(): IScope {\n    return this.scopeStack[this.scopeStack.length - 1];\n  }\n\n  // $FlowIgnore\n  currentVarScope(): IScope {\n    for (let i = this.scopeStack.length - 1; ; i--) {\n      const scope = this.scopeStack[i];\n      if (scope.flags & SCOPE_VAR) {\n        return scope;\n      }\n    }\n  }\n\n  // Could be useful for `arguments`, `this`, `new.target`, `super()`, `super.property`, and `super[property]`.\n  // $FlowIgnore\n  currentThisScope(): IScope {\n    for (let i = this.scopeStack.length - 1; ; i--) {\n      const scope = this.scopeStack[i];\n      if (\n        (scope.flags & SCOPE_VAR || scope.flags & SCOPE_CLASS) &&\n        !(scope.flags & SCOPE_ARROW)\n      ) {\n        return scope;\n      }\n    }\n  }\n}\n","// @flow\n\nimport ScopeHandler, { Scope } from \"../../util/scope\";\nimport {\n  BIND_KIND_TYPE,\n  BIND_FLAGS_TS_ENUM,\n  BIND_FLAGS_TS_CONST_ENUM,\n  BIND_FLAGS_TS_EXPORT_ONLY,\n  BIND_KIND_VALUE,\n  BIND_FLAGS_CLASS,\n  type ScopeFlags,\n  type BindingTypes,\n} from \"../../util/scopeflags\";\nimport * as N from \"../../types\";\n\nclass TypeScriptScope extends Scope {\n  types: string[] = [];\n\n  // enums (which are also in .types)\n  enums: string[] = [];\n\n  // const enums (which are also in .enums and .types)\n  constEnums: string[] = [];\n\n  // classes (which are also in .lexical) and interface (which are also in .types)\n  classes: string[] = [];\n\n  // namespaces and ambient functions (or classes) are too difficult to track,\n  // especially without type analysis.\n  // We need to track them anyway, to avoid \"X is not defined\" errors\n  // when exporting them.\n  exportOnlyBindings: string[] = [];\n}\n\n// See https://github.com/babel/babel/pull/9766#discussion_r268920730 for an\n// explanation of how typescript handles scope.\n\nexport default class TypeScriptScopeHandler extends ScopeHandler<TypeScriptScope> {\n  createScope(flags: ScopeFlags): TypeScriptScope {\n    return new TypeScriptScope(flags);\n  }\n\n  declareName(name: string, bindingType: BindingTypes, pos: number) {\n    const scope = this.currentScope();\n    if (bindingType & BIND_FLAGS_TS_EXPORT_ONLY) {\n      this.maybeExportDefined(scope, name);\n      scope.exportOnlyBindings.push(name);\n      return;\n    }\n\n    super.declareName(...arguments);\n\n    if (bindingType & BIND_KIND_TYPE) {\n      if (!(bindingType & BIND_KIND_VALUE)) {\n        // \"Value\" bindings have already been registered by the superclass.\n        this.checkRedeclarationInScope(scope, name, bindingType, pos);\n        this.maybeExportDefined(scope, name);\n      }\n      scope.types.push(name);\n    }\n    if (bindingType & BIND_FLAGS_TS_ENUM) scope.enums.push(name);\n    if (bindingType & BIND_FLAGS_TS_CONST_ENUM) scope.constEnums.push(name);\n    if (bindingType & BIND_FLAGS_CLASS) scope.classes.push(name);\n  }\n\n  isRedeclaredInScope(\n    scope: TypeScriptScope,\n    name: string,\n    bindingType: BindingTypes,\n  ): boolean {\n    if (scope.enums.indexOf(name) > -1) {\n      if (bindingType & BIND_FLAGS_TS_ENUM) {\n        // Enums can be merged with other enums if they are both\n        //  const or both non-const.\n        const isConst = !!(bindingType & BIND_FLAGS_TS_CONST_ENUM);\n        const wasConst = scope.constEnums.indexOf(name) > -1;\n        return isConst !== wasConst;\n      }\n      return true;\n    }\n    if (bindingType & BIND_FLAGS_CLASS && scope.classes.indexOf(name) > -1) {\n      if (scope.lexical.indexOf(name) > -1) {\n        // Classes can be merged with interfaces\n        return !!(bindingType & BIND_KIND_VALUE);\n      } else {\n        // Interface can be merged with other classes or interfaces\n        return false;\n      }\n    }\n    if (bindingType & BIND_KIND_TYPE && scope.types.indexOf(name) > -1) {\n      return true;\n    }\n\n    return super.isRedeclaredInScope(...arguments);\n  }\n\n  checkLocalExport(id: N.Identifier) {\n    if (\n      this.scopeStack[0].types.indexOf(id.name) === -1 &&\n      this.scopeStack[0].exportOnlyBindings.indexOf(id.name) === -1\n    ) {\n      super.checkLocalExport(id);\n    }\n  }\n}\n","// @flow\nexport const PARAM = 0b000, // Initial Parameter flags\n  PARAM_YIELD = 0b001, // track [Yield] production parameter\n  PARAM_AWAIT = 0b010, // track [Await] production parameter\n  PARAM_RETURN = 0b100; // track [Return] production parameter\n\n// ProductionParameterHandler is a stack fashioned production parameter tracker\n// https://tc39.es/ecma262/#sec-grammar-notation\n// The tracked parameters are defined above. Note that the [In] parameter is\n// tracked in `noIn` argument of `parseExpression`.\n//\n// Whenever [+Await]/[+Yield] appears in the right-hand sides of a production,\n// we must enter a new tracking stack. For example when parsing\n//\n// AsyncFunctionDeclaration [Yield, Await]:\n//   async [no LineTerminator here] function BindingIdentifier[?Yield, ?Await]\n//     ( FormalParameters[~Yield, +Await] ) { AsyncFunctionBody }\n//\n// we must follow such process:\n//\n// 1. parse async keyword\n// 2. parse function keyword\n// 3. parse bindingIdentifier <= inherit current parameters: [?Await]\n// 4. enter new stack with (PARAM_AWAIT)\n// 5. parse formal parameters <= must have [Await] parameter [+Await]\n// 6. parse function body\n// 7. exit current stack\n\nexport type ParamKind = typeof PARAM | typeof PARAM_AWAIT | typeof PARAM_YIELD;\n\nexport default class ProductionParameterHandler {\n  stacks: Array<ParamKind> = [];\n  enter(flags: ParamKind) {\n    this.stacks.push(flags);\n  }\n\n  exit() {\n    this.stacks.pop();\n  }\n\n  currentFlags(): ParamKind {\n    return this.stacks[this.stacks.length - 1];\n  }\n\n  get hasAwait(): boolean {\n    return (this.currentFlags() & PARAM_AWAIT) > 0;\n  }\n\n  get hasYield(): boolean {\n    return (this.currentFlags() & PARAM_YIELD) > 0;\n  }\n\n  get hasReturn(): boolean {\n    return (this.currentFlags() & PARAM_RETURN) > 0;\n  }\n}\n\nexport function functionFlags(\n  isAsync: boolean,\n  isGenerator: boolean,\n): ParamKind {\n  return (isAsync ? PARAM_AWAIT : 0) | (isGenerator ? PARAM_YIELD : 0);\n}\n","// @flow\n\n/*:: declare var invariant; */\n\n// Error messages are colocated with the plugin.\n/* eslint-disable @babel/development-internal/dry-error-messages */\n\nimport type { TokenType } from \"../../tokenizer/types\";\nimport type State from \"../../tokenizer/state\";\nimport { types as tt } from \"../../tokenizer/types\";\nimport { types as ct } from \"../../tokenizer/context\";\nimport * as N from \"../../types\";\nimport type { Pos, Position } from \"../../util/location\";\nimport type Parser from \"../../parser\";\nimport {\n  type BindingTypes,\n  BIND_NONE,\n  SCOPE_TS_MODULE,\n  SCOPE_OTHER,\n  BIND_TS_ENUM,\n  BIND_TS_CONST_ENUM,\n  BIND_TS_TYPE,\n  BIND_TS_INTERFACE,\n  BIND_TS_AMBIENT,\n  BIND_TS_NAMESPACE,\n  BIND_CLASS,\n  BIND_LEXICAL,\n} from \"../../util/scopeflags\";\nimport TypeScriptScopeHandler from \"./scope\";\nimport * as charCodes from \"charcodes\";\nimport type { ExpressionErrors } from \"../../parser/util\";\nimport { PARAM } from \"../../util/production-parameter\";\nimport { Errors } from \"../../parser/error\";\n\ntype TsModifier =\n  | \"readonly\"\n  | \"abstract\"\n  | \"declare\"\n  | \"static\"\n  | \"public\"\n  | \"private\"\n  | \"protected\";\n\nfunction nonNull<T>(x: ?T): T {\n  if (x == null) {\n    // $FlowIgnore\n    throw new Error(`Unexpected ${x} value.`);\n  }\n  return x;\n}\n\nfunction assert(x: boolean): void {\n  if (!x) {\n    throw new Error(\"Assert fail\");\n  }\n}\n\ntype ParsingContext =\n  | \"EnumMembers\"\n  | \"HeritageClauseElement\"\n  | \"TupleElementTypes\"\n  | \"TypeMembers\"\n  | \"TypeParametersOrArguments\";\n\nconst TSErrors = Object.freeze({\n  ClassMethodHasDeclare: \"Class methods cannot have the 'declare' modifier\",\n  ClassMethodHasReadonly: \"Class methods cannot have the 'readonly' modifier\",\n  DeclareClassFieldHasInitializer:\n    \"'declare' class fields cannot have an initializer\",\n  DuplicateModifier: \"Duplicate modifier: '%0'\",\n  EmptyHeritageClauseType: \"'%0' list cannot be empty.\",\n  IndexSignatureHasAbstract:\n    \"Index signatures cannot have the 'abstract' modifier\",\n  IndexSignatureHasAccessibility:\n    \"Index signatures cannot have an accessibility modifier ('%0')\",\n  IndexSignatureHasStatic: \"Index signatures cannot have the 'static' modifier\",\n  OptionalTypeBeforeRequired:\n    \"A required element cannot follow an optional element.\",\n  PatternIsOptional:\n    \"A binding pattern parameter cannot be optional in an implementation signature.\",\n  PrivateElementHasAbstract:\n    \"Private elements cannot have the 'abstract' modifier.\",\n  PrivateElementHasAccessibility:\n    \"Private elements cannot have an accessibility modifier ('%0')\",\n  TemplateTypeHasSubstitution:\n    \"Template literal types cannot have any substitution\",\n  TypeAnnotationAfterAssign:\n    \"Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`\",\n  UnexpectedReadonly:\n    \"'readonly' type modifier is only permitted on array and tuple literal types.\",\n  UnexpectedTypeAnnotation: \"Did not expect a type annotation here.\",\n  UnexpectedTypeCastInParameter: \"Unexpected type cast in parameter position.\",\n  UnsupportedImportTypeArgument:\n    \"Argument in a type import must be a string literal\",\n  UnsupportedParameterPropertyKind:\n    \"A parameter property may not be declared using a binding pattern.\",\n  UnsupportedSignatureParameterKind:\n    \"Name in a signature must be an Identifier, ObjectPattern or ArrayPattern, instead got %0\",\n});\n\n// Doesn't handle \"void\" or \"null\" because those are keywords, not identifiers.\nfunction keywordTypeFromName(\n  value: string,\n): N.TsKeywordTypeType | typeof undefined {\n  switch (value) {\n    case \"any\":\n      return \"TSAnyKeyword\";\n    case \"boolean\":\n      return \"TSBooleanKeyword\";\n    case \"bigint\":\n      return \"TSBigIntKeyword\";\n    case \"never\":\n      return \"TSNeverKeyword\";\n    case \"number\":\n      return \"TSNumberKeyword\";\n    case \"object\":\n      return \"TSObjectKeyword\";\n    case \"string\":\n      return \"TSStringKeyword\";\n    case \"symbol\":\n      return \"TSSymbolKeyword\";\n    case \"undefined\":\n      return \"TSUndefinedKeyword\";\n    case \"unknown\":\n      return \"TSUnknownKeyword\";\n    default:\n      return undefined;\n  }\n}\n\nexport default (superClass: Class<Parser>): Class<Parser> =>\n  class extends superClass {\n    getScopeHandler(): Class<TypeScriptScopeHandler> {\n      return TypeScriptScopeHandler;\n    }\n\n    tsIsIdentifier(): boolean {\n      // TODO: actually a bit more complex in TypeScript, but shouldn't matter.\n      // See https://github.com/Microsoft/TypeScript/issues/15008\n      return this.match(tt.name);\n    }\n\n    tsNextTokenCanFollowModifier() {\n      // Note: TypeScript's implementation is much more complicated because\n      // more things are considered modifiers there.\n      // This implementation only handles modifiers not handled by @babel/parser itself. And \"static\".\n      // TODO: Would be nice to avoid lookahead. Want a hasLineBreakUpNext() method...\n      this.next();\n      return (\n        !this.hasPrecedingLineBreak() &&\n        !this.match(tt.parenL) &&\n        !this.match(tt.parenR) &&\n        !this.match(tt.colon) &&\n        !this.match(tt.eq) &&\n        !this.match(tt.question) &&\n        !this.match(tt.bang)\n      );\n    }\n\n    /** Parses a modifier matching one the given modifier names. */\n    tsParseModifier<T: TsModifier>(allowedModifiers: T[]): ?T {\n      if (!this.match(tt.name)) {\n        return undefined;\n      }\n\n      const modifier = this.state.value;\n      if (\n        allowedModifiers.indexOf(modifier) !== -1 &&\n        this.tsTryParse(this.tsNextTokenCanFollowModifier.bind(this))\n      ) {\n        return modifier;\n      }\n      return undefined;\n    }\n\n    /** Parses a list of modifiers, in any order.\n     *  If you need a specific order, you must call this function multiple times:\n     *    this.tsParseModifiers(node, [\"public\"]);\n     *    this.tsParseModifiers(node, [\"abstract\", \"readonly\"]);\n     */\n    tsParseModifiers<T: TsModifier>(\n      modified: { [key: TsModifier]: ?true },\n      allowedModifiers: T[],\n    ): void {\n      for (;;) {\n        const startPos = this.state.start;\n        const modifier: ?T = this.tsParseModifier(allowedModifiers);\n\n        if (!modifier) break;\n\n        if (Object.hasOwnProperty.call(modified, modifier)) {\n          this.raise(startPos, TSErrors.DuplicateModifier, modifier);\n        }\n        modified[modifier] = true;\n      }\n    }\n\n    tsIsListTerminator(kind: ParsingContext): boolean {\n      switch (kind) {\n        case \"EnumMembers\":\n        case \"TypeMembers\":\n          return this.match(tt.braceR);\n        case \"HeritageClauseElement\":\n          return this.match(tt.braceL);\n        case \"TupleElementTypes\":\n          return this.match(tt.bracketR);\n        case \"TypeParametersOrArguments\":\n          return this.isRelational(\">\");\n      }\n\n      throw new Error(\"Unreachable\");\n    }\n\n    tsParseList<T: N.Node>(kind: ParsingContext, parseElement: () => T): T[] {\n      const result: T[] = [];\n      while (!this.tsIsListTerminator(kind)) {\n        // Skipping \"parseListElement\" from the TS source since that's just for error handling.\n        result.push(parseElement());\n      }\n      return result;\n    }\n\n    tsParseDelimitedList<T: N.Node>(\n      kind: ParsingContext,\n      parseElement: () => T,\n    ): T[] {\n      return nonNull(\n        this.tsParseDelimitedListWorker(\n          kind,\n          parseElement,\n          /* expectSuccess */ true,\n        ),\n      );\n    }\n\n    /**\n     * If !expectSuccess, returns undefined instead of failing to parse.\n     * If expectSuccess, parseElement should always return a defined value.\n     */\n    tsParseDelimitedListWorker<T: N.Node>(\n      kind: ParsingContext,\n      parseElement: () => ?T,\n      expectSuccess: boolean,\n    ): ?(T[]) {\n      const result = [];\n\n      for (;;) {\n        if (this.tsIsListTerminator(kind)) {\n          break;\n        }\n\n        const element = parseElement();\n        if (element == null) {\n          return undefined;\n        }\n        result.push(element);\n\n        if (this.eat(tt.comma)) {\n          continue;\n        }\n\n        if (this.tsIsListTerminator(kind)) {\n          break;\n        }\n\n        if (expectSuccess) {\n          // This will fail with an error about a missing comma\n          this.expect(tt.comma);\n        }\n        return undefined;\n      }\n\n      return result;\n    }\n\n    tsParseBracketedList<T: N.Node>(\n      kind: ParsingContext,\n      parseElement: () => T,\n      bracket: boolean,\n      skipFirstToken: boolean,\n    ): T[] {\n      if (!skipFirstToken) {\n        if (bracket) {\n          this.expect(tt.bracketL);\n        } else {\n          this.expectRelational(\"<\");\n        }\n      }\n\n      const result = this.tsParseDelimitedList(kind, parseElement);\n\n      if (bracket) {\n        this.expect(tt.bracketR);\n      } else {\n        this.expectRelational(\">\");\n      }\n\n      return result;\n    }\n\n    tsParseImportType(): N.TsImportType {\n      const node: N.TsImportType = this.startNode();\n      this.expect(tt._import);\n      this.expect(tt.parenL);\n      if (!this.match(tt.string)) {\n        this.raise(this.state.start, TSErrors.UnsupportedImportTypeArgument);\n      }\n\n      // For compatibility to estree we cannot call parseLiteral directly here\n      node.argument = this.parseExprAtom();\n      this.expect(tt.parenR);\n\n      if (this.eat(tt.dot)) {\n        node.qualifier = this.tsParseEntityName(/* allowReservedWords */ true);\n      }\n      if (this.isRelational(\"<\")) {\n        node.typeParameters = this.tsParseTypeArguments();\n      }\n      return this.finishNode(node, \"TSImportType\");\n    }\n\n    tsParseEntityName(allowReservedWords: boolean): N.TsEntityName {\n      let entity: N.TsEntityName = this.parseIdentifier();\n      while (this.eat(tt.dot)) {\n        const node: N.TsQualifiedName = this.startNodeAtNode(entity);\n        node.left = entity;\n        node.right = this.parseIdentifier(allowReservedWords);\n        entity = this.finishNode(node, \"TSQualifiedName\");\n      }\n      return entity;\n    }\n\n    tsParseTypeReference(): N.TsTypeReference {\n      const node: N.TsTypeReference = this.startNode();\n      node.typeName = this.tsParseEntityName(/* allowReservedWords */ false);\n      if (!this.hasPrecedingLineBreak() && this.isRelational(\"<\")) {\n        node.typeParameters = this.tsParseTypeArguments();\n      }\n      return this.finishNode(node, \"TSTypeReference\");\n    }\n\n    tsParseThisTypePredicate(lhs: N.TsThisType): N.TsTypePredicate {\n      this.next();\n      const node: N.TsTypePredicate = this.startNodeAtNode(lhs);\n      node.parameterName = lhs;\n      node.typeAnnotation = this.tsParseTypeAnnotation(/* eatColon */ false);\n      return this.finishNode(node, \"TSTypePredicate\");\n    }\n\n    tsParseThisTypeNode(): N.TsThisType {\n      const node: N.TsThisType = this.startNode();\n      this.next();\n      return this.finishNode(node, \"TSThisType\");\n    }\n\n    tsParseTypeQuery(): N.TsTypeQuery {\n      const node: N.TsTypeQuery = this.startNode();\n      this.expect(tt._typeof);\n      if (this.match(tt._import)) {\n        node.exprName = this.tsParseImportType();\n      } else {\n        node.exprName = this.tsParseEntityName(/* allowReservedWords */ true);\n      }\n      return this.finishNode(node, \"TSTypeQuery\");\n    }\n\n    tsParseTypeParameter(): N.TsTypeParameter {\n      const node: N.TsTypeParameter = this.startNode();\n      node.name = this.parseIdentifierName(node.start);\n      node.constraint = this.tsEatThenParseType(tt._extends);\n      node.default = this.tsEatThenParseType(tt.eq);\n      return this.finishNode(node, \"TSTypeParameter\");\n    }\n\n    tsTryParseTypeParameters(): ?N.TsTypeParameterDeclaration {\n      if (this.isRelational(\"<\")) {\n        return this.tsParseTypeParameters();\n      }\n    }\n\n    tsParseTypeParameters() {\n      const node: N.TsTypeParameterDeclaration = this.startNode();\n\n      if (this.isRelational(\"<\") || this.match(tt.jsxTagStart)) {\n        this.next();\n      } else {\n        this.unexpected();\n      }\n\n      node.params = this.tsParseBracketedList(\n        \"TypeParametersOrArguments\",\n        this.tsParseTypeParameter.bind(this),\n        /* bracket */ false,\n        /* skipFirstToken */ true,\n      );\n      return this.finishNode(node, \"TSTypeParameterDeclaration\");\n    }\n\n    tsTryNextParseConstantContext(): ?N.TsTypeReference {\n      if (this.lookahead().type === tt._const) {\n        this.next();\n        return this.tsParseTypeReference();\n      }\n      return null;\n    }\n\n    // Note: In TypeScript implementation we must provide `yieldContext` and `awaitContext`,\n    // but here it's always false, because this is only used for types.\n    tsFillSignature(\n      returnToken: TokenType,\n      signature: N.TsSignatureDeclaration,\n    ): void {\n      // Arrow fns *must* have return token (`=>`). Normal functions can omit it.\n      const returnTokenRequired = returnToken === tt.arrow;\n      signature.typeParameters = this.tsTryParseTypeParameters();\n      this.expect(tt.parenL);\n      signature.parameters = this.tsParseBindingListForSignature();\n      if (returnTokenRequired) {\n        signature.typeAnnotation = this.tsParseTypeOrTypePredicateAnnotation(\n          returnToken,\n        );\n      } else if (this.match(returnToken)) {\n        signature.typeAnnotation = this.tsParseTypeOrTypePredicateAnnotation(\n          returnToken,\n        );\n      }\n    }\n\n    tsParseBindingListForSignature(): $ReadOnlyArray<\n      N.Identifier | N.RestElement | N.ObjectPattern | N.ArrayPattern,\n    > {\n      return this.parseBindingList(tt.parenR, charCodes.rightParenthesis).map(\n        pattern => {\n          if (\n            pattern.type !== \"Identifier\" &&\n            pattern.type !== \"RestElement\" &&\n            pattern.type !== \"ObjectPattern\" &&\n            pattern.type !== \"ArrayPattern\"\n          ) {\n            this.raise(\n              pattern.start,\n              TSErrors.UnsupportedSignatureParameterKind,\n              pattern.type,\n            );\n          }\n          return (pattern: any);\n        },\n      );\n    }\n\n    tsParseTypeMemberSemicolon(): void {\n      if (!this.eat(tt.comma)) {\n        this.semicolon();\n      }\n    }\n\n    tsParseSignatureMember(\n      kind: \"TSCallSignatureDeclaration\" | \"TSConstructSignatureDeclaration\",\n      node: N.TsCallSignatureDeclaration | N.TsConstructSignatureDeclaration,\n    ): N.TsCallSignatureDeclaration | N.TsConstructSignatureDeclaration {\n      this.tsFillSignature(tt.colon, node);\n      this.tsParseTypeMemberSemicolon();\n      return this.finishNode(node, kind);\n    }\n\n    tsIsUnambiguouslyIndexSignature() {\n      this.next(); // Skip '{'\n      return this.eat(tt.name) && this.match(tt.colon);\n    }\n\n    tsTryParseIndexSignature(node: N.Node): ?N.TsIndexSignature {\n      if (\n        !(\n          this.match(tt.bracketL) &&\n          this.tsLookAhead(this.tsIsUnambiguouslyIndexSignature.bind(this))\n        )\n      ) {\n        return undefined;\n      }\n\n      this.expect(tt.bracketL);\n      const id = this.parseIdentifier();\n      id.typeAnnotation = this.tsParseTypeAnnotation();\n      this.resetEndLocation(id); // set end position to end of type\n\n      this.expect(tt.bracketR);\n      node.parameters = [id];\n\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) node.typeAnnotation = type;\n      this.tsParseTypeMemberSemicolon();\n      return this.finishNode(node, \"TSIndexSignature\");\n    }\n\n    tsParsePropertyOrMethodSignature(\n      node: N.TsPropertySignature | N.TsMethodSignature,\n      readonly: boolean,\n    ): N.TsPropertySignature | N.TsMethodSignature {\n      if (this.eat(tt.question)) node.optional = true;\n      const nodeAny: any = node;\n\n      if (!readonly && (this.match(tt.parenL) || this.isRelational(\"<\"))) {\n        const method: N.TsMethodSignature = nodeAny;\n        this.tsFillSignature(tt.colon, method);\n        this.tsParseTypeMemberSemicolon();\n        return this.finishNode(method, \"TSMethodSignature\");\n      } else {\n        const property: N.TsPropertySignature = nodeAny;\n        if (readonly) property.readonly = true;\n        const type = this.tsTryParseTypeAnnotation();\n        if (type) property.typeAnnotation = type;\n        this.tsParseTypeMemberSemicolon();\n        return this.finishNode(property, \"TSPropertySignature\");\n      }\n    }\n\n    tsParseTypeMember(): N.TsTypeElement {\n      const node: any = this.startNode();\n\n      if (this.match(tt.parenL) || this.isRelational(\"<\")) {\n        return this.tsParseSignatureMember(\"TSCallSignatureDeclaration\", node);\n      }\n\n      if (this.match(tt._new)) {\n        const id: N.Identifier = this.startNode();\n        this.next();\n        if (this.match(tt.parenL) || this.isRelational(\"<\")) {\n          return this.tsParseSignatureMember(\n            \"TSConstructSignatureDeclaration\",\n            node,\n          );\n        } else {\n          node.key = this.createIdentifier(id, \"new\");\n          return this.tsParsePropertyOrMethodSignature(node, false);\n        }\n      }\n\n      const readonly = !!this.tsParseModifier([\"readonly\"]);\n\n      const idx = this.tsTryParseIndexSignature(node);\n      if (idx) {\n        if (readonly) node.readonly = true;\n        return idx;\n      }\n\n      this.parsePropertyName(node, /* isPrivateNameAllowed */ false);\n      return this.tsParsePropertyOrMethodSignature(node, readonly);\n    }\n\n    tsParseTypeLiteral(): N.TsTypeLiteral {\n      const node: N.TsTypeLiteral = this.startNode();\n      node.members = this.tsParseObjectTypeMembers();\n      return this.finishNode(node, \"TSTypeLiteral\");\n    }\n\n    tsParseObjectTypeMembers(): $ReadOnlyArray<N.TsTypeElement> {\n      this.expect(tt.braceL);\n      const members = this.tsParseList(\n        \"TypeMembers\",\n        this.tsParseTypeMember.bind(this),\n      );\n      this.expect(tt.braceR);\n      return members;\n    }\n\n    tsIsStartOfMappedType(): boolean {\n      this.next();\n      if (this.eat(tt.plusMin)) {\n        return this.isContextual(\"readonly\");\n      }\n      if (this.isContextual(\"readonly\")) {\n        this.next();\n      }\n      if (!this.match(tt.bracketL)) {\n        return false;\n      }\n      this.next();\n      if (!this.tsIsIdentifier()) {\n        return false;\n      }\n      this.next();\n      return this.match(tt._in);\n    }\n\n    tsParseMappedTypeParameter(): N.TsTypeParameter {\n      const node: N.TsTypeParameter = this.startNode();\n      node.name = this.parseIdentifierName(node.start);\n      node.constraint = this.tsExpectThenParseType(tt._in);\n      return this.finishNode(node, \"TSTypeParameter\");\n    }\n\n    tsParseMappedType(): N.TsMappedType {\n      const node: N.TsMappedType = this.startNode();\n\n      this.expect(tt.braceL);\n\n      if (this.match(tt.plusMin)) {\n        node.readonly = this.state.value;\n        this.next();\n        this.expectContextual(\"readonly\");\n      } else if (this.eatContextual(\"readonly\")) {\n        node.readonly = true;\n      }\n\n      this.expect(tt.bracketL);\n      node.typeParameter = this.tsParseMappedTypeParameter();\n      this.expect(tt.bracketR);\n\n      if (this.match(tt.plusMin)) {\n        node.optional = this.state.value;\n        this.next();\n        this.expect(tt.question);\n      } else if (this.eat(tt.question)) {\n        node.optional = true;\n      }\n\n      node.typeAnnotation = this.tsTryParseType();\n      this.semicolon();\n      this.expect(tt.braceR);\n\n      return this.finishNode(node, \"TSMappedType\");\n    }\n\n    tsParseTupleType(): N.TsTupleType {\n      const node: N.TsTupleType = this.startNode();\n      node.elementTypes = this.tsParseBracketedList(\n        \"TupleElementTypes\",\n        this.tsParseTupleElementType.bind(this),\n        /* bracket */ true,\n        /* skipFirstToken */ false,\n      );\n\n      // Validate the elementTypes to ensure:\n      //   No mandatory elements may follow optional elements\n      //   If there's a rest element, it must be at the end of the tuple\n      let seenOptionalElement = false;\n      node.elementTypes.forEach(elementNode => {\n        if (elementNode.type === \"TSOptionalType\") {\n          seenOptionalElement = true;\n        } else if (seenOptionalElement && elementNode.type !== \"TSRestType\") {\n          this.raise(elementNode.start, TSErrors.OptionalTypeBeforeRequired);\n        }\n      });\n\n      return this.finishNode(node, \"TSTupleType\");\n    }\n\n    tsParseTupleElementType(): N.TsType {\n      // parses `...TsType[]`\n      if (this.match(tt.ellipsis)) {\n        const restNode: N.TsRestType = this.startNode();\n        this.next(); // skips ellipsis\n        restNode.typeAnnotation = this.tsParseType();\n        if (\n          this.match(tt.comma) &&\n          this.lookaheadCharCode() !== charCodes.rightSquareBracket\n        ) {\n          this.raiseRestNotLast(this.state.start);\n        }\n        return this.finishNode(restNode, \"TSRestType\");\n      }\n\n      const type = this.tsParseType();\n      // parses `TsType?`\n      if (this.eat(tt.question)) {\n        const optionalTypeNode: N.TsOptionalType = this.startNodeAtNode(type);\n        optionalTypeNode.typeAnnotation = type;\n        return this.finishNode(optionalTypeNode, \"TSOptionalType\");\n      }\n      return type;\n    }\n\n    tsParseParenthesizedType(): N.TsParenthesizedType {\n      const node = this.startNode();\n      this.expect(tt.parenL);\n      node.typeAnnotation = this.tsParseType();\n      this.expect(tt.parenR);\n      return this.finishNode(node, \"TSParenthesizedType\");\n    }\n\n    tsParseFunctionOrConstructorType(\n      type: \"TSFunctionType\" | \"TSConstructorType\",\n    ): N.TsFunctionOrConstructorType {\n      const node: N.TsFunctionOrConstructorType = this.startNode();\n      if (type === \"TSConstructorType\") {\n        this.expect(tt._new);\n      }\n      this.tsFillSignature(tt.arrow, node);\n      return this.finishNode(node, type);\n    }\n\n    tsParseLiteralTypeNode(): N.TsLiteralType {\n      const node: N.TsLiteralType = this.startNode();\n      node.literal = (() => {\n        switch (this.state.type) {\n          case tt.num:\n          case tt.bigint:\n          case tt.string:\n          case tt._true:\n          case tt._false:\n            // For compatibility to estree we cannot call parseLiteral directly here\n            return this.parseExprAtom();\n          default:\n            throw this.unexpected();\n        }\n      })();\n      return this.finishNode(node, \"TSLiteralType\");\n    }\n\n    tsParseTemplateLiteralType(): N.TsType {\n      const node: N.TsLiteralType = this.startNode();\n      const templateNode = this.parseTemplate(false);\n      if (templateNode.expressions.length > 0) {\n        this.raise(\n          templateNode.expressions[0].start,\n          TSErrors.TemplateTypeHasSubstitution,\n        );\n      }\n      node.literal = templateNode;\n      return this.finishNode(node, \"TSLiteralType\");\n    }\n\n    tsParseThisTypeOrThisTypePredicate(): N.TsThisType | N.TsTypePredicate {\n      const thisKeyword = this.tsParseThisTypeNode();\n      if (this.isContextual(\"is\") && !this.hasPrecedingLineBreak()) {\n        return this.tsParseThisTypePredicate(thisKeyword);\n      } else {\n        return thisKeyword;\n      }\n    }\n\n    tsParseNonArrayType(): N.TsType {\n      switch (this.state.type) {\n        case tt.name:\n        case tt._void:\n        case tt._null: {\n          const type = this.match(tt._void)\n            ? \"TSVoidKeyword\"\n            : this.match(tt._null)\n            ? \"TSNullKeyword\"\n            : keywordTypeFromName(this.state.value);\n          if (\n            type !== undefined &&\n            this.lookaheadCharCode() !== charCodes.dot\n          ) {\n            const node: N.TsKeywordType = this.startNode();\n            this.next();\n            return this.finishNode(node, type);\n          }\n          return this.tsParseTypeReference();\n        }\n        case tt.string:\n        case tt.num:\n        case tt.bigint:\n        case tt._true:\n        case tt._false:\n          return this.tsParseLiteralTypeNode();\n        case tt.plusMin:\n          if (this.state.value === \"-\") {\n            const node: N.TsLiteralType = this.startNode();\n            const nextToken = this.lookahead();\n            if (nextToken.type !== tt.num && nextToken.type !== tt.bigint) {\n              throw this.unexpected();\n            }\n            node.literal = this.parseMaybeUnary();\n            return this.finishNode(node, \"TSLiteralType\");\n          }\n          break;\n        case tt._this:\n          return this.tsParseThisTypeOrThisTypePredicate();\n        case tt._typeof:\n          return this.tsParseTypeQuery();\n        case tt._import:\n          return this.tsParseImportType();\n        case tt.braceL:\n          return this.tsLookAhead(this.tsIsStartOfMappedType.bind(this))\n            ? this.tsParseMappedType()\n            : this.tsParseTypeLiteral();\n        case tt.bracketL:\n          return this.tsParseTupleType();\n        case tt.parenL:\n          return this.tsParseParenthesizedType();\n        case tt.backQuote:\n          return this.tsParseTemplateLiteralType();\n      }\n\n      throw this.unexpected();\n    }\n\n    tsParseArrayTypeOrHigher(): N.TsType {\n      let type = this.tsParseNonArrayType();\n      while (!this.hasPrecedingLineBreak() && this.eat(tt.bracketL)) {\n        if (this.match(tt.bracketR)) {\n          const node: N.TsArrayType = this.startNodeAtNode(type);\n          node.elementType = type;\n          this.expect(tt.bracketR);\n          type = this.finishNode(node, \"TSArrayType\");\n        } else {\n          const node: N.TsIndexedAccessType = this.startNodeAtNode(type);\n          node.objectType = type;\n          node.indexType = this.tsParseType();\n          this.expect(tt.bracketR);\n          type = this.finishNode(node, \"TSIndexedAccessType\");\n        }\n      }\n      return type;\n    }\n\n    tsParseTypeOperator(\n      operator: \"keyof\" | \"unique\" | \"readonly\",\n    ): N.TsTypeOperator {\n      const node: N.TsTypeOperator = this.startNode();\n      this.expectContextual(operator);\n      node.operator = operator;\n      node.typeAnnotation = this.tsParseTypeOperatorOrHigher();\n\n      if (operator === \"readonly\") {\n        this.tsCheckTypeAnnotationForReadOnly(node);\n      }\n\n      return this.finishNode(node, \"TSTypeOperator\");\n    }\n\n    tsCheckTypeAnnotationForReadOnly(node: N.Node) {\n      switch (node.typeAnnotation.type) {\n        case \"TSTupleType\":\n        case \"TSArrayType\":\n          return;\n        default:\n          this.raise(node.start, TSErrors.UnexpectedReadonly);\n      }\n    }\n\n    tsParseInferType(): N.TsInferType {\n      const node = this.startNode();\n      this.expectContextual(\"infer\");\n      const typeParameter = this.startNode();\n      typeParameter.name = this.parseIdentifierName(typeParameter.start);\n      node.typeParameter = this.finishNode(typeParameter, \"TSTypeParameter\");\n      return this.finishNode(node, \"TSInferType\");\n    }\n\n    tsParseTypeOperatorOrHigher(): N.TsType {\n      const operator = [\"keyof\", \"unique\", \"readonly\"].find(kw =>\n        this.isContextual(kw),\n      );\n      return operator\n        ? this.tsParseTypeOperator(operator)\n        : this.isContextual(\"infer\")\n        ? this.tsParseInferType()\n        : this.tsParseArrayTypeOrHigher();\n    }\n\n    tsParseUnionOrIntersectionType(\n      kind: \"TSUnionType\" | \"TSIntersectionType\",\n      parseConstituentType: () => N.TsType,\n      operator: TokenType,\n    ): N.TsType {\n      this.eat(operator);\n      let type = parseConstituentType();\n      if (this.match(operator)) {\n        const types = [type];\n        while (this.eat(operator)) {\n          types.push(parseConstituentType());\n        }\n        const node: N.TsUnionType | N.TsIntersectionType = this.startNodeAtNode(\n          type,\n        );\n        node.types = types;\n        type = this.finishNode(node, kind);\n      }\n      return type;\n    }\n\n    tsParseIntersectionTypeOrHigher(): N.TsType {\n      return this.tsParseUnionOrIntersectionType(\n        \"TSIntersectionType\",\n        this.tsParseTypeOperatorOrHigher.bind(this),\n        tt.bitwiseAND,\n      );\n    }\n\n    tsParseUnionTypeOrHigher() {\n      return this.tsParseUnionOrIntersectionType(\n        \"TSUnionType\",\n        this.tsParseIntersectionTypeOrHigher.bind(this),\n        tt.bitwiseOR,\n      );\n    }\n\n    tsIsStartOfFunctionType() {\n      if (this.isRelational(\"<\")) {\n        return true;\n      }\n      return (\n        this.match(tt.parenL) &&\n        this.tsLookAhead(this.tsIsUnambiguouslyStartOfFunctionType.bind(this))\n      );\n    }\n\n    tsSkipParameterStart(): boolean {\n      if (this.match(tt.name) || this.match(tt._this)) {\n        this.next();\n        return true;\n      }\n\n      if (this.match(tt.braceL)) {\n        let braceStackCounter = 1;\n        this.next();\n\n        while (braceStackCounter > 0) {\n          if (this.match(tt.braceL)) {\n            ++braceStackCounter;\n          } else if (this.match(tt.braceR)) {\n            --braceStackCounter;\n          }\n          this.next();\n        }\n        return true;\n      }\n\n      if (this.match(tt.bracketL)) {\n        let braceStackCounter = 1;\n        this.next();\n\n        while (braceStackCounter > 0) {\n          if (this.match(tt.bracketL)) {\n            ++braceStackCounter;\n          } else if (this.match(tt.bracketR)) {\n            --braceStackCounter;\n          }\n          this.next();\n        }\n        return true;\n      }\n\n      return false;\n    }\n\n    tsIsUnambiguouslyStartOfFunctionType(): boolean {\n      this.next();\n      if (this.match(tt.parenR) || this.match(tt.ellipsis)) {\n        // ( )\n        // ( ...\n        return true;\n      }\n      if (this.tsSkipParameterStart()) {\n        if (\n          this.match(tt.colon) ||\n          this.match(tt.comma) ||\n          this.match(tt.question) ||\n          this.match(tt.eq)\n        ) {\n          // ( xxx :\n          // ( xxx ,\n          // ( xxx ?\n          // ( xxx =\n          return true;\n        }\n        if (this.match(tt.parenR)) {\n          this.next();\n          if (this.match(tt.arrow)) {\n            // ( xxx ) =>\n            return true;\n          }\n        }\n      }\n      return false;\n    }\n\n    tsParseTypeOrTypePredicateAnnotation(\n      returnToken: TokenType,\n    ): N.TsTypeAnnotation {\n      return this.tsInType(() => {\n        const t: N.TsTypeAnnotation = this.startNode();\n        this.expect(returnToken);\n\n        const asserts = this.tsTryParse(\n          this.tsParseTypePredicateAsserts.bind(this),\n        );\n\n        if (asserts && this.match(tt._this)) {\n          // When asserts is false, thisKeyword is handled by tsParseNonArrayType\n          // : asserts this is type\n          let thisTypePredicate = this.tsParseThisTypeOrThisTypePredicate();\n          // if it turns out to be a `TSThisType`, wrap it with `TSTypePredicate`\n          // : asserts this\n          if (thisTypePredicate.type === \"TSThisType\") {\n            const node: N.TsTypePredicate = this.startNodeAtNode(t);\n            node.parameterName = (thisTypePredicate: N.TsThisType);\n            node.asserts = true;\n            thisTypePredicate = this.finishNode(node, \"TSTypePredicate\");\n          } else {\n            (thisTypePredicate: N.TsTypePredicate).asserts = true;\n          }\n          t.typeAnnotation = thisTypePredicate;\n          return this.finishNode(t, \"TSTypeAnnotation\");\n        }\n\n        const typePredicateVariable =\n          this.tsIsIdentifier() &&\n          this.tsTryParse(this.tsParseTypePredicatePrefix.bind(this));\n\n        if (!typePredicateVariable) {\n          if (!asserts) {\n            // : type\n            return this.tsParseTypeAnnotation(/* eatColon */ false, t);\n          }\n\n          const node: N.TsTypePredicate = this.startNodeAtNode(t);\n          // : asserts foo\n          node.parameterName = this.parseIdentifier();\n          node.asserts = asserts;\n          t.typeAnnotation = this.finishNode(node, \"TSTypePredicate\");\n          return this.finishNode(t, \"TSTypeAnnotation\");\n        }\n\n        // : asserts foo is type\n        const type = this.tsParseTypeAnnotation(/* eatColon */ false);\n        const node = this.startNodeAtNode(t);\n        node.parameterName = typePredicateVariable;\n        node.typeAnnotation = type;\n        node.asserts = asserts;\n        t.typeAnnotation = this.finishNode(node, \"TSTypePredicate\");\n        return this.finishNode(t, \"TSTypeAnnotation\");\n      });\n    }\n\n    tsTryParseTypeOrTypePredicateAnnotation(): ?N.TsTypeAnnotation {\n      return this.match(tt.colon)\n        ? this.tsParseTypeOrTypePredicateAnnotation(tt.colon)\n        : undefined;\n    }\n\n    tsTryParseTypeAnnotation(): ?N.TsTypeAnnotation {\n      return this.match(tt.colon) ? this.tsParseTypeAnnotation() : undefined;\n    }\n\n    tsTryParseType(): ?N.TsType {\n      return this.tsEatThenParseType(tt.colon);\n    }\n\n    tsParseTypePredicatePrefix(): ?N.Identifier {\n      const id = this.parseIdentifier();\n      if (this.isContextual(\"is\") && !this.hasPrecedingLineBreak()) {\n        this.next();\n        return id;\n      }\n    }\n\n    tsParseTypePredicateAsserts(): boolean {\n      if (\n        !this.match(tt.name) ||\n        this.state.value !== \"asserts\" ||\n        this.hasPrecedingLineBreak()\n      ) {\n        return false;\n      }\n      const containsEsc = this.state.containsEsc;\n      this.next();\n      if (!this.match(tt.name) && !this.match(tt._this)) {\n        return false;\n      }\n\n      if (containsEsc) {\n        this.raise(\n          this.state.lastTokStart,\n          Errors.InvalidEscapedReservedWord,\n          \"asserts\",\n        );\n      }\n\n      return true;\n    }\n\n    tsParseTypeAnnotation(\n      eatColon = true,\n      t: N.TsTypeAnnotation = this.startNode(),\n    ): N.TsTypeAnnotation {\n      this.tsInType(() => {\n        if (eatColon) this.expect(tt.colon);\n        t.typeAnnotation = this.tsParseType();\n      });\n      return this.finishNode(t, \"TSTypeAnnotation\");\n    }\n\n    /** Be sure to be in a type context before calling this, using `tsInType`. */\n    tsParseType(): N.TsType {\n      // Need to set `state.inType` so that we don't parse JSX in a type context.\n      assert(this.state.inType);\n      const type = this.tsParseNonConditionalType();\n      if (this.hasPrecedingLineBreak() || !this.eat(tt._extends)) {\n        return type;\n      }\n      const node: N.TsConditionalType = this.startNodeAtNode(type);\n      node.checkType = type;\n      node.extendsType = this.tsParseNonConditionalType();\n      this.expect(tt.question);\n      node.trueType = this.tsParseType();\n      this.expect(tt.colon);\n      node.falseType = this.tsParseType();\n      return this.finishNode(node, \"TSConditionalType\");\n    }\n\n    tsParseNonConditionalType(): N.TsType {\n      if (this.tsIsStartOfFunctionType()) {\n        return this.tsParseFunctionOrConstructorType(\"TSFunctionType\");\n      }\n      if (this.match(tt._new)) {\n        // As in `new () => Date`\n        return this.tsParseFunctionOrConstructorType(\"TSConstructorType\");\n      }\n      return this.tsParseUnionTypeOrHigher();\n    }\n\n    tsParseTypeAssertion(): N.TsTypeAssertion {\n      const node: N.TsTypeAssertion = this.startNode();\n      const _const = this.tsTryNextParseConstantContext();\n      node.typeAnnotation = _const || this.tsNextThenParseType();\n      this.expectRelational(\">\");\n      node.expression = this.parseMaybeUnary();\n      return this.finishNode(node, \"TSTypeAssertion\");\n    }\n\n    tsParseHeritageClause(\n      descriptor: string,\n    ): $ReadOnlyArray<N.TsExpressionWithTypeArguments> {\n      const originalStart = this.state.start;\n\n      const delimitedList = this.tsParseDelimitedList(\n        \"HeritageClauseElement\",\n        this.tsParseExpressionWithTypeArguments.bind(this),\n      );\n\n      if (!delimitedList.length) {\n        this.raise(originalStart, TSErrors.EmptyHeritageClauseType, descriptor);\n      }\n\n      return delimitedList;\n    }\n\n    tsParseExpressionWithTypeArguments(): N.TsExpressionWithTypeArguments {\n      const node: N.TsExpressionWithTypeArguments = this.startNode();\n      // Note: TS uses parseLeftHandSideExpressionOrHigher,\n      // then has grammar errors later if it's not an EntityName.\n      node.expression = this.tsParseEntityName(/* allowReservedWords */ false);\n      if (this.isRelational(\"<\")) {\n        node.typeParameters = this.tsParseTypeArguments();\n      }\n\n      return this.finishNode(node, \"TSExpressionWithTypeArguments\");\n    }\n\n    tsParseInterfaceDeclaration(\n      node: N.TsInterfaceDeclaration,\n    ): N.TsInterfaceDeclaration {\n      node.id = this.parseIdentifier();\n      this.checkLVal(\n        node.id,\n        BIND_TS_INTERFACE,\n        undefined,\n        \"typescript interface declaration\",\n      );\n      node.typeParameters = this.tsTryParseTypeParameters();\n      if (this.eat(tt._extends)) {\n        node.extends = this.tsParseHeritageClause(\"extends\");\n      }\n      const body: N.TSInterfaceBody = this.startNode();\n      body.body = this.tsInType(this.tsParseObjectTypeMembers.bind(this));\n      node.body = this.finishNode(body, \"TSInterfaceBody\");\n      return this.finishNode(node, \"TSInterfaceDeclaration\");\n    }\n\n    tsParseTypeAliasDeclaration(\n      node: N.TsTypeAliasDeclaration,\n    ): N.TsTypeAliasDeclaration {\n      node.id = this.parseIdentifier();\n      this.checkLVal(node.id, BIND_TS_TYPE, undefined, \"typescript type alias\");\n\n      node.typeParameters = this.tsTryParseTypeParameters();\n      node.typeAnnotation = this.tsExpectThenParseType(tt.eq);\n      this.semicolon();\n      return this.finishNode(node, \"TSTypeAliasDeclaration\");\n    }\n\n    tsInNoContext<T>(cb: () => T): T {\n      const oldContext = this.state.context;\n      this.state.context = [oldContext[0]];\n      try {\n        return cb();\n      } finally {\n        this.state.context = oldContext;\n      }\n    }\n\n    /**\n     * Runs `cb` in a type context.\n     * This should be called one token *before* the first type token,\n     * so that the call to `next()` is run in type context.\n     */\n    tsInType<T>(cb: () => T): T {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      try {\n        return cb();\n      } finally {\n        this.state.inType = oldInType;\n      }\n    }\n\n    tsEatThenParseType(token: TokenType): N.TsType | typeof undefined {\n      return !this.match(token) ? undefined : this.tsNextThenParseType();\n    }\n\n    tsExpectThenParseType(token: TokenType): N.TsType {\n      return this.tsDoThenParseType(() => this.expect(token));\n    }\n\n    tsNextThenParseType(): N.TsType {\n      return this.tsDoThenParseType(() => this.next());\n    }\n\n    tsDoThenParseType(cb: () => void): N.TsType {\n      return this.tsInType(() => {\n        cb();\n        return this.tsParseType();\n      });\n    }\n\n    tsParseEnumMember(): N.TsEnumMember {\n      const node: N.TsEnumMember = this.startNode();\n      // Computed property names are grammar errors in an enum, so accept just string literal or identifier.\n      node.id = this.match(tt.string)\n        ? this.parseExprAtom()\n        : this.parseIdentifier(/* liberal */ true);\n      if (this.eat(tt.eq)) {\n        node.initializer = this.parseMaybeAssign();\n      }\n      return this.finishNode(node, \"TSEnumMember\");\n    }\n\n    tsParseEnumDeclaration(\n      node: N.TsEnumDeclaration,\n      isConst: boolean,\n    ): N.TsEnumDeclaration {\n      if (isConst) node.const = true;\n      node.id = this.parseIdentifier();\n      this.checkLVal(\n        node.id,\n        isConst ? BIND_TS_CONST_ENUM : BIND_TS_ENUM,\n        undefined,\n        \"typescript enum declaration\",\n      );\n\n      this.expect(tt.braceL);\n      node.members = this.tsParseDelimitedList(\n        \"EnumMembers\",\n        this.tsParseEnumMember.bind(this),\n      );\n      this.expect(tt.braceR);\n      return this.finishNode(node, \"TSEnumDeclaration\");\n    }\n\n    tsParseModuleBlock(): N.TsModuleBlock {\n      const node: N.TsModuleBlock = this.startNode();\n      this.scope.enter(SCOPE_OTHER);\n\n      this.expect(tt.braceL);\n      // Inside of a module block is considered \"top-level\", meaning it can have imports and exports.\n      this.parseBlockOrModuleBlockBody(\n        (node.body = []),\n        /* directives */ undefined,\n        /* topLevel */ true,\n        /* end */ tt.braceR,\n      );\n      this.scope.exit();\n      return this.finishNode(node, \"TSModuleBlock\");\n    }\n\n    tsParseModuleOrNamespaceDeclaration(\n      node: N.TsModuleDeclaration,\n      nested?: boolean = false,\n    ): N.TsModuleDeclaration {\n      node.id = this.parseIdentifier();\n\n      if (!nested) {\n        this.checkLVal(\n          node.id,\n          BIND_TS_NAMESPACE,\n          null,\n          \"module or namespace declaration\",\n        );\n      }\n\n      if (this.eat(tt.dot)) {\n        const inner = this.startNode();\n        this.tsParseModuleOrNamespaceDeclaration(inner, true);\n        node.body = inner;\n      } else {\n        this.scope.enter(SCOPE_TS_MODULE);\n        this.prodParam.enter(PARAM);\n        node.body = this.tsParseModuleBlock();\n        this.prodParam.exit();\n        this.scope.exit();\n      }\n      return this.finishNode(node, \"TSModuleDeclaration\");\n    }\n\n    tsParseAmbientExternalModuleDeclaration(\n      node: N.TsModuleDeclaration,\n    ): N.TsModuleDeclaration {\n      if (this.isContextual(\"global\")) {\n        node.global = true;\n        node.id = this.parseIdentifier();\n      } else if (this.match(tt.string)) {\n        node.id = this.parseExprAtom();\n      } else {\n        this.unexpected();\n      }\n      if (this.match(tt.braceL)) {\n        this.scope.enter(SCOPE_TS_MODULE);\n        this.prodParam.enter(PARAM);\n        node.body = this.tsParseModuleBlock();\n        this.prodParam.exit();\n        this.scope.exit();\n      } else {\n        this.semicolon();\n      }\n\n      return this.finishNode(node, \"TSModuleDeclaration\");\n    }\n\n    tsParseImportEqualsDeclaration(\n      node: N.TsImportEqualsDeclaration,\n      isExport?: boolean,\n    ): N.TsImportEqualsDeclaration {\n      node.isExport = isExport || false;\n      node.id = this.parseIdentifier();\n      this.checkLVal(\n        node.id,\n        BIND_LEXICAL,\n        undefined,\n        \"import equals declaration\",\n      );\n      this.expect(tt.eq);\n      node.moduleReference = this.tsParseModuleReference();\n      this.semicolon();\n      return this.finishNode(node, \"TSImportEqualsDeclaration\");\n    }\n\n    tsIsExternalModuleReference(): boolean {\n      return (\n        this.isContextual(\"require\") &&\n        this.lookaheadCharCode() === charCodes.leftParenthesis\n      );\n    }\n\n    tsParseModuleReference(): N.TsModuleReference {\n      return this.tsIsExternalModuleReference()\n        ? this.tsParseExternalModuleReference()\n        : this.tsParseEntityName(/* allowReservedWords */ false);\n    }\n\n    tsParseExternalModuleReference(): N.TsExternalModuleReference {\n      const node: N.TsExternalModuleReference = this.startNode();\n      this.expectContextual(\"require\");\n      this.expect(tt.parenL);\n      if (!this.match(tt.string)) {\n        throw this.unexpected();\n      }\n      // For compatibility to estree we cannot call parseLiteral directly here\n      node.expression = this.parseExprAtom();\n      this.expect(tt.parenR);\n      return this.finishNode(node, \"TSExternalModuleReference\");\n    }\n\n    // Utilities\n\n    tsLookAhead<T>(f: () => T): T {\n      const state = this.state.clone();\n      const res = f();\n      this.state = state;\n      return res;\n    }\n\n    tsTryParseAndCatch<T: ?N.NodeBase>(f: () => T): ?T {\n      const result = this.tryParse(abort => f() || abort());\n\n      if (result.aborted || !result.node) return undefined;\n      if (result.error) this.state = result.failState;\n      return result.node;\n    }\n\n    tsTryParse<T>(f: () => ?T): ?T {\n      const state = this.state.clone();\n      const result = f();\n      if (result !== undefined && result !== false) {\n        return result;\n      } else {\n        this.state = state;\n        return undefined;\n      }\n    }\n\n    tsTryParseDeclare(nany: any): ?N.Declaration {\n      if (this.isLineTerminator()) {\n        return;\n      }\n      let starttype = this.state.type;\n      let kind;\n\n      if (this.isContextual(\"let\")) {\n        starttype = tt._var;\n        kind = \"let\";\n      }\n\n      switch (starttype) {\n        case tt._function:\n          return this.parseFunctionStatement(\n            nany,\n            /* async */ false,\n            /* declarationPosition */ true,\n          );\n        case tt._class:\n          // While this is also set by tsParseExpressionStatement, we need to set it\n          // before parsing the class declaration to now how to register it in the scope.\n          nany.declare = true;\n          return this.parseClass(\n            nany,\n            /* isStatement */ true,\n            /* optionalId */ false,\n          );\n        case tt._const:\n          if (this.match(tt._const) && this.isLookaheadContextual(\"enum\")) {\n            // `const enum = 0;` not allowed because \"enum\" is a strict mode reserved word.\n            this.expect(tt._const);\n            this.expectContextual(\"enum\");\n            return this.tsParseEnumDeclaration(nany, /* isConst */ true);\n          }\n        // falls through\n        case tt._var:\n          kind = kind || this.state.value;\n          return this.parseVarStatement(nany, kind);\n        case tt.name: {\n          const value = this.state.value;\n          if (value === \"global\") {\n            return this.tsParseAmbientExternalModuleDeclaration(nany);\n          } else {\n            return this.tsParseDeclaration(nany, value, /* next */ true);\n          }\n        }\n      }\n    }\n\n    // Note: this won't be called unless the keyword is allowed in `shouldParseExportDeclaration`.\n    tsTryParseExportDeclaration(): ?N.Declaration {\n      return this.tsParseDeclaration(\n        this.startNode(),\n        this.state.value,\n        /* next */ true,\n      );\n    }\n\n    tsParseExpressionStatement(node: any, expr: N.Identifier): ?N.Declaration {\n      switch (expr.name) {\n        case \"declare\": {\n          const declaration = this.tsTryParseDeclare(node);\n          if (declaration) {\n            declaration.declare = true;\n            return declaration;\n          }\n          break;\n        }\n        case \"global\":\n          // `global { }` (with no `declare`) may appear inside an ambient module declaration.\n          // Would like to use tsParseAmbientExternalModuleDeclaration here, but already ran past \"global\".\n          if (this.match(tt.braceL)) {\n            this.scope.enter(SCOPE_TS_MODULE);\n            this.prodParam.enter(PARAM);\n            const mod: N.TsModuleDeclaration = node;\n            mod.global = true;\n            mod.id = expr;\n            mod.body = this.tsParseModuleBlock();\n            this.scope.exit();\n            this.prodParam.exit();\n            return this.finishNode(mod, \"TSModuleDeclaration\");\n          }\n          break;\n\n        default:\n          return this.tsParseDeclaration(node, expr.name, /* next */ false);\n      }\n    }\n\n    // Common to tsTryParseDeclare, tsTryParseExportDeclaration, and tsParseExpressionStatement.\n    tsParseDeclaration(\n      node: any,\n      value: string,\n      next: boolean,\n    ): ?N.Declaration {\n      switch (value) {\n        case \"abstract\":\n          if (this.tsCheckLineTerminatorAndMatch(tt._class, next)) {\n            const cls: N.ClassDeclaration = node;\n            cls.abstract = true;\n            if (next) {\n              this.next();\n              if (!this.match(tt._class)) {\n                this.unexpected(null, tt._class);\n              }\n            }\n            return this.parseClass(\n              cls,\n              /* isStatement */ true,\n              /* optionalId */ false,\n            );\n          }\n          break;\n\n        case \"enum\":\n          if (next || this.match(tt.name)) {\n            if (next) this.next();\n            return this.tsParseEnumDeclaration(node, /* isConst */ false);\n          }\n          break;\n\n        case \"interface\":\n          if (this.tsCheckLineTerminatorAndMatch(tt.name, next)) {\n            if (next) this.next();\n            return this.tsParseInterfaceDeclaration(node);\n          }\n          break;\n\n        case \"module\":\n          if (next) this.next();\n          if (this.match(tt.string)) {\n            return this.tsParseAmbientExternalModuleDeclaration(node);\n          } else if (this.tsCheckLineTerminatorAndMatch(tt.name, next)) {\n            return this.tsParseModuleOrNamespaceDeclaration(node);\n          }\n          break;\n\n        case \"namespace\":\n          if (this.tsCheckLineTerminatorAndMatch(tt.name, next)) {\n            if (next) this.next();\n            return this.tsParseModuleOrNamespaceDeclaration(node);\n          }\n          break;\n\n        case \"type\":\n          if (this.tsCheckLineTerminatorAndMatch(tt.name, next)) {\n            if (next) this.next();\n            return this.tsParseTypeAliasDeclaration(node);\n          }\n          break;\n      }\n    }\n\n    tsCheckLineTerminatorAndMatch(tokenType: TokenType, next: boolean) {\n      return (next || this.match(tokenType)) && !this.isLineTerminator();\n    }\n\n    tsTryParseGenericAsyncArrowFunction(\n      startPos: number,\n      startLoc: Position,\n    ): ?N.ArrowFunctionExpression {\n      if (!this.isRelational(\"<\")) {\n        return undefined;\n      }\n\n      const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n      const oldYieldPos = this.state.yieldPos;\n      const oldAwaitPos = this.state.awaitPos;\n      this.state.maybeInArrowParameters = true;\n      this.state.yieldPos = -1;\n      this.state.awaitPos = -1;\n\n      const res: ?N.ArrowFunctionExpression = this.tsTryParseAndCatch(() => {\n        const node: N.ArrowFunctionExpression = this.startNodeAt(\n          startPos,\n          startLoc,\n        );\n        node.typeParameters = this.tsParseTypeParameters();\n        // Don't use overloaded parseFunctionParams which would look for \"<\" again.\n        super.parseFunctionParams(node);\n        node.returnType = this.tsTryParseTypeOrTypePredicateAnnotation();\n        this.expect(tt.arrow);\n        return node;\n      });\n\n      this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n      this.state.yieldPos = oldYieldPos;\n      this.state.awaitPos = oldAwaitPos;\n\n      if (!res) {\n        return undefined;\n      }\n\n      return this.parseArrowExpression(\n        res,\n        /* params are already set */ null,\n        /* async */ true,\n      );\n    }\n\n    tsParseTypeArguments(): N.TsTypeParameterInstantiation {\n      const node = this.startNode();\n      node.params = this.tsInType(() =>\n        // Temporarily remove a JSX parsing context, which makes us scan different tokens.\n        this.tsInNoContext(() => {\n          this.expectRelational(\"<\");\n          return this.tsParseDelimitedList(\n            \"TypeParametersOrArguments\",\n            this.tsParseType.bind(this),\n          );\n        }),\n      );\n      // This reads the next token after the `>` too, so do this in the enclosing context.\n      // But be sure not to parse a regex in the jsx expression `<C<number> />`, so set exprAllowed = false\n      this.state.exprAllowed = false;\n      this.expectRelational(\">\");\n      return this.finishNode(node, \"TSTypeParameterInstantiation\");\n    }\n\n    tsIsDeclarationStart(): boolean {\n      if (this.match(tt.name)) {\n        switch (this.state.value) {\n          case \"abstract\":\n          case \"declare\":\n          case \"enum\":\n          case \"interface\":\n          case \"module\":\n          case \"namespace\":\n          case \"type\":\n            return true;\n        }\n      }\n\n      return false;\n    }\n\n    // ======================================================\n    // OVERRIDES\n    // ======================================================\n\n    isExportDefaultSpecifier(): boolean {\n      if (this.tsIsDeclarationStart()) return false;\n      return super.isExportDefaultSpecifier();\n    }\n\n    parseAssignableListItem(\n      allowModifiers: ?boolean,\n      decorators: N.Decorator[],\n    ): N.Pattern | N.TSParameterProperty {\n      // Store original location/position to include modifiers in range\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n\n      let accessibility: ?N.Accessibility;\n      let readonly = false;\n      if (allowModifiers) {\n        accessibility = this.parseAccessModifier();\n        readonly = !!this.tsParseModifier([\"readonly\"]);\n      }\n\n      const left = this.parseMaybeDefault();\n      this.parseAssignableListItemTypes(left);\n      const elt = this.parseMaybeDefault(left.start, left.loc.start, left);\n      if (accessibility || readonly) {\n        const pp: N.TSParameterProperty = this.startNodeAt(startPos, startLoc);\n        if (decorators.length) {\n          pp.decorators = decorators;\n        }\n        if (accessibility) pp.accessibility = accessibility;\n        if (readonly) pp.readonly = readonly;\n        if (elt.type !== \"Identifier\" && elt.type !== \"AssignmentPattern\") {\n          this.raise(pp.start, TSErrors.UnsupportedParameterPropertyKind);\n        }\n        pp.parameter = ((elt: any): N.Identifier | N.AssignmentPattern);\n        return this.finishNode(pp, \"TSParameterProperty\");\n      }\n\n      if (decorators.length) {\n        left.decorators = decorators;\n      }\n\n      return elt;\n    }\n\n    parseFunctionBodyAndFinish(\n      node: N.BodilessFunctionOrMethodBase,\n      type: string,\n      isMethod?: boolean = false,\n    ): void {\n      if (this.match(tt.colon)) {\n        node.returnType = this.tsParseTypeOrTypePredicateAnnotation(tt.colon);\n      }\n\n      const bodilessType =\n        type === \"FunctionDeclaration\"\n          ? \"TSDeclareFunction\"\n          : type === \"ClassMethod\"\n          ? \"TSDeclareMethod\"\n          : undefined;\n      if (bodilessType && !this.match(tt.braceL) && this.isLineTerminator()) {\n        this.finishNode(node, bodilessType);\n        return;\n      }\n\n      super.parseFunctionBodyAndFinish(node, type, isMethod);\n    }\n\n    registerFunctionStatementId(node: N.Function): void {\n      if (!node.body && node.id) {\n        // Function ids are validated after parsing their body.\n        // For bodyless function, we need to do it here.\n        this.checkLVal(node.id, BIND_TS_AMBIENT, null, \"function name\");\n      } else {\n        super.registerFunctionStatementId(...arguments);\n      }\n    }\n\n    parseSubscript(\n      base: N.Expression,\n      startPos: number,\n      startLoc: Position,\n      noCalls: ?boolean,\n      state: N.ParseSubscriptState,\n    ): N.Expression {\n      if (!this.hasPrecedingLineBreak() && this.match(tt.bang)) {\n        this.state.exprAllowed = false;\n        this.next();\n\n        const nonNullExpression: N.TsNonNullExpression = this.startNodeAt(\n          startPos,\n          startLoc,\n        );\n        nonNullExpression.expression = base;\n        return this.finishNode(nonNullExpression, \"TSNonNullExpression\");\n      }\n\n      if (this.isRelational(\"<\")) {\n        // tsTryParseAndCatch is expensive, so avoid if not necessary.\n        // There are number of things we are going to \"maybe\" parse, like type arguments on\n        // tagged template expressions. If any of them fail, walk it back and continue.\n        const result = this.tsTryParseAndCatch(() => {\n          if (!noCalls && this.atPossibleAsyncArrow(base)) {\n            // Almost certainly this is a generic async function `async <T>() => ...\n            // But it might be a call with a type argument `async<T>();`\n            const asyncArrowFn = this.tsTryParseGenericAsyncArrowFunction(\n              startPos,\n              startLoc,\n            );\n            if (asyncArrowFn) {\n              return asyncArrowFn;\n            }\n          }\n\n          const node: N.CallExpression = this.startNodeAt(startPos, startLoc);\n          node.callee = base;\n\n          const typeArguments = this.tsParseTypeArguments();\n\n          if (typeArguments) {\n            if (!noCalls && this.eat(tt.parenL)) {\n              // possibleAsync always false here, because we would have handled it above.\n              // $FlowIgnore (won't be any undefined arguments)\n              node.arguments = this.parseCallExpressionArguments(\n                tt.parenR,\n                /* possibleAsync */ false,\n              );\n              node.typeParameters = typeArguments;\n              return this.finishCallExpression(node, state.optionalChainMember);\n            } else if (this.match(tt.backQuote)) {\n              return this.parseTaggedTemplateExpression(\n                startPos,\n                startLoc,\n                base,\n                state,\n                typeArguments,\n              );\n            }\n          }\n\n          this.unexpected();\n        });\n\n        if (result) return result;\n      }\n\n      return super.parseSubscript(base, startPos, startLoc, noCalls, state);\n    }\n\n    parseNewArguments(node: N.NewExpression): void {\n      if (this.isRelational(\"<\")) {\n        // tsTryParseAndCatch is expensive, so avoid if not necessary.\n        // 99% certain this is `new C<T>();`. But may be `new C < T;`, which is also legal.\n        const typeParameters = this.tsTryParseAndCatch(() => {\n          const args = this.tsParseTypeArguments();\n          if (!this.match(tt.parenL)) this.unexpected();\n          return args;\n        });\n        if (typeParameters) {\n          node.typeParameters = typeParameters;\n        }\n      }\n\n      super.parseNewArguments(node);\n    }\n\n    parseExprOp(\n      left: N.Expression,\n      leftStartPos: number,\n      leftStartLoc: Position,\n      minPrec: number,\n      noIn: ?boolean,\n    ) {\n      if (\n        nonNull(tt._in.binop) > minPrec &&\n        !this.hasPrecedingLineBreak() &&\n        this.isContextual(\"as\")\n      ) {\n        const node: N.TsAsExpression = this.startNodeAt(\n          leftStartPos,\n          leftStartLoc,\n        );\n        node.expression = left;\n        const _const = this.tsTryNextParseConstantContext();\n        if (_const) {\n          node.typeAnnotation = _const;\n        } else {\n          node.typeAnnotation = this.tsNextThenParseType();\n        }\n        this.finishNode(node, \"TSAsExpression\");\n        return this.parseExprOp(\n          node,\n          leftStartPos,\n          leftStartLoc,\n          minPrec,\n          noIn,\n        );\n      }\n\n      return super.parseExprOp(left, leftStartPos, leftStartLoc, minPrec, noIn);\n    }\n\n    checkReservedWord(\n      word: string, // eslint-disable-line no-unused-vars\n      startLoc: number, // eslint-disable-line no-unused-vars\n      checkKeywords: boolean, // eslint-disable-line no-unused-vars\n      // eslint-disable-next-line no-unused-vars\n      isBinding: boolean,\n    ): void {\n      // Don't bother checking for TypeScript code.\n      // Strict mode words may be allowed as in `declare namespace N { const static: number; }`.\n      // And we have a type checker anyway, so don't bother having the parser do it.\n    }\n\n    /*\n    Don't bother doing this check in TypeScript code because:\n    1. We may have a nested export statement with the same name:\n      export const x = 0;\n      export namespace N {\n        export const x = 1;\n      }\n    2. We have a type checker to warn us about this sort of thing.\n    */\n    checkDuplicateExports() {}\n\n    parseImport(node: N.Node): N.AnyImport {\n      if (this.match(tt.name) || this.match(tt.star) || this.match(tt.braceL)) {\n        const ahead = this.lookahead();\n\n        if (this.match(tt.name) && ahead.type === tt.eq) {\n          return this.tsParseImportEqualsDeclaration(node);\n        }\n\n        if (\n          this.isContextual(\"type\") &&\n          // import type, { a } from \"b\";\n          ahead.type !== tt.comma &&\n          // import type from \"a\";\n          !(ahead.type === tt.name && ahead.value === \"from\")\n        ) {\n          node.importKind = \"type\";\n          this.next();\n        } else {\n          node.importKind = \"value\";\n        }\n      }\n\n      const importNode = super.parseImport(node);\n      /*:: invariant(importNode.type !== \"TSImportEqualsDeclaration\") */\n\n      // `import type` can only be used on imports with named imports or with a\n      // default import - but not both\n      if (\n        importNode.importKind === \"type\" &&\n        importNode.specifiers.length > 1 &&\n        importNode.specifiers[0].type === \"ImportDefaultSpecifier\"\n      ) {\n        this.raise(\n          importNode.start,\n          \"A type-only import can specify a default import or named bindings, but not both.\",\n        );\n      }\n\n      return importNode;\n    }\n\n    parseExport(node: N.Node): N.AnyExport {\n      if (this.match(tt._import)) {\n        // `export import A = B;`\n        this.expect(tt._import);\n        return this.tsParseImportEqualsDeclaration(node, /* isExport */ true);\n      } else if (this.eat(tt.eq)) {\n        // `export = x;`\n        const assign: N.TsExportAssignment = node;\n        assign.expression = this.parseExpression();\n        this.semicolon();\n        return this.finishNode(assign, \"TSExportAssignment\");\n      } else if (this.eatContextual(\"as\")) {\n        // `export as namespace A;`\n        const decl: N.TsNamespaceExportDeclaration = node;\n        // See `parseNamespaceExportDeclaration` in TypeScript's own parser\n        this.expectContextual(\"namespace\");\n        decl.id = this.parseIdentifier();\n        this.semicolon();\n        return this.finishNode(decl, \"TSNamespaceExportDeclaration\");\n      } else {\n        if (this.isContextual(\"type\") && this.lookahead().type === tt.braceL) {\n          this.next();\n          node.exportKind = \"type\";\n        } else {\n          node.exportKind = \"value\";\n        }\n\n        return super.parseExport(node);\n      }\n    }\n\n    isAbstractClass(): boolean {\n      return (\n        this.isContextual(\"abstract\") && this.lookahead().type === tt._class\n      );\n    }\n\n    parseExportDefaultExpression(): N.Expression | N.Declaration {\n      if (this.isAbstractClass()) {\n        const cls = this.startNode();\n        this.next(); // Skip \"abstract\"\n        this.parseClass(cls, true, true);\n        cls.abstract = true;\n        return cls;\n      }\n\n      // export default interface allowed in:\n      // https://github.com/Microsoft/TypeScript/pull/16040\n      if (this.state.value === \"interface\") {\n        const result = this.tsParseDeclaration(\n          this.startNode(),\n          this.state.value,\n          true,\n        );\n\n        if (result) return result;\n      }\n\n      return super.parseExportDefaultExpression();\n    }\n\n    parseStatementContent(context: ?string, topLevel: ?boolean): N.Statement {\n      if (this.state.type === tt._const) {\n        const ahead = this.lookahead();\n        if (ahead.type === tt.name && ahead.value === \"enum\") {\n          const node: N.TsEnumDeclaration = this.startNode();\n          this.expect(tt._const);\n          this.expectContextual(\"enum\");\n          return this.tsParseEnumDeclaration(node, /* isConst */ true);\n        }\n      }\n      return super.parseStatementContent(context, topLevel);\n    }\n\n    parseAccessModifier(): ?N.Accessibility {\n      return this.tsParseModifier([\"public\", \"protected\", \"private\"]);\n    }\n\n    parseClassMember(\n      classBody: N.ClassBody,\n      member: any,\n      state: { hadConstructor: boolean },\n      constructorAllowsSuper: boolean,\n    ): void {\n      this.tsParseModifiers(member, [\"declare\"]);\n      const accessibility = this.parseAccessModifier();\n      if (accessibility) member.accessibility = accessibility;\n      this.tsParseModifiers(member, [\"declare\"]);\n\n      super.parseClassMember(classBody, member, state, constructorAllowsSuper);\n    }\n\n    parseClassMemberWithIsStatic(\n      classBody: N.ClassBody,\n      member: N.ClassMember | N.TsIndexSignature,\n      state: { hadConstructor: boolean },\n      isStatic: boolean,\n      constructorAllowsSuper: boolean,\n    ): void {\n      this.tsParseModifiers(member, [\"abstract\", \"readonly\", \"declare\"]);\n\n      const idx = this.tsTryParseIndexSignature(member);\n      if (idx) {\n        classBody.body.push(idx);\n\n        if ((member: any).abstract) {\n          this.raise(member.start, TSErrors.IndexSignatureHasAbstract);\n        }\n        if (isStatic) {\n          this.raise(member.start, TSErrors.IndexSignatureHasStatic);\n        }\n        if ((member: any).accessibility) {\n          this.raise(\n            member.start,\n            TSErrors.IndexSignatureHasAccessibility,\n            (member: any).accessibility,\n          );\n        }\n\n        return;\n      }\n\n      /*:: invariant(member.type !== \"TSIndexSignature\") */\n\n      super.parseClassMemberWithIsStatic(\n        classBody,\n        member,\n        state,\n        isStatic,\n        constructorAllowsSuper,\n      );\n    }\n\n    parsePostMemberNameModifiers(\n      methodOrProp: N.ClassMethod | N.ClassProperty | N.ClassPrivateProperty,\n    ): void {\n      const optional = this.eat(tt.question);\n      if (optional) methodOrProp.optional = true;\n\n      if ((methodOrProp: any).readonly && this.match(tt.parenL)) {\n        this.raise(methodOrProp.start, TSErrors.ClassMethodHasReadonly);\n      }\n\n      if ((methodOrProp: any).declare && this.match(tt.parenL)) {\n        this.raise(methodOrProp.start, TSErrors.ClassMethodHasDeclare);\n      }\n    }\n\n    // Note: The reason we do this in `parseExpressionStatement` and not `parseStatement`\n    // is that e.g. `type()` is valid JS, so we must try parsing that first.\n    // If it's really a type, we will parse `type` as the statement, and can correct it here\n    // by parsing the rest.\n    parseExpressionStatement(\n      node: N.ExpressionStatement,\n      expr: N.Expression,\n    ): N.Statement {\n      const decl =\n        expr.type === \"Identifier\"\n          ? this.tsParseExpressionStatement(node, expr)\n          : undefined;\n      return decl || super.parseExpressionStatement(node, expr);\n    }\n\n    // export type\n    // Should be true for anything parsed by `tsTryParseExportDeclaration`.\n    shouldParseExportDeclaration(): boolean {\n      if (this.tsIsDeclarationStart()) return true;\n      return super.shouldParseExportDeclaration();\n    }\n\n    // An apparent conditional expression could actually be an optional parameter in an arrow function.\n    parseConditional(\n      expr: N.Expression,\n      noIn: ?boolean,\n      startPos: number,\n      startLoc: Position,\n      refNeedsArrowPos?: ?Pos,\n    ): N.Expression {\n      // only do the expensive clone if there is a question mark\n      // and if we come from inside parens\n      if (!refNeedsArrowPos || !this.match(tt.question)) {\n        return super.parseConditional(\n          expr,\n          noIn,\n          startPos,\n          startLoc,\n          refNeedsArrowPos,\n        );\n      }\n\n      const result = this.tryParse(() =>\n        super.parseConditional(expr, noIn, startPos, startLoc),\n      );\n\n      if (!result.node) {\n        // $FlowIgnore\n        refNeedsArrowPos.start = result.error.pos || this.state.start;\n        return expr;\n      }\n      if (result.error) this.state = result.failState;\n      return result.node;\n    }\n\n    // Note: These \"type casts\" are *not* valid TS expressions.\n    // But we parse them here and change them when completing the arrow function.\n    parseParenItem(\n      node: N.Expression,\n      startPos: number,\n      startLoc: Position,\n    ): N.Expression {\n      node = super.parseParenItem(node, startPos, startLoc);\n      if (this.eat(tt.question)) {\n        node.optional = true;\n        // Include questionmark in location of node\n        // Don't use this.finishNode() as otherwise we might process comments twice and\n        // include already consumed parens\n        this.resetEndLocation(node);\n      }\n\n      if (this.match(tt.colon)) {\n        const typeCastNode: N.TsTypeCastExpression = this.startNodeAt(\n          startPos,\n          startLoc,\n        );\n        typeCastNode.expression = node;\n        typeCastNode.typeAnnotation = this.tsParseTypeAnnotation();\n\n        return this.finishNode(typeCastNode, \"TSTypeCastExpression\");\n      }\n\n      return node;\n    }\n\n    parseExportDeclaration(node: N.ExportNamedDeclaration): ?N.Declaration {\n      // Store original location/position\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n\n      // \"export declare\" is equivalent to just \"export\".\n      const isDeclare = this.eatContextual(\"declare\");\n\n      let declaration: ?N.Declaration;\n\n      if (this.match(tt.name)) {\n        declaration = this.tsTryParseExportDeclaration();\n      }\n      if (!declaration) {\n        declaration = super.parseExportDeclaration(node);\n      }\n      if (\n        declaration &&\n        (declaration.type === \"TSInterfaceDeclaration\" ||\n          declaration.type === \"TSTypeAliasDeclaration\" ||\n          isDeclare)\n      ) {\n        node.exportKind = \"type\";\n      }\n\n      if (declaration && isDeclare) {\n        // Reset location to include `declare` in range\n        this.resetStartLocation(declaration, startPos, startLoc);\n\n        declaration.declare = true;\n      }\n\n      return declaration;\n    }\n\n    parseClassId(\n      node: N.Class,\n      isStatement: boolean,\n      optionalId: ?boolean,\n    ): void {\n      if ((!isStatement || optionalId) && this.isContextual(\"implements\")) {\n        return;\n      }\n\n      super.parseClassId(\n        node,\n        isStatement,\n        optionalId,\n        (node: any).declare ? BIND_TS_AMBIENT : BIND_CLASS,\n      );\n      const typeParameters = this.tsTryParseTypeParameters();\n      if (typeParameters) node.typeParameters = typeParameters;\n    }\n\n    parseClassPropertyAnnotation(\n      node: N.ClassProperty | N.ClassPrivateProperty,\n    ): void {\n      if (!node.optional && this.eat(tt.bang)) {\n        node.definite = true;\n      }\n\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) node.typeAnnotation = type;\n    }\n\n    parseClassProperty(node: N.ClassProperty): N.ClassProperty {\n      this.parseClassPropertyAnnotation(node);\n\n      if (node.declare && this.match(tt.equal)) {\n        this.raise(this.state.start, TSErrors.DeclareClassFieldHasInitializer);\n      }\n\n      return super.parseClassProperty(node);\n    }\n\n    parseClassPrivateProperty(\n      node: N.ClassPrivateProperty,\n    ): N.ClassPrivateProperty {\n      // $FlowIgnore\n      if (node.abstract) {\n        this.raise(node.start, TSErrors.PrivateElementHasAbstract);\n      }\n\n      // $FlowIgnore\n      if (node.accessibility) {\n        this.raise(\n          node.start,\n          TSErrors.PrivateElementHasAccessibility,\n          node.accessibility,\n        );\n      }\n\n      this.parseClassPropertyAnnotation(node);\n      return super.parseClassPrivateProperty(node);\n    }\n\n    pushClassMethod(\n      classBody: N.ClassBody,\n      method: N.ClassMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowsDirectSuper: boolean,\n    ): void {\n      const typeParameters = this.tsTryParseTypeParameters();\n      if (typeParameters) method.typeParameters = typeParameters;\n      super.pushClassMethod(\n        classBody,\n        method,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowsDirectSuper,\n      );\n    }\n\n    pushClassPrivateMethod(\n      classBody: N.ClassBody,\n      method: N.ClassPrivateMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n    ): void {\n      const typeParameters = this.tsTryParseTypeParameters();\n      if (typeParameters) method.typeParameters = typeParameters;\n      super.pushClassPrivateMethod(classBody, method, isGenerator, isAsync);\n    }\n\n    parseClassSuper(node: N.Class): void {\n      super.parseClassSuper(node);\n      if (node.superClass && this.isRelational(\"<\")) {\n        node.superTypeParameters = this.tsParseTypeArguments();\n      }\n      if (this.eatContextual(\"implements\")) {\n        node.implements = this.tsParseHeritageClause(\"implements\");\n      }\n    }\n\n    parseObjPropValue(prop: N.ObjectMember, ...args): void {\n      const typeParameters = this.tsTryParseTypeParameters();\n      if (typeParameters) prop.typeParameters = typeParameters;\n\n      super.parseObjPropValue(prop, ...args);\n    }\n\n    parseFunctionParams(node: N.Function, allowModifiers?: boolean): void {\n      const typeParameters = this.tsTryParseTypeParameters();\n      if (typeParameters) node.typeParameters = typeParameters;\n      super.parseFunctionParams(node, allowModifiers);\n    }\n\n    // `let x: number;`\n    parseVarId(\n      decl: N.VariableDeclarator,\n      kind: \"var\" | \"let\" | \"const\",\n    ): void {\n      super.parseVarId(decl, kind);\n      if (decl.id.type === \"Identifier\" && this.eat(tt.bang)) {\n        decl.definite = true;\n      }\n\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) {\n        decl.id.typeAnnotation = type;\n        this.resetEndLocation(decl.id); // set end position to end of type\n      }\n    }\n\n    // parse the return type of an async arrow function - let foo = (async (): number => {});\n    parseAsyncArrowFromCallExpression(\n      node: N.ArrowFunctionExpression,\n      call: N.CallExpression,\n    ): N.ArrowFunctionExpression {\n      if (this.match(tt.colon)) {\n        node.returnType = this.tsParseTypeAnnotation();\n      }\n      return super.parseAsyncArrowFromCallExpression(node, call);\n    }\n\n    parseMaybeAssign(...args): N.Expression {\n      // Note: When the JSX plugin is on, type assertions (`<T> x`) aren't valid syntax.\n\n      let state: ?State;\n      let jsx;\n      let typeCast;\n\n      if (this.match(tt.jsxTagStart)) {\n        // Prefer to parse JSX if possible. But may be an arrow fn.\n        state = this.state.clone();\n\n        jsx = this.tryParse(() => super.parseMaybeAssign(...args), state);\n        /*:: invariant(!jsx.aborted) */\n\n        if (!jsx.error) return jsx.node;\n\n        // Remove `tc.j_expr` and `tc.j_oTag` from context added\n        // by parsing `jsxTagStart` to stop the JSX plugin from\n        // messing with the tokens\n        const { context } = this.state;\n        if (context[context.length - 1] === ct.j_oTag) {\n          context.length -= 2;\n        } else if (context[context.length - 1] === ct.j_expr) {\n          context.length -= 1;\n        }\n      }\n\n      if (!jsx?.error && !this.isRelational(\"<\")) {\n        return super.parseMaybeAssign(...args);\n      }\n\n      // Either way, we're looking at a '<': tt.jsxTagStart or relational.\n\n      let typeParameters: N.TsTypeParameterDeclaration;\n      state = state || this.state.clone();\n\n      const arrow = this.tryParse(abort => {\n        // This is similar to TypeScript's `tryParseParenthesizedArrowFunctionExpression`.\n        typeParameters = this.tsParseTypeParameters();\n        const expr = super.parseMaybeAssign(...args);\n\n        if (\n          expr.type !== \"ArrowFunctionExpression\" ||\n          (expr.extra && expr.extra.parenthesized)\n        ) {\n          abort();\n        }\n\n        // Correct TypeScript code should have at least 1 type parameter, but don't crash on bad code.\n        if (typeParameters?.params.length !== 0) {\n          this.resetStartLocationFromNode(expr, typeParameters);\n        }\n        expr.typeParameters = typeParameters;\n        return expr;\n      }, state);\n\n      if (!arrow.error && !arrow.aborted) return arrow.node;\n\n      if (!jsx) {\n        // Try parsing a type cast instead of an arrow function.\n        // This will never happen outside of JSX.\n        // (Because in JSX the '<' should be a jsxTagStart and not a relational.\n        assert(!this.hasPlugin(\"jsx\"));\n\n        // This will start with a type assertion (via parseMaybeUnary).\n        // But don't directly call `this.tsParseTypeAssertion` because we want to handle any binary after it.\n        typeCast = this.tryParse(() => super.parseMaybeAssign(...args), state);\n        /*:: invariant(!typeCast.aborted) */\n        if (!typeCast.error) return typeCast.node;\n      }\n\n      if (jsx?.node) {\n        /*:: invariant(jsx.failState) */\n        this.state = jsx.failState;\n        return jsx.node;\n      }\n\n      if (arrow.node) {\n        /*:: invariant(arrow.failState) */\n        this.state = arrow.failState;\n        return arrow.node;\n      }\n\n      if (typeCast?.node) {\n        /*:: invariant(typeCast.failState) */\n        this.state = typeCast.failState;\n        return typeCast.node;\n      }\n\n      if (jsx?.thrown) throw jsx.error;\n      if (arrow.thrown) throw arrow.error;\n      if (typeCast?.thrown) throw typeCast.error;\n\n      throw jsx?.error || arrow.error || typeCast?.error;\n    }\n\n    // Handle type assertions\n    parseMaybeUnary(refExpressionErrors?: ?ExpressionErrors): N.Expression {\n      if (!this.hasPlugin(\"jsx\") && this.isRelational(\"<\")) {\n        return this.tsParseTypeAssertion();\n      } else {\n        return super.parseMaybeUnary(refExpressionErrors);\n      }\n    }\n\n    parseArrow(node: N.ArrowFunctionExpression): ?N.ArrowFunctionExpression {\n      if (this.match(tt.colon)) {\n        // This is different from how the TS parser does it.\n        // TS uses lookahead. The Babel Parser parses it as a parenthesized expression and converts.\n\n        const result = this.tryParse(abort => {\n          const returnType = this.tsParseTypeOrTypePredicateAnnotation(\n            tt.colon,\n          );\n          if (this.canInsertSemicolon() || !this.match(tt.arrow)) abort();\n          return returnType;\n        });\n\n        if (result.aborted) return;\n\n        if (!result.thrown) {\n          if (result.error) this.state = result.failState;\n          node.returnType = result.node;\n        }\n      }\n\n      return super.parseArrow(node);\n    }\n\n    // Allow type annotations inside of a parameter list.\n    parseAssignableListItemTypes(param: N.Pattern) {\n      if (this.eat(tt.question)) {\n        if (param.type !== \"Identifier\") {\n          this.raise(param.start, TSErrors.PatternIsOptional);\n        }\n\n        ((param: any): N.Identifier).optional = true;\n      }\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) param.typeAnnotation = type;\n      this.resetEndLocation(param);\n\n      return param;\n    }\n\n    toAssignable(node: N.Node): N.Node {\n      switch (node.type) {\n        case \"TSTypeCastExpression\":\n          return super.toAssignable(this.typeCastToParameter(node));\n        case \"TSParameterProperty\":\n          return super.toAssignable(node);\n        case \"TSAsExpression\":\n        case \"TSNonNullExpression\":\n        case \"TSTypeAssertion\":\n          node.expression = this.toAssignable(node.expression);\n          return node;\n        default:\n          return super.toAssignable(node);\n      }\n    }\n\n    checkLVal(\n      expr: N.Expression,\n      bindingType: BindingTypes = BIND_NONE,\n      checkClashes: ?{ [key: string]: boolean },\n      contextDescription: string,\n    ): void {\n      switch (expr.type) {\n        case \"TSTypeCastExpression\":\n          // Allow \"typecasts\" to appear on the left of assignment expressions,\n          // because it may be in an arrow function.\n          // e.g. `const f = (foo: number = 0) => foo;`\n          return;\n        case \"TSParameterProperty\":\n          this.checkLVal(\n            expr.parameter,\n            bindingType,\n            checkClashes,\n            \"parameter property\",\n          );\n          return;\n        case \"TSAsExpression\":\n        case \"TSNonNullExpression\":\n        case \"TSTypeAssertion\":\n          this.checkLVal(\n            expr.expression,\n            bindingType,\n            checkClashes,\n            contextDescription,\n          );\n          return;\n        default:\n          super.checkLVal(expr, bindingType, checkClashes, contextDescription);\n          return;\n      }\n    }\n\n    parseBindingAtom(): N.Pattern {\n      switch (this.state.type) {\n        case tt._this:\n          // \"this\" may be the name of a parameter, so allow it.\n          return this.parseIdentifier(/* liberal */ true);\n        default:\n          return super.parseBindingAtom();\n      }\n    }\n\n    parseMaybeDecoratorArguments(expr: N.Expression): N.Expression {\n      if (this.isRelational(\"<\")) {\n        const typeArguments = this.tsParseTypeArguments();\n\n        if (this.match(tt.parenL)) {\n          const call = super.parseMaybeDecoratorArguments(expr);\n          call.typeParameters = typeArguments;\n          return call;\n        }\n\n        this.unexpected(this.state.start, tt.parenL);\n      }\n\n      return super.parseMaybeDecoratorArguments(expr);\n    }\n\n    // === === === === === === === === === === === === === === === ===\n    // Note: All below methods are duplicates of something in flow.js.\n    // Not sure what the best way to combine these is.\n    // === === === === === === === === === === === === === === === ===\n\n    isClassMethod(): boolean {\n      return this.isRelational(\"<\") || super.isClassMethod();\n    }\n\n    isClassProperty(): boolean {\n      return (\n        this.match(tt.bang) || this.match(tt.colon) || super.isClassProperty()\n      );\n    }\n\n    parseMaybeDefault(...args): N.Pattern {\n      const node = super.parseMaybeDefault(...args);\n\n      if (\n        node.type === \"AssignmentPattern\" &&\n        node.typeAnnotation &&\n        node.right.start < node.typeAnnotation.start\n      ) {\n        this.raise(\n          node.typeAnnotation.start,\n          TSErrors.TypeAnnotationAfterAssign,\n        );\n      }\n\n      return node;\n    }\n\n    // ensure that inside types, we bypass the jsx parser plugin\n    getTokenFromCode(code: number): void {\n      if (this.state.inType && (code === 62 || code === 60)) {\n        return this.finishOp(tt.relational, 1);\n      } else {\n        return super.getTokenFromCode(code);\n      }\n    }\n\n    toAssignableList(exprList: N.Expression[]): $ReadOnlyArray<N.Pattern> {\n      for (let i = 0; i < exprList.length; i++) {\n        const expr = exprList[i];\n        if (!expr) continue;\n        switch (expr.type) {\n          case \"TSTypeCastExpression\":\n            exprList[i] = this.typeCastToParameter(expr);\n            break;\n          case \"TSAsExpression\":\n          case \"TSTypeAssertion\":\n            if (!this.state.maybeInArrowParameters) {\n              exprList[i] = this.typeCastToParameter(expr);\n            } else {\n              this.raise(expr.start, TSErrors.UnexpectedTypeCastInParameter);\n            }\n            break;\n        }\n      }\n      return super.toAssignableList(...arguments);\n    }\n\n    typeCastToParameter(node: N.TsTypeCastExpression): N.Node {\n      node.expression.typeAnnotation = node.typeAnnotation;\n\n      this.resetEndLocation(\n        node.expression,\n        node.typeAnnotation.end,\n        node.typeAnnotation.loc.end,\n      );\n\n      return node.expression;\n    }\n\n    toReferencedList(\n      exprList: $ReadOnlyArray<?N.Expression>,\n      isInParens?: boolean, // eslint-disable-line no-unused-vars\n    ): $ReadOnlyArray<?N.Expression> {\n      for (let i = 0; i < exprList.length; i++) {\n        const expr = exprList[i];\n        if (expr?.type === \"TSTypeCastExpression\") {\n          this.raise(expr.start, TSErrors.UnexpectedTypeAnnotation);\n        }\n      }\n\n      return exprList;\n    }\n\n    shouldParseArrow() {\n      return this.match(tt.colon) || super.shouldParseArrow();\n    }\n\n    shouldParseAsyncArrow(): boolean {\n      return this.match(tt.colon) || super.shouldParseAsyncArrow();\n    }\n\n    canHaveLeadingDecorator() {\n      // Avoid unnecessary lookahead in checking for abstract class unless needed!\n      return super.canHaveLeadingDecorator() || this.isAbstractClass();\n    }\n\n    jsxParseOpeningElementAfterName(\n      node: N.JSXOpeningElement,\n    ): N.JSXOpeningElement {\n      if (this.isRelational(\"<\")) {\n        const typeArguments = this.tsTryParseAndCatch(() =>\n          this.tsParseTypeArguments(),\n        );\n        if (typeArguments) node.typeParameters = typeArguments;\n      }\n      return super.jsxParseOpeningElementAfterName(node);\n    }\n\n    getGetterSetterExpectedParamCount(\n      method: N.ObjectMethod | N.ClassMethod,\n    ): number {\n      const baseCount = super.getGetterSetterExpectedParamCount(method);\n      const firstParam = method.params[0];\n      const hasContextParam =\n        firstParam &&\n        firstParam.type === \"Identifier\" &&\n        firstParam.name === \"this\";\n\n      return hasContextParam ? baseCount + 1 : baseCount;\n    }\n  };\n","// @flow\n\nimport * as charCodes from \"charcodes\";\n\nimport { types as tt, TokenType } from \"../tokenizer/types\";\nimport type Parser from \"../parser\";\nimport * as N from \"../types\";\n\ntt.placeholder = new TokenType(\"%%\", { startsExpr: true });\n\nexport type PlaceholderTypes =\n  | \"Identifier\"\n  | \"StringLiteral\"\n  | \"Expression\"\n  | \"Statement\"\n  | \"Declaration\"\n  | \"BlockStatement\"\n  | \"ClassBody\"\n  | \"Pattern\";\n\n// $PropertyType doesn't support enums. Use a fake \"switch\" (GetPlaceholderNode)\n//type MaybePlaceholder<T: PlaceholderTypes> = $PropertyType<N, T> | N.Placeholder<T>;\n\ntype _Switch<Value, Cases, Index> = $Call<\n  (\n    $ElementType<$ElementType<Cases, Index>, 0>,\n  ) => $ElementType<$ElementType<Cases, Index>, 1>,\n  Value,\n>;\ntype $Switch<Value, Cases> = _Switch<Value, Cases, *>;\n\ntype NodeOf<T: PlaceholderTypes> = $Switch<\n  T,\n  [\n    [\"Identifier\", N.Identifier],\n    [\"StringLiteral\", N.StringLiteral],\n    [\"Expression\", N.Expression],\n    [\"Statement\", N.Statement],\n    [\"Declaration\", N.Declaration],\n    [\"BlockStatement\", N.BlockStatement],\n    [\"ClassBody\", N.ClassBody],\n    [\"Pattern\", N.Pattern],\n  ],\n>;\n\n// Placeholder<T> breaks everything, because its type is incompatible with\n// the substituted nodes.\ntype MaybePlaceholder<T: PlaceholderTypes> = NodeOf<T>; // | Placeholder<T>\n\nexport default (superClass: Class<Parser>): Class<Parser> =>\n  class extends superClass {\n    parsePlaceholder<T: PlaceholderTypes>(\n      expectedNode: T,\n    ): /*?N.Placeholder<T>*/ ?MaybePlaceholder<T> {\n      if (this.match(tt.placeholder)) {\n        const node = this.startNode();\n        this.next();\n        this.assertNoSpace(\"Unexpected space in placeholder.\");\n\n        // We can't use this.parseIdentifier because\n        // we don't want nested placeholders.\n        node.name = super.parseIdentifier(/* liberal */ true);\n\n        this.assertNoSpace(\"Unexpected space in placeholder.\");\n        this.expect(tt.placeholder);\n        return this.finishPlaceholder(node, expectedNode);\n      }\n    }\n\n    finishPlaceholder<T: PlaceholderTypes>(\n      node: N.Node,\n      expectedNode: T,\n    ): /*N.Placeholder<T>*/ MaybePlaceholder<T> {\n      const isFinished = !!(node.expectedNode && node.type === \"Placeholder\");\n      node.expectedNode = expectedNode;\n\n      return isFinished ? node : this.finishNode(node, \"Placeholder\");\n    }\n\n    /* ============================================================ *\n     * tokenizer/index.js                                           *\n     * ============================================================ */\n\n    getTokenFromCode(code: number) {\n      if (\n        code === charCodes.percentSign &&\n        this.input.charCodeAt(this.state.pos + 1) === charCodes.percentSign\n      ) {\n        return this.finishOp(tt.placeholder, 2);\n      }\n\n      return super.getTokenFromCode(...arguments);\n    }\n\n    /* ============================================================ *\n     * parser/expression.js                                         *\n     * ============================================================ */\n\n    parseExprAtom(): MaybePlaceholder<\"Expression\"> {\n      return (\n        this.parsePlaceholder(\"Expression\") || super.parseExprAtom(...arguments)\n      );\n    }\n\n    parseIdentifier(): MaybePlaceholder<\"Identifier\"> {\n      // NOTE: This function only handles identifiers outside of\n      // expressions and binding patterns, since they are already\n      // handled by the parseExprAtom and parseBindingAtom functions.\n      // This is needed, for example, to parse \"class %%NAME%% {}\".\n      return (\n        this.parsePlaceholder(\"Identifier\") ||\n        super.parseIdentifier(...arguments)\n      );\n    }\n\n    checkReservedWord(word: string): void {\n      // Sometimes we call #checkReservedWord(node.name), expecting\n      // that node is an Identifier. If it is a Placeholder, name\n      // will be undefined.\n      if (word !== undefined) super.checkReservedWord(...arguments);\n    }\n\n    /* ============================================================ *\n     * parser/lval.js                                               *\n     * ============================================================ */\n\n    parseBindingAtom(): MaybePlaceholder<\"Pattern\"> {\n      return (\n        this.parsePlaceholder(\"Pattern\") || super.parseBindingAtom(...arguments)\n      );\n    }\n\n    checkLVal(expr: N.Expression): void {\n      if (expr.type !== \"Placeholder\") super.checkLVal(...arguments);\n    }\n\n    toAssignable(node: N.Node): N.Node {\n      if (\n        node &&\n        node.type === \"Placeholder\" &&\n        node.expectedNode === \"Expression\"\n      ) {\n        node.expectedNode = \"Pattern\";\n        return node;\n      }\n      return super.toAssignable(...arguments);\n    }\n\n    /* ============================================================ *\n     * parser/statement.js                                          *\n     * ============================================================ */\n\n    verifyBreakContinue(node: N.BreakStatement | N.ContinueStatement) {\n      if (node.label && node.label.type === \"Placeholder\") return;\n      super.verifyBreakContinue(...arguments);\n    }\n\n    parseExpressionStatement(\n      node: MaybePlaceholder<\"Statement\">,\n      expr: N.Expression,\n    ): MaybePlaceholder<\"Statement\"> {\n      if (\n        expr.type !== \"Placeholder\" ||\n        (expr.extra && expr.extra.parenthesized)\n      ) {\n        return super.parseExpressionStatement(...arguments);\n      }\n\n      if (this.match(tt.colon)) {\n        const stmt: N.LabeledStatement = node;\n        stmt.label = this.finishPlaceholder(expr, \"Identifier\");\n        this.next();\n        stmt.body = this.parseStatement(\"label\");\n        return this.finishNode(stmt, \"LabeledStatement\");\n      }\n\n      this.semicolon();\n\n      node.name = expr.name;\n      return this.finishPlaceholder(node, \"Statement\");\n    }\n\n    parseBlock(): MaybePlaceholder<\"BlockStatement\"> {\n      return (\n        this.parsePlaceholder(\"BlockStatement\") ||\n        super.parseBlock(...arguments)\n      );\n    }\n\n    parseFunctionId(): ?MaybePlaceholder<\"Identifier\"> {\n      return (\n        this.parsePlaceholder(\"Identifier\") ||\n        super.parseFunctionId(...arguments)\n      );\n    }\n\n    parseClass<T: N.Class>(\n      node: T,\n      isStatement: /* T === ClassDeclaration */ boolean,\n      optionalId?: boolean,\n    ): T {\n      const type = isStatement ? \"ClassDeclaration\" : \"ClassExpression\";\n\n      this.next();\n      this.takeDecorators(node);\n\n      const placeholder = this.parsePlaceholder(\"Identifier\");\n      if (placeholder) {\n        if (\n          this.match(tt._extends) ||\n          this.match(tt.placeholder) ||\n          this.match(tt.braceL)\n        ) {\n          node.id = placeholder;\n        } else if (optionalId || !isStatement) {\n          node.id = null;\n          node.body = this.finishPlaceholder(placeholder, \"ClassBody\");\n          return this.finishNode(node, type);\n        } else {\n          this.unexpected(null, \"A class name is required\");\n        }\n      } else {\n        this.parseClassId(node, isStatement, optionalId);\n      }\n\n      this.parseClassSuper(node);\n      node.body =\n        this.parsePlaceholder(\"ClassBody\") ||\n        this.parseClassBody(!!node.superClass);\n      return this.finishNode(node, type);\n    }\n\n    parseExport(node: N.Node): N.Node {\n      const placeholder = this.parsePlaceholder(\"Identifier\");\n      if (!placeholder) return super.parseExport(...arguments);\n\n      if (!this.isContextual(\"from\") && !this.match(tt.comma)) {\n        // export %%DECL%%;\n        node.specifiers = [];\n        node.source = null;\n        node.declaration = this.finishPlaceholder(placeholder, \"Declaration\");\n        return this.finishNode(node, \"ExportNamedDeclaration\");\n      }\n\n      // export %%NAME%% from \"foo\";\n      this.expectPlugin(\"exportDefaultFrom\");\n      const specifier = this.startNode();\n      specifier.exported = placeholder;\n      node.specifiers = [this.finishNode(specifier, \"ExportDefaultSpecifier\")];\n\n      return super.parseExport(node);\n    }\n\n    isExportDefaultSpecifier(): boolean {\n      if (this.match(tt._default)) {\n        const next = this.nextTokenStart();\n        if (this.isUnparsedContextual(next, \"from\")) {\n          if (\n            this.input.startsWith(\n              tt.placeholder.label,\n              this.nextTokenStartSince(next + 4),\n            )\n          ) {\n            return true;\n          }\n        }\n      }\n      return super.isExportDefaultSpecifier();\n    }\n\n    maybeParseExportDefaultSpecifier(node: N.Node): boolean {\n      if (node.specifiers && node.specifiers.length > 0) {\n        // \"export %%NAME%%\" has already been parsed by #parseExport.\n        return true;\n      }\n      return super.maybeParseExportDefaultSpecifier(...arguments);\n    }\n\n    checkExport(node: N.ExportNamedDeclaration): void {\n      const { specifiers } = node;\n      if (specifiers?.length) {\n        node.specifiers = specifiers.filter(\n          node => node.exported.type === \"Placeholder\",\n        );\n      }\n      super.checkExport(node);\n      node.specifiers = specifiers;\n    }\n\n    parseImport(\n      node: N.Node,\n    ): N.ImportDeclaration | N.TsImportEqualsDeclaration {\n      const placeholder = this.parsePlaceholder(\"Identifier\");\n      if (!placeholder) return super.parseImport(...arguments);\n\n      node.specifiers = [];\n\n      if (!this.isContextual(\"from\") && !this.match(tt.comma)) {\n        // import %%STRING%%;\n        node.source = this.finishPlaceholder(placeholder, \"StringLiteral\");\n        this.semicolon();\n        return this.finishNode(node, \"ImportDeclaration\");\n      }\n\n      // import %%DEFAULT%% ...\n      const specifier = this.startNodeAtNode(placeholder);\n      specifier.local = placeholder;\n      this.finishNode(specifier, \"ImportDefaultSpecifier\");\n      node.specifiers.push(specifier);\n\n      if (this.eat(tt.comma)) {\n        // import %%DEFAULT%%, * as ...\n        const hasStarImport = this.maybeParseStarImportSpecifier(node);\n\n        // import %%DEFAULT%%, { ...\n        if (!hasStarImport) this.parseNamedImportSpecifiers(node);\n      }\n\n      this.expectContextual(\"from\");\n      node.source = this.parseImportSource();\n      this.semicolon();\n      return this.finishNode(node, \"ImportDeclaration\");\n    }\n\n    parseImportSource(): MaybePlaceholder<\"StringLiteral\"> {\n      // import ... from %%STRING%%;\n\n      return (\n        this.parsePlaceholder(\"StringLiteral\") ||\n        super.parseImportSource(...arguments)\n      );\n    }\n  };\n","import type Parser from \"../parser\";\nimport { types as tt } from \"../tokenizer/types\";\nimport * as N from \"../types\";\n\nexport default (superClass: Class<Parser>): Class<Parser> =>\n  class extends superClass {\n    parseV8Intrinsic(): N.Expression {\n      if (this.match(tt.modulo)) {\n        const v8IntrinsicStart = this.state.start;\n        // let the `loc` of Identifier starts from `%`\n        const node = this.startNode();\n        this.eat(tt.modulo);\n        if (this.match(tt.name)) {\n          const name = this.parseIdentifierName(this.state.start);\n          const identifier = this.createIdentifier(node, name);\n          identifier.type = \"V8IntrinsicIdentifier\";\n          if (this.match(tt.parenL)) {\n            return identifier;\n          }\n        }\n        this.unexpected(v8IntrinsicStart);\n      }\n    }\n\n    /* ============================================================ *\n     * parser/expression.js                                         *\n     * ============================================================ */\n\n    parseExprAtom(): N.Expression {\n      return this.parseV8Intrinsic() || super.parseExprAtom(...arguments);\n    }\n  };\n","// @flow\n\nimport type Parser from \"./parser\";\n\nexport type Plugin = string | [string, Object];\n\nexport type PluginList = $ReadOnlyArray<Plugin>;\n\nexport type MixinPlugin = (superClass: Class<Parser>) => Class<Parser>;\n\nexport function hasPlugin(plugins: PluginList, name: string): boolean {\n  return plugins.some(plugin => {\n    if (Array.isArray(plugin)) {\n      return plugin[0] === name;\n    } else {\n      return plugin === name;\n    }\n  });\n}\n\nexport function getPluginOption(\n  plugins: PluginList,\n  name: string,\n  option: string,\n) {\n  const plugin = plugins.find(plugin => {\n    if (Array.isArray(plugin)) {\n      return plugin[0] === name;\n    } else {\n      return plugin === name;\n    }\n  });\n\n  if (plugin && Array.isArray(plugin)) {\n    return plugin[1][option];\n  }\n\n  return null;\n}\n\nconst PIPELINE_PROPOSALS = [\"minimal\", \"smart\", \"fsharp\"];\nconst RECORD_AND_TUPLE_SYNTAX_TYPES = [\"hash\", \"bar\"];\n\nexport function validatePlugins(plugins: PluginList) {\n  if (hasPlugin(plugins, \"decorators\")) {\n    if (hasPlugin(plugins, \"decorators-legacy\")) {\n      throw new Error(\n        \"Cannot use the decorators and decorators-legacy plugin together\",\n      );\n    }\n\n    const decoratorsBeforeExport = getPluginOption(\n      plugins,\n      \"decorators\",\n      \"decoratorsBeforeExport\",\n    );\n    if (decoratorsBeforeExport == null) {\n      throw new Error(\n        \"The 'decorators' plugin requires a 'decoratorsBeforeExport' option,\" +\n          \" whose value must be a boolean. If you are migrating from\" +\n          \" Babylon/Babel 6 or want to use the old decorators proposal, you\" +\n          \" should use the 'decorators-legacy' plugin instead of 'decorators'.\",\n      );\n    } else if (typeof decoratorsBeforeExport !== \"boolean\") {\n      throw new Error(\"'decoratorsBeforeExport' must be a boolean.\");\n    }\n  }\n\n  if (hasPlugin(plugins, \"flow\") && hasPlugin(plugins, \"typescript\")) {\n    throw new Error(\"Cannot combine flow and typescript plugins.\");\n  }\n\n  if (hasPlugin(plugins, \"placeholders\") && hasPlugin(plugins, \"v8intrinsic\")) {\n    throw new Error(\"Cannot combine placeholders and v8intrinsic plugins.\");\n  }\n\n  if (\n    hasPlugin(plugins, \"pipelineOperator\") &&\n    !PIPELINE_PROPOSALS.includes(\n      getPluginOption(plugins, \"pipelineOperator\", \"proposal\"),\n    )\n  ) {\n    throw new Error(\n      \"'pipelineOperator' requires 'proposal' option whose value should be one of: \" +\n        PIPELINE_PROPOSALS.map(p => `'${p}'`).join(\", \"),\n    );\n  }\n\n  if (hasPlugin(plugins, \"moduleAttributes\")) {\n    const moduleAttributesVerionPluginOption = getPluginOption(\n      plugins,\n      \"moduleAttributes\",\n      \"version\",\n    );\n    if (moduleAttributesVerionPluginOption !== \"may-2020\") {\n      throw new Error(\n        \"The 'moduleAttributes' plugin requires a 'version' option,\" +\n          \" representing the last proposal update. Currently, the\" +\n          \" only supported value is 'may-2020'.\",\n      );\n    }\n  }\n  if (\n    hasPlugin(plugins, \"recordAndTuple\") &&\n    !RECORD_AND_TUPLE_SYNTAX_TYPES.includes(\n      getPluginOption(plugins, \"recordAndTuple\", \"syntaxType\"),\n    )\n  ) {\n    throw new Error(\n      \"'recordAndTuple' requires 'syntaxType' option whose value should be one of: \" +\n        RECORD_AND_TUPLE_SYNTAX_TYPES.map(p => `'${p}'`).join(\", \"),\n    );\n  }\n}\n\n// These plugins are defined using a mixin which extends the parser class.\n\nimport estree from \"./plugins/estree\";\nimport flow from \"./plugins/flow\";\nimport jsx from \"./plugins/jsx\";\nimport typescript from \"./plugins/typescript\";\nimport placeholders from \"./plugins/placeholders\";\nimport v8intrinsic from \"./plugins/v8intrinsic\";\n\n// NOTE: order is important. estree must come first; placeholders must come last.\nexport const mixinPlugins: { [name: string]: MixinPlugin } = {\n  estree,\n  jsx,\n  flow,\n  typescript,\n  v8intrinsic,\n  placeholders,\n};\n\nexport const mixinPluginNames: $ReadOnlyArray<string> = Object.keys(\n  mixinPlugins,\n);\n","// @flow\n\nimport type { PluginList } from \"./plugin-utils\";\n\n// A second optional argument can be given to further configure\n// the parser process. These options are recognized:\n\nexport type SourceType = \"script\" | \"module\" | \"unambiguous\";\n\nexport type Options = {\n  sourceType: SourceType,\n  sourceFilename?: string,\n  startLine: number,\n  allowAwaitOutsideFunction: boolean,\n  allowReturnOutsideFunction: boolean,\n  allowImportExportEverywhere: boolean,\n  allowSuperOutsideMethod: boolean,\n  allowUndeclaredExports: boolean,\n  plugins: PluginList,\n  strictMode: ?boolean,\n  ranges: boolean,\n  tokens: boolean,\n  createParenthesizedExpressions: boolean,\n  errorRecovery: boolean,\n};\n\nexport const defaultOptions: Options = {\n  // Source type (\"script\" or \"module\") for different semantics\n  sourceType: \"script\",\n  // Source filename.\n  sourceFilename: undefined,\n  // Line from which to start counting source. Useful for\n  // integration with other tools.\n  startLine: 1,\n  // When enabled, await at the top level is not considered an\n  // error.\n  allowAwaitOutsideFunction: false,\n  // When enabled, a return at the top level is not considered an\n  // error.\n  allowReturnOutsideFunction: false,\n  // When enabled, import/export statements are not constrained to\n  // appearing at the top of the program.\n  allowImportExportEverywhere: false,\n  // TODO\n  allowSuperOutsideMethod: false,\n  // When enabled, export statements can reference undeclared variables.\n  allowUndeclaredExports: false,\n  // An array of plugins to enable\n  plugins: [],\n  // TODO\n  strictMode: null,\n  // Nodes have their start and end characters offsets recorded in\n  // `start` and `end` properties (directly on the node, rather than\n  // the `loc` object, which holds line/column data. To also add a\n  // [semi-standardized][range] `range` property holding a `[start,\n  // end]` array with the same numbers, set the `ranges` option to\n  // `true`.\n  //\n  // [range]: https://bugzilla.mozilla.org/show_bug.cgi?id=745678\n  ranges: false,\n  // Adds all parsed tokens to a `tokens` property on the `File` node\n  tokens: false,\n  // Whether to create ParenthesizedExpression AST nodes (if false\n  // the parser sets extra.parenthesized on the expression nodes instead).\n  createParenthesizedExpressions: false,\n  // When enabled, errors are attached to the AST instead of being directly thrown.\n  // Some errors will still throw, because @babel/parser can't always recover.\n  errorRecovery: false,\n};\n\n// Interpret and default an options object\n\nexport function getOptions(opts: ?Options): Options {\n  const options: any = {};\n  for (const key of Object.keys(defaultOptions)) {\n    options[key] = opts && opts[key] != null ? opts[key] : defaultOptions[key];\n  }\n  return options;\n}\n","// @flow\n\nimport type { Options } from \"../options\";\nimport * as N from \"../types\";\nimport { Position } from \"../util/location\";\n\nimport { types as ct, type TokContext } from \"./context\";\nimport { types as tt, type TokenType } from \"./types\";\n\ntype TopicContextState = {\n  // When a topic binding has been currently established,\n  // then this is 1. Otherwise, it is 0. This is forwards compatible\n  // with a future plugin for multiple lexical topics.\n  maxNumOfResolvableTopics: number,\n\n  // When a topic binding has been currently established, and if that binding\n  // has been used as a topic reference `#`, then this is 0. Otherwise, it is\n  // `null`. This is forwards compatible with a future plugin for multiple\n  // lexical topics.\n  maxTopicIndex: null | 0,\n};\n\nexport default class State {\n  strict: boolean;\n  curLine: number;\n\n  // And, if locations are used, the {line, column} object\n  // corresponding to those offsets\n  startLoc: Position;\n  endLoc: Position;\n\n  init(options: Options): void {\n    this.strict =\n      options.strictMode === false ? false : options.sourceType === \"module\";\n\n    this.curLine = options.startLine;\n    this.startLoc = this.endLoc = this.curPosition();\n  }\n\n  errors: SyntaxError[] = [];\n\n  // Used to signify the start of a potential arrow function\n  potentialArrowAt: number = -1;\n\n  // Used to signify the start of an expression which looks like a\n  // typed arrow function, but it isn't\n  // e.g. a ? (b) : c => d\n  //          ^\n  noArrowAt: number[] = [];\n\n  // Used to signify the start of an expression whose params, if it looks like\n  // an arrow function, shouldn't be converted to assignable nodes.\n  // This is used to defer the validation of typed arrow functions inside\n  // conditional expressions.\n  // e.g. a ? (b) : c => d\n  //          ^\n  noArrowParamsConversionAt: number[] = [];\n\n  // Flags to track\n  inParameters: boolean = false;\n  maybeInArrowParameters: boolean = false;\n  // This flag is used to track async arrow head across function declarations.\n  // e.g. async (foo = function (await) {}) => {}\n  // When parsing `await` in this expression, `maybeInAsyncArrowHead` is true\n  // but `maybeInArrowParameters` is false\n  maybeInAsyncArrowHead: boolean = false;\n  inPipeline: boolean = false;\n  inType: boolean = false;\n  noAnonFunctionType: boolean = false;\n  inPropertyName: boolean = false;\n  hasFlowComment: boolean = false;\n  isIterator: boolean = false;\n\n  // For the smartPipelines plugin:\n  topicContext: TopicContextState = {\n    maxNumOfResolvableTopics: 0,\n    maxTopicIndex: null,\n  };\n\n  // For the F# plugin\n  soloAwait: boolean = false;\n  inFSharpPipelineDirectBody: boolean = false;\n\n  // Labels in scope.\n  labels: Array<{\n    kind: ?(\"loop\" | \"switch\"),\n    name?: ?string,\n    statementStart?: number,\n  }> = [];\n\n  // Leading decorators. Last element of the stack represents the decorators in current context.\n  // Supports nesting of decorators, e.g. @foo(@bar class inner {}) class outer {}\n  // where @foo belongs to the outer class and @bar to the inner\n  decoratorStack: Array<Array<N.Decorator>> = [[]];\n\n  // Positions to delayed-check that yield/await does not exist in default parameters.\n  yieldPos: number = -1;\n  awaitPos: number = -1;\n\n  // Comment store.\n  comments: Array<N.Comment> = [];\n\n  // Comment attachment store\n  trailingComments: Array<N.Comment> = [];\n  leadingComments: Array<N.Comment> = [];\n  commentStack: Array<{\n    start: number,\n    leadingComments: ?Array<N.Comment>,\n    trailingComments: ?Array<N.Comment>,\n    type: string,\n  }> = [];\n  // $FlowIgnore this is initialized when the parser starts.\n  commentPreviousNode: N.Node = null;\n\n  // The current position of the tokenizer in the input.\n  pos: number = 0;\n  lineStart: number = 0;\n\n  // Properties of the current token:\n  // Its type\n  type: TokenType = tt.eof;\n\n  // For tokens that include more information than their type, the value\n  value: any = null;\n\n  // Its start and end offset\n  start: number = 0;\n  end: number = 0;\n\n  // Position information for the previous token\n  // $FlowIgnore this is initialized when generating the second token.\n  lastTokEndLoc: Position = null;\n  // $FlowIgnore this is initialized when generating the second token.\n  lastTokStartLoc: Position = null;\n  lastTokStart: number = 0;\n  lastTokEnd: number = 0;\n\n  // The context stack is used to superficially track syntactic\n  // context to predict whether a regular expression is allowed in a\n  // given position.\n  context: Array<TokContext> = [ct.braceStatement];\n  exprAllowed: boolean = true;\n\n  // Used to signal to callers of `readWord1` whether the word\n  // contained any escape sequences. This is needed because words with\n  // escape sequences must not be interpreted as keywords.\n  containsEsc: boolean = false;\n\n  // This property is used to throw an error for\n  // an octal literal in a directive that occurs prior\n  // to a \"use strict\" directive.\n  octalPositions: number[] = [];\n\n  // Names of exports store. `default` is stored as a name for both\n  // `export default foo;` and `export { foo as default };`.\n  exportedIdentifiers: Array<string> = [];\n\n  // Tokens length in token store\n  tokensLength: number = 0;\n\n  curPosition(): Position {\n    return new Position(this.curLine, this.pos - this.lineStart);\n  }\n\n  clone(skipArrays?: boolean): State {\n    const state = new State();\n    const keys = Object.keys(this);\n    for (let i = 0, length = keys.length; i < length; i++) {\n      const key = keys[i];\n      // $FlowIgnore\n      let val = this[key];\n\n      if (!skipArrays && Array.isArray(val)) {\n        val = val.slice();\n      }\n\n      // $FlowIgnore\n      state[key] = val;\n    }\n\n    return state;\n  }\n}\n","// @flow\n\n/*:: declare var invariant; */\n\nimport type { Options } from \"../options\";\nimport * as N from \"../types\";\nimport type { Position } from \"../util/location\";\nimport * as charCodes from \"charcodes\";\nimport { isIdentifierStart, isIdentifierChar } from \"../util/identifier\";\nimport { types as tt, keywords as keywordTypes, type TokenType } from \"./types\";\nimport { type TokContext, types as ct } from \"./context\";\nimport ParserErrors, { Errors } from \"../parser/error\";\nimport { SourceLocation } from \"../util/location\";\nimport {\n  lineBreak,\n  lineBreakG,\n  isNewLine,\n  isWhitespace,\n  skipWhiteSpace,\n} from \"../util/whitespace\";\nimport State from \"./state\";\n\nconst VALID_REGEX_FLAGS = new Set([\"g\", \"m\", \"s\", \"i\", \"y\", \"u\"]);\n\n// The following character codes are forbidden from being\n// an immediate sibling of NumericLiteralSeparator _\n\nconst forbiddenNumericSeparatorSiblings = {\n  decBinOct: [\n    charCodes.dot,\n    charCodes.uppercaseB,\n    charCodes.uppercaseE,\n    charCodes.uppercaseO,\n    charCodes.underscore, // multiple separators are not allowed\n    charCodes.lowercaseB,\n    charCodes.lowercaseE,\n    charCodes.lowercaseO,\n  ],\n  hex: [\n    charCodes.dot,\n    charCodes.uppercaseX,\n    charCodes.underscore, // multiple separators are not allowed\n    charCodes.lowercaseX,\n  ],\n};\n\nconst allowedNumericSeparatorSiblings = {};\nallowedNumericSeparatorSiblings.bin = [\n  // 0 - 1\n  charCodes.digit0,\n  charCodes.digit1,\n];\nallowedNumericSeparatorSiblings.oct = [\n  // 0 - 7\n  ...allowedNumericSeparatorSiblings.bin,\n\n  charCodes.digit2,\n  charCodes.digit3,\n  charCodes.digit4,\n  charCodes.digit5,\n  charCodes.digit6,\n  charCodes.digit7,\n];\nallowedNumericSeparatorSiblings.dec = [\n  // 0 - 9\n  ...allowedNumericSeparatorSiblings.oct,\n\n  charCodes.digit8,\n  charCodes.digit9,\n];\n\nallowedNumericSeparatorSiblings.hex = [\n  // 0 - 9, A - F, a - f,\n  ...allowedNumericSeparatorSiblings.dec,\n\n  charCodes.uppercaseA,\n  charCodes.uppercaseB,\n  charCodes.uppercaseC,\n  charCodes.uppercaseD,\n  charCodes.uppercaseE,\n  charCodes.uppercaseF,\n\n  charCodes.lowercaseA,\n  charCodes.lowercaseB,\n  charCodes.lowercaseC,\n  charCodes.lowercaseD,\n  charCodes.lowercaseE,\n  charCodes.lowercaseF,\n];\n\n// Object type used to represent tokens. Note that normally, tokens\n// simply exist as properties on the parser object. This is only\n// used for the onToken callback and the external tokenizer.\n\nexport class Token {\n  constructor(state: State) {\n    this.type = state.type;\n    this.value = state.value;\n    this.start = state.start;\n    this.end = state.end;\n    this.loc = new SourceLocation(state.startLoc, state.endLoc);\n  }\n\n  type: TokenType;\n  value: any;\n  start: number;\n  end: number;\n  loc: SourceLocation;\n}\n\n// ## Tokenizer\n\nexport default class Tokenizer extends ParserErrors {\n  // Forward-declarations\n  // parser/util.js\n  /*::\n  +unexpected: (pos?: ?number, messageOrType?: string | TokenType) => empty;\n  +expectPlugin: (name: string, pos?: ?number) => true;\n  */\n\n  isLookahead: boolean;\n\n  // Token store.\n  tokens: Array<Token | N.Comment> = [];\n\n  constructor(options: Options, input: string) {\n    super();\n    this.state = new State();\n    this.state.init(options);\n    this.input = input;\n    this.length = input.length;\n    this.isLookahead = false;\n  }\n\n  pushToken(token: Token | N.Comment) {\n    // Pop out invalid tokens trapped by try-catch parsing.\n    // Those parsing branches are mainly created by typescript and flow plugins.\n    this.tokens.length = this.state.tokensLength;\n    this.tokens.push(token);\n    ++this.state.tokensLength;\n  }\n\n  // Move to the next token\n\n  next(): void {\n    if (!this.isLookahead) {\n      this.checkKeywordEscapes();\n      if (this.options.tokens) {\n        this.pushToken(new Token(this.state));\n      }\n    }\n\n    this.state.lastTokEnd = this.state.end;\n    this.state.lastTokStart = this.state.start;\n    this.state.lastTokEndLoc = this.state.endLoc;\n    this.state.lastTokStartLoc = this.state.startLoc;\n    this.nextToken();\n  }\n\n  // TODO\n\n  eat(type: TokenType): boolean {\n    if (this.match(type)) {\n      this.next();\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  // TODO\n\n  match(type: TokenType): boolean {\n    return this.state.type === type;\n  }\n\n  // TODO\n\n  lookahead(): State {\n    const old = this.state;\n    this.state = old.clone(true);\n\n    this.isLookahead = true;\n    this.next();\n    this.isLookahead = false;\n\n    const curr = this.state;\n    this.state = old;\n    return curr;\n  }\n\n  nextTokenStart(): number {\n    return this.nextTokenStartSince(this.state.pos);\n  }\n\n  nextTokenStartSince(pos: number): number {\n    skipWhiteSpace.lastIndex = pos;\n    const skip = skipWhiteSpace.exec(this.input);\n    // $FlowIgnore: The skipWhiteSpace ensures to match any string\n    return pos + skip[0].length;\n  }\n\n  lookaheadCharCode(): number {\n    return this.input.charCodeAt(this.nextTokenStart());\n  }\n\n  // Toggle strict mode. Re-reads the next number or string to please\n  // pedantic tests (`\"use strict\"; 010;` should fail).\n\n  setStrict(strict: boolean): void {\n    this.state.strict = strict;\n    if (!this.match(tt.num) && !this.match(tt.string)) return;\n    this.state.pos = this.state.start;\n    while (this.state.pos < this.state.lineStart) {\n      this.state.lineStart =\n        this.input.lastIndexOf(\"\\n\", this.state.lineStart - 2) + 1;\n      --this.state.curLine;\n    }\n    this.nextToken();\n  }\n\n  curContext(): TokContext {\n    return this.state.context[this.state.context.length - 1];\n  }\n\n  // Read a single token, updating the parser object's token-related\n  // properties.\n\n  nextToken(): void {\n    const curContext = this.curContext();\n    if (!curContext?.preserveSpace) this.skipSpace();\n\n    this.state.octalPositions = [];\n    this.state.start = this.state.pos;\n    this.state.startLoc = this.state.curPosition();\n    if (this.state.pos >= this.length) {\n      this.finishToken(tt.eof);\n      return;\n    }\n\n    const override = curContext?.override;\n    if (override) {\n      override(this);\n    } else {\n      this.getTokenFromCode(this.input.codePointAt(this.state.pos));\n    }\n  }\n\n  pushComment(\n    block: boolean,\n    text: string,\n    start: number,\n    end: number,\n    startLoc: Position,\n    endLoc: Position,\n  ): void {\n    const comment = {\n      type: block ? \"CommentBlock\" : \"CommentLine\",\n      value: text,\n      start: start,\n      end: end,\n      loc: new SourceLocation(startLoc, endLoc),\n    };\n\n    if (this.options.tokens) this.pushToken(comment);\n    this.state.comments.push(comment);\n    this.addComment(comment);\n  }\n\n  skipBlockComment(): void {\n    const startLoc = this.state.curPosition();\n    const start = this.state.pos;\n    const end = this.input.indexOf(\"*/\", this.state.pos + 2);\n    if (end === -1) throw this.raise(start, Errors.UnterminatedComment);\n\n    this.state.pos = end + 2;\n    lineBreakG.lastIndex = start;\n    let match;\n    while (\n      (match = lineBreakG.exec(this.input)) &&\n      match.index < this.state.pos\n    ) {\n      ++this.state.curLine;\n      this.state.lineStart = match.index + match[0].length;\n    }\n\n    // If we are doing a lookahead right now we need to advance the position (above code)\n    // but we do not want to push the comment to the state.\n    if (this.isLookahead) return;\n\n    this.pushComment(\n      true,\n      this.input.slice(start + 2, end),\n      start,\n      this.state.pos,\n      startLoc,\n      this.state.curPosition(),\n    );\n  }\n\n  skipLineComment(startSkip: number): void {\n    const start = this.state.pos;\n    const startLoc = this.state.curPosition();\n    let ch = this.input.charCodeAt((this.state.pos += startSkip));\n    if (this.state.pos < this.length) {\n      while (!isNewLine(ch) && ++this.state.pos < this.length) {\n        ch = this.input.charCodeAt(this.state.pos);\n      }\n    }\n\n    // If we are doing a lookahead right now we need to advance the position (above code)\n    // but we do not want to push the comment to the state.\n    if (this.isLookahead) return;\n\n    this.pushComment(\n      false,\n      this.input.slice(start + startSkip, this.state.pos),\n      start,\n      this.state.pos,\n      startLoc,\n      this.state.curPosition(),\n    );\n  }\n\n  // Called at the start of the parse and after every token. Skips\n  // whitespace and comments, and.\n\n  skipSpace(): void {\n    loop: while (this.state.pos < this.length) {\n      const ch = this.input.charCodeAt(this.state.pos);\n      switch (ch) {\n        case charCodes.space:\n        case charCodes.nonBreakingSpace:\n        case charCodes.tab:\n          ++this.state.pos;\n          break;\n        case charCodes.carriageReturn:\n          if (\n            this.input.charCodeAt(this.state.pos + 1) === charCodes.lineFeed\n          ) {\n            ++this.state.pos;\n          }\n        // fall through\n        case charCodes.lineFeed:\n        case charCodes.lineSeparator:\n        case charCodes.paragraphSeparator:\n          ++this.state.pos;\n          ++this.state.curLine;\n          this.state.lineStart = this.state.pos;\n          break;\n\n        case charCodes.slash:\n          switch (this.input.charCodeAt(this.state.pos + 1)) {\n            case charCodes.asterisk:\n              this.skipBlockComment();\n              break;\n\n            case charCodes.slash:\n              this.skipLineComment(2);\n              break;\n\n            default:\n              break loop;\n          }\n          break;\n\n        default:\n          if (isWhitespace(ch)) {\n            ++this.state.pos;\n          } else {\n            break loop;\n          }\n      }\n    }\n  }\n\n  // Called at the end of every token. Sets `end`, `val`, and\n  // maintains `context` and `exprAllowed`, and skips the space after\n  // the token, so that the next one's `start` will point at the\n  // right position.\n\n  finishToken(type: TokenType, val: any): void {\n    this.state.end = this.state.pos;\n    this.state.endLoc = this.state.curPosition();\n    const prevType = this.state.type;\n    this.state.type = type;\n    this.state.value = val;\n\n    if (!this.isLookahead) this.updateContext(prevType);\n  }\n\n  // ### Token reading\n\n  // This is the function that is called to fetch the next token. It\n  // is somewhat obscure, because it works in character codes rather\n  // than characters, and because operator parsing has been inlined\n  // into it.\n  //\n  // All in the name of speed.\n\n  // number sign is \"#\"\n  readToken_numberSign(): void {\n    if (this.state.pos === 0 && this.readToken_interpreter()) {\n      return;\n    }\n\n    const nextPos = this.state.pos + 1;\n    const next = this.input.charCodeAt(nextPos);\n    if (next >= charCodes.digit0 && next <= charCodes.digit9) {\n      throw this.raise(this.state.pos, Errors.UnexpectedDigitAfterHash);\n    }\n\n    if (\n      next === charCodes.leftCurlyBrace ||\n      (next === charCodes.leftSquareBracket && this.hasPlugin(\"recordAndTuple\"))\n    ) {\n      // When we see `#{`, it is likely to be a hash record.\n      // However we don't yell at `#[` since users may intend to use \"computed private fields\",\n      // which is not allowed in the spec. Throwing expecting recordAndTuple is\n      // misleading\n      this.expectPlugin(\"recordAndTuple\");\n      if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"hash\") {\n        /* eslint-disable @babel/development-internal/dry-error-messages */\n        throw this.raise(\n          this.state.pos,\n          next === charCodes.leftCurlyBrace\n            ? Errors.RecordExpressionHashIncorrectStartSyntaxType\n            : Errors.TupleExpressionHashIncorrectStartSyntaxType,\n        );\n        /* eslint-enable @babel/development-internal/dry-error-messages */\n      }\n\n      if (next === charCodes.leftCurlyBrace) {\n        // #{\n        this.finishToken(tt.braceHashL);\n      } else {\n        // #[\n        this.finishToken(tt.bracketHashL);\n      }\n      this.state.pos += 2;\n    } else {\n      this.finishOp(tt.hash, 1);\n    }\n  }\n\n  readToken_dot(): void {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (next >= charCodes.digit0 && next <= charCodes.digit9) {\n      this.readNumber(true);\n      return;\n    }\n\n    if (\n      next === charCodes.dot &&\n      this.input.charCodeAt(this.state.pos + 2) === charCodes.dot\n    ) {\n      this.state.pos += 3;\n      this.finishToken(tt.ellipsis);\n    } else {\n      ++this.state.pos;\n      this.finishToken(tt.dot);\n    }\n  }\n\n  readToken_slash(): void {\n    // '/'\n    if (this.state.exprAllowed && !this.state.inType) {\n      ++this.state.pos;\n      this.readRegexp();\n      return;\n    }\n\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (next === charCodes.equalsTo) {\n      this.finishOp(tt.assign, 2);\n    } else {\n      this.finishOp(tt.slash, 1);\n    }\n  }\n\n  readToken_interpreter(): boolean {\n    if (this.state.pos !== 0 || this.length < 2) return false;\n\n    let ch = this.input.charCodeAt(this.state.pos + 1);\n    if (ch !== charCodes.exclamationMark) return false;\n\n    const start = this.state.pos;\n    this.state.pos += 1;\n\n    while (!isNewLine(ch) && ++this.state.pos < this.length) {\n      ch = this.input.charCodeAt(this.state.pos);\n    }\n\n    const value = this.input.slice(start + 2, this.state.pos);\n\n    this.finishToken(tt.interpreterDirective, value);\n\n    return true;\n  }\n\n  readToken_mult_modulo(code: number): void {\n    // '%*'\n    let type = code === charCodes.asterisk ? tt.star : tt.modulo;\n    let width = 1;\n    let next = this.input.charCodeAt(this.state.pos + 1);\n    const exprAllowed = this.state.exprAllowed;\n\n    // Exponentiation operator **\n    if (code === charCodes.asterisk && next === charCodes.asterisk) {\n      width++;\n      next = this.input.charCodeAt(this.state.pos + 2);\n      type = tt.exponent;\n    }\n\n    if (next === charCodes.equalsTo && !exprAllowed) {\n      width++;\n      type = tt.assign;\n    }\n\n    this.finishOp(type, width);\n  }\n\n  readToken_pipe_amp(code: number): void {\n    // '||' '&&' '||=' '&&='\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === code) {\n      if (this.input.charCodeAt(this.state.pos + 2) === charCodes.equalsTo) {\n        this.finishOp(tt.assign, 3);\n      } else {\n        this.finishOp(\n          code === charCodes.verticalBar ? tt.logicalOR : tt.logicalAND,\n          2,\n        );\n      }\n      return;\n    }\n\n    if (code === charCodes.verticalBar) {\n      // '|>'\n      if (next === charCodes.greaterThan) {\n        this.finishOp(tt.pipeline, 2);\n        return;\n      }\n      // '|}'\n      if (\n        this.hasPlugin(\"recordAndTuple\") &&\n        next === charCodes.rightCurlyBrace\n      ) {\n        if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n          throw this.raise(\n            this.state.pos,\n            Errors.RecordExpressionBarIncorrectEndSyntaxType,\n          );\n        }\n\n        this.finishOp(tt.braceBarR, 2);\n        return;\n      }\n\n      // '|]'\n      if (\n        this.hasPlugin(\"recordAndTuple\") &&\n        next === charCodes.rightSquareBracket\n      ) {\n        if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n          throw this.raise(\n            this.state.pos,\n            Errors.TupleExpressionBarIncorrectEndSyntaxType,\n          );\n        }\n\n        this.finishOp(tt.bracketBarR, 2);\n        return;\n      }\n    }\n\n    if (next === charCodes.equalsTo) {\n      this.finishOp(tt.assign, 2);\n      return;\n    }\n\n    this.finishOp(\n      code === charCodes.verticalBar ? tt.bitwiseOR : tt.bitwiseAND,\n      1,\n    );\n  }\n\n  readToken_caret(): void {\n    // '^'\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (next === charCodes.equalsTo) {\n      this.finishOp(tt.assign, 2);\n    } else {\n      this.finishOp(tt.bitwiseXOR, 1);\n    }\n  }\n\n  readToken_plus_min(code: number): void {\n    // '+-'\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === code) {\n      if (\n        next === charCodes.dash &&\n        !this.inModule &&\n        this.input.charCodeAt(this.state.pos + 2) === charCodes.greaterThan &&\n        (this.state.lastTokEnd === 0 ||\n          lineBreak.test(\n            this.input.slice(this.state.lastTokEnd, this.state.pos),\n          ))\n      ) {\n        // A `-->` line comment\n        this.skipLineComment(3);\n        this.skipSpace();\n        this.nextToken();\n        return;\n      }\n      this.finishOp(tt.incDec, 2);\n      return;\n    }\n\n    if (next === charCodes.equalsTo) {\n      this.finishOp(tt.assign, 2);\n    } else {\n      this.finishOp(tt.plusMin, 1);\n    }\n  }\n\n  readToken_lt_gt(code: number): void {\n    // '<>'\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    let size = 1;\n\n    if (next === code) {\n      size =\n        code === charCodes.greaterThan &&\n        this.input.charCodeAt(this.state.pos + 2) === charCodes.greaterThan\n          ? 3\n          : 2;\n      if (this.input.charCodeAt(this.state.pos + size) === charCodes.equalsTo) {\n        this.finishOp(tt.assign, size + 1);\n        return;\n      }\n      this.finishOp(tt.bitShift, size);\n      return;\n    }\n\n    if (\n      next === charCodes.exclamationMark &&\n      code === charCodes.lessThan &&\n      !this.inModule &&\n      this.input.charCodeAt(this.state.pos + 2) === charCodes.dash &&\n      this.input.charCodeAt(this.state.pos + 3) === charCodes.dash\n    ) {\n      // `<!--`, an XML-style comment that should be interpreted as a line comment\n      this.skipLineComment(4);\n      this.skipSpace();\n      this.nextToken();\n      return;\n    }\n\n    if (next === charCodes.equalsTo) {\n      // <= | >=\n      size = 2;\n    }\n\n    this.finishOp(tt.relational, size);\n  }\n\n  readToken_eq_excl(code: number): void {\n    // '=!'\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (next === charCodes.equalsTo) {\n      this.finishOp(\n        tt.equality,\n        this.input.charCodeAt(this.state.pos + 2) === charCodes.equalsTo\n          ? 3\n          : 2,\n      );\n      return;\n    }\n    if (code === charCodes.equalsTo && next === charCodes.greaterThan) {\n      // '=>'\n      this.state.pos += 2;\n      this.finishToken(tt.arrow);\n      return;\n    }\n    this.finishOp(code === charCodes.equalsTo ? tt.eq : tt.bang, 1);\n  }\n\n  readToken_question(): void {\n    // '?'\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    const next2 = this.input.charCodeAt(this.state.pos + 2);\n    if (next === charCodes.questionMark && !this.state.inType) {\n      if (next2 === charCodes.equalsTo) {\n        // '??='\n        this.finishOp(tt.assign, 3);\n      } else {\n        // '??'\n        this.finishOp(tt.nullishCoalescing, 2);\n      }\n    } else if (\n      next === charCodes.dot &&\n      !(next2 >= charCodes.digit0 && next2 <= charCodes.digit9)\n    ) {\n      // '.' not followed by a number\n      this.state.pos += 2;\n      this.finishToken(tt.questionDot);\n    } else {\n      ++this.state.pos;\n      this.finishToken(tt.question);\n    }\n  }\n\n  getTokenFromCode(code: number): void {\n    switch (code) {\n      // The interpretation of a dot depends on whether it is followed\n      // by a digit or another two dots.\n\n      case charCodes.dot:\n        this.readToken_dot();\n        return;\n\n      // Punctuation tokens.\n      case charCodes.leftParenthesis:\n        ++this.state.pos;\n        this.finishToken(tt.parenL);\n        return;\n      case charCodes.rightParenthesis:\n        ++this.state.pos;\n        this.finishToken(tt.parenR);\n        return;\n      case charCodes.semicolon:\n        ++this.state.pos;\n        this.finishToken(tt.semi);\n        return;\n      case charCodes.comma:\n        ++this.state.pos;\n        this.finishToken(tt.comma);\n        return;\n      case charCodes.leftSquareBracket:\n        if (\n          this.hasPlugin(\"recordAndTuple\") &&\n          this.input.charCodeAt(this.state.pos + 1) === charCodes.verticalBar\n        ) {\n          if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n            throw this.raise(\n              this.state.pos,\n              Errors.TupleExpressionBarIncorrectStartSyntaxType,\n            );\n          }\n\n          // [|\n          this.finishToken(tt.bracketBarL);\n          this.state.pos += 2;\n        } else {\n          ++this.state.pos;\n          this.finishToken(tt.bracketL);\n        }\n        return;\n      case charCodes.rightSquareBracket:\n        ++this.state.pos;\n        this.finishToken(tt.bracketR);\n        return;\n      case charCodes.leftCurlyBrace:\n        if (\n          this.hasPlugin(\"recordAndTuple\") &&\n          this.input.charCodeAt(this.state.pos + 1) === charCodes.verticalBar\n        ) {\n          if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n            throw this.raise(\n              this.state.pos,\n              Errors.RecordExpressionBarIncorrectStartSyntaxType,\n            );\n          }\n\n          // {|\n          this.finishToken(tt.braceBarL);\n          this.state.pos += 2;\n        } else {\n          ++this.state.pos;\n          this.finishToken(tt.braceL);\n        }\n        return;\n      case charCodes.rightCurlyBrace:\n        ++this.state.pos;\n        this.finishToken(tt.braceR);\n        return;\n\n      case charCodes.colon:\n        if (\n          this.hasPlugin(\"functionBind\") &&\n          this.input.charCodeAt(this.state.pos + 1) === charCodes.colon\n        ) {\n          this.finishOp(tt.doubleColon, 2);\n        } else {\n          ++this.state.pos;\n          this.finishToken(tt.colon);\n        }\n        return;\n\n      case charCodes.questionMark:\n        this.readToken_question();\n        return;\n\n      case charCodes.graveAccent:\n        ++this.state.pos;\n        this.finishToken(tt.backQuote);\n        return;\n\n      case charCodes.digit0: {\n        const next = this.input.charCodeAt(this.state.pos + 1);\n        // '0x', '0X' - hex number\n        if (next === charCodes.lowercaseX || next === charCodes.uppercaseX) {\n          this.readRadixNumber(16);\n          return;\n        }\n        // '0o', '0O' - octal number\n        if (next === charCodes.lowercaseO || next === charCodes.uppercaseO) {\n          this.readRadixNumber(8);\n          return;\n        }\n        // '0b', '0B' - binary number\n        if (next === charCodes.lowercaseB || next === charCodes.uppercaseB) {\n          this.readRadixNumber(2);\n          return;\n        }\n      }\n      // Anything else beginning with a digit is an integer, octal\n      // number, or float. (fall through)\n      case charCodes.digit1:\n      case charCodes.digit2:\n      case charCodes.digit3:\n      case charCodes.digit4:\n      case charCodes.digit5:\n      case charCodes.digit6:\n      case charCodes.digit7:\n      case charCodes.digit8:\n      case charCodes.digit9:\n        this.readNumber(false);\n        return;\n\n      // Quotes produce strings.\n      case charCodes.quotationMark:\n      case charCodes.apostrophe:\n        this.readString(code);\n        return;\n\n      // Operators are parsed inline in tiny state machines. '=' (charCodes.equalsTo) is\n      // often referred to. `finishOp` simply skips the amount of\n      // characters it is given as second argument, and returns a token\n      // of the type given by its first argument.\n\n      case charCodes.slash:\n        this.readToken_slash();\n        return;\n\n      case charCodes.percentSign:\n      case charCodes.asterisk:\n        this.readToken_mult_modulo(code);\n        return;\n\n      case charCodes.verticalBar:\n      case charCodes.ampersand:\n        this.readToken_pipe_amp(code);\n        return;\n\n      case charCodes.caret:\n        this.readToken_caret();\n        return;\n\n      case charCodes.plusSign:\n      case charCodes.dash:\n        this.readToken_plus_min(code);\n        return;\n\n      case charCodes.lessThan:\n      case charCodes.greaterThan:\n        this.readToken_lt_gt(code);\n        return;\n\n      case charCodes.equalsTo:\n      case charCodes.exclamationMark:\n        this.readToken_eq_excl(code);\n        return;\n\n      case charCodes.tilde:\n        this.finishOp(tt.tilde, 1);\n        return;\n\n      case charCodes.atSign:\n        ++this.state.pos;\n        this.finishToken(tt.at);\n        return;\n\n      case charCodes.numberSign:\n        this.readToken_numberSign();\n        return;\n\n      case charCodes.backslash:\n        this.readWord();\n        return;\n\n      default:\n        if (isIdentifierStart(code)) {\n          this.readWord();\n          return;\n        }\n    }\n\n    throw this.raise(\n      this.state.pos,\n      Errors.InvalidOrUnexpectedToken,\n      String.fromCodePoint(code),\n    );\n  }\n\n  finishOp(type: TokenType, size: number): void {\n    const str = this.input.slice(this.state.pos, this.state.pos + size);\n    this.state.pos += size;\n    this.finishToken(type, str);\n  }\n\n  readRegexp(): void {\n    const start = this.state.pos;\n    let escaped, inClass;\n    for (;;) {\n      if (this.state.pos >= this.length) {\n        throw this.raise(start, Errors.UnterminatedRegExp);\n      }\n      const ch = this.input.charAt(this.state.pos);\n      if (lineBreak.test(ch)) {\n        throw this.raise(start, Errors.UnterminatedRegExp);\n      }\n      if (escaped) {\n        escaped = false;\n      } else {\n        if (ch === \"[\") {\n          inClass = true;\n        } else if (ch === \"]\" && inClass) {\n          inClass = false;\n        } else if (ch === \"/\" && !inClass) {\n          break;\n        }\n        escaped = ch === \"\\\\\";\n      }\n      ++this.state.pos;\n    }\n    const content = this.input.slice(start, this.state.pos);\n    ++this.state.pos;\n\n    let mods = \"\";\n\n    while (this.state.pos < this.length) {\n      const char = this.input[this.state.pos];\n      const charCode = this.input.codePointAt(this.state.pos);\n\n      if (VALID_REGEX_FLAGS.has(char)) {\n        if (mods.indexOf(char) > -1) {\n          this.raise(this.state.pos + 1, Errors.DuplicateRegExpFlags);\n        }\n      } else if (\n        isIdentifierChar(charCode) ||\n        charCode === charCodes.backslash\n      ) {\n        this.raise(this.state.pos + 1, Errors.MalformedRegExpFlags);\n      } else {\n        break;\n      }\n\n      ++this.state.pos;\n      mods += char;\n    }\n\n    this.finishToken(tt.regexp, {\n      pattern: content,\n      flags: mods,\n    });\n  }\n\n  // Read an integer in the given radix. Return null if zero digits\n  // were read, the integer value otherwise. When `len` is given, this\n  // will return `null` unless the integer has exactly `len` digits.\n  // When `forceLen` is `true`, it means that we already know that in case\n  // of a malformed number we have to skip `len` characters anyway, instead\n  // of bailing out early. For example, in \"\\u{123Z}\" we want to read up to }\n  // anyway, while in \"\\u00Z\" we will stop at Z instead of consuming four\n  // characters (and thus the closing quote).\n\n  readInt(\n    radix: number,\n    len?: number,\n    forceLen?: boolean,\n    allowNumSeparator: boolean = true,\n  ): number | null {\n    const start = this.state.pos;\n    const forbiddenSiblings =\n      radix === 16\n        ? forbiddenNumericSeparatorSiblings.hex\n        : forbiddenNumericSeparatorSiblings.decBinOct;\n    const allowedSiblings =\n      radix === 16\n        ? allowedNumericSeparatorSiblings.hex\n        : radix === 10\n        ? allowedNumericSeparatorSiblings.dec\n        : radix === 8\n        ? allowedNumericSeparatorSiblings.oct\n        : allowedNumericSeparatorSiblings.bin;\n\n    let invalid = false;\n    let total = 0;\n\n    for (let i = 0, e = len == null ? Infinity : len; i < e; ++i) {\n      const code = this.input.charCodeAt(this.state.pos);\n      let val;\n\n      if (this.hasPlugin(\"numericSeparator\")) {\n        if (code === charCodes.underscore) {\n          const prev = this.input.charCodeAt(this.state.pos - 1);\n          const next = this.input.charCodeAt(this.state.pos + 1);\n          if (allowedSiblings.indexOf(next) === -1) {\n            this.raise(this.state.pos, Errors.UnexpectedNumericSeparator);\n          } else if (\n            forbiddenSiblings.indexOf(prev) > -1 ||\n            forbiddenSiblings.indexOf(next) > -1 ||\n            Number.isNaN(next)\n          ) {\n            this.raise(this.state.pos, Errors.UnexpectedNumericSeparator);\n          }\n\n          if (!allowNumSeparator) {\n            this.raise(this.state.pos, Errors.NumericSeparatorInEscapeSequence);\n          }\n\n          // Ignore this _ character\n          ++this.state.pos;\n          continue;\n        }\n      }\n\n      if (code >= charCodes.lowercaseA) {\n        val = code - charCodes.lowercaseA + charCodes.lineFeed;\n      } else if (code >= charCodes.uppercaseA) {\n        val = code - charCodes.uppercaseA + charCodes.lineFeed;\n      } else if (charCodes.isDigit(code)) {\n        val = code - charCodes.digit0; // 0-9\n      } else {\n        val = Infinity;\n      }\n      if (val >= radix) {\n        // If we are in \"errorRecovery\" mode and we found a digit which is too big,\n        // don't break the loop.\n\n        if (this.options.errorRecovery && val <= 9) {\n          val = 0;\n          this.raise(this.state.start + i + 2, Errors.InvalidDigit, radix);\n        } else if (forceLen) {\n          val = 0;\n          invalid = true;\n        } else {\n          break;\n        }\n      }\n      ++this.state.pos;\n      total = total * radix + val;\n    }\n    if (\n      this.state.pos === start ||\n      (len != null && this.state.pos - start !== len) ||\n      invalid\n    ) {\n      return null;\n    }\n\n    return total;\n  }\n\n  readRadixNumber(radix: number): void {\n    const start = this.state.pos;\n    let isBigInt = false;\n\n    this.state.pos += 2; // 0x\n    const val = this.readInt(radix);\n    if (val == null) {\n      this.raise(this.state.start + 2, Errors.InvalidDigit, radix);\n    }\n    const next = this.input.charCodeAt(this.state.pos);\n\n    if (next === charCodes.underscore) {\n      this.expectPlugin(\"numericSeparator\", this.state.pos);\n    }\n\n    if (next === charCodes.lowercaseN) {\n      ++this.state.pos;\n      isBigInt = true;\n    }\n\n    if (isIdentifierStart(this.input.codePointAt(this.state.pos))) {\n      throw this.raise(this.state.pos, Errors.NumberIdentifier);\n    }\n\n    if (isBigInt) {\n      const str = this.input.slice(start, this.state.pos).replace(/[_n]/g, \"\");\n      this.finishToken(tt.bigint, str);\n      return;\n    }\n\n    this.finishToken(tt.num, val);\n  }\n\n  // Read an integer, octal integer, or floating-point number.\n\n  readNumber(startsWithDot: boolean): void {\n    const start = this.state.pos;\n    let isFloat = false;\n    let isBigInt = false;\n    let isNonOctalDecimalInt = false;\n\n    if (!startsWithDot && this.readInt(10) === null) {\n      this.raise(start, Errors.InvalidNumber);\n    }\n    let octal =\n      this.state.pos - start >= 2 &&\n      this.input.charCodeAt(start) === charCodes.digit0;\n    if (octal) {\n      if (this.state.strict) {\n        this.raise(start, Errors.StrictOctalLiteral);\n      }\n      if (/[89]/.test(this.input.slice(start, this.state.pos))) {\n        octal = false;\n        isNonOctalDecimalInt = true;\n      }\n    }\n\n    let next = this.input.charCodeAt(this.state.pos);\n    if (next === charCodes.dot && !octal) {\n      ++this.state.pos;\n      this.readInt(10);\n      isFloat = true;\n      next = this.input.charCodeAt(this.state.pos);\n    }\n\n    if (\n      (next === charCodes.uppercaseE || next === charCodes.lowercaseE) &&\n      !octal\n    ) {\n      next = this.input.charCodeAt(++this.state.pos);\n      if (next === charCodes.plusSign || next === charCodes.dash) {\n        ++this.state.pos;\n      }\n      if (this.readInt(10) === null) this.raise(start, Errors.InvalidNumber);\n      isFloat = true;\n      next = this.input.charCodeAt(this.state.pos);\n    }\n\n    // disallow numeric separators in non octal decimals and legacy octal likes\n    if (this.hasPlugin(\"numericSeparator\") && (octal || isNonOctalDecimalInt)) {\n      const underscorePos = this.input\n        .slice(start, this.state.pos)\n        .indexOf(\"_\");\n      if (underscorePos > 0) {\n        this.raise(underscorePos + start, Errors.ZeroDigitNumericSeparator);\n      }\n    }\n\n    if (next === charCodes.underscore) {\n      this.expectPlugin(\"numericSeparator\", this.state.pos);\n    }\n\n    if (next === charCodes.lowercaseN) {\n      // disallow floats, legacy octal syntax and non octal decimals\n      // new style octal (\"0o\") is handled in this.readRadixNumber\n      if (isFloat || octal || isNonOctalDecimalInt) {\n        this.raise(start, Errors.InvalidBigIntLiteral);\n      }\n      ++this.state.pos;\n      isBigInt = true;\n    }\n\n    if (isIdentifierStart(this.input.codePointAt(this.state.pos))) {\n      throw this.raise(this.state.pos, Errors.NumberIdentifier);\n    }\n\n    // remove \"_\" for numeric literal separator, and \"n\" for BigInts\n    const str = this.input.slice(start, this.state.pos).replace(/[_n]/g, \"\");\n\n    if (isBigInt) {\n      this.finishToken(tt.bigint, str);\n      return;\n    }\n\n    const val = octal ? parseInt(str, 8) : parseFloat(str);\n    this.finishToken(tt.num, val);\n  }\n\n  // Read a string value, interpreting backslash-escapes.\n\n  readCodePoint(throwOnInvalid: boolean): number | null {\n    const ch = this.input.charCodeAt(this.state.pos);\n    let code;\n\n    if (ch === charCodes.leftCurlyBrace) {\n      const codePos = ++this.state.pos;\n      code = this.readHexChar(\n        this.input.indexOf(\"}\", this.state.pos) - this.state.pos,\n        true,\n        throwOnInvalid,\n      );\n      ++this.state.pos;\n      if (code !== null && code > 0x10ffff) {\n        if (throwOnInvalid) {\n          this.raise(codePos, Errors.InvalidCodePoint);\n        } else {\n          return null;\n        }\n      }\n    } else {\n      code = this.readHexChar(4, false, throwOnInvalid);\n    }\n    return code;\n  }\n\n  readString(quote: number): void {\n    let out = \"\",\n      chunkStart = ++this.state.pos;\n    for (;;) {\n      if (this.state.pos >= this.length) {\n        throw this.raise(this.state.start, Errors.UnterminatedString);\n      }\n      const ch = this.input.charCodeAt(this.state.pos);\n      if (ch === quote) break;\n      if (ch === charCodes.backslash) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        // $FlowFixMe\n        out += this.readEscapedChar(false);\n        chunkStart = this.state.pos;\n      } else if (\n        ch === charCodes.lineSeparator ||\n        ch === charCodes.paragraphSeparator\n      ) {\n        ++this.state.pos;\n        ++this.state.curLine;\n        this.state.lineStart = this.state.pos;\n      } else if (isNewLine(ch)) {\n        throw this.raise(this.state.start, Errors.UnterminatedString);\n      } else {\n        ++this.state.pos;\n      }\n    }\n    out += this.input.slice(chunkStart, this.state.pos++);\n    this.finishToken(tt.string, out);\n  }\n\n  // Reads template string tokens.\n\n  readTmplToken(): void {\n    let out = \"\",\n      chunkStart = this.state.pos,\n      containsInvalid = false;\n    for (;;) {\n      if (this.state.pos >= this.length) {\n        throw this.raise(this.state.start, Errors.UnterminatedTemplate);\n      }\n      const ch = this.input.charCodeAt(this.state.pos);\n      if (\n        ch === charCodes.graveAccent ||\n        (ch === charCodes.dollarSign &&\n          this.input.charCodeAt(this.state.pos + 1) ===\n            charCodes.leftCurlyBrace)\n      ) {\n        if (this.state.pos === this.state.start && this.match(tt.template)) {\n          if (ch === charCodes.dollarSign) {\n            this.state.pos += 2;\n            this.finishToken(tt.dollarBraceL);\n            return;\n          } else {\n            ++this.state.pos;\n            this.finishToken(tt.backQuote);\n            return;\n          }\n        }\n        out += this.input.slice(chunkStart, this.state.pos);\n        this.finishToken(tt.template, containsInvalid ? null : out);\n        return;\n      }\n      if (ch === charCodes.backslash) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        const escaped = this.readEscapedChar(true);\n        if (escaped === null) {\n          containsInvalid = true;\n        } else {\n          out += escaped;\n        }\n        chunkStart = this.state.pos;\n      } else if (isNewLine(ch)) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        ++this.state.pos;\n        switch (ch) {\n          case charCodes.carriageReturn:\n            if (this.input.charCodeAt(this.state.pos) === charCodes.lineFeed) {\n              ++this.state.pos;\n            }\n          // fall through\n          case charCodes.lineFeed:\n            out += \"\\n\";\n            break;\n          default:\n            out += String.fromCharCode(ch);\n            break;\n        }\n        ++this.state.curLine;\n        this.state.lineStart = this.state.pos;\n        chunkStart = this.state.pos;\n      } else {\n        ++this.state.pos;\n      }\n    }\n  }\n\n  // Used to read escaped characters\n\n  readEscapedChar(inTemplate: boolean): string | null {\n    const throwOnInvalid = !inTemplate;\n    const ch = this.input.charCodeAt(++this.state.pos);\n    ++this.state.pos;\n    switch (ch) {\n      case charCodes.lowercaseN:\n        return \"\\n\";\n      case charCodes.lowercaseR:\n        return \"\\r\";\n      case charCodes.lowercaseX: {\n        const code = this.readHexChar(2, false, throwOnInvalid);\n        return code === null ? null : String.fromCharCode(code);\n      }\n      case charCodes.lowercaseU: {\n        const code = this.readCodePoint(throwOnInvalid);\n        return code === null ? null : String.fromCodePoint(code);\n      }\n      case charCodes.lowercaseT:\n        return \"\\t\";\n      case charCodes.lowercaseB:\n        return \"\\b\";\n      case charCodes.lowercaseV:\n        return \"\\u000b\";\n      case charCodes.lowercaseF:\n        return \"\\f\";\n      case charCodes.carriageReturn:\n        if (this.input.charCodeAt(this.state.pos) === charCodes.lineFeed) {\n          ++this.state.pos;\n        }\n      // fall through\n      case charCodes.lineFeed:\n        this.state.lineStart = this.state.pos;\n        ++this.state.curLine;\n      // fall through\n      case charCodes.lineSeparator:\n      case charCodes.paragraphSeparator:\n        return \"\";\n      case charCodes.digit8:\n      case charCodes.digit9:\n        if (inTemplate) {\n          return null;\n        }\n      // fall through\n      default:\n        if (ch >= charCodes.digit0 && ch <= charCodes.digit7) {\n          const codePos = this.state.pos - 1;\n          const match = this.input\n            .substr(this.state.pos - 1, 3)\n            .match(/^[0-7]+/);\n\n          // This is never null, because of the if condition above.\n          /*:: invariant(match !== null) */\n          let octalStr = match[0];\n\n          let octal = parseInt(octalStr, 8);\n          if (octal > 255) {\n            octalStr = octalStr.slice(0, -1);\n            octal = parseInt(octalStr, 8);\n          }\n          this.state.pos += octalStr.length - 1;\n          const next = this.input.charCodeAt(this.state.pos);\n          if (\n            octalStr !== \"0\" ||\n            next === charCodes.digit8 ||\n            next === charCodes.digit9\n          ) {\n            if (inTemplate) {\n              return null;\n            } else if (this.state.strict) {\n              this.raise(codePos, Errors.StrictOctalLiteral);\n            } else {\n              // This property is used to throw an error for\n              // an octal literal in a directive that occurs prior\n              // to a \"use strict\" directive.\n              this.state.octalPositions.push(codePos);\n            }\n          }\n\n          return String.fromCharCode(octal);\n        }\n\n        return String.fromCharCode(ch);\n    }\n  }\n\n  // Used to read character escape sequences ('\\x', '\\u').\n\n  readHexChar(\n    len: number,\n    forceLen: boolean,\n    throwOnInvalid: boolean,\n  ): number | null {\n    const codePos = this.state.pos;\n    const n = this.readInt(16, len, forceLen, false);\n    if (n === null) {\n      if (throwOnInvalid) {\n        this.raise(codePos, Errors.InvalidEscapeSequence);\n      } else {\n        this.state.pos = codePos - 1;\n      }\n    }\n    return n;\n  }\n\n  // Read an identifier, and return it as a string. Sets `this.state.containsEsc`\n  // to whether the word contained a '\\u' escape.\n  //\n  // Incrementally adds only escaped chars, adding other chunks as-is\n  // as a micro-optimization.\n\n  readWord1(): string {\n    let word = \"\";\n    this.state.containsEsc = false;\n    const start = this.state.pos;\n    let chunkStart = this.state.pos;\n\n    while (this.state.pos < this.length) {\n      const ch = this.input.codePointAt(this.state.pos);\n      if (isIdentifierChar(ch)) {\n        this.state.pos += ch <= 0xffff ? 1 : 2;\n      } else if (this.state.isIterator && ch === charCodes.atSign) {\n        ++this.state.pos;\n      } else if (ch === charCodes.backslash) {\n        this.state.containsEsc = true;\n\n        word += this.input.slice(chunkStart, this.state.pos);\n        const escStart = this.state.pos;\n        const identifierCheck =\n          this.state.pos === start ? isIdentifierStart : isIdentifierChar;\n\n        if (this.input.charCodeAt(++this.state.pos) !== charCodes.lowercaseU) {\n          this.raise(this.state.pos, Errors.MissingUnicodeEscape);\n          continue;\n        }\n\n        ++this.state.pos;\n        const esc = this.readCodePoint(true);\n        if (esc !== null) {\n          if (!identifierCheck(esc)) {\n            this.raise(escStart, Errors.EscapedCharNotAnIdentifier);\n          }\n\n          word += String.fromCodePoint(esc);\n        }\n        chunkStart = this.state.pos;\n      } else {\n        break;\n      }\n    }\n    return word + this.input.slice(chunkStart, this.state.pos);\n  }\n\n  isIterator(word: string): boolean {\n    return word === \"@@iterator\" || word === \"@@asyncIterator\";\n  }\n\n  // Read an identifier or keyword token. Will check for reserved\n  // words when necessary.\n\n  readWord(): void {\n    const word = this.readWord1();\n    const type = keywordTypes.get(word) || tt.name;\n\n    // Allow @@iterator and @@asyncIterator as a identifier only inside type\n    if (\n      this.state.isIterator &&\n      (!this.isIterator(word) || !this.state.inType)\n    ) {\n      this.raise(this.state.pos, Errors.InvalidIdentifier, word);\n    }\n\n    this.finishToken(type, word);\n  }\n\n  checkKeywordEscapes(): void {\n    const kw = this.state.type.keyword;\n    if (kw && this.state.containsEsc) {\n      this.raise(this.state.start, Errors.InvalidEscapedReservedWord, kw);\n    }\n  }\n\n  braceIsBlock(prevType: TokenType): boolean {\n    const parent = this.curContext();\n    if (parent === ct.functionExpression || parent === ct.functionStatement) {\n      return true;\n    }\n    if (\n      prevType === tt.colon &&\n      (parent === ct.braceStatement || parent === ct.braceExpression)\n    ) {\n      return !parent.isExpr;\n    }\n\n    // The check for `tt.name && exprAllowed` detects whether we are\n    // after a `yield` or `of` construct. See the `updateContext` for\n    // `tt.name`.\n    if (\n      prevType === tt._return ||\n      (prevType === tt.name && this.state.exprAllowed)\n    ) {\n      return lineBreak.test(\n        this.input.slice(this.state.lastTokEnd, this.state.start),\n      );\n    }\n\n    if (\n      prevType === tt._else ||\n      prevType === tt.semi ||\n      prevType === tt.eof ||\n      prevType === tt.parenR ||\n      prevType === tt.arrow\n    ) {\n      return true;\n    }\n\n    if (prevType === tt.braceL) {\n      return parent === ct.braceStatement;\n    }\n\n    if (\n      prevType === tt._var ||\n      prevType === tt._const ||\n      prevType === tt.name\n    ) {\n      return false;\n    }\n\n    if (prevType === tt.relational) {\n      // `class C<T> { ... }`\n      return true;\n    }\n\n    return !this.state.exprAllowed;\n  }\n\n  updateContext(prevType: TokenType): void {\n    const type = this.state.type;\n    let update;\n\n    if (type.keyword && (prevType === tt.dot || prevType === tt.questionDot)) {\n      this.state.exprAllowed = false;\n    } else if ((update = type.updateContext)) {\n      update.call(this, prevType);\n    } else {\n      this.state.exprAllowed = type.beforeExpr;\n    }\n  }\n}\n","// @flow\n\nimport { types as tt, type TokenType } from \"../tokenizer/types\";\nimport Tokenizer from \"../tokenizer\";\nimport State from \"../tokenizer/state\";\nimport type { Node } from \"../types\";\nimport { lineBreak } from \"../util/whitespace\";\nimport { isIdentifierChar } from \"../util/identifier\";\nimport * as charCodes from \"charcodes\";\nimport { Errors } from \"./error\";\n\ntype TryParse<Node, Error, Thrown, Aborted, FailState> = {\n  node: Node,\n  error: Error,\n  thrown: Thrown,\n  aborted: Aborted,\n  failState: FailState,\n};\n\n// ## Parser utilities\n\nexport default class UtilParser extends Tokenizer {\n  // TODO\n\n  addExtra(node: Node, key: string, val: any): void {\n    if (!node) return;\n\n    const extra = (node.extra = node.extra || {});\n    extra[key] = val;\n  }\n\n  // TODO\n\n  isRelational(op: \"<\" | \">\"): boolean {\n    return this.match(tt.relational) && this.state.value === op;\n  }\n\n  isLookaheadRelational(op: \"<\" | \">\"): boolean {\n    const next = this.nextTokenStart();\n    if (this.input.charAt(next) === op) {\n      if (next + 1 === this.input.length) {\n        return true;\n      }\n      const afterNext = this.input.charCodeAt(next + 1);\n      return afterNext !== op.charCodeAt(0) && afterNext !== charCodes.equalsTo;\n    }\n    return false;\n  }\n\n  // TODO\n\n  expectRelational(op: \"<\" | \">\"): void {\n    if (this.isRelational(op)) {\n      this.next();\n    } else {\n      this.unexpected(null, tt.relational);\n    }\n  }\n\n  // Tests whether parsed token is a contextual keyword.\n\n  isContextual(name: string): boolean {\n    return (\n      this.match(tt.name) &&\n      this.state.value === name &&\n      !this.state.containsEsc\n    );\n  }\n\n  isUnparsedContextual(nameStart: number, name: string): boolean {\n    const nameEnd = nameStart + name.length;\n    return (\n      this.input.slice(nameStart, nameEnd) === name &&\n      (nameEnd === this.input.length ||\n        !isIdentifierChar(this.input.charCodeAt(nameEnd)))\n    );\n  }\n\n  isLookaheadContextual(name: string): boolean {\n    const next = this.nextTokenStart();\n    return this.isUnparsedContextual(next, name);\n  }\n\n  // Consumes contextual keyword if possible.\n\n  eatContextual(name: string): boolean {\n    return this.isContextual(name) && this.eat(tt.name);\n  }\n\n  // Asserts that following token is given contextual keyword.\n\n  expectContextual(name: string, message?: string): void {\n    if (!this.eatContextual(name)) this.unexpected(null, message);\n  }\n\n  // Test whether a semicolon can be inserted at the current position.\n\n  canInsertSemicolon(): boolean {\n    return (\n      this.match(tt.eof) ||\n      this.match(tt.braceR) ||\n      this.hasPrecedingLineBreak()\n    );\n  }\n\n  hasPrecedingLineBreak(): boolean {\n    return lineBreak.test(\n      this.input.slice(this.state.lastTokEnd, this.state.start),\n    );\n  }\n\n  // TODO\n\n  isLineTerminator(): boolean {\n    return this.eat(tt.semi) || this.canInsertSemicolon();\n  }\n\n  // Consume a semicolon, or, failing that, see if we are allowed to\n  // pretend that there is a semicolon at this position.\n\n  semicolon(): void {\n    if (!this.isLineTerminator()) this.unexpected(null, tt.semi);\n  }\n\n  // Expect a token of a given type. If found, consume it, otherwise,\n  // raise an unexpected token error at given pos.\n\n  expect(type: TokenType, pos?: ?number): void {\n    this.eat(type) || this.unexpected(pos, type);\n  }\n\n  // Throws if the current token and the prev one are separated by a space.\n  assertNoSpace(message: string = \"Unexpected space.\"): void {\n    if (this.state.start > this.state.lastTokEnd) {\n      /* eslint-disable @babel/development-internal/dry-error-messages */\n      this.raise(this.state.lastTokEnd, message);\n      /* eslint-enable @babel/development-internal/dry-error-messages */\n    }\n  }\n\n  // Raise an unexpected token error. Can take the expected token type\n  // instead of a message string.\n\n  unexpected(\n    pos: ?number,\n    messageOrType: string | TokenType = \"Unexpected token\",\n  ): empty {\n    if (typeof messageOrType !== \"string\") {\n      messageOrType = `Unexpected token, expected \"${messageOrType.label}\"`;\n    }\n    /* eslint-disable @babel/development-internal/dry-error-messages */\n    throw this.raise(pos != null ? pos : this.state.start, messageOrType);\n    /* eslint-enable @babel/development-internal/dry-error-messages */\n  }\n\n  expectPlugin(name: string, pos?: ?number): true {\n    if (!this.hasPlugin(name)) {\n      throw this.raiseWithData(\n        pos != null ? pos : this.state.start,\n        { missingPlugin: [name] },\n        `This experimental syntax requires enabling the parser plugin: '${name}'`,\n      );\n    }\n\n    return true;\n  }\n\n  expectOnePlugin(names: Array<string>, pos?: ?number): void {\n    if (!names.some(n => this.hasPlugin(n))) {\n      throw this.raiseWithData(\n        pos != null ? pos : this.state.start,\n        { missingPlugin: names },\n        `This experimental syntax requires enabling one of the following parser plugin(s): '${names.join(\n          \", \",\n        )}'`,\n      );\n    }\n  }\n\n  checkYieldAwaitInDefaultParams() {\n    if (\n      this.state.yieldPos !== -1 &&\n      (this.state.awaitPos === -1 || this.state.yieldPos < this.state.awaitPos)\n    ) {\n      this.raise(this.state.yieldPos, Errors.YieldBindingIdentifier);\n    }\n    if (this.state.awaitPos !== -1) {\n      this.raise(this.state.awaitPos, Errors.AwaitBindingIdentifier);\n    }\n  }\n\n  // tryParse will clone parser state.\n  // It is expensive and should be used with cautions\n  tryParse<T: Node | $ReadOnlyArray<Node>>(\n    fn: (abort: (node?: T) => empty) => T,\n    oldState: State = this.state.clone(),\n  ):\n    | TryParse<T, null, false, false, null>\n    | TryParse<T | null, SyntaxError, boolean, false, State>\n    | TryParse<T | null, null, false, true, State> {\n    const abortSignal: { node: T | null } = { node: null };\n    try {\n      const node = fn((node = null) => {\n        abortSignal.node = node;\n        throw abortSignal;\n      });\n      if (this.state.errors.length > oldState.errors.length) {\n        const failState = this.state;\n        this.state = oldState;\n        return {\n          node,\n          error: (failState.errors[oldState.errors.length]: SyntaxError),\n          thrown: false,\n          aborted: false,\n          failState,\n        };\n      }\n\n      return {\n        node,\n        error: null,\n        thrown: false,\n        aborted: false,\n        failState: null,\n      };\n    } catch (error) {\n      const failState = this.state;\n      this.state = oldState;\n      if (error instanceof SyntaxError) {\n        return { node: null, error, thrown: true, aborted: false, failState };\n      }\n      if (error === abortSignal) {\n        return {\n          node: abortSignal.node,\n          error: null,\n          thrown: false,\n          aborted: true,\n          failState,\n        };\n      }\n\n      throw error;\n    }\n  }\n\n  checkExpressionErrors(\n    refExpressionErrors: ?ExpressionErrors,\n    andThrow: boolean,\n  ) {\n    if (!refExpressionErrors) return false;\n    const { shorthandAssign, doubleProto } = refExpressionErrors;\n    if (!andThrow) return shorthandAssign >= 0 || doubleProto >= 0;\n    if (shorthandAssign >= 0) {\n      this.unexpected(shorthandAssign);\n    }\n    if (doubleProto >= 0) {\n      this.raise(doubleProto, Errors.DuplicateProto);\n    }\n  }\n\n  /**\n   * Test if current token is a literal property name\n   * https://tc39.es/ecma262/#prod-LiteralPropertyName\n   * LiteralPropertyName:\n   *   IdentifierName\n   *   StringLiteral\n   *   NumericLiteral\n   *   BigIntLiteral\n   */\n  isLiteralPropertyName(): boolean {\n    return (\n      this.match(tt.name) ||\n      !!this.state.type.keyword ||\n      this.match(tt.string) ||\n      this.match(tt.num) ||\n      this.match(tt.bigint)\n    );\n  }\n}\n\n/**\n * The ExpressionErrors is a context struct used to track\n * - **shorthandAssign**: track initializer `=` position when parsing ambiguous\n *   patterns. When we are sure the parsed pattern is a RHS, which means it is\n *   not a pattern, we will throw on this position on invalid assign syntax,\n *   otherwise it will be reset to -1\n * - **doubleProto**: track the duplicate `__proto__` key position when parsing\n *   ambiguous object patterns. When we are sure the parsed pattern is a RHS,\n *   which means it is an object literal, we will throw on this position for\n *   __proto__ redefinition, otherwise it will be reset to -1\n */\nexport class ExpressionErrors {\n  shorthandAssign = -1;\n  doubleProto = -1;\n}\n","// @flow\n\nimport type Parser from \"./index\";\nimport UtilParser from \"./util\";\nimport { SourceLocation, type Position } from \"../util/location\";\nimport type { Comment, Node as NodeType, NodeBase } from \"../types\";\n\n// Start an AST node, attaching a start offset.\n\nclass Node implements NodeBase {\n  constructor(parser: Parser, pos: number, loc: Position) {\n    this.type = \"\";\n    this.start = pos;\n    this.end = 0;\n    this.loc = new SourceLocation(loc);\n    if (parser?.options.ranges) this.range = [pos, 0];\n    if (parser?.filename) this.loc.filename = parser.filename;\n  }\n\n  type: string;\n  start: number;\n  end: number;\n  loc: SourceLocation;\n  range: [number, number];\n  leadingComments: Array<Comment>;\n  trailingComments: Array<Comment>;\n  innerComments: Array<Comment>;\n  extra: { [key: string]: any };\n\n  __clone(): this {\n    // $FlowIgnore\n    const newNode: any = new Node();\n    const keys = Object.keys(this);\n    for (let i = 0, length = keys.length; i < length; i++) {\n      const key = keys[i];\n      // Do not clone comments that are already attached to the node\n      if (\n        key !== \"leadingComments\" &&\n        key !== \"trailingComments\" &&\n        key !== \"innerComments\"\n      ) {\n        // $FlowIgnore\n        newNode[key] = this[key];\n      }\n    }\n\n    return newNode;\n  }\n}\n\nexport class NodeUtils extends UtilParser {\n  startNode<T: NodeType>(): T {\n    // $FlowIgnore\n    return new Node(this, this.state.start, this.state.startLoc);\n  }\n\n  startNodeAt<T: NodeType>(pos: number, loc: Position): T {\n    // $FlowIgnore\n    return new Node(this, pos, loc);\n  }\n\n  /** Start a new node with a previous node's location. */\n  startNodeAtNode<T: NodeType>(type: NodeType): T {\n    return this.startNodeAt(type.start, type.loc.start);\n  }\n\n  // Finish an AST node, adding `type` and `end` properties.\n\n  finishNode<T: NodeType>(node: T, type: string): T {\n    return this.finishNodeAt(\n      node,\n      type,\n      this.state.lastTokEnd,\n      this.state.lastTokEndLoc,\n    );\n  }\n\n  // Finish node at given position\n\n  finishNodeAt<T: NodeType>(\n    node: T,\n    type: string,\n    pos: number,\n    loc: Position,\n  ): T {\n    if (process.env.NODE_ENV !== \"production\" && node.end > 0) {\n      throw new Error(\n        \"Do not call finishNode*() twice on the same node.\" +\n          \" Instead use resetEndLocation() or change type directly.\",\n      );\n    }\n    node.type = type;\n    node.end = pos;\n    node.loc.end = loc;\n    if (this.options.ranges) node.range[1] = pos;\n    this.processComment(node);\n    return node;\n  }\n\n  resetStartLocation(node: NodeBase, start: number, startLoc: Position): void {\n    node.start = start;\n    node.loc.start = startLoc;\n    if (this.options.ranges) node.range[0] = start;\n  }\n\n  resetEndLocation(\n    node: NodeBase,\n    end?: number = this.state.lastTokEnd,\n    endLoc?: Position = this.state.lastTokEndLoc,\n  ): void {\n    node.end = end;\n    node.loc.end = endLoc;\n    if (this.options.ranges) node.range[1] = end;\n  }\n\n  /**\n   * Reset the start location of node to the start location of locationNode\n   */\n  resetStartLocationFromNode(node: NodeBase, locationNode: NodeBase): void {\n    this.resetStartLocation(node, locationNode.start, locationNode.loc.start);\n  }\n}\n","// @flow\n\nimport * as charCodes from \"charcodes\";\nimport { types as tt, type TokenType } from \"../tokenizer/types\";\nimport type {\n  TSParameterProperty,\n  Decorator,\n  Expression,\n  Node,\n  Pattern,\n  RestElement,\n  SpreadElement,\n  /*:: Identifier, */\n  /*:: ObjectExpression, */\n  /*:: ObjectPattern, */\n} from \"../types\";\nimport type { Pos, Position } from \"../util/location\";\nimport {\n  isStrictBindOnlyReservedWord,\n  isStrictBindReservedWord,\n} from \"../util/identifier\";\nimport { NodeUtils } from \"./node\";\nimport { type BindingTypes, BIND_NONE } from \"../util/scopeflags\";\nimport { ExpressionErrors } from \"./util\";\nimport { Errors } from \"./error\";\n\nconst unwrapParenthesizedExpression = (node: Node) => {\n  return node.type === \"ParenthesizedExpression\"\n    ? unwrapParenthesizedExpression(node.expression)\n    : node;\n};\n\nexport default class LValParser extends NodeUtils {\n  // Forward-declaration: defined in expression.js\n  /*::\n  +parseIdentifier: (liberal?: boolean) => Identifier;\n  +parseMaybeAssign: (\n    noIn?: ?boolean,\n    refExpressionErrors?: ?ExpressionErrors,\n    afterLeftParse?: Function,\n    refNeedsArrowPos?: ?Pos,\n  ) => Expression;\n  +parseObj: <T: ObjectPattern | ObjectExpression>(\n    close: TokenType,\n    isPattern: boolean,\n    isRecord?: ?boolean,\n    refExpressionErrors?: ?ExpressionErrors,\n  ) => T;\n  */\n  // Forward-declaration: defined in statement.js\n  /*::\n  +parseDecorator: () => Decorator;\n  */\n\n  // Convert existing expression atom to assignable pattern\n  // if possible.\n  // NOTE: There is a corresponding \"isAssignable\" method in flow.js.\n  // When this one is updated, please check if also that one needs to be updated.\n\n  toAssignable(node: Node): Node {\n    let parenthesized = undefined;\n    if (node.type === \"ParenthesizedExpression\" || node.extra?.parenthesized) {\n      parenthesized = unwrapParenthesizedExpression(node);\n      if (\n        parenthesized.type !== \"Identifier\" &&\n        parenthesized.type !== \"MemberExpression\"\n      ) {\n        this.raise(node.start, Errors.InvalidParenthesizedAssignment);\n      }\n    }\n\n    switch (node.type) {\n      case \"Identifier\":\n      case \"ObjectPattern\":\n      case \"ArrayPattern\":\n      case \"AssignmentPattern\":\n        break;\n\n      case \"ObjectExpression\":\n        node.type = \"ObjectPattern\";\n        for (\n          let i = 0, length = node.properties.length, last = length - 1;\n          i < length;\n          i++\n        ) {\n          const prop = node.properties[i];\n          const isLast = i === last;\n          this.toAssignableObjectExpressionProp(prop, isLast);\n\n          if (\n            isLast &&\n            prop.type === \"RestElement\" &&\n            node.extra?.trailingComma\n          ) {\n            this.raiseRestNotLast(node.extra.trailingComma);\n          }\n        }\n        break;\n\n      case \"ObjectProperty\":\n        this.toAssignable(node.value);\n        break;\n\n      case \"SpreadElement\": {\n        this.checkToRestConversion(node);\n\n        node.type = \"RestElement\";\n        const arg = node.argument;\n        this.toAssignable(arg);\n        break;\n      }\n\n      case \"ArrayExpression\":\n        node.type = \"ArrayPattern\";\n        this.toAssignableList(node.elements, node.extra?.trailingComma);\n        break;\n\n      case \"AssignmentExpression\":\n        if (node.operator !== \"=\") {\n          this.raise(node.left.end, Errors.MissingEqInAssignment);\n        }\n\n        node.type = \"AssignmentPattern\";\n        delete node.operator;\n        this.toAssignable(node.left);\n        break;\n\n      case \"ParenthesizedExpression\":\n        this.toAssignable(((parenthesized: any): Expression));\n        break;\n\n      default:\n      // We don't know how to deal with this node. It will\n      // be reported by a later call to checkLVal\n    }\n    return node;\n  }\n\n  toAssignableObjectExpressionProp(prop: Node, isLast: boolean) {\n    if (prop.type === \"ObjectMethod\") {\n      const error =\n        prop.kind === \"get\" || prop.kind === \"set\"\n          ? Errors.PatternHasAccessor\n          : Errors.PatternHasMethod;\n\n      /* eslint-disable @babel/development-internal/dry-error-messages */\n      this.raise(prop.key.start, error);\n      /* eslint-enable @babel/development-internal/dry-error-messages */\n    } else if (prop.type === \"SpreadElement\" && !isLast) {\n      this.raiseRestNotLast(prop.start);\n    } else {\n      this.toAssignable(prop);\n    }\n  }\n\n  // Convert list of expression atoms to binding list.\n\n  toAssignableList(\n    exprList: Expression[],\n    trailingCommaPos?: ?number,\n  ): $ReadOnlyArray<Pattern> {\n    let end = exprList.length;\n    if (end) {\n      const last = exprList[end - 1];\n      if (last?.type === \"RestElement\") {\n        --end;\n      } else if (last?.type === \"SpreadElement\") {\n        last.type = \"RestElement\";\n        const arg = last.argument;\n        this.toAssignable(arg);\n        if (\n          arg.type !== \"Identifier\" &&\n          arg.type !== \"MemberExpression\" &&\n          arg.type !== \"ArrayPattern\" &&\n          arg.type !== \"ObjectPattern\"\n        ) {\n          this.unexpected(arg.start);\n        }\n\n        if (trailingCommaPos) {\n          this.raiseTrailingCommaAfterRest(trailingCommaPos);\n        }\n\n        --end;\n      }\n    }\n    for (let i = 0; i < end; i++) {\n      const elt = exprList[i];\n      if (elt) {\n        this.toAssignable(elt);\n        if (elt.type === \"RestElement\") {\n          this.raiseRestNotLast(elt.start);\n        }\n      }\n    }\n    return exprList;\n  }\n\n  // Convert list of expression atoms to a list of\n\n  toReferencedList(\n    exprList: $ReadOnlyArray<?Expression>,\n    isParenthesizedExpr?: boolean, // eslint-disable-line no-unused-vars\n  ): $ReadOnlyArray<?Expression> {\n    return exprList;\n  }\n\n  toReferencedListDeep(\n    exprList: $ReadOnlyArray<?Expression>,\n    isParenthesizedExpr?: boolean,\n  ): void {\n    this.toReferencedList(exprList, isParenthesizedExpr);\n\n    for (const expr of exprList) {\n      if (expr?.type === \"ArrayExpression\") {\n        this.toReferencedListDeep(expr.elements);\n      }\n    }\n  }\n\n  // Parses spread element.\n\n  parseSpread(\n    refExpressionErrors: ?ExpressionErrors,\n    refNeedsArrowPos?: ?Pos,\n  ): SpreadElement {\n    const node = this.startNode();\n    this.next();\n    node.argument = this.parseMaybeAssign(\n      false,\n      refExpressionErrors,\n      undefined,\n      refNeedsArrowPos,\n    );\n    return this.finishNode(node, \"SpreadElement\");\n  }\n\n  parseRestBinding(): RestElement {\n    const node = this.startNode();\n    this.next();\n    node.argument = this.parseBindingAtom();\n    return this.finishNode(node, \"RestElement\");\n  }\n\n  // Parses lvalue (assignable) atom.\n  parseBindingAtom(): Pattern {\n    switch (this.state.type) {\n      case tt.bracketL: {\n        const node = this.startNode();\n        this.next();\n        node.elements = this.parseBindingList(\n          tt.bracketR,\n          charCodes.rightSquareBracket,\n          true,\n        );\n        return this.finishNode(node, \"ArrayPattern\");\n      }\n\n      case tt.braceL:\n        return this.parseObj(tt.braceR, true);\n    }\n\n    return this.parseIdentifier();\n  }\n\n  parseBindingList(\n    close: TokenType,\n    closeCharCode: $Values<typeof charCodes>,\n    allowEmpty?: boolean,\n    allowModifiers?: boolean,\n  ): $ReadOnlyArray<Pattern | TSParameterProperty> {\n    const elts: Array<Pattern | TSParameterProperty> = [];\n    let first = true;\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n      }\n      if (allowEmpty && this.match(tt.comma)) {\n        // $FlowFixMe This method returns `$ReadOnlyArray<?Pattern>` if `allowEmpty` is set.\n        elts.push(null);\n      } else if (this.eat(close)) {\n        break;\n      } else if (this.match(tt.ellipsis)) {\n        elts.push(this.parseAssignableListItemTypes(this.parseRestBinding()));\n        this.checkCommaAfterRest(closeCharCode);\n        this.expect(close);\n        break;\n      } else {\n        const decorators = [];\n        if (this.match(tt.at) && this.hasPlugin(\"decorators\")) {\n          this.raise(this.state.start, Errors.UnsupportedParameterDecorator);\n        }\n        while (this.match(tt.at)) {\n          decorators.push(this.parseDecorator());\n        }\n        elts.push(this.parseAssignableListItem(allowModifiers, decorators));\n      }\n    }\n    return elts;\n  }\n\n  parseAssignableListItem(\n    allowModifiers: ?boolean,\n    decorators: Decorator[],\n  ): Pattern | TSParameterProperty {\n    const left = this.parseMaybeDefault();\n    this.parseAssignableListItemTypes(left);\n    const elt = this.parseMaybeDefault(left.start, left.loc.start, left);\n    if (decorators.length) {\n      left.decorators = decorators;\n    }\n    return elt;\n  }\n\n  parseAssignableListItemTypes(param: Pattern): Pattern {\n    return param;\n  }\n\n  // Parses assignment pattern around given atom if possible.\n\n  parseMaybeDefault(\n    startPos?: ?number,\n    startLoc?: ?Position,\n    left?: ?Pattern,\n  ): Pattern {\n    startLoc = startLoc || this.state.startLoc;\n    startPos = startPos || this.state.start;\n    left = left || this.parseBindingAtom();\n    if (!this.eat(tt.eq)) return left;\n\n    const node = this.startNodeAt(startPos, startLoc);\n    node.left = left;\n    node.right = this.parseMaybeAssign();\n    return this.finishNode(node, \"AssignmentPattern\");\n  }\n\n  // Verify that a node is an lval — something that can be assigned\n  // to.\n\n  checkLVal(\n    expr: Expression,\n    bindingType: BindingTypes = BIND_NONE,\n    checkClashes: ?{ [key: string]: boolean },\n    contextDescription: string,\n    disallowLetBinding?: boolean,\n    strictModeChanged?: boolean = false,\n  ): void {\n    switch (expr.type) {\n      case \"Identifier\":\n        if (\n          this.state.strict &&\n          // \"Global\" reserved words have already been checked by parseIdentifier,\n          // unless they have been found in the id or parameters of a strict-mode\n          // function in a sloppy context.\n          (strictModeChanged\n            ? isStrictBindReservedWord(expr.name, this.inModule)\n            : isStrictBindOnlyReservedWord(expr.name))\n        ) {\n          /* eslint-disable @babel/development-internal/dry-error-messages */\n          this.raise(\n            expr.start,\n            bindingType === BIND_NONE\n              ? Errors.StrictEvalArguments\n              : Errors.StrictEvalArgumentsBinding,\n            expr.name,\n          );\n          /* eslint-enable @babel/development-internal/dry-error-messages */\n        }\n\n        if (checkClashes) {\n          // we need to prefix this with an underscore for the cases where we have a key of\n          // `__proto__`. there's a bug in old V8 where the following wouldn't work:\n          //\n          //   > var obj = Object.create(null);\n          //   undefined\n          //   > obj.__proto__\n          //   null\n          //   > obj.__proto__ = true;\n          //   true\n          //   > obj.__proto__\n          //   null\n          const key = `_${expr.name}`;\n\n          if (checkClashes[key]) {\n            this.raise(expr.start, Errors.ParamDupe);\n          } else {\n            checkClashes[key] = true;\n          }\n        }\n        if (disallowLetBinding && expr.name === \"let\") {\n          this.raise(expr.start, Errors.LetInLexicalBinding);\n        }\n        if (!(bindingType & BIND_NONE)) {\n          this.scope.declareName(expr.name, bindingType, expr.start);\n        }\n        break;\n\n      case \"MemberExpression\":\n        if (bindingType !== BIND_NONE) {\n          this.raise(expr.start, Errors.InvalidPropertyBindingPattern);\n        }\n        break;\n\n      case \"ObjectPattern\":\n        for (let prop of expr.properties) {\n          if (prop.type === \"ObjectProperty\") prop = prop.value;\n          // If we find here an ObjectMethod, it's because this was originally\n          // an ObjectExpression which has then been converted.\n          // toAssignable already reported this error with a nicer message.\n          else if (prop.type === \"ObjectMethod\") continue;\n\n          this.checkLVal(\n            prop,\n            bindingType,\n            checkClashes,\n            \"object destructuring pattern\",\n            disallowLetBinding,\n          );\n        }\n        break;\n\n      case \"ArrayPattern\":\n        for (const elem of expr.elements) {\n          if (elem) {\n            this.checkLVal(\n              elem,\n              bindingType,\n              checkClashes,\n              \"array destructuring pattern\",\n              disallowLetBinding,\n            );\n          }\n        }\n        break;\n\n      case \"AssignmentPattern\":\n        this.checkLVal(\n          expr.left,\n          bindingType,\n          checkClashes,\n          \"assignment pattern\",\n        );\n        break;\n\n      case \"RestElement\":\n        this.checkLVal(\n          expr.argument,\n          bindingType,\n          checkClashes,\n          \"rest element\",\n        );\n        break;\n\n      case \"ParenthesizedExpression\":\n        this.checkLVal(\n          expr.expression,\n          bindingType,\n          checkClashes,\n          \"parenthesized expression\",\n        );\n        break;\n\n      default: {\n        /* eslint-disable @babel/development-internal/dry-error-messages */\n        this.raise(\n          expr.start,\n          bindingType === BIND_NONE\n            ? Errors.InvalidLhs\n            : Errors.InvalidLhsBinding,\n          contextDescription,\n        );\n        /* eslint-enable @babel/development-internal/dry-error-messages */\n      }\n    }\n  }\n\n  checkToRestConversion(node: SpreadElement): void {\n    if (\n      node.argument.type !== \"Identifier\" &&\n      node.argument.type !== \"MemberExpression\"\n    ) {\n      this.raise(node.argument.start, Errors.InvalidRestAssignmentPattern);\n    }\n  }\n\n  checkCommaAfterRest(close: $Values<typeof charCodes>): void {\n    if (this.match(tt.comma)) {\n      if (this.lookaheadCharCode() === close) {\n        this.raiseTrailingCommaAfterRest(this.state.start);\n      } else {\n        this.raiseRestNotLast(this.state.start);\n      }\n    }\n  }\n\n  raiseRestNotLast(pos: number) {\n    throw this.raise(pos, Errors.ElementAfterRest);\n  }\n\n  raiseTrailingCommaAfterRest(pos: number) {\n    this.raise(pos, Errors.RestTrailingComma);\n  }\n}\n","// @flow\n\n// A recursive descent parser operates by defining functions for all\n// syntactic elements, and recursively calling those, each function\n// advancing the input stream and returning an AST node. Precedence\n// of constructs (for example, the fact that `!x[1]` means `!(x[1])`\n// instead of `(!x)[1]` is handled by the fact that the parser\n// function that parses unary prefix operators is called first, and\n// in turn calls the function that parses `[]` subscripts — that\n// way, it'll receive the node for `x[1]` already parsed, and wraps\n// *that* in the unary operator node.\n//\n// Acorn uses an [operator precedence parser][opp] to handle binary\n// operator precedence, because it is much more compact than using\n// the technique outlined above, which uses different, nesting\n// functions to specify precedence, for all of the ten binary\n// precedence levels that JavaScript defines.\n//\n// [opp]: http://en.wikipedia.org/wiki/Operator-precedence_parser\n\nimport { types as tt, type TokenType } from \"../tokenizer/types\";\nimport { types as ct } from \"../tokenizer/context\";\nimport * as N from \"../types\";\nimport LValParser from \"./lval\";\nimport {\n  isKeyword,\n  isReservedWord,\n  isStrictReservedWord,\n  isStrictBindReservedWord,\n  isIdentifierStart,\n} from \"../util/identifier\";\nimport type { Pos, Position } from \"../util/location\";\nimport * as charCodes from \"charcodes\";\nimport {\n  BIND_OUTSIDE,\n  BIND_VAR,\n  SCOPE_ARROW,\n  SCOPE_CLASS,\n  SCOPE_DIRECT_SUPER,\n  SCOPE_FUNCTION,\n  SCOPE_SUPER,\n  SCOPE_PROGRAM,\n} from \"../util/scopeflags\";\nimport { ExpressionErrors } from \"./util\";\nimport {\n  PARAM_AWAIT,\n  PARAM_RETURN,\n  PARAM,\n  functionFlags,\n} from \"../util/production-parameter\";\nimport { Errors } from \"./error\";\n\nexport default class ExpressionParser extends LValParser {\n  // Forward-declaration: defined in statement.js\n  /*::\n  +parseBlock: (\n    allowDirectives?: boolean,\n    createNewLexicalScope?: boolean,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n  ) => N.BlockStatement;\n  +parseClass: (\n    node: N.Class,\n    isStatement: boolean,\n    optionalId?: boolean,\n  ) => N.Class;\n  +parseDecorators: (allowExport?: boolean) => void;\n  +parseFunction: <T: N.NormalFunction>(\n    node: T,\n    statement?: number,\n    allowExpressionBody?: boolean,\n    isAsync?: boolean,\n  ) => T;\n  +parseFunctionParams: (node: N.Function, allowModifiers?: boolean) => void;\n  +takeDecorators: (node: N.HasDecorators) => void;\n  */\n\n  // For object literal, check if property __proto__ has been used more than once.\n  // If the expression is a destructuring assignment, then __proto__ may appear\n  // multiple times. Otherwise, __proto__ is a duplicated key.\n\n  // For record expression, check if property __proto__ exists\n\n  checkProto(\n    prop: N.ObjectMember | N.SpreadElement,\n    isRecord: boolean,\n    protoRef: { used: boolean },\n    refExpressionErrors: ?ExpressionErrors,\n  ): void {\n    if (\n      prop.type === \"SpreadElement\" ||\n      prop.type === \"ObjectMethod\" ||\n      prop.computed ||\n      // $FlowIgnore\n      prop.shorthand\n    ) {\n      return;\n    }\n\n    const key = prop.key;\n    // It is either an Identifier or a String/NumericLiteral\n    const name = key.type === \"Identifier\" ? key.name : key.value;\n\n    if (name === \"__proto__\") {\n      if (isRecord) {\n        this.raise(key.start, Errors.RecordNoProto);\n        return;\n      }\n      if (protoRef.used) {\n        if (refExpressionErrors) {\n          // Store the first redefinition's position, otherwise ignore because\n          // we are parsing ambiguous pattern\n          if (refExpressionErrors.doubleProto === -1) {\n            refExpressionErrors.doubleProto = key.start;\n          }\n        } else {\n          this.raise(key.start, Errors.DuplicateProto);\n        }\n      }\n\n      protoRef.used = true;\n    }\n  }\n\n  // Convenience method to parse an Expression only\n  getExpression(): N.Expression {\n    let paramFlags = PARAM;\n    if (this.hasPlugin(\"topLevelAwait\") && this.inModule) {\n      paramFlags |= PARAM_AWAIT;\n    }\n    this.scope.enter(SCOPE_PROGRAM);\n    this.prodParam.enter(paramFlags);\n    this.nextToken();\n    const expr = this.parseExpression();\n    if (!this.match(tt.eof)) {\n      this.unexpected();\n    }\n    expr.comments = this.state.comments;\n    expr.errors = this.state.errors;\n    return expr;\n  }\n\n  // ### Expression parsing\n\n  // These nest, from the most general expression type at the top to\n  // 'atomic', nondivisible expression types at the bottom. Most of\n  // the functions will simply let the function (s) below them parse,\n  // and, *if* the syntactic construct they handle is present, wrap\n  // the AST node that the inner parser gave them in another node.\n\n  // Parse a full expression.\n  // - `noIn`\n  //   is used to forbid the `in` operator (in for loops initialization expressions)\n  //   When `noIn` is true, the production parameter [In] is not present.\n  //   Whenever [?In] appears in the right-hand sides of a production, we pass\n  //   `noIn` to the subroutine calls.\n\n  // - `refExpressionErrors `\n  //   provides reference for storing '=' operator inside shorthand\n  //   property assignment in contexts where both object expression\n  //   and object pattern might appear (so it's possible to raise\n  //   delayed syntax error at correct position).\n\n  parseExpression(\n    noIn?: boolean,\n    refExpressionErrors?: ExpressionErrors,\n  ): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const expr = this.parseMaybeAssign(noIn, refExpressionErrors);\n    if (this.match(tt.comma)) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.expressions = [expr];\n      while (this.eat(tt.comma)) {\n        node.expressions.push(this.parseMaybeAssign(noIn, refExpressionErrors));\n      }\n      this.toReferencedList(node.expressions);\n      return this.finishNode(node, \"SequenceExpression\");\n    }\n    return expr;\n  }\n\n  // Parse an assignment expression. This includes applications of\n  // operators like `+=`.\n\n  parseMaybeAssign(\n    noIn?: ?boolean,\n    refExpressionErrors?: ?ExpressionErrors,\n    afterLeftParse?: Function,\n    refNeedsArrowPos?: ?Pos,\n  ): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    if (this.isContextual(\"yield\")) {\n      if (this.prodParam.hasYield) {\n        let left = this.parseYield(noIn);\n        if (afterLeftParse) {\n          left = afterLeftParse.call(this, left, startPos, startLoc);\n        }\n        return left;\n      } else {\n        // The tokenizer will assume an expression is allowed after\n        // `yield`, but this isn't that kind of yield\n        this.state.exprAllowed = false;\n      }\n    }\n\n    let ownExpressionErrors;\n    if (refExpressionErrors) {\n      ownExpressionErrors = false;\n    } else {\n      refExpressionErrors = new ExpressionErrors();\n      ownExpressionErrors = true;\n    }\n\n    if (this.match(tt.parenL) || this.match(tt.name)) {\n      this.state.potentialArrowAt = this.state.start;\n    }\n\n    let left = this.parseMaybeConditional(\n      noIn,\n      refExpressionErrors,\n      refNeedsArrowPos,\n    );\n    if (afterLeftParse) {\n      left = afterLeftParse.call(this, left, startPos, startLoc);\n    }\n    if (this.state.type.isAssign) {\n      const node = this.startNodeAt(startPos, startLoc);\n      const operator = this.state.value;\n      node.operator = operator;\n\n      if (operator === \"??=\") {\n        this.expectPlugin(\"logicalAssignment\");\n      }\n      if (operator === \"||=\" || operator === \"&&=\") {\n        this.expectPlugin(\"logicalAssignment\");\n      }\n      if (this.match(tt.eq)) {\n        node.left = this.toAssignable(left);\n        refExpressionErrors.doubleProto = -1; // reset because double __proto__ is valid in assignment expression\n      } else {\n        node.left = left;\n      }\n\n      if (refExpressionErrors.shorthandAssign >= node.left.start) {\n        refExpressionErrors.shorthandAssign = -1; // reset because shorthand default was used correctly\n      }\n\n      this.checkLVal(left, undefined, undefined, \"assignment expression\");\n\n      this.next();\n      node.right = this.parseMaybeAssign(noIn);\n      return this.finishNode(node, \"AssignmentExpression\");\n    } else if (ownExpressionErrors) {\n      this.checkExpressionErrors(refExpressionErrors, true);\n    }\n\n    return left;\n  }\n\n  // Parse a ternary conditional (`?:`) operator.\n\n  parseMaybeConditional(\n    noIn: ?boolean,\n    refExpressionErrors: ExpressionErrors,\n    refNeedsArrowPos?: ?Pos,\n  ): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseExprOps(noIn, refExpressionErrors);\n\n    if (\n      expr.type === \"ArrowFunctionExpression\" &&\n      expr.start === potentialArrowAt\n    ) {\n      return expr;\n    }\n    if (this.checkExpressionErrors(refExpressionErrors, false)) return expr;\n\n    return this.parseConditional(\n      expr,\n      noIn,\n      startPos,\n      startLoc,\n      refNeedsArrowPos,\n    );\n  }\n\n  parseConditional(\n    expr: N.Expression,\n    noIn: ?boolean,\n    startPos: number,\n    startLoc: Position,\n    // FIXME: Disabling this for now since can't seem to get it to play nicely\n    // eslint-disable-next-line no-unused-vars\n    refNeedsArrowPos?: ?Pos,\n  ): N.Expression {\n    if (this.eat(tt.question)) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.test = expr;\n      node.consequent = this.parseMaybeAssign();\n      this.expect(tt.colon);\n      node.alternate = this.parseMaybeAssign(noIn);\n      return this.finishNode(node, \"ConditionalExpression\");\n    }\n    return expr;\n  }\n\n  // Start the precedence parser.\n\n  parseExprOps(\n    noIn: ?boolean,\n    refExpressionErrors: ExpressionErrors,\n  ): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseMaybeUnary(refExpressionErrors);\n\n    if (\n      expr.type === \"ArrowFunctionExpression\" &&\n      expr.start === potentialArrowAt\n    ) {\n      return expr;\n    }\n    if (this.checkExpressionErrors(refExpressionErrors, false)) {\n      return expr;\n    }\n\n    return this.parseExprOp(expr, startPos, startLoc, -1, noIn);\n  }\n\n  // Parse binary operators with the operator precedence parsing\n  // algorithm. `left` is the left-hand side of the operator.\n  // `minPrec` provides context that allows the function to stop and\n  // defer further parser to one of its callers when it encounters an\n  // operator that has a lower precedence than the set it is parsing.\n\n  parseExprOp(\n    left: N.Expression,\n    leftStartPos: number,\n    leftStartLoc: Position,\n    minPrec: number,\n    noIn: ?boolean,\n  ): N.Expression {\n    let prec = this.state.type.binop;\n    if (prec != null && (!noIn || !this.match(tt._in))) {\n      if (prec > minPrec) {\n        const operator = this.state.value;\n        if (operator === \"|>\" && this.state.inFSharpPipelineDirectBody) {\n          return left;\n        }\n        const node = this.startNodeAt(leftStartPos, leftStartLoc);\n        node.left = left;\n        node.operator = operator;\n        if (\n          operator === \"**\" &&\n          left.type === \"UnaryExpression\" &&\n          (this.options.createParenthesizedExpressions ||\n            !(left.extra && left.extra.parenthesized))\n        ) {\n          this.raise(\n            left.argument.start,\n            Errors.UnexpectedTokenUnaryExponentiation,\n          );\n        }\n\n        const op = this.state.type;\n        const logical = op === tt.logicalOR || op === tt.logicalAND;\n        const coalesce = op === tt.nullishCoalescing;\n\n        if (op === tt.pipeline) {\n          this.expectPlugin(\"pipelineOperator\");\n          this.state.inPipeline = true;\n          this.checkPipelineAtInfixOperator(left, leftStartPos);\n        } else if (coalesce) {\n          // Handle the precedence of `tt.coalesce` as equal to the range of logical expressions.\n          // In other words, `node.right` shouldn't contain logical expressions in order to check the mixed error.\n          prec = ((tt.logicalAND: any): { binop: number }).binop;\n        }\n\n        this.next();\n\n        if (\n          op === tt.pipeline &&\n          this.getPluginOption(\"pipelineOperator\", \"proposal\") === \"minimal\"\n        ) {\n          if (\n            this.match(tt.name) &&\n            this.state.value === \"await\" &&\n            this.prodParam.hasAwait\n          ) {\n            throw this.raise(\n              this.state.start,\n              Errors.UnexpectedAwaitAfterPipelineBody,\n            );\n          }\n        }\n\n        node.right = this.parseExprOpRightExpr(op, prec, noIn);\n        this.finishNode(\n          node,\n          logical || coalesce ? \"LogicalExpression\" : \"BinaryExpression\",\n        );\n        /* this check is for all ?? operators\n         * a ?? b && c for this example\n         * when op is coalesce and nextOp is logical (&&), throw at the pos of nextOp that it can not be mixed.\n         * Symmetrically it also throws when op is logical and nextOp is coalesce\n         */\n        const nextOp = this.state.type;\n        if (\n          (coalesce && (nextOp === tt.logicalOR || nextOp === tt.logicalAND)) ||\n          (logical && nextOp === tt.nullishCoalescing)\n        ) {\n          throw this.raise(this.state.start, Errors.MixingCoalesceWithLogical);\n        }\n\n        return this.parseExprOp(\n          node,\n          leftStartPos,\n          leftStartLoc,\n          minPrec,\n          noIn,\n        );\n      }\n    }\n    return left;\n  }\n\n  // Helper function for `parseExprOp`. Parse the right-hand side of binary-\n  // operator expressions, then apply any operator-specific functions.\n\n  parseExprOpRightExpr(\n    op: TokenType,\n    prec: number,\n    noIn: ?boolean,\n  ): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    switch (op) {\n      case tt.pipeline:\n        switch (this.getPluginOption(\"pipelineOperator\", \"proposal\")) {\n          case \"smart\":\n            return this.withTopicPermittingContext(() => {\n              return this.parseSmartPipelineBody(\n                this.parseExprOpBaseRightExpr(op, prec, noIn),\n                startPos,\n                startLoc,\n              );\n            });\n          case \"fsharp\":\n            return this.withSoloAwaitPermittingContext(() => {\n              return this.parseFSharpPipelineBody(prec, noIn);\n            });\n        }\n      // falls through\n\n      default:\n        return this.parseExprOpBaseRightExpr(op, prec, noIn);\n    }\n  }\n\n  // Helper function for `parseExprOpRightExpr`. Parse the right-hand side of\n  // binary-operator expressions without applying any operator-specific functions.\n\n  parseExprOpBaseRightExpr(\n    op: TokenType,\n    prec: number,\n    noIn: ?boolean,\n  ): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n\n    return this.parseExprOp(\n      this.parseMaybeUnary(),\n      startPos,\n      startLoc,\n      op.rightAssociative ? prec - 1 : prec,\n      noIn,\n    );\n  }\n\n  // Parse unary operators, both prefix and postfix.\n\n  parseMaybeUnary(refExpressionErrors: ?ExpressionErrors): N.Expression {\n    if (this.isContextual(\"await\") && this.isAwaitAllowed()) {\n      return this.parseAwait();\n    } else if (this.state.type.prefix) {\n      const node = this.startNode();\n      const update = this.match(tt.incDec);\n      node.operator = this.state.value;\n      node.prefix = true;\n\n      if (node.operator === \"throw\") {\n        this.expectPlugin(\"throwExpressions\");\n      }\n      this.next();\n\n      node.argument = this.parseMaybeUnary();\n\n      this.checkExpressionErrors(refExpressionErrors, true);\n\n      if (update) {\n        this.checkLVal(node.argument, undefined, undefined, \"prefix operation\");\n      } else if (this.state.strict && node.operator === \"delete\") {\n        const arg = node.argument;\n\n        if (arg.type === \"Identifier\") {\n          this.raise(node.start, Errors.StrictDelete);\n        } else if (\n          (arg.type === \"MemberExpression\" ||\n            arg.type === \"OptionalMemberExpression\") &&\n          arg.property.type === \"PrivateName\"\n        ) {\n          this.raise(node.start, Errors.DeletePrivateField);\n        }\n      }\n\n      return this.finishNode(\n        node,\n        update ? \"UpdateExpression\" : \"UnaryExpression\",\n      );\n    }\n\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    let expr = this.parseExprSubscripts(refExpressionErrors);\n    if (this.checkExpressionErrors(refExpressionErrors, false)) return expr;\n    while (this.state.type.postfix && !this.canInsertSemicolon()) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.operator = this.state.value;\n      node.prefix = false;\n      node.argument = expr;\n      this.checkLVal(expr, undefined, undefined, \"postfix operation\");\n      this.next();\n      expr = this.finishNode(node, \"UpdateExpression\");\n    }\n    return expr;\n  }\n\n  // Parse call, dot, and `[]`-subscript expressions.\n\n  parseExprSubscripts(refExpressionErrors: ?ExpressionErrors): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseExprAtom(refExpressionErrors);\n\n    if (\n      expr.type === \"ArrowFunctionExpression\" &&\n      expr.start === potentialArrowAt\n    ) {\n      return expr;\n    }\n\n    return this.parseSubscripts(expr, startPos, startLoc);\n  }\n\n  parseSubscripts(\n    base: N.Expression,\n    startPos: number,\n    startLoc: Position,\n    noCalls?: ?boolean,\n  ): N.Expression {\n    const state = {\n      optionalChainMember: false,\n      maybeAsyncArrow: this.atPossibleAsyncArrow(base),\n      stop: false,\n    };\n    do {\n      const oldMaybeInAsyncArrowHead = this.state.maybeInAsyncArrowHead;\n      if (state.maybeAsyncArrow) {\n        this.state.maybeInAsyncArrowHead = true;\n      }\n      base = this.parseSubscript(base, startPos, startLoc, noCalls, state);\n\n      // After parsing a subscript, this isn't \"async\" for sure.\n      state.maybeAsyncArrow = false;\n      this.state.maybeInAsyncArrowHead = oldMaybeInAsyncArrowHead;\n    } while (!state.stop);\n    return base;\n  }\n\n  /**\n   * @param state Set 'state.stop = true' to indicate that we should stop parsing subscripts.\n   *   state.optionalChainMember to indicate that the member is currently in OptionalChain\n   */\n  parseSubscript(\n    base: N.Expression,\n    startPos: number,\n    startLoc: Position,\n    noCalls: ?boolean,\n    state: N.ParseSubscriptState,\n  ): N.Expression {\n    if (!noCalls && this.eat(tt.doubleColon)) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.object = base;\n      node.callee = this.parseNoCallExpr();\n      state.stop = true;\n      return this.parseSubscripts(\n        this.finishNode(node, \"BindExpression\"),\n        startPos,\n        startLoc,\n        noCalls,\n      );\n    }\n    let optional = false;\n    if (this.match(tt.questionDot)) {\n      state.optionalChainMember = optional = true;\n      if (noCalls && this.lookaheadCharCode() === charCodes.leftParenthesis) {\n        state.stop = true;\n        return base;\n      }\n      this.next();\n    }\n    const computed = this.eat(tt.bracketL);\n    if (\n      (optional && !this.match(tt.parenL) && !this.match(tt.backQuote)) ||\n      computed ||\n      this.eat(tt.dot)\n    ) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.object = base;\n      node.property = computed\n        ? this.parseExpression()\n        : this.parseMaybePrivateName(true);\n      node.computed = computed;\n\n      if (node.property.type === \"PrivateName\") {\n        if (node.object.type === \"Super\") {\n          this.raise(startPos, Errors.SuperPrivateField);\n        }\n        this.classScope.usePrivateName(\n          node.property.id.name,\n          node.property.start,\n        );\n      }\n\n      if (computed) {\n        this.expect(tt.bracketR);\n      }\n\n      if (state.optionalChainMember) {\n        node.optional = optional;\n        return this.finishNode(node, \"OptionalMemberExpression\");\n      } else {\n        return this.finishNode(node, \"MemberExpression\");\n      }\n    } else if (!noCalls && this.match(tt.parenL)) {\n      const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n      const oldYieldPos = this.state.yieldPos;\n      const oldAwaitPos = this.state.awaitPos;\n      this.state.maybeInArrowParameters = true;\n      this.state.yieldPos = -1;\n      this.state.awaitPos = -1;\n\n      this.next();\n\n      let node = this.startNodeAt(startPos, startLoc);\n      node.callee = base;\n\n      if (state.optionalChainMember) {\n        node.optional = optional;\n      }\n      if (optional) {\n        node.arguments = this.parseCallExpressionArguments(tt.parenR, false);\n      } else {\n        node.arguments = this.parseCallExpressionArguments(\n          tt.parenR,\n          state.maybeAsyncArrow,\n          base.type === \"Import\",\n          base.type !== \"Super\",\n          node,\n        );\n      }\n      this.finishCallExpression(node, state.optionalChainMember);\n\n      if (state.maybeAsyncArrow && this.shouldParseAsyncArrow() && !optional) {\n        state.stop = true;\n\n        node = this.parseAsyncArrowFromCallExpression(\n          this.startNodeAt(startPos, startLoc),\n          node,\n        );\n        this.checkYieldAwaitInDefaultParams();\n        this.state.yieldPos = oldYieldPos;\n        this.state.awaitPos = oldAwaitPos;\n      } else {\n        this.toReferencedListDeep(node.arguments);\n\n        // We keep the old value if it isn't null, for cases like\n        //   (x = async(yield)) => {}\n        //\n        // Hi developer of the future :) If you are implementing generator\n        // arrow functions, please read the note below about \"await\" and\n        // verify if the same logic is needed for yield.\n        if (oldYieldPos !== -1) this.state.yieldPos = oldYieldPos;\n\n        // Await is trickier than yield. When parsing a possible arrow function\n        // (e.g. something starting with `async(`) we don't know if its possible\n        // parameters will actually be inside an async arrow function or if it is\n        // a normal call expression.\n        // If it ended up being a call expression, if we are in a context where\n        // await expression are disallowed (and thus \"await\" is an identifier)\n        // we must be careful not to leak this.state.awaitPos to an even outer\n        // context, where \"await\" could not be an identifier.\n        // For example, this code is valid because \"await\" isn't directly inside\n        // an async function:\n        //\n        //     async function a() {\n        //       function b(param = async (await)) {\n        //       }\n        //     }\n        //\n        if (\n          (!this.isAwaitAllowed() && !oldMaybeInArrowParameters) ||\n          oldAwaitPos !== -1\n        ) {\n          this.state.awaitPos = oldAwaitPos;\n        }\n      }\n\n      this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n\n      return node;\n    } else if (this.match(tt.backQuote)) {\n      return this.parseTaggedTemplateExpression(\n        startPos,\n        startLoc,\n        base,\n        state,\n      );\n    } else {\n      state.stop = true;\n      return base;\n    }\n  }\n\n  parseTaggedTemplateExpression(\n    startPos: number,\n    startLoc: Position,\n    base: N.Expression,\n    state: N.ParseSubscriptState,\n    typeArguments?: ?N.TsTypeParameterInstantiation,\n  ): N.TaggedTemplateExpression {\n    const node: N.TaggedTemplateExpression = this.startNodeAt(\n      startPos,\n      startLoc,\n    );\n    node.tag = base;\n    node.quasi = this.parseTemplate(true);\n    if (typeArguments) node.typeParameters = typeArguments;\n    if (state.optionalChainMember) {\n      this.raise(startPos, Errors.OptionalChainingNoTemplate);\n    }\n    return this.finishNode(node, \"TaggedTemplateExpression\");\n  }\n\n  atPossibleAsyncArrow(base: N.Expression): boolean {\n    return (\n      base.type === \"Identifier\" &&\n      base.name === \"async\" &&\n      this.state.lastTokEnd === base.end &&\n      !this.canInsertSemicolon() &&\n      // check there are no escape sequences, such as \\u{61}sync\n      base.end - base.start === 5 &&\n      base.start === this.state.potentialArrowAt\n    );\n  }\n\n  finishCallExpression<T: N.CallExpression | N.OptionalCallExpression>(\n    node: T,\n    optional: boolean,\n  ): N.Expression {\n    if (node.callee.type === \"Import\") {\n      if (node.arguments.length === 2) {\n        this.expectPlugin(\"moduleAttributes\");\n      }\n      if (node.arguments.length === 0 || node.arguments.length > 2) {\n        this.raise(\n          node.start,\n          Errors.ImportCallArity,\n          this.hasPlugin(\"moduleAttributes\")\n            ? \"one or two arguments\"\n            : \"one argument\",\n        );\n      } else {\n        for (const arg of node.arguments) {\n          if (arg.type === \"SpreadElement\") {\n            this.raise(arg.start, Errors.ImportCallSpreadArgument);\n          }\n        }\n      }\n    }\n    return this.finishNode(\n      node,\n      optional ? \"OptionalCallExpression\" : \"CallExpression\",\n    );\n  }\n\n  parseCallExpressionArguments(\n    close: TokenType,\n    possibleAsyncArrow: boolean,\n    dynamicImport?: boolean,\n    allowPlaceholder?: boolean,\n    nodeForExtra?: ?N.Node,\n  ): $ReadOnlyArray<?N.Expression> {\n    const elts = [];\n    let innerParenStart;\n    let first = true;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n        if (this.match(close)) {\n          if (dynamicImport && !this.hasPlugin(\"moduleAttributes\")) {\n            this.raise(\n              this.state.lastTokStart,\n              Errors.ImportCallArgumentTrailingComma,\n            );\n          }\n          if (nodeForExtra) {\n            this.addExtra(\n              nodeForExtra,\n              \"trailingComma\",\n              this.state.lastTokStart,\n            );\n          }\n          this.next();\n          break;\n        }\n      }\n\n      // we need to make sure that if this is an async arrow functions,\n      // that we don't allow inner parens inside the params\n      if (this.match(tt.parenL) && !innerParenStart) {\n        innerParenStart = this.state.start;\n      }\n\n      elts.push(\n        this.parseExprListItem(\n          false,\n          possibleAsyncArrow ? new ExpressionErrors() : undefined,\n          possibleAsyncArrow ? { start: 0 } : undefined,\n          allowPlaceholder,\n        ),\n      );\n    }\n\n    // we found an async arrow function so let's not allow any inner parens\n    if (possibleAsyncArrow && innerParenStart && this.shouldParseAsyncArrow()) {\n      this.unexpected();\n    }\n\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n\n    return elts;\n  }\n\n  shouldParseAsyncArrow(): boolean {\n    return this.match(tt.arrow) && !this.canInsertSemicolon();\n  }\n\n  parseAsyncArrowFromCallExpression(\n    node: N.ArrowFunctionExpression,\n    call: N.CallExpression,\n  ): N.ArrowFunctionExpression {\n    this.expect(tt.arrow);\n    this.parseArrowExpression(\n      node,\n      call.arguments,\n      true,\n      call.extra?.trailingComma,\n    );\n    return node;\n  }\n\n  // Parse a no-call expression (like argument of `new` or `::` operators).\n\n  parseNoCallExpr(): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    return this.parseSubscripts(this.parseExprAtom(), startPos, startLoc, true);\n  }\n\n  // Parse an atomic expression — either a single token that is an\n  // expression, an expression started by a keyword like `function` or\n  // `new`, or an expression wrapped in punctuation like `()`, `[]`,\n  // or `{}`.\n\n  parseExprAtom(refExpressionErrors?: ?ExpressionErrors): N.Expression {\n    // If a division operator appears in an expression position, the\n    // tokenizer got confused, and we force it to read a regexp instead.\n    if (this.state.type === tt.slash) this.readRegexp();\n\n    const canBeArrow = this.state.potentialArrowAt === this.state.start;\n    let node;\n\n    switch (this.state.type) {\n      case tt._super:\n        node = this.startNode();\n        this.next();\n        if (\n          this.match(tt.parenL) &&\n          !this.scope.allowDirectSuper &&\n          !this.options.allowSuperOutsideMethod\n        ) {\n          this.raise(node.start, Errors.SuperNotAllowed);\n        } else if (\n          !this.scope.allowSuper &&\n          !this.options.allowSuperOutsideMethod\n        ) {\n          this.raise(node.start, Errors.UnexpectedSuper);\n        }\n\n        if (\n          !this.match(tt.parenL) &&\n          !this.match(tt.bracketL) &&\n          !this.match(tt.dot)\n        ) {\n          this.raise(node.start, Errors.UnsupportedSuper);\n        }\n\n        return this.finishNode(node, \"Super\");\n\n      case tt._import:\n        node = this.startNode();\n        this.next();\n\n        if (this.match(tt.dot)) {\n          return this.parseImportMetaProperty(node);\n        }\n\n        if (!this.match(tt.parenL)) {\n          this.raise(this.state.lastTokStart, Errors.UnsupportedImport);\n        }\n        return this.finishNode(node, \"Import\");\n      case tt._this:\n        node = this.startNode();\n        this.next();\n        return this.finishNode(node, \"ThisExpression\");\n\n      case tt.name: {\n        node = this.startNode();\n        const containsEsc = this.state.containsEsc;\n        const id = this.parseIdentifier();\n\n        if (\n          !containsEsc &&\n          id.name === \"async\" &&\n          this.match(tt._function) &&\n          !this.canInsertSemicolon()\n        ) {\n          const last = this.state.context.length - 1;\n          if (this.state.context[last] !== ct.functionStatement) {\n            // Since \"async\" is an identifier and normally identifiers\n            // can't be followed by expression, the tokenizer assumes\n            // that \"function\" starts a statement.\n            // Fixing it in the tokenizer would mean tracking not only the\n            // previous token (\"async\"), but also the one before to know\n            // its beforeExpr value.\n            // It's easier and more efficient to adjust the context here.\n            throw new Error(\"Internal error\");\n          }\n          this.state.context[last] = ct.functionExpression;\n\n          this.next();\n          return this.parseFunction(node, undefined, true);\n        } else if (\n          canBeArrow &&\n          !containsEsc &&\n          id.name === \"async\" &&\n          this.match(tt.name) &&\n          !this.canInsertSemicolon()\n        ) {\n          const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n          const oldMaybeInAsyncArrowHead = this.state.maybeInAsyncArrowHead;\n          const oldYieldPos = this.state.yieldPos;\n          const oldAwaitPos = this.state.awaitPos;\n          this.state.maybeInArrowParameters = true;\n          this.state.maybeInAsyncArrowHead = true;\n          this.state.yieldPos = -1;\n          this.state.awaitPos = -1;\n          const params = [this.parseIdentifier()];\n          this.expect(tt.arrow);\n          this.checkYieldAwaitInDefaultParams();\n          this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n          this.state.maybeInAsyncArrowHead = oldMaybeInAsyncArrowHead;\n          this.state.yieldPos = oldYieldPos;\n          this.state.awaitPos = oldAwaitPos;\n          // let foo = async bar => {};\n          this.parseArrowExpression(node, params, true);\n          return node;\n        }\n\n        if (canBeArrow && this.match(tt.arrow) && !this.canInsertSemicolon()) {\n          this.next();\n          this.parseArrowExpression(node, [id], false);\n          return node;\n        }\n\n        return id;\n      }\n\n      case tt._do: {\n        this.expectPlugin(\"doExpressions\");\n        const node = this.startNode();\n        this.next();\n        const oldLabels = this.state.labels;\n        this.state.labels = [];\n        node.body = this.parseBlock();\n        this.state.labels = oldLabels;\n        return this.finishNode(node, \"DoExpression\");\n      }\n\n      case tt.regexp: {\n        const value = this.state.value;\n        node = this.parseLiteral(value.value, \"RegExpLiteral\");\n        node.pattern = value.pattern;\n        node.flags = value.flags;\n        return node;\n      }\n\n      case tt.num:\n        return this.parseLiteral(this.state.value, \"NumericLiteral\");\n\n      case tt.bigint:\n        return this.parseLiteral(this.state.value, \"BigIntLiteral\");\n\n      case tt.string:\n        return this.parseLiteral(this.state.value, \"StringLiteral\");\n\n      case tt._null:\n        node = this.startNode();\n        this.next();\n        return this.finishNode(node, \"NullLiteral\");\n\n      case tt._true:\n      case tt._false:\n        return this.parseBooleanLiteral();\n\n      case tt.parenL:\n        return this.parseParenAndDistinguishExpression(canBeArrow);\n\n      case tt.bracketBarL:\n      case tt.bracketHashL: {\n        this.expectPlugin(\"recordAndTuple\");\n        const oldInFSharpPipelineDirectBody = this.state\n          .inFSharpPipelineDirectBody;\n        const close =\n          this.state.type === tt.bracketBarL ? tt.bracketBarR : tt.bracketR;\n        this.state.inFSharpPipelineDirectBody = false;\n        node = this.startNode();\n        this.next();\n        node.elements = this.parseExprList(\n          close,\n          false,\n          refExpressionErrors,\n          node,\n        );\n        this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n        return this.finishNode(node, \"TupleExpression\");\n      }\n      case tt.bracketL: {\n        const oldInFSharpPipelineDirectBody = this.state\n          .inFSharpPipelineDirectBody;\n        this.state.inFSharpPipelineDirectBody = false;\n        node = this.startNode();\n        this.next();\n        node.elements = this.parseExprList(\n          tt.bracketR,\n          true,\n          refExpressionErrors,\n          node,\n        );\n        if (!this.state.maybeInArrowParameters) {\n          // This could be an array pattern:\n          //   ([a: string, b: string]) => {}\n          // In this case, we don't have to call toReferencedList. We will\n          // call it, if needed, when we are sure that it is a parenthesized\n          // expression by calling toReferencedListDeep.\n          this.toReferencedList(node.elements);\n        }\n        this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n        return this.finishNode(node, \"ArrayExpression\");\n      }\n      case tt.braceBarL:\n      case tt.braceHashL: {\n        this.expectPlugin(\"recordAndTuple\");\n        const oldInFSharpPipelineDirectBody = this.state\n          .inFSharpPipelineDirectBody;\n        const close =\n          this.state.type === tt.braceBarL ? tt.braceBarR : tt.braceR;\n        this.state.inFSharpPipelineDirectBody = false;\n        const ret = this.parseObj(close, false, true, refExpressionErrors);\n        this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n        return ret;\n      }\n      case tt.braceL: {\n        const oldInFSharpPipelineDirectBody = this.state\n          .inFSharpPipelineDirectBody;\n        this.state.inFSharpPipelineDirectBody = false;\n        const ret = this.parseObj(tt.braceR, false, false, refExpressionErrors);\n        this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n        return ret;\n      }\n      case tt._function:\n        return this.parseFunctionExpression();\n\n      case tt.at:\n        this.parseDecorators();\n      // fall through\n      case tt._class:\n        node = this.startNode();\n        this.takeDecorators(node);\n        return this.parseClass(node, false);\n\n      case tt._new:\n        return this.parseNew();\n\n      case tt.backQuote:\n        return this.parseTemplate(false);\n\n      case tt.doubleColon: {\n        node = this.startNode();\n        this.next();\n        node.object = null;\n        const callee = (node.callee = this.parseNoCallExpr());\n        if (callee.type === \"MemberExpression\") {\n          return this.finishNode(node, \"BindExpression\");\n        } else {\n          throw this.raise(callee.start, Errors.UnsupportedBind);\n        }\n      }\n\n      case tt.hash: {\n        if (this.state.inPipeline) {\n          node = this.startNode();\n\n          if (\n            this.getPluginOption(\"pipelineOperator\", \"proposal\") !== \"smart\"\n          ) {\n            this.raise(node.start, Errors.PrimaryTopicRequiresSmartPipeline);\n          }\n\n          this.next();\n\n          if (!this.primaryTopicReferenceIsAllowedInCurrentTopicContext()) {\n            this.raise(node.start, Errors.PrimaryTopicNotAllowed);\n          }\n\n          this.registerTopicReference();\n          return this.finishNode(node, \"PipelinePrimaryTopicReference\");\n        }\n\n        const nextCh = this.input.codePointAt(this.state.end);\n        if (isIdentifierStart(nextCh) || nextCh === charCodes.backslash) {\n          const start = this.state.start;\n          // $FlowIgnore It'll either parse a PrivateName or throw.\n          node = (this.parseMaybePrivateName(true): N.PrivateName);\n          if (this.match(tt._in)) {\n            this.expectPlugin(\"privateIn\");\n            this.classScope.usePrivateName(node.id.name, node.start);\n          } else if (this.hasPlugin(\"privateIn\")) {\n            this.raise(\n              this.state.start,\n              Errors.PrivateInExpectedIn,\n              node.id.name,\n            );\n          } else {\n            throw this.unexpected(start);\n          }\n          return node;\n        }\n      }\n      // fall through\n      case tt.relational: {\n        if (this.state.value === \"<\") {\n          const lookaheadCh = this.input.codePointAt(this.nextTokenStart());\n          if (\n            isIdentifierStart(lookaheadCh) || // Element/Type Parameter <foo>\n            lookaheadCh === charCodes.greaterThan // Fragment <>\n          ) {\n            this.expectOnePlugin([\"jsx\", \"flow\", \"typescript\"]);\n          }\n        }\n      }\n      // fall through\n      default:\n        throw this.unexpected();\n    }\n  }\n\n  parseBooleanLiteral(): N.BooleanLiteral {\n    const node = this.startNode();\n    node.value = this.match(tt._true);\n    this.next();\n    return this.finishNode(node, \"BooleanLiteral\");\n  }\n\n  parseMaybePrivateName(\n    isPrivateNameAllowed: boolean,\n  ): N.PrivateName | N.Identifier {\n    const isPrivate = this.match(tt.hash);\n\n    if (isPrivate) {\n      this.expectOnePlugin([\"classPrivateProperties\", \"classPrivateMethods\"]);\n      if (!isPrivateNameAllowed) {\n        this.raise(this.state.pos, Errors.UnexpectedPrivateField);\n      }\n      const node = this.startNode();\n      this.next();\n      this.assertNoSpace(\"Unexpected space between # and identifier\");\n      node.id = this.parseIdentifier(true);\n      return this.finishNode(node, \"PrivateName\");\n    } else {\n      return this.parseIdentifier(true);\n    }\n  }\n\n  parseFunctionExpression(): N.FunctionExpression | N.MetaProperty {\n    const node = this.startNode();\n\n    // We do not do parseIdentifier here because when parseFunctionExpression\n    // is called we already know that the current token is a \"name\" with the value \"function\"\n    // This will improve perf a tiny little bit as we do not do validation but more importantly\n    // here is that parseIdentifier will remove an item from the expression stack\n    // if \"function\" or \"class\" is parsed as identifier (in objects e.g.), which should not happen here.\n    let meta = this.startNode();\n    this.next();\n    meta = this.createIdentifier(meta, \"function\");\n\n    if (this.prodParam.hasYield && this.eat(tt.dot)) {\n      return this.parseMetaProperty(node, meta, \"sent\");\n    }\n    return this.parseFunction(node);\n  }\n\n  parseMetaProperty(\n    node: N.MetaProperty,\n    meta: N.Identifier,\n    propertyName: string,\n  ): N.MetaProperty {\n    node.meta = meta;\n\n    if (meta.name === \"function\" && propertyName === \"sent\") {\n      if (this.isContextual(propertyName)) {\n        this.expectPlugin(\"functionSent\");\n      } else if (!this.hasPlugin(\"functionSent\")) {\n        // The code wasn't `function.sent` but just `function.`, so a simple error is less confusing.\n        this.unexpected();\n      }\n    }\n\n    const containsEsc = this.state.containsEsc;\n\n    node.property = this.parseIdentifier(true);\n\n    if (node.property.name !== propertyName || containsEsc) {\n      this.raise(\n        node.property.start,\n        Errors.UnsupportedMetaProperty,\n        meta.name,\n        propertyName,\n      );\n    }\n\n    return this.finishNode(node, \"MetaProperty\");\n  }\n\n  parseImportMetaProperty(node: N.MetaProperty): N.MetaProperty {\n    const id = this.createIdentifier(this.startNodeAtNode(node), \"import\");\n    this.expect(tt.dot);\n\n    if (this.isContextual(\"meta\")) {\n      if (!this.inModule) {\n        this.raiseWithData(\n          id.start,\n          { code: \"BABEL_PARSER_SOURCETYPE_MODULE_REQUIRED\" },\n          Errors.ImportMetaOutsideModule,\n        );\n      }\n      this.sawUnambiguousESM = true;\n    }\n\n    return this.parseMetaProperty(node, id, \"meta\");\n  }\n\n  parseLiteral<T: N.Literal>(\n    value: any,\n    type: /*T[\"kind\"]*/ string,\n    startPos?: number,\n    startLoc?: Position,\n  ): T {\n    startPos = startPos || this.state.start;\n    startLoc = startLoc || this.state.startLoc;\n\n    const node = this.startNodeAt(startPos, startLoc);\n    this.addExtra(node, \"rawValue\", value);\n    this.addExtra(node, \"raw\", this.input.slice(startPos, this.state.end));\n    node.value = value;\n    this.next();\n    return this.finishNode(node, type);\n  }\n\n  parseParenAndDistinguishExpression(canBeArrow: boolean): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n\n    let val;\n    this.expect(tt.parenL);\n\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    const oldYieldPos = this.state.yieldPos;\n    const oldAwaitPos = this.state.awaitPos;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.maybeInArrowParameters = true;\n    this.state.yieldPos = -1;\n    this.state.awaitPos = -1;\n    this.state.inFSharpPipelineDirectBody = false;\n\n    const innerStartPos = this.state.start;\n    const innerStartLoc = this.state.startLoc;\n    const exprList = [];\n    const refExpressionErrors = new ExpressionErrors();\n    const refNeedsArrowPos = { start: 0 };\n    let first = true;\n    let spreadStart;\n    let optionalCommaStart;\n\n    while (!this.match(tt.parenR)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma, refNeedsArrowPos.start || null);\n        if (this.match(tt.parenR)) {\n          optionalCommaStart = this.state.start;\n          break;\n        }\n      }\n\n      if (this.match(tt.ellipsis)) {\n        const spreadNodeStartPos = this.state.start;\n        const spreadNodeStartLoc = this.state.startLoc;\n        spreadStart = this.state.start;\n        exprList.push(\n          this.parseParenItem(\n            this.parseRestBinding(),\n            spreadNodeStartPos,\n            spreadNodeStartLoc,\n          ),\n        );\n\n        this.checkCommaAfterRest(charCodes.rightParenthesis);\n\n        break;\n      } else {\n        exprList.push(\n          this.parseMaybeAssign(\n            false,\n            refExpressionErrors,\n            this.parseParenItem,\n            refNeedsArrowPos,\n          ),\n        );\n      }\n    }\n\n    const innerEndPos = this.state.start;\n    const innerEndLoc = this.state.startLoc;\n    this.expect(tt.parenR);\n\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n\n    let arrowNode = this.startNodeAt(startPos, startLoc);\n    if (\n      canBeArrow &&\n      this.shouldParseArrow() &&\n      (arrowNode = this.parseArrow(arrowNode))\n    ) {\n      if (!this.isAwaitAllowed() && !this.state.maybeInAsyncArrowHead) {\n        this.state.awaitPos = oldAwaitPos;\n      }\n      this.checkYieldAwaitInDefaultParams();\n      this.state.yieldPos = oldYieldPos;\n      this.state.awaitPos = oldAwaitPos;\n      for (const param of exprList) {\n        if (param.extra && param.extra.parenthesized) {\n          this.unexpected(param.extra.parenStart);\n        }\n      }\n\n      this.parseArrowExpression(arrowNode, exprList, false);\n      return arrowNode;\n    }\n\n    // We keep the old value if it isn't null, for cases like\n    //   (x = (yield)) => {}\n    if (oldYieldPos !== -1) this.state.yieldPos = oldYieldPos;\n    if (oldAwaitPos !== -1) this.state.awaitPos = oldAwaitPos;\n\n    if (!exprList.length) {\n      this.unexpected(this.state.lastTokStart);\n    }\n    if (optionalCommaStart) this.unexpected(optionalCommaStart);\n    if (spreadStart) this.unexpected(spreadStart);\n    this.checkExpressionErrors(refExpressionErrors, true);\n    if (refNeedsArrowPos.start) this.unexpected(refNeedsArrowPos.start);\n\n    this.toReferencedListDeep(exprList, /* isParenthesizedExpr */ true);\n    if (exprList.length > 1) {\n      val = this.startNodeAt(innerStartPos, innerStartLoc);\n      val.expressions = exprList;\n      this.finishNodeAt(val, \"SequenceExpression\", innerEndPos, innerEndLoc);\n    } else {\n      val = exprList[0];\n    }\n\n    if (!this.options.createParenthesizedExpressions) {\n      this.addExtra(val, \"parenthesized\", true);\n      this.addExtra(val, \"parenStart\", startPos);\n      return val;\n    }\n\n    const parenExpression = this.startNodeAt(startPos, startLoc);\n    parenExpression.expression = val;\n    this.finishNode(parenExpression, \"ParenthesizedExpression\");\n    return parenExpression;\n  }\n\n  shouldParseArrow(): boolean {\n    return !this.canInsertSemicolon();\n  }\n\n  parseArrow(node: N.ArrowFunctionExpression): ?N.ArrowFunctionExpression {\n    if (this.eat(tt.arrow)) {\n      return node;\n    }\n  }\n\n  parseParenItem(\n    node: N.Expression,\n    startPos: number, // eslint-disable-line no-unused-vars\n    startLoc: Position, // eslint-disable-line no-unused-vars\n  ): N.Expression {\n    return node;\n  }\n\n  // New's precedence is slightly tricky. It must allow its argument to\n  // be a `[]` or dot subscript expression, but not a call — at least,\n  // not without wrapping it in parentheses. Thus, it uses the noCalls\n  // argument to parseSubscripts to prevent it from consuming the\n  // argument list.\n\n  parseNew(): N.NewExpression | N.MetaProperty {\n    const node = this.startNode();\n\n    let meta = this.startNode();\n    this.next();\n    meta = this.createIdentifier(meta, \"new\");\n\n    if (this.eat(tt.dot)) {\n      const metaProp = this.parseMetaProperty(node, meta, \"target\");\n\n      if (!this.scope.inNonArrowFunction && !this.scope.inClass) {\n        let error = Errors.UnexpectedNewTarget;\n\n        if (this.hasPlugin(\"classProperties\")) {\n          error += \" or class properties\";\n        }\n\n        /* eslint-disable @babel/development-internal/dry-error-messages */\n        this.raise(metaProp.start, error);\n        /* eslint-enable @babel/development-internal/dry-error-messages */\n      }\n\n      return metaProp;\n    }\n\n    node.callee = this.parseNoCallExpr();\n\n    if (node.callee.type === \"Import\") {\n      this.raise(node.callee.start, Errors.ImportCallNotNewExpression);\n    } else if (\n      node.callee.type === \"OptionalMemberExpression\" ||\n      node.callee.type === \"OptionalCallExpression\"\n    ) {\n      this.raise(this.state.lastTokEnd, Errors.OptionalChainingNoNew);\n    } else if (this.eat(tt.questionDot)) {\n      this.raise(this.state.start, Errors.OptionalChainingNoNew);\n    }\n\n    this.parseNewArguments(node);\n    return this.finishNode(node, \"NewExpression\");\n  }\n\n  parseNewArguments(node: N.NewExpression): void {\n    if (this.eat(tt.parenL)) {\n      const args = this.parseExprList(tt.parenR);\n      this.toReferencedList(args);\n      // $FlowFixMe (parseExprList should be all non-null in this case)\n      node.arguments = args;\n    } else {\n      node.arguments = [];\n    }\n  }\n\n  // Parse template expression.\n\n  parseTemplateElement(isTagged: boolean): N.TemplateElement {\n    const elem = this.startNode();\n    if (this.state.value === null) {\n      if (!isTagged) {\n        this.raise(this.state.start + 1, Errors.InvalidEscapeSequenceTemplate);\n      }\n    }\n    elem.value = {\n      raw: this.input\n        .slice(this.state.start, this.state.end)\n        .replace(/\\r\\n?/g, \"\\n\"),\n      cooked: this.state.value,\n    };\n    this.next();\n    elem.tail = this.match(tt.backQuote);\n    return this.finishNode(elem, \"TemplateElement\");\n  }\n\n  parseTemplate(isTagged: boolean): N.TemplateLiteral {\n    const node = this.startNode();\n    this.next();\n    node.expressions = [];\n    let curElt = this.parseTemplateElement(isTagged);\n    node.quasis = [curElt];\n    while (!curElt.tail) {\n      this.expect(tt.dollarBraceL);\n      node.expressions.push(this.parseExpression());\n      this.expect(tt.braceR);\n      node.quasis.push((curElt = this.parseTemplateElement(isTagged)));\n    }\n    this.next();\n    return this.finishNode(node, \"TemplateLiteral\");\n  }\n\n  // Parse an object literal, binding pattern, or record.\n\n  parseObj<T: N.ObjectPattern | N.ObjectExpression>(\n    close: TokenType,\n    isPattern: boolean,\n    isRecord?: ?boolean,\n    refExpressionErrors?: ?ExpressionErrors,\n  ): T {\n    const propHash: any = Object.create(null);\n    let first = true;\n    const node = this.startNode();\n\n    node.properties = [];\n    this.next();\n\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n        if (this.match(close)) {\n          this.addExtra(node, \"trailingComma\", this.state.lastTokStart);\n          this.next();\n          break;\n        }\n      }\n\n      const prop = this.parseObjectMember(isPattern, refExpressionErrors);\n      if (!isPattern) {\n        // $FlowIgnore RestElement will never be returned if !isPattern\n        this.checkProto(prop, isRecord, propHash, refExpressionErrors);\n      }\n\n      if (\n        isRecord &&\n        prop.type !== \"ObjectProperty\" &&\n        prop.type !== \"SpreadElement\"\n      ) {\n        this.raise(prop.start, Errors.InvalidRecordProperty);\n      }\n\n      // $FlowIgnore\n      if (prop.shorthand) {\n        this.addExtra(prop, \"shorthand\", true);\n      }\n\n      node.properties.push(prop);\n    }\n\n    let type = \"ObjectExpression\";\n    if (isPattern) {\n      type = \"ObjectPattern\";\n    } else if (isRecord) {\n      type = \"RecordExpression\";\n    }\n    return this.finishNode(node, type);\n  }\n\n  isAsyncProp(prop: N.ObjectProperty): boolean {\n    return (\n      !prop.computed &&\n      prop.key.type === \"Identifier\" &&\n      prop.key.name === \"async\" &&\n      (this.isLiteralPropertyName() ||\n        this.match(tt.bracketL) ||\n        this.match(tt.star)) &&\n      !this.hasPrecedingLineBreak()\n    );\n  }\n\n  parseObjectMember(\n    isPattern: boolean,\n    refExpressionErrors?: ?ExpressionErrors,\n  ): N.ObjectMember | N.SpreadElement | N.RestElement {\n    let decorators = [];\n    if (this.match(tt.at)) {\n      if (this.hasPlugin(\"decorators\")) {\n        this.raise(this.state.start, Errors.UnsupportedPropertyDecorator);\n      }\n\n      // we needn't check if decorators (stage 0) plugin is enabled since it's checked by\n      // the call to this.parseDecorator\n      while (this.match(tt.at)) {\n        decorators.push(this.parseDecorator());\n      }\n    }\n\n    const prop = this.startNode();\n    let isGenerator = false;\n    let isAsync = false;\n    let startPos;\n    let startLoc;\n\n    if (this.match(tt.ellipsis)) {\n      if (decorators.length) this.unexpected();\n      if (isPattern) {\n        this.next();\n        // Don't use parseRestBinding() as we only allow Identifier here.\n        prop.argument = this.parseIdentifier();\n        this.checkCommaAfterRest(charCodes.rightCurlyBrace);\n        return this.finishNode(prop, \"RestElement\");\n      }\n\n      return this.parseSpread();\n    }\n\n    if (decorators.length) {\n      prop.decorators = decorators;\n      decorators = [];\n    }\n\n    prop.method = false;\n\n    if (isPattern || refExpressionErrors) {\n      startPos = this.state.start;\n      startLoc = this.state.startLoc;\n    }\n\n    if (!isPattern) {\n      isGenerator = this.eat(tt.star);\n    }\n\n    const containsEsc = this.state.containsEsc;\n    this.parsePropertyName(prop, /* isPrivateNameAllowed */ false);\n\n    if (!isPattern && !containsEsc && !isGenerator && this.isAsyncProp(prop)) {\n      isAsync = true;\n      isGenerator = this.eat(tt.star);\n      this.parsePropertyName(prop, /* isPrivateNameAllowed */ false);\n    } else {\n      isAsync = false;\n    }\n\n    this.parseObjPropValue(\n      prop,\n      startPos,\n      startLoc,\n      isGenerator,\n      isAsync,\n      isPattern,\n      refExpressionErrors,\n      containsEsc,\n    );\n\n    return prop;\n  }\n\n  isGetterOrSetterMethod(prop: N.ObjectMethod, isPattern: boolean): boolean {\n    return (\n      !isPattern &&\n      !prop.computed &&\n      prop.key.type === \"Identifier\" &&\n      (prop.key.name === \"get\" || prop.key.name === \"set\") &&\n      (this.isLiteralPropertyName() || // get foo() {}\n        this.match(tt.bracketL)) // get [\"string\"]() {}\n    );\n  }\n\n  getGetterSetterExpectedParamCount(\n    method: N.ObjectMethod | N.ClassMethod,\n  ): number {\n    return method.kind === \"get\" ? 0 : 1;\n  }\n\n  // get methods aren't allowed to have any parameters\n  // set methods must have exactly 1 parameter which is not a rest parameter\n  checkGetterSetterParams(method: N.ObjectMethod | N.ClassMethod): void {\n    const paramCount = this.getGetterSetterExpectedParamCount(method);\n    const start = method.start;\n    if (method.params.length !== paramCount) {\n      if (method.kind === \"get\") {\n        this.raise(start, Errors.BadGetterArity);\n      } else {\n        this.raise(start, Errors.BadSetterArity);\n      }\n    }\n\n    if (\n      method.kind === \"set\" &&\n      method.params[method.params.length - 1].type === \"RestElement\"\n    ) {\n      this.raise(start, Errors.BadSetterRestParameter);\n    }\n  }\n\n  parseObjectMethod(\n    prop: N.ObjectMethod,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isPattern: boolean,\n    containsEsc: boolean,\n  ): ?N.ObjectMethod {\n    if (isAsync || isGenerator || this.match(tt.parenL)) {\n      if (isPattern) this.unexpected();\n      prop.kind = \"method\";\n      prop.method = true;\n      return this.parseMethod(\n        prop,\n        isGenerator,\n        isAsync,\n        /* isConstructor */ false,\n        false,\n        \"ObjectMethod\",\n      );\n    }\n\n    if (!containsEsc && this.isGetterOrSetterMethod(prop, isPattern)) {\n      if (isGenerator || isAsync) this.unexpected();\n      prop.kind = prop.key.name;\n      this.parsePropertyName(prop, /* isPrivateNameAllowed */ false);\n      this.parseMethod(\n        prop,\n        /* isGenerator */ false,\n        /* isAsync */ false,\n        /* isConstructor */ false,\n        false,\n        \"ObjectMethod\",\n      );\n      this.checkGetterSetterParams(prop);\n      return prop;\n    }\n  }\n\n  parseObjectProperty(\n    prop: N.ObjectProperty,\n    startPos: ?number,\n    startLoc: ?Position,\n    isPattern: boolean,\n    refExpressionErrors: ?ExpressionErrors,\n  ): ?N.ObjectProperty {\n    prop.shorthand = false;\n\n    if (this.eat(tt.colon)) {\n      prop.value = isPattern\n        ? this.parseMaybeDefault(this.state.start, this.state.startLoc)\n        : this.parseMaybeAssign(false, refExpressionErrors);\n\n      return this.finishNode(prop, \"ObjectProperty\");\n    }\n\n    if (!prop.computed && prop.key.type === \"Identifier\") {\n      this.checkReservedWord(prop.key.name, prop.key.start, true, true);\n\n      if (isPattern) {\n        prop.value = this.parseMaybeDefault(\n          startPos,\n          startLoc,\n          prop.key.__clone(),\n        );\n      } else if (this.match(tt.eq) && refExpressionErrors) {\n        if (refExpressionErrors.shorthandAssign === -1) {\n          refExpressionErrors.shorthandAssign = this.state.start;\n        }\n        prop.value = this.parseMaybeDefault(\n          startPos,\n          startLoc,\n          prop.key.__clone(),\n        );\n      } else {\n        prop.value = prop.key.__clone();\n      }\n      prop.shorthand = true;\n\n      return this.finishNode(prop, \"ObjectProperty\");\n    }\n  }\n\n  parseObjPropValue(\n    prop: any,\n    startPos: ?number,\n    startLoc: ?Position,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isPattern: boolean,\n    refExpressionErrors?: ?ExpressionErrors,\n    containsEsc: boolean,\n  ): void {\n    const node =\n      this.parseObjectMethod(\n        prop,\n        isGenerator,\n        isAsync,\n        isPattern,\n        containsEsc,\n      ) ||\n      this.parseObjectProperty(\n        prop,\n        startPos,\n        startLoc,\n        isPattern,\n        refExpressionErrors,\n      );\n\n    if (!node) this.unexpected();\n\n    // $FlowFixMe\n    return node;\n  }\n\n  parsePropertyName(\n    prop: N.ObjectOrClassMember | N.ClassMember | N.TsNamedTypeElementBase,\n    isPrivateNameAllowed: boolean,\n  ): N.Expression | N.Identifier {\n    if (this.eat(tt.bracketL)) {\n      (prop: $FlowSubtype<N.ObjectOrClassMember>).computed = true;\n      prop.key = this.parseMaybeAssign();\n      this.expect(tt.bracketR);\n    } else {\n      const oldInPropertyName = this.state.inPropertyName;\n      this.state.inPropertyName = true;\n      // We check if it's valid for it to be a private name when we push it.\n      (prop: $FlowFixMe).key =\n        this.match(tt.num) || this.match(tt.string) || this.match(tt.bigint)\n          ? this.parseExprAtom()\n          : this.parseMaybePrivateName(isPrivateNameAllowed);\n\n      if (prop.key.type !== \"PrivateName\") {\n        // ClassPrivateProperty is never computed, so we don't assign in that case.\n        prop.computed = false;\n      }\n\n      this.state.inPropertyName = oldInPropertyName;\n    }\n\n    return prop.key;\n  }\n\n  // Initialize empty function node.\n\n  initFunction(node: N.BodilessFunctionOrMethodBase, isAsync: ?boolean): void {\n    node.id = null;\n    node.generator = false;\n    node.async = !!isAsync;\n  }\n\n  // Parse object or class method.\n\n  parseMethod<T: N.MethodLike>(\n    node: T,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isConstructor: boolean,\n    allowDirectSuper: boolean,\n    type: string,\n    inClassScope: boolean = false,\n  ): T {\n    const oldYieldPos = this.state.yieldPos;\n    const oldAwaitPos = this.state.awaitPos;\n    this.state.yieldPos = -1;\n    this.state.awaitPos = -1;\n\n    this.initFunction(node, isAsync);\n    node.generator = !!isGenerator;\n    const allowModifiers = isConstructor; // For TypeScript parameter properties\n    this.scope.enter(\n      SCOPE_FUNCTION |\n        SCOPE_SUPER |\n        (inClassScope ? SCOPE_CLASS : 0) |\n        (allowDirectSuper ? SCOPE_DIRECT_SUPER : 0),\n    );\n    this.prodParam.enter(functionFlags(isAsync, node.generator));\n    this.parseFunctionParams((node: any), allowModifiers);\n    this.parseFunctionBodyAndFinish(node, type, true);\n    this.prodParam.exit();\n    this.scope.exit();\n\n    this.state.yieldPos = oldYieldPos;\n    this.state.awaitPos = oldAwaitPos;\n\n    return node;\n  }\n\n  // Parse arrow function expression.\n  // If the parameters are provided, they will be converted to an\n  // assignable list.\n  parseArrowExpression(\n    node: N.ArrowFunctionExpression,\n    params: ?(N.Expression[]),\n    isAsync: boolean,\n    trailingCommaPos: ?number,\n  ): N.ArrowFunctionExpression {\n    this.scope.enter(SCOPE_FUNCTION | SCOPE_ARROW);\n    this.prodParam.enter(functionFlags(isAsync, false));\n    this.initFunction(node, isAsync);\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    const oldYieldPos = this.state.yieldPos;\n    const oldAwaitPos = this.state.awaitPos;\n\n    if (params) {\n      this.state.maybeInArrowParameters = true;\n      this.setArrowFunctionParameters(node, params, trailingCommaPos);\n    }\n    this.state.maybeInArrowParameters = false;\n    this.state.yieldPos = -1;\n    this.state.awaitPos = -1;\n    this.parseFunctionBody(node, true);\n\n    this.prodParam.exit();\n    this.scope.exit();\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    this.state.yieldPos = oldYieldPos;\n    this.state.awaitPos = oldAwaitPos;\n\n    return this.finishNode(node, \"ArrowFunctionExpression\");\n  }\n\n  setArrowFunctionParameters(\n    node: N.ArrowFunctionExpression,\n    params: N.Expression[],\n    trailingCommaPos: ?number,\n  ): void {\n    node.params = this.toAssignableList(params, trailingCommaPos);\n  }\n\n  parseFunctionBodyAndFinish(\n    node: N.BodilessFunctionOrMethodBase,\n    type: string,\n    isMethod?: boolean = false,\n  ): void {\n    // $FlowIgnore (node is not bodiless if we get here)\n    this.parseFunctionBody(node, false, isMethod);\n    this.finishNode(node, type);\n  }\n\n  // Parse function body and check parameters.\n  parseFunctionBody(\n    node: N.Function,\n    allowExpression: ?boolean,\n    isMethod?: boolean = false,\n  ): void {\n    const isExpression = allowExpression && !this.match(tt.braceL);\n    const oldInParameters = this.state.inParameters;\n    this.state.inParameters = false;\n\n    if (isExpression) {\n      node.body = this.parseMaybeAssign();\n      this.checkParams(node, false, allowExpression, false);\n    } else {\n      const oldStrict = this.state.strict;\n      // Start a new scope with regard to labels\n      // flag (restore them to their old value afterwards).\n      const oldLabels = this.state.labels;\n      this.state.labels = [];\n\n      // FunctionBody[Yield, Await]:\n      //   StatementList[?Yield, ?Await, +Return] opt\n      this.prodParam.enter(this.prodParam.currentFlags() | PARAM_RETURN);\n      node.body = this.parseBlock(\n        true,\n        false,\n        // Strict mode function checks after we parse the statements in the function body.\n        (hasStrictModeDirective: boolean) => {\n          const nonSimple = !this.isSimpleParamList(node.params);\n\n          if (hasStrictModeDirective && nonSimple) {\n            // This logic is here to align the error location with the ESTree plugin.\n            const errorPos =\n              // $FlowIgnore\n              (node.kind === \"method\" || node.kind === \"constructor\") &&\n              // $FlowIgnore\n              !!node.key\n                ? node.key.end\n                : node.start;\n            this.raise(errorPos, Errors.IllegalLanguageModeDirective);\n          }\n\n          const strictModeChanged = !oldStrict && this.state.strict;\n\n          // Add the params to varDeclaredNames to ensure that an error is thrown\n          // if a let/const declaration in the function clashes with one of the params.\n          this.checkParams(\n            node,\n            !this.state.strict && !allowExpression && !isMethod && !nonSimple,\n            allowExpression,\n            strictModeChanged,\n          );\n\n          // Ensure the function name isn't a forbidden identifier in strict mode, e.g. 'eval'\n          if (this.state.strict && node.id) {\n            this.checkLVal(\n              node.id,\n              BIND_OUTSIDE,\n              undefined,\n              \"function name\",\n              undefined,\n              strictModeChanged,\n            );\n          }\n        },\n      );\n      this.prodParam.exit();\n      this.state.labels = oldLabels;\n    }\n\n    this.state.inParameters = oldInParameters;\n  }\n\n  isSimpleParamList(\n    params: $ReadOnlyArray<N.Pattern | N.TSParameterProperty>,\n  ): boolean {\n    for (let i = 0, len = params.length; i < len; i++) {\n      if (params[i].type !== \"Identifier\") return false;\n    }\n    return true;\n  }\n\n  checkParams(\n    node: N.Function,\n    allowDuplicates: boolean,\n    // eslint-disable-next-line no-unused-vars\n    isArrowFunction: ?boolean,\n    strictModeChanged?: boolean = true,\n  ): void {\n    // $FlowIssue\n    const nameHash: {} = Object.create(null);\n    for (let i = 0; i < node.params.length; i++) {\n      this.checkLVal(\n        node.params[i],\n        BIND_VAR,\n        allowDuplicates ? null : nameHash,\n        \"function parameter list\",\n        undefined,\n        strictModeChanged,\n      );\n    }\n  }\n\n  // Parses a comma-separated list of expressions, and returns them as\n  // an array. `close` is the token type that ends the list, and\n  // `allowEmpty` can be turned on to allow subsequent commas with\n  // nothing in between them to be parsed as `null` (which is needed\n  // for array literals).\n\n  parseExprList(\n    close: TokenType,\n    allowEmpty?: boolean,\n    refExpressionErrors?: ?ExpressionErrors,\n    nodeForExtra?: ?N.Node,\n  ): $ReadOnlyArray<?N.Expression> {\n    const elts = [];\n    let first = true;\n\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n        if (this.match(close)) {\n          if (nodeForExtra) {\n            this.addExtra(\n              nodeForExtra,\n              \"trailingComma\",\n              this.state.lastTokStart,\n            );\n          }\n          this.next();\n          break;\n        }\n      }\n\n      elts.push(this.parseExprListItem(allowEmpty, refExpressionErrors));\n    }\n    return elts;\n  }\n\n  parseExprListItem(\n    allowEmpty: ?boolean,\n    refExpressionErrors?: ?ExpressionErrors,\n    refNeedsArrowPos: ?Pos,\n    allowPlaceholder: ?boolean,\n  ): ?N.Expression {\n    let elt;\n    if (this.match(tt.comma)) {\n      if (!allowEmpty) {\n        this.raise(this.state.pos, Errors.UnexpectedToken, \",\");\n      }\n      elt = null;\n    } else if (this.match(tt.ellipsis)) {\n      const spreadNodeStartPos = this.state.start;\n      const spreadNodeStartLoc = this.state.startLoc;\n      elt = this.parseParenItem(\n        this.parseSpread(refExpressionErrors, refNeedsArrowPos),\n        spreadNodeStartPos,\n        spreadNodeStartLoc,\n      );\n    } else if (this.match(tt.question)) {\n      this.expectPlugin(\"partialApplication\");\n      if (!allowPlaceholder) {\n        this.raise(this.state.start, Errors.UnexpectedArgumentPlaceholder);\n      }\n      const node = this.startNode();\n      this.next();\n      elt = this.finishNode(node, \"ArgumentPlaceholder\");\n    } else {\n      elt = this.parseMaybeAssign(\n        false,\n        refExpressionErrors,\n        this.parseParenItem,\n        refNeedsArrowPos,\n      );\n    }\n    return elt;\n  }\n\n  // Parse the next token as an identifier. If `liberal` is true (used\n  // when parsing properties), it will also convert keywords into\n  // identifiers.\n  // This shouldn't be used to parse the keywords of meta properties, since they\n  // are not identifiers and cannot contain escape sequences.\n\n  parseIdentifier(liberal?: boolean): N.Identifier {\n    const node = this.startNode();\n    const name = this.parseIdentifierName(node.start, liberal);\n\n    return this.createIdentifier(node, name);\n  }\n\n  createIdentifier(node: N.Identifier, name: string): N.Identifier {\n    node.name = name;\n    node.loc.identifierName = name;\n\n    return this.finishNode(node, \"Identifier\");\n  }\n\n  parseIdentifierName(pos: number, liberal?: boolean): string {\n    let name: string;\n\n    if (this.match(tt.name)) {\n      name = this.state.value;\n    } else if (this.state.type.keyword) {\n      name = this.state.type.keyword;\n\n      // `class` and `function` keywords push function-type token context into this.context.\n      // But there is no chance to pop the context if the keyword is consumed\n      // as an identifier such as a property name.\n      const context = this.state.context;\n      if (\n        (name === \"class\" || name === \"function\") &&\n        context[context.length - 1].token === \"function\"\n      ) {\n        context.pop();\n      }\n    } else {\n      throw this.unexpected();\n    }\n\n    if (liberal) {\n      // If the current token is not used as a keyword, set its type to \"tt.name\".\n      // This will prevent this.next() from throwing about unexpected escapes.\n      this.state.type = tt.name;\n    } else {\n      this.checkReservedWord(\n        name,\n        this.state.start,\n        !!this.state.type.keyword,\n        false,\n      );\n    }\n\n    this.next();\n\n    return name;\n  }\n\n  checkReservedWord(\n    word: string,\n    startLoc: number,\n    checkKeywords: boolean,\n    isBinding: boolean,\n  ): void {\n    if (this.prodParam.hasYield && word === \"yield\") {\n      this.raise(startLoc, Errors.YieldBindingIdentifier);\n      return;\n    }\n\n    if (word === \"await\") {\n      if (this.prodParam.hasAwait) {\n        this.raise(startLoc, Errors.AwaitBindingIdentifier);\n        return;\n      }\n      if (\n        this.state.awaitPos === -1 &&\n        (this.state.maybeInAsyncArrowHead || this.isAwaitAllowed())\n      ) {\n        this.state.awaitPos = this.state.start;\n      }\n    }\n\n    if (\n      this.scope.inClass &&\n      !this.scope.inNonArrowFunction &&\n      word === \"arguments\"\n    ) {\n      this.raise(startLoc, Errors.ArgumentsDisallowedInInitializer);\n      return;\n    }\n    if (checkKeywords && isKeyword(word)) {\n      this.raise(startLoc, Errors.UnexpectedKeyword, word);\n      return;\n    }\n\n    const reservedTest = !this.state.strict\n      ? isReservedWord\n      : isBinding\n      ? isStrictBindReservedWord\n      : isStrictReservedWord;\n\n    if (reservedTest(word, this.inModule)) {\n      if (!this.prodParam.hasAwait && word === \"await\") {\n        this.raise(startLoc, Errors.AwaitNotInAsyncFunction);\n      } else {\n        this.raise(startLoc, Errors.UnexpectedReservedWord, word);\n      }\n    }\n  }\n\n  isAwaitAllowed(): boolean {\n    if (this.scope.inFunction) return this.prodParam.hasAwait;\n    if (this.options.allowAwaitOutsideFunction) return true;\n    if (this.hasPlugin(\"topLevelAwait\")) {\n      return this.inModule && this.prodParam.hasAwait;\n    }\n    return false;\n  }\n\n  // Parses await expression inside async function.\n\n  parseAwait(): N.AwaitExpression {\n    const node = this.startNode();\n\n    this.next();\n\n    if (this.state.inParameters) {\n      this.raise(node.start, Errors.AwaitExpressionFormalParameter);\n    } else if (this.state.awaitPos === -1) {\n      this.state.awaitPos = node.start;\n    }\n    if (this.eat(tt.star)) {\n      this.raise(node.start, Errors.ObsoleteAwaitStar);\n    }\n\n    if (!this.scope.inFunction && !this.options.allowAwaitOutsideFunction) {\n      if (\n        this.hasPrecedingLineBreak() ||\n        // All the following expressions are ambiguous:\n        //   await + 0, await - 0, await ( 0 ), await [ 0 ], await / 0 /u, await ``\n        this.match(tt.plusMin) ||\n        this.match(tt.parenL) ||\n        this.match(tt.bracketL) ||\n        this.match(tt.backQuote) ||\n        // Sometimes the tokenizer generates tt.slash for regexps, and this is\n        // handler by parseExprAtom\n        this.match(tt.regexp) ||\n        this.match(tt.slash) ||\n        // This code could be parsed both as a modulo operator or as an intrinsic:\n        //   await %x(0)\n        (this.hasPlugin(\"v8intrinsic\") && this.match(tt.modulo))\n      ) {\n        this.ambiguousScriptDifferentAst = true;\n      } else {\n        this.sawUnambiguousESM = true;\n      }\n    }\n\n    if (!this.state.soloAwait) {\n      node.argument = this.parseMaybeUnary();\n    }\n\n    return this.finishNode(node, \"AwaitExpression\");\n  }\n\n  // Parses yield expression inside generator.\n\n  parseYield(noIn?: ?boolean): N.YieldExpression {\n    const node = this.startNode();\n\n    if (this.state.inParameters) {\n      this.raise(node.start, Errors.YieldInParameter);\n    } else if (this.state.yieldPos === -1) {\n      this.state.yieldPos = node.start;\n    }\n\n    this.next();\n    if (\n      this.match(tt.semi) ||\n      (!this.match(tt.star) && !this.state.type.startsExpr) ||\n      this.hasPrecedingLineBreak()\n    ) {\n      node.delegate = false;\n      node.argument = null;\n    } else {\n      node.delegate = this.eat(tt.star);\n      node.argument = this.parseMaybeAssign(noIn);\n    }\n    return this.finishNode(node, \"YieldExpression\");\n  }\n\n  // Validates a pipeline (for any of the pipeline Babylon plugins) at the point\n  // of the infix operator `|>`.\n\n  checkPipelineAtInfixOperator(left: N.Expression, leftStartPos: number) {\n    if (this.getPluginOption(\"pipelineOperator\", \"proposal\") === \"smart\") {\n      if (left.type === \"SequenceExpression\") {\n        // Ensure that the pipeline head is not a comma-delimited\n        // sequence expression.\n        this.raise(leftStartPos, Errors.PipelineHeadSequenceExpression);\n      }\n    }\n  }\n\n  parseSmartPipelineBody(\n    childExpression: N.Expression,\n    startPos: number,\n    startLoc: Position,\n  ): N.PipelineBody {\n    const pipelineStyle = this.checkSmartPipelineBodyStyle(childExpression);\n\n    this.checkSmartPipelineBodyEarlyErrors(\n      childExpression,\n      pipelineStyle,\n      startPos,\n    );\n\n    return this.parseSmartPipelineBodyInStyle(\n      childExpression,\n      pipelineStyle,\n      startPos,\n      startLoc,\n    );\n  }\n\n  checkSmartPipelineBodyEarlyErrors(\n    childExpression: N.Expression,\n    pipelineStyle: N.PipelineStyle,\n    startPos: number,\n  ): void {\n    if (this.match(tt.arrow)) {\n      // If the following token is invalidly `=>`, then throw a human-friendly error\n      // instead of something like 'Unexpected token, expected \";\"'.\n      throw this.raise(this.state.start, Errors.PipelineBodyNoArrow);\n    } else if (\n      pipelineStyle === \"PipelineTopicExpression\" &&\n      childExpression.type === \"SequenceExpression\"\n    ) {\n      this.raise(startPos, Errors.PipelineBodySequenceExpression);\n    }\n  }\n\n  parseSmartPipelineBodyInStyle(\n    childExpression: N.Expression,\n    pipelineStyle: N.PipelineStyle,\n    startPos: number,\n    startLoc: Position,\n  ): N.PipelineBody {\n    const bodyNode = this.startNodeAt(startPos, startLoc);\n    switch (pipelineStyle) {\n      case \"PipelineBareFunction\":\n        bodyNode.callee = childExpression;\n        break;\n      case \"PipelineBareConstructor\":\n        bodyNode.callee = childExpression.callee;\n        break;\n      case \"PipelineBareAwaitedFunction\":\n        bodyNode.callee = childExpression.argument;\n        break;\n      case \"PipelineTopicExpression\":\n        if (!this.topicReferenceWasUsedInCurrentTopicContext()) {\n          this.raise(startPos, Errors.PipelineTopicUnused);\n        }\n        bodyNode.expression = childExpression;\n        break;\n      default:\n        throw new Error(\n          `Internal @babel/parser error: Unknown pipeline style (${pipelineStyle})`,\n        );\n    }\n    return this.finishNode(bodyNode, pipelineStyle);\n  }\n\n  checkSmartPipelineBodyStyle(expression: N.Expression): N.PipelineStyle {\n    switch (expression.type) {\n      default:\n        return this.isSimpleReference(expression)\n          ? \"PipelineBareFunction\"\n          : \"PipelineTopicExpression\";\n    }\n  }\n\n  isSimpleReference(expression: N.Expression): boolean {\n    switch (expression.type) {\n      case \"MemberExpression\":\n        return (\n          !expression.computed && this.isSimpleReference(expression.object)\n        );\n      case \"Identifier\":\n        return true;\n      default:\n        return false;\n    }\n  }\n\n  // Enable topic references from outer contexts within smart pipeline bodies.\n  // The function modifies the parser's topic-context state to enable or disable\n  // the use of topic references with the smartPipelines plugin. They then run a\n  // callback, then they reset the parser to the old topic-context state that it\n  // had before the function was called.\n\n  withTopicPermittingContext<T>(callback: () => T): T {\n    const outerContextTopicState = this.state.topicContext;\n    this.state.topicContext = {\n      // Enable the use of the primary topic reference.\n      maxNumOfResolvableTopics: 1,\n      // Hide the use of any topic references from outer contexts.\n      maxTopicIndex: null,\n    };\n\n    try {\n      return callback();\n    } finally {\n      this.state.topicContext = outerContextTopicState;\n    }\n  }\n\n  // Disable topic references from outer contexts within syntax constructs\n  // such as the bodies of iteration statements.\n  // The function modifies the parser's topic-context state to enable or disable\n  // the use of topic references with the smartPipelines plugin. They then run a\n  // callback, then they reset the parser to the old topic-context state that it\n  // had before the function was called.\n\n  withTopicForbiddingContext<T>(callback: () => T): T {\n    const outerContextTopicState = this.state.topicContext;\n    this.state.topicContext = {\n      // Disable the use of the primary topic reference.\n      maxNumOfResolvableTopics: 0,\n      // Hide the use of any topic references from outer contexts.\n      maxTopicIndex: null,\n    };\n\n    try {\n      return callback();\n    } finally {\n      this.state.topicContext = outerContextTopicState;\n    }\n  }\n\n  withSoloAwaitPermittingContext<T>(callback: () => T): T {\n    const outerContextSoloAwaitState = this.state.soloAwait;\n    this.state.soloAwait = true;\n\n    try {\n      return callback();\n    } finally {\n      this.state.soloAwait = outerContextSoloAwaitState;\n    }\n  }\n\n  // Register the use of a primary topic reference (`#`) within the current\n  // topic context.\n  registerTopicReference(): void {\n    this.state.topicContext.maxTopicIndex = 0;\n  }\n\n  primaryTopicReferenceIsAllowedInCurrentTopicContext(): boolean {\n    return this.state.topicContext.maxNumOfResolvableTopics >= 1;\n  }\n\n  topicReferenceWasUsedInCurrentTopicContext(): boolean {\n    return (\n      this.state.topicContext.maxTopicIndex != null &&\n      this.state.topicContext.maxTopicIndex >= 0\n    );\n  }\n\n  parseFSharpPipelineBody(prec: number, noIn: ?boolean): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n\n    this.state.potentialArrowAt = this.state.start;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = true;\n\n    const ret = this.parseExprOp(\n      this.parseMaybeUnary(),\n      startPos,\n      startLoc,\n      prec,\n      noIn,\n    );\n\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n\n    return ret;\n  }\n}\n","// @flow\n\nimport * as N from \"../types\";\nimport { types as tt, type TokenType } from \"../tokenizer/types\";\nimport ExpressionParser from \"./expression\";\nimport { Errors } from \"./error\";\nimport {\n  isIdentifierChar,\n  isIdentifierStart,\n  keywordRelationalOperator,\n} from \"../util/identifier\";\nimport { lineBreak } from \"../util/whitespace\";\nimport * as charCodes from \"charcodes\";\nimport {\n  BIND_CLASS,\n  BIND_LEXICAL,\n  BIND_VAR,\n  BIND_FUNCTION,\n  SCOPE_CLASS,\n  SCOPE_FUNCTION,\n  SCOPE_OTHER,\n  SCOPE_SIMPLE_CATCH,\n  SCOPE_SUPER,\n  CLASS_ELEMENT_OTHER,\n  CLASS_ELEMENT_INSTANCE_GETTER,\n  CLASS_ELEMENT_INSTANCE_SETTER,\n  CLASS_ELEMENT_STATIC_GETTER,\n  CLASS_ELEMENT_STATIC_SETTER,\n  type BindingTypes,\n} from \"../util/scopeflags\";\nimport { ExpressionErrors } from \"./util\";\nimport { PARAM, functionFlags } from \"../util/production-parameter\";\n\nconst loopLabel = { kind: \"loop\" },\n  switchLabel = { kind: \"switch\" };\n\nconst FUNC_NO_FLAGS = 0b000,\n  FUNC_STATEMENT = 0b001,\n  FUNC_HANGING_STATEMENT = 0b010,\n  FUNC_NULLABLE_ID = 0b100;\n\nexport default class StatementParser extends ExpressionParser {\n  // ### Statement parsing\n\n  // Parse a program. Initializes the parser, reads any number of\n  // statements, and wraps them in a Program node.  Optionally takes a\n  // `program` argument.  If present, the statements will be appended\n  // to its body instead of creating a new node.\n\n  parseTopLevel(file: N.File, program: N.Program): N.File {\n    program.sourceType = this.options.sourceType;\n\n    program.interpreter = this.parseInterpreterDirective();\n\n    this.parseBlockBody(program, true, true, tt.eof);\n\n    if (\n      this.inModule &&\n      !this.options.allowUndeclaredExports &&\n      this.scope.undefinedExports.size > 0\n    ) {\n      for (const [name] of Array.from(this.scope.undefinedExports)) {\n        const pos = this.scope.undefinedExports.get(name);\n        // $FlowIssue\n        this.raise(pos, Errors.ModuleExportUndefined, name);\n      }\n    }\n\n    file.program = this.finishNode(program, \"Program\");\n    file.comments = this.state.comments;\n\n    if (this.options.tokens) file.tokens = this.tokens;\n\n    return this.finishNode(file, \"File\");\n  }\n\n  // TODO\n\n  stmtToDirective(stmt: N.Statement): N.Directive {\n    const expr = stmt.expression;\n\n    const directiveLiteral = this.startNodeAt(expr.start, expr.loc.start);\n    const directive = this.startNodeAt(stmt.start, stmt.loc.start);\n\n    const raw = this.input.slice(expr.start, expr.end);\n    const val = (directiveLiteral.value = raw.slice(1, -1)); // remove quotes\n\n    this.addExtra(directiveLiteral, \"raw\", raw);\n    this.addExtra(directiveLiteral, \"rawValue\", val);\n\n    directive.value = this.finishNodeAt(\n      directiveLiteral,\n      \"DirectiveLiteral\",\n      expr.end,\n      expr.loc.end,\n    );\n\n    return this.finishNodeAt(directive, \"Directive\", stmt.end, stmt.loc.end);\n  }\n\n  parseInterpreterDirective(): N.InterpreterDirective | null {\n    if (!this.match(tt.interpreterDirective)) {\n      return null;\n    }\n\n    const node = this.startNode();\n    node.value = this.state.value;\n    this.next();\n    return this.finishNode(node, \"InterpreterDirective\");\n  }\n\n  isLet(context: ?string): boolean {\n    if (!this.isContextual(\"let\")) {\n      return false;\n    }\n    const next = this.nextTokenStart();\n    const nextCh = this.input.charCodeAt(next);\n    // For ambiguous cases, determine if a LexicalDeclaration (or only a\n    // Statement) is allowed here. If context is not empty then only a Statement\n    // is allowed. However, `let [` is an explicit negative lookahead for\n    // ExpressionStatement, so special-case it first.\n    if (nextCh === charCodes.leftSquareBracket) return true;\n    if (context) return false;\n\n    if (nextCh === charCodes.leftCurlyBrace) return true;\n\n    if (isIdentifierStart(nextCh)) {\n      let pos = next + 1;\n      while (isIdentifierChar(this.input.charCodeAt(pos))) {\n        ++pos;\n      }\n      const ident = this.input.slice(next, pos);\n      if (!keywordRelationalOperator.test(ident)) return true;\n    }\n    return false;\n  }\n\n  // Parse a single statement.\n  //\n  // If expecting a statement and finding a slash operator, parse a\n  // regular expression literal. This is to handle cases like\n  // `if (foo) /blah/.exec(foo)`, where looking at the previous token\n  // does not help.\n\n  parseStatement(context: ?string, topLevel?: boolean): N.Statement {\n    if (this.match(tt.at)) {\n      this.parseDecorators(true);\n    }\n    return this.parseStatementContent(context, topLevel);\n  }\n\n  parseStatementContent(context: ?string, topLevel: ?boolean): N.Statement {\n    let starttype = this.state.type;\n    const node = this.startNode();\n    let kind;\n\n    if (this.isLet(context)) {\n      starttype = tt._var;\n      kind = \"let\";\n    }\n\n    // Most types of statements are recognized by the keyword they\n    // start with. Many are trivial to parse, some require a bit of\n    // complexity.\n\n    switch (starttype) {\n      case tt._break:\n      case tt._continue:\n        // $FlowFixMe\n        return this.parseBreakContinueStatement(node, starttype.keyword);\n      case tt._debugger:\n        return this.parseDebuggerStatement(node);\n      case tt._do:\n        return this.parseDoStatement(node);\n      case tt._for:\n        return this.parseForStatement(node);\n      case tt._function:\n        if (this.lookaheadCharCode() === charCodes.dot) break;\n        if (context) {\n          if (this.state.strict) {\n            this.raise(this.state.start, Errors.StrictFunction);\n          } else if (context !== \"if\" && context !== \"label\") {\n            this.raise(this.state.start, Errors.SloppyFunction);\n          }\n        }\n        return this.parseFunctionStatement(node, false, !context);\n\n      case tt._class:\n        if (context) this.unexpected();\n        return this.parseClass(node, true);\n\n      case tt._if:\n        return this.parseIfStatement(node);\n      case tt._return:\n        return this.parseReturnStatement(node);\n      case tt._switch:\n        return this.parseSwitchStatement(node);\n      case tt._throw:\n        return this.parseThrowStatement(node);\n      case tt._try:\n        return this.parseTryStatement(node);\n\n      case tt._const:\n      case tt._var:\n        kind = kind || this.state.value;\n        if (context && kind !== \"var\") {\n          this.raise(this.state.start, Errors.UnexpectedLexicalDeclaration);\n        }\n        return this.parseVarStatement(node, kind);\n\n      case tt._while:\n        return this.parseWhileStatement(node);\n      case tt._with:\n        return this.parseWithStatement(node);\n      case tt.braceL:\n        return this.parseBlock();\n      case tt.semi:\n        return this.parseEmptyStatement(node);\n      case tt._export:\n      case tt._import: {\n        const nextTokenCharCode = this.lookaheadCharCode();\n        if (\n          nextTokenCharCode === charCodes.leftParenthesis ||\n          nextTokenCharCode === charCodes.dot\n        ) {\n          break;\n        }\n\n        if (!this.options.allowImportExportEverywhere && !topLevel) {\n          this.raise(this.state.start, Errors.UnexpectedImportExport);\n        }\n\n        this.next();\n\n        let result;\n        if (starttype === tt._import) {\n          result = this.parseImport(node);\n\n          if (\n            result.type === \"ImportDeclaration\" &&\n            (!result.importKind || result.importKind === \"value\")\n          ) {\n            this.sawUnambiguousESM = true;\n          }\n        } else {\n          result = this.parseExport(node);\n\n          if (\n            (result.type === \"ExportNamedDeclaration\" &&\n              (!result.exportKind || result.exportKind === \"value\")) ||\n            (result.type === \"ExportAllDeclaration\" &&\n              (!result.exportKind || result.exportKind === \"value\")) ||\n            result.type === \"ExportDefaultDeclaration\"\n          ) {\n            this.sawUnambiguousESM = true;\n          }\n        }\n\n        this.assertModuleNodeAllowed(node);\n\n        return result;\n      }\n\n      default: {\n        if (this.isAsyncFunction()) {\n          if (context) {\n            this.raise(\n              this.state.start,\n              Errors.AsyncFunctionInSingleStatementContext,\n            );\n          }\n          this.next();\n          return this.parseFunctionStatement(node, true, !context);\n        }\n      }\n    }\n\n    // If the statement does not start with a statement keyword or a\n    // brace, it's an ExpressionStatement or LabeledStatement. We\n    // simply start parsing an expression, and afterwards, if the\n    // next token is a colon and the expression was a simple\n    // Identifier node, we switch to interpreting it as a label.\n    const maybeName = this.state.value;\n    const expr = this.parseExpression();\n\n    if (\n      starttype === tt.name &&\n      expr.type === \"Identifier\" &&\n      this.eat(tt.colon)\n    ) {\n      return this.parseLabeledStatement(node, maybeName, expr, context);\n    } else {\n      return this.parseExpressionStatement(node, expr);\n    }\n  }\n\n  assertModuleNodeAllowed(node: N.Node): void {\n    if (!this.options.allowImportExportEverywhere && !this.inModule) {\n      this.raiseWithData(\n        node.start,\n        {\n          code: \"BABEL_PARSER_SOURCETYPE_MODULE_REQUIRED\",\n        },\n        Errors.ImportOutsideModule,\n      );\n    }\n  }\n\n  takeDecorators(node: N.HasDecorators): void {\n    const decorators = this.state.decoratorStack[\n      this.state.decoratorStack.length - 1\n    ];\n    if (decorators.length) {\n      node.decorators = decorators;\n      this.resetStartLocationFromNode(node, decorators[0]);\n      this.state.decoratorStack[this.state.decoratorStack.length - 1] = [];\n    }\n  }\n\n  canHaveLeadingDecorator(): boolean {\n    return this.match(tt._class);\n  }\n\n  parseDecorators(allowExport?: boolean): void {\n    const currentContextDecorators = this.state.decoratorStack[\n      this.state.decoratorStack.length - 1\n    ];\n    while (this.match(tt.at)) {\n      const decorator = this.parseDecorator();\n      currentContextDecorators.push(decorator);\n    }\n\n    if (this.match(tt._export)) {\n      if (!allowExport) {\n        this.unexpected();\n      }\n\n      if (\n        this.hasPlugin(\"decorators\") &&\n        !this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")\n      ) {\n        this.raise(this.state.start, Errors.DecoratorExportClass);\n      }\n    } else if (!this.canHaveLeadingDecorator()) {\n      throw this.raise(this.state.start, Errors.UnexpectedLeadingDecorator);\n    }\n  }\n\n  parseDecorator(): N.Decorator {\n    this.expectOnePlugin([\"decorators-legacy\", \"decorators\"]);\n\n    const node = this.startNode();\n    this.next();\n\n    if (this.hasPlugin(\"decorators\")) {\n      // Every time a decorator class expression is evaluated, a new empty array is pushed onto the stack\n      // So that the decorators of any nested class expressions will be dealt with separately\n      this.state.decoratorStack.push([]);\n\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      let expr: N.Expression;\n\n      if (this.eat(tt.parenL)) {\n        expr = this.parseExpression();\n        this.expect(tt.parenR);\n      } else {\n        expr = this.parseIdentifier(false);\n\n        while (this.eat(tt.dot)) {\n          const node = this.startNodeAt(startPos, startLoc);\n          node.object = expr;\n          node.property = this.parseIdentifier(true);\n          node.computed = false;\n          expr = this.finishNode(node, \"MemberExpression\");\n        }\n      }\n\n      node.expression = this.parseMaybeDecoratorArguments(expr);\n      this.state.decoratorStack.pop();\n    } else {\n      node.expression = this.parseExprSubscripts();\n    }\n    return this.finishNode(node, \"Decorator\");\n  }\n\n  parseMaybeDecoratorArguments(expr: N.Expression): N.Expression {\n    if (this.eat(tt.parenL)) {\n      const node = this.startNodeAtNode(expr);\n      node.callee = expr;\n      node.arguments = this.parseCallExpressionArguments(tt.parenR, false);\n      this.toReferencedList(node.arguments);\n      return this.finishNode(node, \"CallExpression\");\n    }\n\n    return expr;\n  }\n\n  parseBreakContinueStatement(\n    node: N.BreakStatement | N.ContinueStatement,\n    keyword: string,\n  ): N.BreakStatement | N.ContinueStatement {\n    const isBreak = keyword === \"break\";\n    this.next();\n\n    if (this.isLineTerminator()) {\n      node.label = null;\n    } else {\n      node.label = this.parseIdentifier();\n      this.semicolon();\n    }\n\n    this.verifyBreakContinue(node, keyword);\n\n    return this.finishNode(\n      node,\n      isBreak ? \"BreakStatement\" : \"ContinueStatement\",\n    );\n  }\n\n  verifyBreakContinue(\n    node: N.BreakStatement | N.ContinueStatement,\n    keyword: string,\n  ) {\n    const isBreak = keyword === \"break\";\n    let i;\n    for (i = 0; i < this.state.labels.length; ++i) {\n      const lab = this.state.labels[i];\n      if (node.label == null || lab.name === node.label.name) {\n        if (lab.kind != null && (isBreak || lab.kind === \"loop\")) break;\n        if (node.label && isBreak) break;\n      }\n    }\n    if (i === this.state.labels.length) {\n      this.raise(node.start, Errors.IllegalBreakContinue, keyword);\n    }\n  }\n\n  parseDebuggerStatement(node: N.DebuggerStatement): N.DebuggerStatement {\n    this.next();\n    this.semicolon();\n    return this.finishNode(node, \"DebuggerStatement\");\n  }\n\n  parseHeaderExpression(): N.Expression {\n    this.expect(tt.parenL);\n    const val = this.parseExpression();\n    this.expect(tt.parenR);\n    return val;\n  }\n\n  parseDoStatement(node: N.DoWhileStatement): N.DoWhileStatement {\n    this.next();\n    this.state.labels.push(loopLabel);\n\n    node.body =\n      // For the smartPipelines plugin: Disable topic references from outer\n      // contexts within the loop body. They are permitted in test expressions,\n      // outside of the loop body.\n      this.withTopicForbiddingContext(() =>\n        // Parse the loop body's body.\n        this.parseStatement(\"do\"),\n      );\n\n    this.state.labels.pop();\n\n    this.expect(tt._while);\n    node.test = this.parseHeaderExpression();\n    this.eat(tt.semi);\n    return this.finishNode(node, \"DoWhileStatement\");\n  }\n\n  // Disambiguating between a `for` and a `for`/`in` or `for`/`of`\n  // loop is non-trivial. Basically, we have to parse the init `var`\n  // statement or expression, disallowing the `in` operator (see\n  // the second parameter to `parseExpression`), and then check\n  // whether the next token is `in` or `of`. When there is no init\n  // part (semicolon immediately after the opening parenthesis), it\n  // is a regular `for` loop.\n\n  parseForStatement(node: N.Node): N.ForLike {\n    this.next();\n    this.state.labels.push(loopLabel);\n\n    let awaitAt = -1;\n    if (this.isAwaitAllowed() && this.eatContextual(\"await\")) {\n      awaitAt = this.state.lastTokStart;\n    }\n    this.scope.enter(SCOPE_OTHER);\n    this.expect(tt.parenL);\n\n    if (this.match(tt.semi)) {\n      if (awaitAt > -1) {\n        this.unexpected(awaitAt);\n      }\n      return this.parseFor(node, null);\n    }\n\n    const isLet = this.isLet();\n    if (this.match(tt._var) || this.match(tt._const) || isLet) {\n      const init = this.startNode();\n      const kind = isLet ? \"let\" : this.state.value;\n      this.next();\n      this.parseVar(init, true, kind);\n      this.finishNode(init, \"VariableDeclaration\");\n\n      if (\n        (this.match(tt._in) || this.isContextual(\"of\")) &&\n        init.declarations.length === 1\n      ) {\n        return this.parseForIn(node, init, awaitAt);\n      }\n      if (awaitAt > -1) {\n        this.unexpected(awaitAt);\n      }\n      return this.parseFor(node, init);\n    }\n\n    const refExpressionErrors = new ExpressionErrors();\n    const init = this.parseExpression(true, refExpressionErrors);\n    if (this.match(tt._in) || this.isContextual(\"of\")) {\n      this.toAssignable(init);\n      const description = this.isContextual(\"of\")\n        ? \"for-of statement\"\n        : \"for-in statement\";\n      this.checkLVal(init, undefined, undefined, description);\n      return this.parseForIn(node, init, awaitAt);\n    } else {\n      this.checkExpressionErrors(refExpressionErrors, true);\n    }\n    if (awaitAt > -1) {\n      this.unexpected(awaitAt);\n    }\n    return this.parseFor(node, init);\n  }\n\n  parseFunctionStatement(\n    node: N.FunctionDeclaration,\n    isAsync?: boolean,\n    declarationPosition?: boolean,\n  ): N.FunctionDeclaration {\n    this.next();\n    return this.parseFunction(\n      node,\n      FUNC_STATEMENT | (declarationPosition ? 0 : FUNC_HANGING_STATEMENT),\n      isAsync,\n    );\n  }\n\n  parseIfStatement(node: N.IfStatement): N.IfStatement {\n    this.next();\n    node.test = this.parseHeaderExpression();\n    node.consequent = this.parseStatement(\"if\");\n    node.alternate = this.eat(tt._else) ? this.parseStatement(\"if\") : null;\n    return this.finishNode(node, \"IfStatement\");\n  }\n\n  parseReturnStatement(node: N.ReturnStatement): N.ReturnStatement {\n    if (!this.prodParam.hasReturn && !this.options.allowReturnOutsideFunction) {\n      this.raise(this.state.start, Errors.IllegalReturn);\n    }\n\n    this.next();\n\n    // In `return` (and `break`/`continue`), the keywords with\n    // optional arguments, we eagerly look for a semicolon or the\n    // possibility to insert one.\n\n    if (this.isLineTerminator()) {\n      node.argument = null;\n    } else {\n      node.argument = this.parseExpression();\n      this.semicolon();\n    }\n\n    return this.finishNode(node, \"ReturnStatement\");\n  }\n\n  parseSwitchStatement(node: N.SwitchStatement): N.SwitchStatement {\n    this.next();\n    node.discriminant = this.parseHeaderExpression();\n    const cases = (node.cases = []);\n    this.expect(tt.braceL);\n    this.state.labels.push(switchLabel);\n    this.scope.enter(SCOPE_OTHER);\n\n    // Statements under must be grouped (by label) in SwitchCase\n    // nodes. `cur` is used to keep the node that we are currently\n    // adding statements to.\n\n    let cur;\n    for (let sawDefault; !this.match(tt.braceR); ) {\n      if (this.match(tt._case) || this.match(tt._default)) {\n        const isCase = this.match(tt._case);\n        if (cur) this.finishNode(cur, \"SwitchCase\");\n        cases.push((cur = this.startNode()));\n        cur.consequent = [];\n        this.next();\n        if (isCase) {\n          cur.test = this.parseExpression();\n        } else {\n          if (sawDefault) {\n            this.raise(\n              this.state.lastTokStart,\n              Errors.MultipleDefaultsInSwitch,\n            );\n          }\n          sawDefault = true;\n          cur.test = null;\n        }\n        this.expect(tt.colon);\n      } else {\n        if (cur) {\n          cur.consequent.push(this.parseStatement(null));\n        } else {\n          this.unexpected();\n        }\n      }\n    }\n    this.scope.exit();\n    if (cur) this.finishNode(cur, \"SwitchCase\");\n    this.next(); // Closing brace\n    this.state.labels.pop();\n    return this.finishNode(node, \"SwitchStatement\");\n  }\n\n  parseThrowStatement(node: N.ThrowStatement): N.ThrowStatement {\n    this.next();\n    if (\n      lineBreak.test(this.input.slice(this.state.lastTokEnd, this.state.start))\n    ) {\n      this.raise(this.state.lastTokEnd, Errors.NewlineAfterThrow);\n    }\n    node.argument = this.parseExpression();\n    this.semicolon();\n    return this.finishNode(node, \"ThrowStatement\");\n  }\n\n  parseTryStatement(node: N.TryStatement): N.TryStatement {\n    this.next();\n\n    node.block = this.parseBlock();\n    node.handler = null;\n\n    if (this.match(tt._catch)) {\n      const clause = this.startNode();\n      this.next();\n      if (this.match(tt.parenL)) {\n        this.expect(tt.parenL);\n        clause.param = this.parseBindingAtom();\n        const simple = clause.param.type === \"Identifier\";\n        this.scope.enter(simple ? SCOPE_SIMPLE_CATCH : 0);\n        this.checkLVal(clause.param, BIND_LEXICAL, null, \"catch clause\");\n        this.expect(tt.parenR);\n      } else {\n        clause.param = null;\n        this.scope.enter(SCOPE_OTHER);\n      }\n\n      clause.body =\n        // For the smartPipelines plugin: Disable topic references from outer\n        // contexts within the catch clause's body.\n        this.withTopicForbiddingContext(() =>\n          // Parse the catch clause's body.\n          this.parseBlock(false, false),\n        );\n      this.scope.exit();\n\n      node.handler = this.finishNode(clause, \"CatchClause\");\n    }\n\n    node.finalizer = this.eat(tt._finally) ? this.parseBlock() : null;\n\n    if (!node.handler && !node.finalizer) {\n      this.raise(node.start, Errors.NoCatchOrFinally);\n    }\n\n    return this.finishNode(node, \"TryStatement\");\n  }\n\n  parseVarStatement(\n    node: N.VariableDeclaration,\n    kind: \"var\" | \"let\" | \"const\",\n  ): N.VariableDeclaration {\n    this.next();\n    this.parseVar(node, false, kind);\n    this.semicolon();\n    return this.finishNode(node, \"VariableDeclaration\");\n  }\n\n  parseWhileStatement(node: N.WhileStatement): N.WhileStatement {\n    this.next();\n    node.test = this.parseHeaderExpression();\n    this.state.labels.push(loopLabel);\n\n    node.body =\n      // For the smartPipelines plugin:\n      // Disable topic references from outer contexts within the loop body.\n      // They are permitted in test expressions, outside of the loop body.\n      this.withTopicForbiddingContext(() =>\n        // Parse loop body.\n        this.parseStatement(\"while\"),\n      );\n\n    this.state.labels.pop();\n\n    return this.finishNode(node, \"WhileStatement\");\n  }\n\n  parseWithStatement(node: N.WithStatement): N.WithStatement {\n    if (this.state.strict) {\n      this.raise(this.state.start, Errors.StrictWith);\n    }\n    this.next();\n    node.object = this.parseHeaderExpression();\n\n    node.body =\n      // For the smartPipelines plugin:\n      // Disable topic references from outer contexts within the with statement's body.\n      // They are permitted in function default-parameter expressions, which are\n      // part of the outer context, outside of the with statement's body.\n      this.withTopicForbiddingContext(() =>\n        // Parse the statement body.\n        this.parseStatement(\"with\"),\n      );\n\n    return this.finishNode(node, \"WithStatement\");\n  }\n\n  parseEmptyStatement(node: N.EmptyStatement): N.EmptyStatement {\n    this.next();\n    return this.finishNode(node, \"EmptyStatement\");\n  }\n\n  parseLabeledStatement(\n    node: N.LabeledStatement,\n    maybeName: string,\n    expr: N.Identifier,\n    context: ?string,\n  ): N.LabeledStatement {\n    for (const label of this.state.labels) {\n      if (label.name === maybeName) {\n        this.raise(expr.start, Errors.LabelRedeclaration, maybeName);\n      }\n    }\n\n    const kind = this.state.type.isLoop\n      ? \"loop\"\n      : this.match(tt._switch)\n      ? \"switch\"\n      : null;\n    for (let i = this.state.labels.length - 1; i >= 0; i--) {\n      const label = this.state.labels[i];\n      if (label.statementStart === node.start) {\n        label.statementStart = this.state.start;\n        label.kind = kind;\n      } else {\n        break;\n      }\n    }\n\n    this.state.labels.push({\n      name: maybeName,\n      kind: kind,\n      statementStart: this.state.start,\n    });\n    node.body = this.parseStatement(\n      context\n        ? context.indexOf(\"label\") === -1\n          ? context + \"label\"\n          : context\n        : \"label\",\n    );\n\n    this.state.labels.pop();\n    node.label = expr;\n    return this.finishNode(node, \"LabeledStatement\");\n  }\n\n  parseExpressionStatement(\n    node: N.ExpressionStatement,\n    expr: N.Expression,\n  ): N.Statement {\n    node.expression = expr;\n    this.semicolon();\n    return this.finishNode(node, \"ExpressionStatement\");\n  }\n\n  // Parse a semicolon-enclosed block of statements, handling `\"use\n  // strict\"` declarations when `allowStrict` is true (used for\n  // function bodies).\n\n  parseBlock(\n    allowDirectives?: boolean = false,\n    createNewLexicalScope?: boolean = true,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n  ): N.BlockStatement {\n    const node = this.startNode();\n    this.expect(tt.braceL);\n    if (createNewLexicalScope) {\n      this.scope.enter(SCOPE_OTHER);\n    }\n    this.parseBlockBody(\n      node,\n      allowDirectives,\n      false,\n      tt.braceR,\n      afterBlockParse,\n    );\n    if (createNewLexicalScope) {\n      this.scope.exit();\n    }\n    return this.finishNode(node, \"BlockStatement\");\n  }\n\n  isValidDirective(stmt: N.Statement): boolean {\n    return (\n      stmt.type === \"ExpressionStatement\" &&\n      stmt.expression.type === \"StringLiteral\" &&\n      !stmt.expression.extra.parenthesized\n    );\n  }\n\n  parseBlockBody(\n    node: N.BlockStatementLike,\n    allowDirectives: ?boolean,\n    topLevel: boolean,\n    end: TokenType,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n  ): void {\n    const body = (node.body = []);\n    const directives = (node.directives = []);\n    this.parseBlockOrModuleBlockBody(\n      body,\n      allowDirectives ? directives : undefined,\n      topLevel,\n      end,\n      afterBlockParse,\n    );\n  }\n\n  // Undefined directives means that directives are not allowed.\n  parseBlockOrModuleBlockBody(\n    body: N.Statement[],\n    directives: ?(N.Directive[]),\n    topLevel: boolean,\n    end: TokenType,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n  ): void {\n    const octalPositions = [];\n    const oldStrict = this.state.strict;\n    let hasStrictModeDirective = false;\n    let parsedNonDirective = false;\n\n    while (!this.match(end)) {\n      // Track octal literals that occur before a \"use strict\" directive.\n      if (!parsedNonDirective && this.state.octalPositions.length) {\n        octalPositions.push(...this.state.octalPositions);\n      }\n\n      const stmt = this.parseStatement(null, topLevel);\n\n      if (directives && !parsedNonDirective && this.isValidDirective(stmt)) {\n        const directive = this.stmtToDirective(stmt);\n        directives.push(directive);\n\n        if (!hasStrictModeDirective && directive.value.value === \"use strict\") {\n          hasStrictModeDirective = true;\n          this.setStrict(true);\n        }\n\n        continue;\n      }\n\n      parsedNonDirective = true;\n      body.push(stmt);\n    }\n\n    // Throw an error for any octal literals found before a\n    // \"use strict\" directive. Strict mode will be set at parse\n    // time for any literals that occur after the directive.\n    if (this.state.strict && octalPositions.length) {\n      for (const pos of octalPositions) {\n        this.raise(pos, Errors.StrictOctalLiteral);\n      }\n    }\n\n    if (afterBlockParse) {\n      afterBlockParse.call(this, hasStrictModeDirective);\n    }\n\n    if (!oldStrict) {\n      this.setStrict(false);\n    }\n\n    this.next();\n  }\n\n  // Parse a regular `for` loop. The disambiguation code in\n  // `parseStatement` will already have parsed the init statement or\n  // expression.\n\n  parseFor(\n    node: N.ForStatement,\n    init: ?(N.VariableDeclaration | N.Expression),\n  ): N.ForStatement {\n    node.init = init;\n    this.expect(tt.semi);\n    node.test = this.match(tt.semi) ? null : this.parseExpression();\n    this.expect(tt.semi);\n    node.update = this.match(tt.parenR) ? null : this.parseExpression();\n    this.expect(tt.parenR);\n\n    node.body =\n      // For the smartPipelines plugin: Disable topic references from outer\n      // contexts within the loop body. They are permitted in test expressions,\n      // outside of the loop body.\n      this.withTopicForbiddingContext(() =>\n        // Parse the loop body.\n        this.parseStatement(\"for\"),\n      );\n\n    this.scope.exit();\n    this.state.labels.pop();\n\n    return this.finishNode(node, \"ForStatement\");\n  }\n\n  // Parse a `for`/`in` and `for`/`of` loop, which are almost\n  // same from parser's perspective.\n\n  parseForIn(\n    node: N.ForInOf,\n    init: N.VariableDeclaration | N.AssignmentPattern,\n    awaitAt: number,\n  ): N.ForInOf {\n    const isForIn = this.match(tt._in);\n    this.next();\n\n    if (isForIn) {\n      if (awaitAt > -1) this.unexpected(awaitAt);\n    } else {\n      node.await = awaitAt > -1;\n    }\n\n    if (\n      init.type === \"VariableDeclaration\" &&\n      init.declarations[0].init != null &&\n      (!isForIn ||\n        this.state.strict ||\n        init.kind !== \"var\" ||\n        init.declarations[0].id.type !== \"Identifier\")\n    ) {\n      this.raise(\n        init.start,\n        Errors.ForInOfLoopInitializer,\n        isForIn ? \"for-in\" : \"for-of\",\n      );\n    } else if (init.type === \"AssignmentPattern\") {\n      this.raise(init.start, Errors.InvalidLhs, \"for-loop\");\n    }\n\n    node.left = init;\n    node.right = isForIn ? this.parseExpression() : this.parseMaybeAssign();\n    this.expect(tt.parenR);\n\n    node.body =\n      // For the smartPipelines plugin:\n      // Disable topic references from outer contexts within the loop body.\n      // They are permitted in test expressions, outside of the loop body.\n      this.withTopicForbiddingContext(() =>\n        // Parse loop body.\n        this.parseStatement(\"for\"),\n      );\n\n    this.scope.exit();\n    this.state.labels.pop();\n\n    return this.finishNode(node, isForIn ? \"ForInStatement\" : \"ForOfStatement\");\n  }\n\n  // Parse a list of variable declarations.\n\n  parseVar(\n    node: N.VariableDeclaration,\n    isFor: boolean,\n    kind: \"var\" | \"let\" | \"const\",\n  ): N.VariableDeclaration {\n    const declarations = (node.declarations = []);\n    const isTypescript = this.hasPlugin(\"typescript\");\n    node.kind = kind;\n    for (;;) {\n      const decl = this.startNode();\n      this.parseVarId(decl, kind);\n      if (this.eat(tt.eq)) {\n        decl.init = this.parseMaybeAssign(isFor);\n      } else {\n        if (\n          kind === \"const\" &&\n          !(this.match(tt._in) || this.isContextual(\"of\"))\n        ) {\n          // `const` with no initializer is allowed in TypeScript.\n          // It could be a declaration like `const x: number;`.\n          if (!isTypescript) {\n            this.unexpected();\n          }\n        } else if (\n          decl.id.type !== \"Identifier\" &&\n          !(isFor && (this.match(tt._in) || this.isContextual(\"of\")))\n        ) {\n          this.raise(\n            this.state.lastTokEnd,\n            Errors.DeclarationMissingInitializer,\n            \"Complex binding patterns\",\n          );\n        }\n        decl.init = null;\n      }\n      declarations.push(this.finishNode(decl, \"VariableDeclarator\"));\n      if (!this.eat(tt.comma)) break;\n    }\n    return node;\n  }\n\n  parseVarId(decl: N.VariableDeclarator, kind: \"var\" | \"let\" | \"const\"): void {\n    decl.id = this.parseBindingAtom();\n    this.checkLVal(\n      decl.id,\n      kind === \"var\" ? BIND_VAR : BIND_LEXICAL,\n      undefined,\n      \"variable declaration\",\n      kind !== \"var\",\n    );\n  }\n\n  // Parse a function declaration or literal (depending on the\n  // `isStatement` parameter).\n\n  parseFunction<T: N.NormalFunction>(\n    node: T,\n    statement?: number = FUNC_NO_FLAGS,\n    isAsync?: boolean = false,\n  ): T {\n    const isStatement = statement & FUNC_STATEMENT;\n    const isHangingStatement = statement & FUNC_HANGING_STATEMENT;\n    const requireId = !!isStatement && !(statement & FUNC_NULLABLE_ID);\n\n    this.initFunction(node, isAsync);\n\n    if (this.match(tt.star) && isHangingStatement) {\n      this.raise(this.state.start, Errors.GeneratorInSingleStatementContext);\n    }\n    node.generator = this.eat(tt.star);\n\n    if (isStatement) {\n      node.id = this.parseFunctionId(requireId);\n    }\n\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    const oldYieldPos = this.state.yieldPos;\n    const oldAwaitPos = this.state.awaitPos;\n    this.state.maybeInArrowParameters = false;\n    this.state.yieldPos = -1;\n    this.state.awaitPos = -1;\n    this.scope.enter(SCOPE_FUNCTION);\n    this.prodParam.enter(functionFlags(isAsync, node.generator));\n\n    if (!isStatement) {\n      node.id = this.parseFunctionId();\n    }\n\n    this.parseFunctionParams(node);\n\n    // For the smartPipelines plugin: Disable topic references from outer\n    // contexts within the function body. They are permitted in function\n    // default-parameter expressions, outside of the function body.\n    this.withTopicForbiddingContext(() => {\n      // Parse the function body.\n      this.parseFunctionBodyAndFinish(\n        node,\n        isStatement ? \"FunctionDeclaration\" : \"FunctionExpression\",\n      );\n    });\n\n    this.prodParam.exit();\n    this.scope.exit();\n\n    if (isStatement && !isHangingStatement) {\n      // We need to register this _after_ parsing the function body\n      // because of TypeScript body-less function declarations,\n      // which shouldn't be added to the scope.\n      this.registerFunctionStatementId(node);\n    }\n\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    this.state.yieldPos = oldYieldPos;\n    this.state.awaitPos = oldAwaitPos;\n\n    return node;\n  }\n\n  parseFunctionId(requireId?: boolean): ?N.Identifier {\n    return requireId || this.match(tt.name) ? this.parseIdentifier() : null;\n  }\n\n  parseFunctionParams(node: N.Function, allowModifiers?: boolean): void {\n    const oldInParameters = this.state.inParameters;\n    this.state.inParameters = true;\n\n    this.expect(tt.parenL);\n    node.params = this.parseBindingList(\n      tt.parenR,\n      charCodes.rightParenthesis,\n      /* allowEmpty */ false,\n      allowModifiers,\n    );\n\n    this.state.inParameters = oldInParameters;\n    this.checkYieldAwaitInDefaultParams();\n  }\n\n  registerFunctionStatementId(node: N.Function): void {\n    if (!node.id) return;\n\n    // If it is a regular function declaration in sloppy mode, then it is\n    // subject to Annex B semantics (BIND_FUNCTION). Otherwise, the binding\n    // mode depends on properties of the current scope (see\n    // treatFunctionsAsVar).\n    this.scope.declareName(\n      node.id.name,\n      this.state.strict || node.generator || node.async\n        ? this.scope.treatFunctionsAsVar\n          ? BIND_VAR\n          : BIND_LEXICAL\n        : BIND_FUNCTION,\n      node.id.start,\n    );\n  }\n\n  // Parse a class declaration or literal (depending on the\n  // `isStatement` parameter).\n\n  parseClass<T: N.Class>(\n    node: T,\n    isStatement: /* T === ClassDeclaration */ boolean,\n    optionalId?: boolean,\n  ): T {\n    this.next();\n    this.takeDecorators(node);\n\n    // A class definition is always strict mode code.\n    const oldStrict = this.state.strict;\n    this.state.strict = true;\n\n    this.parseClassId(node, isStatement, optionalId);\n    this.parseClassSuper(node);\n    node.body = this.parseClassBody(!!node.superClass, oldStrict);\n\n    this.state.strict = oldStrict;\n\n    return this.finishNode(\n      node,\n      isStatement ? \"ClassDeclaration\" : \"ClassExpression\",\n    );\n  }\n\n  isClassProperty(): boolean {\n    return this.match(tt.eq) || this.match(tt.semi) || this.match(tt.braceR);\n  }\n\n  isClassMethod(): boolean {\n    return this.match(tt.parenL);\n  }\n\n  isNonstaticConstructor(method: N.ClassMethod | N.ClassProperty): boolean {\n    return (\n      !method.computed &&\n      !method.static &&\n      (method.key.name === \"constructor\" || // Identifier\n        method.key.value === \"constructor\") // String literal\n    );\n  }\n\n  parseClassBody(\n    constructorAllowsSuper: boolean,\n    oldStrict?: boolean,\n  ): N.ClassBody {\n    this.classScope.enter();\n\n    const state = { hadConstructor: false };\n    let decorators: N.Decorator[] = [];\n    const classBody: N.ClassBody = this.startNode();\n    classBody.body = [];\n\n    this.expect(tt.braceL);\n\n    // For the smartPipelines plugin: Disable topic references from outer\n    // contexts within the class body.\n    this.withTopicForbiddingContext(() => {\n      while (!this.match(tt.braceR)) {\n        if (this.eat(tt.semi)) {\n          if (decorators.length > 0) {\n            throw this.raise(this.state.lastTokEnd, Errors.DecoratorSemicolon);\n          }\n          continue;\n        }\n\n        if (this.match(tt.at)) {\n          decorators.push(this.parseDecorator());\n          continue;\n        }\n\n        const member = this.startNode();\n\n        // steal the decorators if there are any\n        if (decorators.length) {\n          member.decorators = decorators;\n          this.resetStartLocationFromNode(member, decorators[0]);\n          decorators = [];\n        }\n\n        this.parseClassMember(classBody, member, state, constructorAllowsSuper);\n\n        if (\n          member.kind === \"constructor\" &&\n          member.decorators &&\n          member.decorators.length > 0\n        ) {\n          this.raise(member.start, Errors.DecoratorConstructor);\n        }\n      }\n    });\n\n    if (!oldStrict) {\n      this.state.strict = false;\n    }\n\n    this.next();\n\n    if (decorators.length) {\n      throw this.raise(this.state.start, Errors.TrailingDecorator);\n    }\n\n    this.classScope.exit();\n\n    return this.finishNode(classBody, \"ClassBody\");\n  }\n\n  // returns true if the current identifier is a method/field name,\n  // false if it is a modifier\n  parseClassMemberFromModifier(\n    classBody: N.ClassBody,\n    member: N.ClassMember,\n  ): boolean {\n    const containsEsc = this.state.containsEsc;\n    const key = this.parseIdentifier(true); // eats the modifier\n\n    if (this.isClassMethod()) {\n      const method: N.ClassMethod = (member: any);\n\n      // a method named like the modifier\n      method.kind = \"method\";\n      method.computed = false;\n      method.key = key;\n      method.static = false;\n      this.pushClassMethod(\n        classBody,\n        method,\n        false,\n        false,\n        /* isConstructor */ false,\n        false,\n      );\n      return true;\n    } else if (this.isClassProperty()) {\n      const prop: N.ClassProperty = (member: any);\n\n      // a property named like the modifier\n      prop.computed = false;\n      prop.key = key;\n      prop.static = false;\n      classBody.body.push(this.parseClassProperty(prop));\n      return true;\n    } else if (containsEsc) {\n      throw this.unexpected();\n    }\n\n    return false;\n  }\n\n  parseClassMember(\n    classBody: N.ClassBody,\n    member: N.ClassMember,\n    state: { hadConstructor: boolean },\n    constructorAllowsSuper: boolean,\n  ): void {\n    const isStatic = this.isContextual(\"static\");\n\n    if (isStatic && this.parseClassMemberFromModifier(classBody, member)) {\n      // a class element named 'static'\n      return;\n    }\n\n    this.parseClassMemberWithIsStatic(\n      classBody,\n      member,\n      state,\n      isStatic,\n      constructorAllowsSuper,\n    );\n  }\n\n  parseClassMemberWithIsStatic(\n    classBody: N.ClassBody,\n    member: N.ClassMember,\n    state: { hadConstructor: boolean },\n    isStatic: boolean,\n    constructorAllowsSuper: boolean,\n  ) {\n    const publicMethod: $FlowSubtype<N.ClassMethod> = member;\n    const privateMethod: $FlowSubtype<N.ClassPrivateMethod> = member;\n    const publicProp: $FlowSubtype<N.ClassMethod> = member;\n    const privateProp: $FlowSubtype<N.ClassPrivateMethod> = member;\n\n    const method: typeof publicMethod | typeof privateMethod = publicMethod;\n    const publicMember: typeof publicMethod | typeof publicProp = publicMethod;\n\n    member.static = isStatic;\n\n    if (this.eat(tt.star)) {\n      // a generator\n      method.kind = \"method\";\n      this.parseClassPropertyName(method);\n\n      if (method.key.type === \"PrivateName\") {\n        // Private generator method\n        this.pushClassPrivateMethod(classBody, privateMethod, true, false);\n        return;\n      }\n\n      if (this.isNonstaticConstructor(publicMethod)) {\n        this.raise(publicMethod.key.start, Errors.ConstructorIsGenerator);\n      }\n\n      this.pushClassMethod(\n        classBody,\n        publicMethod,\n        true,\n        false,\n        /* isConstructor */ false,\n        false,\n      );\n\n      return;\n    }\n\n    const containsEsc = this.state.containsEsc;\n    const key = this.parseClassPropertyName(member);\n    const isPrivate = key.type === \"PrivateName\";\n    // Check the key is not a computed expression or string literal.\n    const isSimple = key.type === \"Identifier\";\n    const maybeQuestionTokenStart = this.state.start;\n\n    this.parsePostMemberNameModifiers(publicMember);\n\n    if (this.isClassMethod()) {\n      method.kind = \"method\";\n\n      if (isPrivate) {\n        this.pushClassPrivateMethod(classBody, privateMethod, false, false);\n        return;\n      }\n\n      // a normal method\n      const isConstructor = this.isNonstaticConstructor(publicMethod);\n      let allowsDirectSuper = false;\n      if (isConstructor) {\n        publicMethod.kind = \"constructor\";\n\n        // TypeScript allows multiple overloaded constructor declarations.\n        if (state.hadConstructor && !this.hasPlugin(\"typescript\")) {\n          this.raise(key.start, Errors.DuplicateConstructor);\n        }\n        state.hadConstructor = true;\n        allowsDirectSuper = constructorAllowsSuper;\n      }\n\n      this.pushClassMethod(\n        classBody,\n        publicMethod,\n        false,\n        false,\n        isConstructor,\n        allowsDirectSuper,\n      );\n    } else if (this.isClassProperty()) {\n      if (isPrivate) {\n        this.pushClassPrivateProperty(classBody, privateProp);\n      } else {\n        this.pushClassProperty(classBody, publicProp);\n      }\n    } else if (\n      isSimple &&\n      key.name === \"async\" &&\n      !containsEsc &&\n      !this.isLineTerminator()\n    ) {\n      // an async method\n      const isGenerator = this.eat(tt.star);\n\n      if (publicMember.optional) {\n        this.unexpected(maybeQuestionTokenStart);\n      }\n\n      method.kind = \"method\";\n      // The so-called parsed name would have been \"async\": get the real name.\n      this.parseClassPropertyName(method);\n      this.parsePostMemberNameModifiers(publicMember);\n\n      if (method.key.type === \"PrivateName\") {\n        // private async method\n        this.pushClassPrivateMethod(\n          classBody,\n          privateMethod,\n          isGenerator,\n          true,\n        );\n      } else {\n        if (this.isNonstaticConstructor(publicMethod)) {\n          this.raise(publicMethod.key.start, Errors.ConstructorIsAsync);\n        }\n\n        this.pushClassMethod(\n          classBody,\n          publicMethod,\n          isGenerator,\n          true,\n          /* isConstructor */ false,\n          false,\n        );\n      }\n    } else if (\n      isSimple &&\n      (key.name === \"get\" || key.name === \"set\") &&\n      !containsEsc &&\n      !(this.match(tt.star) && this.isLineTerminator())\n    ) {\n      // `get\\n*` is an uninitialized property named 'get' followed by a generator.\n      // a getter or setter\n      method.kind = key.name;\n      // The so-called parsed name would have been \"get/set\": get the real name.\n      this.parseClassPropertyName(publicMethod);\n\n      if (method.key.type === \"PrivateName\") {\n        // private getter/setter\n        this.pushClassPrivateMethod(classBody, privateMethod, false, false);\n      } else {\n        if (this.isNonstaticConstructor(publicMethod)) {\n          this.raise(publicMethod.key.start, Errors.ConstructorIsAccessor);\n        }\n        this.pushClassMethod(\n          classBody,\n          publicMethod,\n          false,\n          false,\n          /* isConstructor */ false,\n          false,\n        );\n      }\n\n      this.checkGetterSetterParams(publicMethod);\n    } else if (this.isLineTerminator()) {\n      // an uninitialized class property (due to ASI, since we don't otherwise recognize the next token)\n      if (isPrivate) {\n        this.pushClassPrivateProperty(classBody, privateProp);\n      } else {\n        this.pushClassProperty(classBody, publicProp);\n      }\n    } else {\n      this.unexpected();\n    }\n  }\n\n  parseClassPropertyName(member: N.ClassMember): N.Expression | N.Identifier {\n    const key = this.parsePropertyName(member, /* isPrivateNameAllowed */ true);\n\n    if (\n      !member.computed &&\n      member.static &&\n      ((key: $FlowSubtype<N.Identifier>).name === \"prototype\" ||\n        (key: $FlowSubtype<N.StringLiteral>).value === \"prototype\")\n    ) {\n      this.raise(key.start, Errors.StaticPrototype);\n    }\n\n    if (key.type === \"PrivateName\" && key.id.name === \"constructor\") {\n      this.raise(key.start, Errors.ConstructorClassPrivateField);\n    }\n\n    return key;\n  }\n\n  pushClassProperty(classBody: N.ClassBody, prop: N.ClassProperty) {\n    if (\n      !prop.computed &&\n      (prop.key.name === \"constructor\" || prop.key.value === \"constructor\")\n    ) {\n      // Non-computed field, which is either an identifier named \"constructor\"\n      // or a string literal named \"constructor\"\n      this.raise(prop.key.start, Errors.ConstructorClassField);\n    }\n\n    classBody.body.push(this.parseClassProperty(prop));\n  }\n\n  pushClassPrivateProperty(\n    classBody: N.ClassBody,\n    prop: N.ClassPrivateProperty,\n  ) {\n    this.expectPlugin(\"classPrivateProperties\", prop.key.start);\n\n    const node = this.parseClassPrivateProperty(prop);\n    classBody.body.push(node);\n\n    this.classScope.declarePrivateName(\n      node.key.id.name,\n      CLASS_ELEMENT_OTHER,\n      node.key.start,\n    );\n  }\n\n  pushClassMethod(\n    classBody: N.ClassBody,\n    method: N.ClassMethod,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isConstructor: boolean,\n    allowsDirectSuper: boolean,\n  ): void {\n    classBody.body.push(\n      this.parseMethod(\n        method,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowsDirectSuper,\n        \"ClassMethod\",\n        true,\n      ),\n    );\n  }\n\n  pushClassPrivateMethod(\n    classBody: N.ClassBody,\n    method: N.ClassPrivateMethod,\n    isGenerator: boolean,\n    isAsync: boolean,\n  ): void {\n    this.expectPlugin(\"classPrivateMethods\", method.key.start);\n\n    const node = this.parseMethod(\n      method,\n      isGenerator,\n      isAsync,\n      /* isConstructor */ false,\n      false,\n      \"ClassPrivateMethod\",\n      true,\n    );\n    classBody.body.push(node);\n\n    const kind =\n      node.kind === \"get\"\n        ? node.static\n          ? CLASS_ELEMENT_STATIC_GETTER\n          : CLASS_ELEMENT_INSTANCE_GETTER\n        : node.kind === \"set\"\n        ? node.static\n          ? CLASS_ELEMENT_STATIC_SETTER\n          : CLASS_ELEMENT_INSTANCE_SETTER\n        : CLASS_ELEMENT_OTHER;\n    this.classScope.declarePrivateName(node.key.id.name, kind, node.key.start);\n  }\n\n  // Overridden in typescript.js\n  parsePostMemberNameModifiers(\n    // eslint-disable-next-line no-unused-vars\n    methodOrProp: N.ClassMethod | N.ClassProperty,\n  ): void {}\n\n  // Overridden in typescript.js\n  parseAccessModifier(): ?N.Accessibility {\n    return undefined;\n  }\n\n  parseClassPrivateProperty(\n    node: N.ClassPrivateProperty,\n  ): N.ClassPrivateProperty {\n    this.scope.enter(SCOPE_CLASS | SCOPE_SUPER);\n    // [In] production parameter is tracked in parseMaybeAssign\n    this.prodParam.enter(PARAM);\n\n    node.value = this.eat(tt.eq) ? this.parseMaybeAssign() : null;\n    this.semicolon();\n    this.prodParam.exit();\n\n    this.scope.exit();\n\n    return this.finishNode(node, \"ClassPrivateProperty\");\n  }\n\n  parseClassProperty(node: N.ClassProperty): N.ClassProperty {\n    if (!node.typeAnnotation) {\n      this.expectPlugin(\"classProperties\");\n    }\n\n    this.scope.enter(SCOPE_CLASS | SCOPE_SUPER);\n    // [In] production parameter is tracked in parseMaybeAssign\n    this.prodParam.enter(PARAM);\n\n    if (this.match(tt.eq)) {\n      this.expectPlugin(\"classProperties\");\n      this.next();\n      node.value = this.parseMaybeAssign();\n    } else {\n      node.value = null;\n    }\n    this.semicolon();\n\n    this.prodParam.exit();\n    this.scope.exit();\n\n    return this.finishNode(node, \"ClassProperty\");\n  }\n\n  parseClassId(\n    node: N.Class,\n    isStatement: boolean,\n    optionalId: ?boolean,\n    bindingType: BindingTypes = BIND_CLASS,\n  ): void {\n    if (this.match(tt.name)) {\n      node.id = this.parseIdentifier();\n      if (isStatement) {\n        this.checkLVal(node.id, bindingType, undefined, \"class name\");\n      }\n    } else {\n      if (optionalId || !isStatement) {\n        node.id = null;\n      } else {\n        this.unexpected(null, Errors.MissingClassName);\n      }\n    }\n  }\n\n  parseClassSuper(node: N.Class): void {\n    node.superClass = this.eat(tt._extends) ? this.parseExprSubscripts() : null;\n  }\n\n  // Parses module export declaration.\n\n  parseExport(node: N.Node): N.AnyExport {\n    const hasDefault = this.maybeParseExportDefaultSpecifier(node);\n    const parseAfterDefault = !hasDefault || this.eat(tt.comma);\n    const hasStar = parseAfterDefault && this.eatExportStar(node);\n    const hasNamespace =\n      hasStar && this.maybeParseExportNamespaceSpecifier(node);\n    const parseAfterNamespace =\n      parseAfterDefault && (!hasNamespace || this.eat(tt.comma));\n    const isFromRequired = hasDefault || hasStar;\n\n    if (hasStar && !hasNamespace) {\n      if (hasDefault) this.unexpected();\n      this.parseExportFrom(node, true);\n\n      return this.finishNode(node, \"ExportAllDeclaration\");\n    }\n\n    const hasSpecifiers = this.maybeParseExportNamedSpecifiers(node);\n\n    if (\n      (hasDefault && parseAfterDefault && !hasStar && !hasSpecifiers) ||\n      (hasNamespace && parseAfterNamespace && !hasSpecifiers)\n    ) {\n      throw this.unexpected(null, tt.braceL);\n    }\n\n    let hasDeclaration;\n    if (isFromRequired || hasSpecifiers) {\n      hasDeclaration = false;\n      this.parseExportFrom(node, isFromRequired);\n    } else {\n      hasDeclaration = this.maybeParseExportDeclaration(node);\n    }\n\n    if (isFromRequired || hasSpecifiers || hasDeclaration) {\n      this.checkExport(node, true, false, !!node.source);\n      return this.finishNode(node, \"ExportNamedDeclaration\");\n    }\n\n    if (this.eat(tt._default)) {\n      // export default ...\n      node.declaration = this.parseExportDefaultExpression();\n      this.checkExport(node, true, true);\n\n      return this.finishNode(node, \"ExportDefaultDeclaration\");\n    }\n\n    throw this.unexpected(null, tt.braceL);\n  }\n\n  // eslint-disable-next-line no-unused-vars\n  eatExportStar(node: N.Node): boolean {\n    return this.eat(tt.star);\n  }\n\n  maybeParseExportDefaultSpecifier(node: N.Node): boolean {\n    if (this.isExportDefaultSpecifier()) {\n      // export defaultObj ...\n      this.expectPlugin(\"exportDefaultFrom\");\n      const specifier = this.startNode();\n      specifier.exported = this.parseIdentifier(true);\n      node.specifiers = [this.finishNode(specifier, \"ExportDefaultSpecifier\")];\n      return true;\n    }\n    return false;\n  }\n\n  maybeParseExportNamespaceSpecifier(node: N.Node): boolean {\n    if (this.isContextual(\"as\")) {\n      if (!node.specifiers) node.specifiers = [];\n\n      const specifier = this.startNodeAt(\n        this.state.lastTokStart,\n        this.state.lastTokStartLoc,\n      );\n\n      this.next();\n\n      specifier.exported = this.parseIdentifier(true);\n      node.specifiers.push(\n        this.finishNode(specifier, \"ExportNamespaceSpecifier\"),\n      );\n      return true;\n    }\n    return false;\n  }\n\n  maybeParseExportNamedSpecifiers(node: N.Node): boolean {\n    if (this.match(tt.braceL)) {\n      if (!node.specifiers) node.specifiers = [];\n      node.specifiers.push(...this.parseExportSpecifiers());\n\n      node.source = null;\n      node.declaration = null;\n\n      return true;\n    }\n    return false;\n  }\n\n  maybeParseExportDeclaration(node: N.Node): boolean {\n    if (this.shouldParseExportDeclaration()) {\n      if (this.isContextual(\"async\")) {\n        const next = this.nextTokenStart();\n\n        // export async;\n        if (!this.isUnparsedContextual(next, \"function\")) {\n          this.unexpected(next, tt._function);\n        }\n      }\n\n      node.specifiers = [];\n      node.source = null;\n      node.declaration = this.parseExportDeclaration(node);\n\n      return true;\n    }\n    return false;\n  }\n\n  isAsyncFunction(): boolean {\n    if (!this.isContextual(\"async\")) return false;\n    const next = this.nextTokenStart();\n    return (\n      !lineBreak.test(this.input.slice(this.state.pos, next)) &&\n      this.isUnparsedContextual(next, \"function\")\n    );\n  }\n\n  parseExportDefaultExpression(): N.Expression | N.Declaration {\n    const expr = this.startNode();\n\n    const isAsync = this.isAsyncFunction();\n\n    if (this.match(tt._function) || isAsync) {\n      this.next();\n      if (isAsync) {\n        this.next();\n      }\n\n      return this.parseFunction(\n        expr,\n        FUNC_STATEMENT | FUNC_NULLABLE_ID,\n        isAsync,\n      );\n    } else if (this.match(tt._class)) {\n      return this.parseClass(expr, true, true);\n    } else if (this.match(tt.at)) {\n      if (\n        this.hasPlugin(\"decorators\") &&\n        this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")\n      ) {\n        this.raise(this.state.start, Errors.DecoratorBeforeExport);\n      }\n      this.parseDecorators(false);\n      return this.parseClass(expr, true, true);\n    } else if (this.match(tt._const) || this.match(tt._var) || this.isLet()) {\n      throw this.raise(this.state.start, Errors.UnsupportedDefaultExport);\n    } else {\n      const res = this.parseMaybeAssign();\n      this.semicolon();\n      return res;\n    }\n  }\n\n  // eslint-disable-next-line no-unused-vars\n  parseExportDeclaration(node: N.ExportNamedDeclaration): ?N.Declaration {\n    return this.parseStatement(null);\n  }\n\n  isExportDefaultSpecifier(): boolean {\n    if (this.match(tt.name)) {\n      const value = this.state.value;\n      if (value === \"async\" || value === \"let\") {\n        return false;\n      }\n      if (\n        (value === \"type\" || value === \"interface\") &&\n        !this.state.containsEsc\n      ) {\n        const l = this.lookahead();\n        // If we see any variable name other than `from` after `type` keyword,\n        // we consider it as flow/typescript type exports\n        // note that this approach may fail on some pedantic cases\n        // export type from = number\n        if (\n          (l.type === tt.name && l.value !== \"from\") ||\n          l.type === tt.braceL\n        ) {\n          this.expectOnePlugin([\"flow\", \"typescript\"]);\n          return false;\n        }\n      }\n    } else if (!this.match(tt._default)) {\n      return false;\n    }\n\n    const next = this.nextTokenStart();\n    const hasFrom = this.isUnparsedContextual(next, \"from\");\n    if (\n      this.input.charCodeAt(next) === charCodes.comma ||\n      (this.match(tt.name) && hasFrom)\n    ) {\n      return true;\n    }\n    // lookahead again when `export default from` is seen\n    if (this.match(tt._default) && hasFrom) {\n      const nextAfterFrom = this.input.charCodeAt(\n        this.nextTokenStartSince(next + 4),\n      );\n      return (\n        nextAfterFrom === charCodes.quotationMark ||\n        nextAfterFrom === charCodes.apostrophe\n      );\n    }\n    return false;\n  }\n\n  parseExportFrom(node: N.ExportNamedDeclaration, expect?: boolean): void {\n    if (this.eatContextual(\"from\")) {\n      node.source = this.parseImportSource();\n      this.checkExport(node);\n    } else {\n      if (expect) {\n        this.unexpected();\n      } else {\n        node.source = null;\n      }\n    }\n\n    this.semicolon();\n  }\n\n  shouldParseExportDeclaration(): boolean {\n    if (this.match(tt.at)) {\n      this.expectOnePlugin([\"decorators\", \"decorators-legacy\"]);\n      if (this.hasPlugin(\"decorators\")) {\n        if (this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")) {\n          this.unexpected(this.state.start, Errors.DecoratorBeforeExport);\n        } else {\n          return true;\n        }\n      }\n    }\n\n    return (\n      this.state.type.keyword === \"var\" ||\n      this.state.type.keyword === \"const\" ||\n      this.state.type.keyword === \"function\" ||\n      this.state.type.keyword === \"class\" ||\n      this.isLet() ||\n      this.isAsyncFunction()\n    );\n  }\n\n  checkExport(\n    node: N.ExportNamedDeclaration,\n    checkNames?: boolean,\n    isDefault?: boolean,\n    isFrom?: boolean,\n  ): void {\n    if (checkNames) {\n      // Check for duplicate exports\n      if (isDefault) {\n        // Default exports\n        this.checkDuplicateExports(node, \"default\");\n        if (this.hasPlugin(\"exportDefaultFrom\")) {\n          const declaration = ((node: any): N.ExportDefaultDeclaration)\n            .declaration;\n          if (\n            declaration.type === \"Identifier\" &&\n            declaration.name === \"from\" &&\n            declaration.end - declaration.start === 4 && // does not contain escape\n            !declaration.extra?.parenthesized\n          ) {\n            this.raise(declaration.start, Errors.ExportDefaultFromAsIdentifier);\n          }\n        }\n      } else if (node.specifiers && node.specifiers.length) {\n        // Named exports\n        for (const specifier of node.specifiers) {\n          this.checkDuplicateExports(specifier, specifier.exported.name);\n          // $FlowIgnore\n          if (!isFrom && specifier.local) {\n            // check for keywords used as local names\n            this.checkReservedWord(\n              specifier.local.name,\n              specifier.local.start,\n              true,\n              false,\n            );\n            // check if export is defined\n            // $FlowIgnore\n            this.scope.checkLocalExport(specifier.local);\n          }\n        }\n      } else if (node.declaration) {\n        // Exported declarations\n        if (\n          node.declaration.type === \"FunctionDeclaration\" ||\n          node.declaration.type === \"ClassDeclaration\"\n        ) {\n          const id = node.declaration.id;\n          if (!id) throw new Error(\"Assertion failure\");\n\n          this.checkDuplicateExports(node, id.name);\n        } else if (node.declaration.type === \"VariableDeclaration\") {\n          for (const declaration of node.declaration.declarations) {\n            this.checkDeclaration(declaration.id);\n          }\n        }\n      }\n    }\n\n    const currentContextDecorators = this.state.decoratorStack[\n      this.state.decoratorStack.length - 1\n    ];\n    if (currentContextDecorators.length) {\n      const isClass =\n        node.declaration &&\n        (node.declaration.type === \"ClassDeclaration\" ||\n          node.declaration.type === \"ClassExpression\");\n      if (!node.declaration || !isClass) {\n        throw this.raise(node.start, Errors.UnsupportedDecoratorExport);\n      }\n      this.takeDecorators(node.declaration);\n    }\n  }\n\n  checkDeclaration(node: N.Pattern | N.ObjectProperty): void {\n    if (node.type === \"Identifier\") {\n      this.checkDuplicateExports(node, node.name);\n    } else if (node.type === \"ObjectPattern\") {\n      for (const prop of node.properties) {\n        this.checkDeclaration(prop);\n      }\n    } else if (node.type === \"ArrayPattern\") {\n      for (const elem of node.elements) {\n        if (elem) {\n          this.checkDeclaration(elem);\n        }\n      }\n    } else if (node.type === \"ObjectProperty\") {\n      this.checkDeclaration(node.value);\n    } else if (node.type === \"RestElement\") {\n      this.checkDeclaration(node.argument);\n    } else if (node.type === \"AssignmentPattern\") {\n      this.checkDeclaration(node.left);\n    }\n  }\n\n  checkDuplicateExports(\n    node:\n      | N.Identifier\n      | N.ExportNamedDeclaration\n      | N.ExportSpecifier\n      | N.ExportDefaultSpecifier,\n    name: string,\n  ): void {\n    if (this.state.exportedIdentifiers.indexOf(name) > -1) {\n      /* eslint-disable @babel/development-internal/dry-error-messages */\n      this.raise(\n        node.start,\n        name === \"default\"\n          ? Errors.DuplicateDefaultExport\n          : Errors.DuplicateExport,\n        name,\n      );\n      /* eslint-enable @babel/development-internal/dry-error-messages */\n    }\n    this.state.exportedIdentifiers.push(name);\n  }\n\n  // Parses a comma-separated list of module exports.\n\n  parseExportSpecifiers(): Array<N.ExportSpecifier> {\n    const nodes = [];\n    let first = true;\n\n    // export { x, y as z } [from '...']\n    this.expect(tt.braceL);\n\n    while (!this.eat(tt.braceR)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n        if (this.eat(tt.braceR)) break;\n      }\n\n      const node = this.startNode();\n      node.local = this.parseIdentifier(true);\n      node.exported = this.eatContextual(\"as\")\n        ? this.parseIdentifier(true)\n        : node.local.__clone();\n      nodes.push(this.finishNode(node, \"ExportSpecifier\"));\n    }\n\n    return nodes;\n  }\n\n  // Parses import declaration.\n\n  parseImport(node: N.Node): N.AnyImport {\n    // import '...'\n    node.specifiers = [];\n    if (!this.match(tt.string)) {\n      // check if we have a default import like\n      // import React from \"react\";\n      const hasDefault = this.maybeParseDefaultImportSpecifier(node);\n      /* we are checking if we do not have a default import, then it is obvious that we need named imports\n       * import { get } from \"axios\";\n       * but if we do have a default import\n       * we need to check if we have a comma after that and\n       * that is where this `|| this.eat` condition comes into play\n       */\n      const parseNext = !hasDefault || this.eat(tt.comma);\n      // if we do have to parse the next set of specifiers, we first check for star imports\n      // import React, * from \"react\";\n      const hasStar = parseNext && this.maybeParseStarImportSpecifier(node);\n      // now we check if we need to parse the next imports\n      // but only if they are not importing * (everything)\n      if (parseNext && !hasStar) this.parseNamedImportSpecifiers(node);\n      this.expectContextual(\"from\");\n    }\n    node.source = this.parseImportSource();\n    // https://github.com/tc39/proposal-module-attributes\n    // parse module attributes if the next token is `with` or ignore and finish the ImportDeclaration node.\n    const attributes = this.maybeParseModuleAttributes();\n    if (attributes) {\n      node.attributes = attributes;\n    }\n    this.semicolon();\n    return this.finishNode(node, \"ImportDeclaration\");\n  }\n\n  parseImportSource(): N.StringLiteral {\n    if (!this.match(tt.string)) this.unexpected();\n    return this.parseExprAtom();\n  }\n\n  // eslint-disable-next-line no-unused-vars\n  shouldParseDefaultImport(node: N.ImportDeclaration): boolean {\n    return this.match(tt.name);\n  }\n\n  parseImportSpecifierLocal(\n    node: N.ImportDeclaration,\n    specifier: N.Node,\n    type: string,\n    contextDescription: string,\n  ): void {\n    specifier.local = this.parseIdentifier();\n    this.checkLVal(\n      specifier.local,\n      BIND_LEXICAL,\n      undefined,\n      contextDescription,\n    );\n    node.specifiers.push(this.finishNode(specifier, type));\n  }\n\n  maybeParseModuleAttributes() {\n    if (this.match(tt._with) && !this.hasPrecedingLineBreak()) {\n      this.expectPlugin(\"moduleAttributes\");\n      this.next();\n    } else {\n      if (this.hasPlugin(\"moduleAttributes\")) return [];\n      return null;\n    }\n    const attrs = [];\n    const attributes = new Set();\n    do {\n      // we are trying to parse a node which has the following syntax\n      // with type: \"json\"\n      // [with -> keyword], [type -> Identifier], [\":\" -> token for colon], [\"json\" -> StringLiteral]\n      const node = this.startNode();\n      node.key = this.parseIdentifier(true);\n\n      // for now we are only allowing `type` as the only allowed module attribute\n      if (node.key.name !== \"type\") {\n        this.raise(\n          node.key.start,\n          Errors.ModuleAttributeDifferentFromType,\n          node.key.name,\n        );\n      }\n\n      // check if we already have an entry for an attribute\n      // if a duplicate entry is found, throw an error\n      // for now this logic will come into play only when someone declares `type` twice\n      if (attributes.has(node.key.name)) {\n        this.raise(\n          node.key.start,\n          Errors.ModuleAttributesWithDuplicateKeys,\n          node.key.name,\n        );\n      }\n      attributes.add(node.key.name);\n      this.expect(tt.colon);\n      // check if the value set to the module attribute is a string as we only allow string literals\n      if (!this.match(tt.string)) {\n        throw this.unexpected(\n          this.state.start,\n          Errors.ModuleAttributeInvalidValue,\n        );\n      }\n      node.value = this.parseLiteral(this.state.value, \"StringLiteral\");\n      this.finishNode(node, \"ImportAttribute\");\n      attrs.push(node);\n    } while (this.eat(tt.comma));\n\n    return attrs;\n  }\n\n  maybeParseDefaultImportSpecifier(node: N.ImportDeclaration): boolean {\n    if (this.shouldParseDefaultImport(node)) {\n      // import defaultObj, { x, y as z } from '...'\n      this.parseImportSpecifierLocal(\n        node,\n        this.startNode(),\n        \"ImportDefaultSpecifier\",\n        \"default import specifier\",\n      );\n      return true;\n    }\n    return false;\n  }\n\n  maybeParseStarImportSpecifier(node: N.ImportDeclaration): boolean {\n    if (this.match(tt.star)) {\n      const specifier = this.startNode();\n      this.next();\n      this.expectContextual(\"as\");\n\n      this.parseImportSpecifierLocal(\n        node,\n        specifier,\n        \"ImportNamespaceSpecifier\",\n        \"import namespace specifier\",\n      );\n      return true;\n    }\n    return false;\n  }\n\n  parseNamedImportSpecifiers(node: N.ImportDeclaration) {\n    let first = true;\n    this.expect(tt.braceL);\n    while (!this.eat(tt.braceR)) {\n      if (first) {\n        first = false;\n      } else {\n        // Detect an attempt to deep destructure\n        if (this.eat(tt.colon)) {\n          throw this.raise(this.state.start, Errors.DestructureNamedImport);\n        }\n\n        this.expect(tt.comma);\n        if (this.eat(tt.braceR)) break;\n      }\n\n      this.parseImportSpecifier(node);\n    }\n  }\n\n  parseImportSpecifier(node: N.ImportDeclaration): void {\n    const specifier = this.startNode();\n    specifier.imported = this.parseIdentifier(true);\n    if (this.eatContextual(\"as\")) {\n      specifier.local = this.parseIdentifier();\n    } else {\n      this.checkReservedWord(\n        specifier.imported.name,\n        specifier.start,\n        true,\n        true,\n      );\n      specifier.local = specifier.imported.__clone();\n    }\n    this.checkLVal(\n      specifier.local,\n      BIND_LEXICAL,\n      undefined,\n      \"import specifier\",\n    );\n    node.specifiers.push(this.finishNode(specifier, \"ImportSpecifier\"));\n  }\n}\n","// @flow\n\nimport {\n  CLASS_ELEMENT_KIND_ACCESSOR,\n  CLASS_ELEMENT_FLAG_STATIC,\n  type ClassElementTypes,\n} from \"./scopeflags\";\nimport { Errors } from \"../parser/error\";\n\nexport class ClassScope {\n  // A list of private named declared in the current class\n  privateNames: Set<string> = new Set();\n\n  // A list of private getters of setters without their counterpart\n  loneAccessors: Map<string, ClassElementTypes> = new Map();\n\n  // A list of private names used before being defined, mapping to\n  // their position.\n  undefinedPrivateNames: Map<string, number> = new Map();\n}\n\ntype raiseFunction = (number, string, ...any) => void;\n\nexport default class ClassScopeHandler {\n  stack: Array<ClassScope> = [];\n  raise: raiseFunction;\n  undefinedPrivateNames: Map<string, number> = new Map();\n\n  constructor(raise: raiseFunction) {\n    this.raise = raise;\n  }\n\n  current(): ClassScope {\n    return this.stack[this.stack.length - 1];\n  }\n\n  enter() {\n    this.stack.push(new ClassScope());\n  }\n\n  exit() {\n    const oldClassScope = this.stack.pop();\n\n    // Migrate the usage of not yet defined private names to the outer\n    // class scope, or raise an error if we reached the top-level scope.\n\n    const current = this.current();\n\n    // Array.from is needed because this is compiled to an array-like for loop\n    for (const [name, pos] of Array.from(oldClassScope.undefinedPrivateNames)) {\n      if (current) {\n        if (!current.undefinedPrivateNames.has(name)) {\n          current.undefinedPrivateNames.set(name, pos);\n        }\n      } else {\n        this.raise(pos, Errors.InvalidPrivateFieldResolution, name);\n      }\n    }\n  }\n\n  declarePrivateName(\n    name: string,\n    elementType: ClassElementTypes,\n    pos: number,\n  ) {\n    const classScope = this.current();\n    let redefined = classScope.privateNames.has(name);\n\n    if (elementType & CLASS_ELEMENT_KIND_ACCESSOR) {\n      const accessor = redefined && classScope.loneAccessors.get(name);\n      if (accessor) {\n        const oldStatic = accessor & CLASS_ELEMENT_FLAG_STATIC;\n        const newStatic = elementType & CLASS_ELEMENT_FLAG_STATIC;\n\n        const oldKind = accessor & CLASS_ELEMENT_KIND_ACCESSOR;\n        const newKind = elementType & CLASS_ELEMENT_KIND_ACCESSOR;\n\n        // The private name can be duplicated only if it is used by\n        // two accessors with different kind (get and set), and if\n        // they have the same placement (static or not).\n        redefined = oldKind === newKind || oldStatic !== newStatic;\n\n        if (!redefined) classScope.loneAccessors.delete(name);\n      } else if (!redefined) {\n        classScope.loneAccessors.set(name, elementType);\n      }\n    }\n\n    if (redefined) {\n      this.raise(pos, Errors.PrivateNameRedeclaration, name);\n    }\n\n    classScope.privateNames.add(name);\n    classScope.undefinedPrivateNames.delete(name);\n  }\n\n  usePrivateName(name: string, pos: number) {\n    let classScope;\n    for (classScope of this.stack) {\n      if (classScope.privateNames.has(name)) return;\n    }\n\n    if (classScope) {\n      classScope.undefinedPrivateNames.set(name, pos);\n    } else {\n      // top-level\n      this.raise(pos, Errors.InvalidPrivateFieldResolution, name);\n    }\n  }\n}\n","// @flow\n\nimport type { Options } from \"../options\";\nimport type { File /*::, JSXOpeningElement */ } from \"../types\";\nimport type { PluginList } from \"../plugin-utils\";\nimport { getOptions } from \"../options\";\nimport StatementParser from \"./statement\";\nimport { SCOPE_PROGRAM } from \"../util/scopeflags\";\nimport ScopeHandler from \"../util/scope\";\nimport ClassScopeHandler from \"../util/class-scope\";\nimport ProductionParameterHandler, {\n  PARAM_AWAIT,\n  PARAM,\n} from \"../util/production-parameter\";\n\nexport type PluginsMap = Map<string, { [string]: any }>;\n\nexport default class Parser extends StatementParser {\n  // Forward-declaration so typescript plugin can override jsx plugin\n  /*::\n  +jsxParseOpeningElementAfterName: (\n    node: JSXOpeningElement,\n  ) => JSXOpeningElement;\n  */\n\n  constructor(options: ?Options, input: string) {\n    options = getOptions(options);\n    super(options, input);\n\n    const ScopeHandler = this.getScopeHandler();\n\n    this.options = options;\n    this.inModule = this.options.sourceType === \"module\";\n    this.scope = new ScopeHandler(this.raise.bind(this), this.inModule);\n    this.prodParam = new ProductionParameterHandler();\n    this.classScope = new ClassScopeHandler(this.raise.bind(this));\n    this.plugins = pluginsMap(this.options.plugins);\n    this.filename = options.sourceFilename;\n  }\n\n  // This can be overwritten, for example, by the TypeScript plugin.\n  getScopeHandler(): Class<ScopeHandler<*>> {\n    return ScopeHandler;\n  }\n\n  parse(): File {\n    let paramFlags = PARAM;\n    if (this.hasPlugin(\"topLevelAwait\") && this.inModule) {\n      paramFlags |= PARAM_AWAIT;\n    }\n    this.scope.enter(SCOPE_PROGRAM);\n    this.prodParam.enter(paramFlags);\n    const file = this.startNode();\n    const program = this.startNode();\n    this.nextToken();\n    file.errors = null;\n    this.parseTopLevel(file, program);\n    file.errors = this.state.errors;\n    return file;\n  }\n}\n\nfunction pluginsMap(plugins: PluginList): PluginsMap {\n  const pluginMap: PluginsMap = new Map();\n  for (const plugin of plugins) {\n    const [name, options] = Array.isArray(plugin) ? plugin : [plugin, {}];\n    if (!pluginMap.has(name)) pluginMap.set(name, options || {});\n  }\n  return pluginMap;\n}\n","// @flow\n\nimport { type Options } from \"./options\";\nimport {\n  hasPlugin,\n  validatePlugins,\n  mixinPluginNames,\n  mixinPlugins,\n  type PluginList,\n} from \"./plugin-utils\";\nimport Parser from \"./parser\";\n\nimport { types as tokTypes } from \"./tokenizer/types\";\nimport \"./tokenizer/context\";\n\nimport type { Expression, File } from \"./types\";\n\nexport function parse(input: string, options?: Options): File {\n  if (options?.sourceType === \"unambiguous\") {\n    options = {\n      ...options,\n    };\n    try {\n      options.sourceType = \"module\";\n      const parser = getParser(options, input);\n      const ast = parser.parse();\n\n      if (parser.sawUnambiguousESM) {\n        return ast;\n      }\n\n      if (parser.ambiguousScriptDifferentAst) {\n        // Top level await introduces code which can be both a valid script and\n        // a valid module, but which produces different ASTs:\n        //    await\n        //    0\n        // can be parsed either as an AwaitExpression, or as two ExpressionStatements.\n        try {\n          options.sourceType = \"script\";\n          return getParser(options, input).parse();\n        } catch {}\n      } else {\n        // This is both a valid module and a valid script, but\n        // we parse it as a script by default\n        ast.program.sourceType = \"script\";\n      }\n\n      return ast;\n    } catch (moduleError) {\n      try {\n        options.sourceType = \"script\";\n        return getParser(options, input).parse();\n      } catch {}\n\n      throw moduleError;\n    }\n  } else {\n    return getParser(options, input).parse();\n  }\n}\n\nexport function parseExpression(input: string, options?: Options): Expression {\n  const parser = getParser(options, input);\n  if (parser.options.strictMode) {\n    parser.state.strict = true;\n  }\n  return parser.getExpression();\n}\n\nexport { tokTypes };\n\nfunction getParser(options: ?Options, input: string): Parser {\n  let cls = Parser;\n  if (options?.plugins) {\n    validatePlugins(options.plugins);\n    cls = getParserClass(options.plugins);\n  }\n\n  return new cls(options, input);\n}\n\nconst parserClassCache: { [key: string]: Class<Parser> } = {};\n\n/** Get a Parser class with plugins applied. */\nfunction getParserClass(pluginsFromOptions: PluginList): Class<Parser> {\n  const pluginList = mixinPluginNames.filter(name =>\n    hasPlugin(pluginsFromOptions, name),\n  );\n\n  const key = pluginList.join(\"/\");\n  let cls = parserClassCache[key];\n  if (!cls) {\n    cls = Parser;\n    for (const plugin of pluginList) {\n      cls = mixinPlugins[plugin](cls);\n    }\n    parserClassCache[key] = cls;\n  }\n  return cls;\n}\n"]},"metadata":{},"sourceType":"script"}