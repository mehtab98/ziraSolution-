'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var React = require('react');
var rxjs = require('rxjs');
var operators = require('rxjs/operators');
var PropTypes = _interopDefault(require('prop-types'));

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

function _toPrimitive(input, hint) {
  if (typeof input !== "object" || input === null) return input;
  var prim = input[Symbol.toPrimitive];

  if (prim !== undefined) {
    var res = prim.call(input, hint || "default");
    if (typeof res !== "object") return res;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }

  return (hint === "string" ? String : Number)(input);
}

function _toPropertyKey(arg) {
  var key = _toPrimitive(arg, "string");

  return typeof key === "symbol" ? key : String(key);
}

var isObject = function isObject(x) {
  return x && typeof x === 'object' && x.constructor === Object;
};

var parseValues = function parseValues(values) {
  return Object.keys(values).reduce(function (acc, key) {
    return parseValuesName(key, acc);
  }, // eslint-disable-line
  values);
};

var parseValuesName = function parseValuesName(name, values) {
  var _extends4, _extends5;

  if (name.indexOf('.') < 0 && name.indexOf('[') < 0) {
    return values;
  }

  var value = values[name];

  var _ref = values || {},
      nextValues = _objectWithoutPropertiesLoose(_ref, [name].map(_toPropertyKey));

  var _name$split = name.split('.'),
      current = _name$split[0],
      otherNames = _name$split.slice(1);

  var isArraySyntax = current.match(/\[([0-9]*)\]$/g);

  if (isArraySyntax) {
    var _extends3;

    var _current$split = current.split(/(\[|\])/g),
        currentName = _current$split[0],
        currentIndex = _current$split[2];

    var currentCollection = values[currentName] || [];

    if (otherNames.length) {
      var _extends2;

      var _group = _extends({}, values[currentName] && isObject(values[currentName][currentIndex]) ? values[currentName][currentIndex] : {}, (_extends2 = {}, _extends2[otherNames.join('.')] = value, _extends2));

      currentCollection[currentIndex] = parseValues(_group);
    } else {
      currentCollection[currentIndex] = value;
    }

    return _extends({}, nextValues, (_extends3 = {}, _extends3[currentName] = currentCollection, _extends3));
  }

  var group = _extends({}, isObject(values[current]) ? values[current] : {}, (_extends4 = {}, _extends4[otherNames.join('.')] = value, _extends4));

  return _extends({}, nextValues, (_extends5 = {}, _extends5[current] = parseValues(group), _extends5));
};

var getFormValues = function getFormValues(fields) {
  var values = (fields || []).filter(function (field) {
    return field.isEnabled;
  }).reduce(function (obj, field) {
    var _extends6;

    return _extends({}, obj, (_extends6 = {}, _extends6[field.name] = field.value, _extends6));
  }, {});
  return parseValues(values);
};

var getFormUniqueId = function getFormUniqueId() {
  return "form-" + Math.random().toString(36).substr(2, 9);
};
var getFieldUniqueId = function getFieldUniqueId() {
  return "field-" + Math.random().toString(36).substr(2, 9);
};
var getFieldHtmlUniqueId = function getFieldHtmlUniqueId(formId, fieldName) {
  return "formiz-" + formId + "-field-" + fieldName;
};

var useRefValue = function useRefValue(value) {
  var ref = React.useRef(value);
  ref.current = value;
  return ref;
};

var useSubject = function useSubject(valueRef, throttle) {
  if (throttle === void 0) {
    throttle = 100;
  }

  var subjectRef = React.useRef(new rxjs.Subject());

  var push = function push(value) {
    subjectRef.current.next(value !== null && value !== void 0 ? value : valueRef.current);
  };

  var subscription = subjectRef.current.pipe(operators.throttleTime(throttle, undefined, {
    leading: true,
    trailing: true
  }));
  return {
    push: push,
    subscription: subscription
  };
};
var useBehaviorSubject = function useBehaviorSubject(valueRef, throttle) {
  if (throttle === void 0) {
    throttle = 100;
  }

  var subjectRef = React.useRef(new rxjs.BehaviorSubject(valueRef.current));

  var push = function push(value) {
    subjectRef.current.next(value !== null && value !== void 0 ? value : valueRef.current);
  };

  var subscription = subjectRef.current.pipe(operators.throttleTime(throttle, undefined, {
    leading: true,
    trailing: true
  }));
  return {
    push: push,
    subscription: subscription
  };
};

var updateStep = function updateStep(state, partialStepState) {
  if (!partialStepState || !partialStepState.name) return state;
  var stepIndex = state.steps.findIndex(function (x) {
    return x.name === partialStepState.name;
  });
  var step = state.steps[stepIndex];

  var newStep = _extends({}, step || {}, partialStepState);

  if (JSON.stringify(newStep) === JSON.stringify(step)) {
    return state;
  }

  var newSteps = [].concat(state.steps);

  if (!step) {
    newSteps.push(newStep);
  } else {
    newSteps[stepIndex] = newStep;
  }

  var orderedSteps = newSteps.sort(function (a, b) {
    return a.order - b.order;
  });
  var enabledSteps = orderedSteps.filter(function (_ref) {
    var isEnabled = _ref.isEnabled;
    return isEnabled;
  });
  var initialStepName = enabledSteps.length ? enabledSteps[0].name : null;

  var newState = _extends({}, state, {
    initialStepName: initialStepName,
    steps: orderedSteps
  });

  return newState;
};
var unregisterStep = function unregisterStep(state, name) {
  if (!name) return state;

  var newState = _extends({}, state, {
    steps: state.steps.filter(function (x) {
      return x.name !== name;
    })
  });

  return newState;
};
var resetForm = function resetForm(state) {
  var newState = _extends({}, state, {
    resetKey: state.resetKey + 1,
    isSubmitted: false,
    isValid: true,
    navigatedStepName: null,
    steps: state.steps.map(function (step) {
      return _extends({}, step, {
        isSubmitted: false,
        isVisited: false
      });
    })
  });

  return newState;
};

var registerField = function registerField(fields, newField) {
  if (!newField) return fields;
  var field = fields.find(function (x) {
    return x.id === newField.id;
  });
  var otherFields = fields.filter(function (x) {
    return x.id !== newField.id;
  });

  if (JSON.stringify(newField) === JSON.stringify(field)) {
    return fields;
  }

  return [].concat(otherFields, [_extends({}, newField)]);
};
var updateField = function updateField(fields, newField) {
  if (!newField) return fields;
  var field = fields.find(function (x) {
    return x.id === newField.id;
  });
  var otherFields = fields.filter(function (x) {
    return x.id !== newField.id;
  });

  if (JSON.stringify(newField) === JSON.stringify(field)) {
    return fields;
  }

  return [].concat(otherFields, [_extends({}, newField)]);
};
var unregisterField = function unregisterField(fields, fieldId) {
  if (!fieldId) return fields;
  var otherFields = fields.filter(function (x) {
    return x.id !== fieldId;
  });
  return [].concat(otherFields);
};
var setFieldsValues = function setFieldsValues(fields, objectOfValues) {
  if (objectOfValues === void 0) {
    objectOfValues = {};
  }

  if (!objectOfValues) return fields;
  var newFields = fields.map(function (field) {
    var _objectOfValues$field;

    return _extends({}, field, {
      value: (_objectOfValues$field = objectOfValues[field.name]) !== null && _objectOfValues$field !== void 0 ? _objectOfValues$field : field.value
    });
  });
  return [].concat(newFields);
};
var setFieldsExternalErrors = function setFieldsExternalErrors(fields, objectOfErrors) {
  if (objectOfErrors === void 0) {
    objectOfErrors = {};
  }

  if (!objectOfErrors) return fields;
  var newFields = fields.map(function (field) {
    return _extends({}, field, {
      externalErrors: objectOfErrors[field.name] ? [objectOfErrors[field.name], field.externalErrors] : field.externalErrors
    });
  });
  return [].concat(newFields);
};

var defaultFormState = {
  id: /*#__PURE__*/getFormUniqueId(),
  resetKey: 0,
  isSubmitted: false,
  isValidating: false,
  isValid: true,
  isPristine: true,
  steps: [],
  initialStepName: null,
  navigatedStepName: null
};
var FormContext = /*#__PURE__*/React.createContext({});
var useFormContext = function useFormContext() {
  return React.useContext(FormContext);
};

var getCurrentStep = function getCurrentStep(formState) {
  var currentStepName = formState.navigatedStepName || formState.initialStepName;
  return formState.steps.find(function (x) {
    return x.name === currentStepName;
  });
};

var Formiz = function Formiz(_ref) {
  var _ref$autoForm = _ref.autoForm,
      autoForm = _ref$autoForm === void 0 ? false : _ref$autoForm,
      _ref$children = _ref.children,
      children = _ref$children === void 0 ? '' : _ref$children,
      _ref$connect = _ref.connect,
      connect = _ref$connect === void 0 ? {} : _ref$connect,
      _ref$id = _ref.id,
      id = _ref$id === void 0 ? getFormUniqueId() : _ref$id,
      _ref$onChange = _ref.onChange,
      onChange = _ref$onChange === void 0 ? function () {} : _ref$onChange,
      _ref$onSubmit = _ref.onSubmit,
      onSubmit = _ref$onSubmit === void 0 ? function () {} : _ref$onSubmit,
      _ref$onValidSubmit = _ref.onValidSubmit,
      onValidSubmit = _ref$onValidSubmit === void 0 ? function () {} : _ref$onValidSubmit,
      _ref$onInvalidSubmit = _ref.onInvalidSubmit,
      onInvalidSubmit = _ref$onInvalidSubmit === void 0 ? function () {} : _ref$onInvalidSubmit,
      _ref$onValid = _ref.onValid,
      onValid = _ref$onValid === void 0 ? function () {} : _ref$onValid,
      _ref$onInvalid = _ref.onInvalid,
      onInvalid = _ref$onInvalid === void 0 ? function () {} : _ref$onInvalid;
  var formStateRef = React.useRef(_extends({}, defaultFormState, {
    id: id
  }));
  var fieldsRef = React.useRef([]);
  var keepValuesRef = React.useRef({});
  var connectRef = useRefValue(connect.__connect__ || function () {});
  var onChangeRef = useRefValue(onChange);
  var onSubmitRef = useRefValue(onSubmit);
  var onValidSubmitRef = useRefValue(onValidSubmit);
  var onInvalidSubmitRef = useRefValue(onInvalidSubmit);
  var onValidRef = useRefValue(onValid);
  var onInvalidRef = useRefValue(onInvalid);
  var onFormUpdate = useBehaviorSubject(formStateRef);
  var onFieldsUpdate = useBehaviorSubject(fieldsRef);
  var onExternalFieldsUpdate = useSubject(fieldsRef);
  var onReset = useSubject(formStateRef);

  var checkFormValidity = function checkFormValidity() {
    var isValid = fieldsRef.current.every(function (field) {
      var _field$errors, _field$asyncErrors, _field$externalErrors;

      return !(field === null || field === void 0 ? void 0 : (_field$errors = field.errors) === null || _field$errors === void 0 ? void 0 : _field$errors.length) && !(field === null || field === void 0 ? void 0 : (_field$asyncErrors = field.asyncErrors) === null || _field$asyncErrors === void 0 ? void 0 : _field$asyncErrors.length) && !(field === null || field === void 0 ? void 0 : (_field$externalErrors = field.externalErrors) === null || _field$externalErrors === void 0 ? void 0 : _field$externalErrors.length);
    });

    if (isValid) {
      onValidRef.current();
    } else {
      onInvalidRef.current();
    }

    return isValid;
  };

  var checkStepValidity = function checkStepValidity(stepName) {
    return fieldsRef.current.filter(function (field) {
      return field.stepName === stepName;
    }).every(function (field) {
      var _field$errors2, _field$asyncErrors2, _field$externalErrors2;

      return !(field === null || field === void 0 ? void 0 : (_field$errors2 = field.errors) === null || _field$errors2 === void 0 ? void 0 : _field$errors2.length) && !(field === null || field === void 0 ? void 0 : (_field$asyncErrors2 = field.asyncErrors) === null || _field$asyncErrors2 === void 0 ? void 0 : _field$asyncErrors2.length) && !(field === null || field === void 0 ? void 0 : (_field$externalErrors2 = field.externalErrors) === null || _field$externalErrors2 === void 0 ? void 0 : _field$externalErrors2.length);
    });
  };

  var checkFormPristine = function checkFormPristine() {
    return fieldsRef.current.every(function (field) {
      return field === null || field === void 0 ? void 0 : field.isPristine;
    });
  };

  var checkStepPristine = function checkStepPristine(stepName) {
    return fieldsRef.current.filter(function (field) {
      return field.stepName === stepName;
    }).every(function (field) {
      return field === null || field === void 0 ? void 0 : field.isPristine;
    });
  };

  var checkFormValidating = function checkFormValidating() {
    return fieldsRef.current.some(function (field) {
      return field === null || field === void 0 ? void 0 : field.isValidating;
    });
  };

  var checkStepValidating = function checkStepValidating(stepName) {
    return fieldsRef.current.filter(function (field) {
      return field.stepName === stepName;
    }).some(function (field) {
      return field === null || field === void 0 ? void 0 : field.isValidating;
    });
  };

  var updateFormState = function updateFormState(stateToUpdate) {
    var newState = _extends({}, formStateRef.current, stateToUpdate);

    if (JSON.stringify(newState) === JSON.stringify(formStateRef.current)) {
      return;
    }

    formStateRef.current = newState;
    onFormUpdate.push();
  };

  var goToStep = function goToStep(stepName) {
    var enabledSteps = formStateRef.current.steps.filter(function (_ref2) {
      var isEnabled = _ref2.isEnabled;
      return isEnabled;
    });
    var targetedStepIndex = enabledSteps.findIndex(function (_ref3) {
      var name = _ref3.name;
      return name === stepName;
    });

    if (targetedStepIndex < 0) {
      return;
    }

    updateFormState({
      navigatedStepName: enabledSteps[targetedStepIndex].name
    });
  };

  var nextStep = function nextStep() {
    var enabledSteps = formStateRef.current.steps.filter(function (x) {
      return x.isEnabled;
    });
    var stepIndex = enabledSteps.findIndex(function (step) {
      var _getCurrentStep;

      return step.name === ((_getCurrentStep = getCurrentStep(formStateRef.current)) === null || _getCurrentStep === void 0 ? void 0 : _getCurrentStep.name);
    });
    var isLastStep = stepIndex === enabledSteps.length - 1;

    if (isLastStep) {
      return;
    }

    goToStep(enabledSteps[stepIndex + 1].name);
  };

  var prevStep = function prevStep() {
    var enabledSteps = formStateRef.current.steps.filter(function (x) {
      return x.isEnabled;
    });
    var stepIndex = enabledSteps.findIndex(function (step) {
      var _getCurrentStep2;

      return step.name === ((_getCurrentStep2 = getCurrentStep(formStateRef.current)) === null || _getCurrentStep2 === void 0 ? void 0 : _getCurrentStep2.name);
    });
    var isFirstStep = stepIndex === 0;

    if (isFirstStep) {
      return;
    }

    goToStep(enabledSteps[stepIndex - 1].name);
  };

  var submit = function submit(e) {
    if (e) e.preventDefault();
    var steps = formStateRef.current.steps;
    updateFormState({
      isSubmitted: true,
      steps: steps.map(function (step) {
        return _extends({}, step, {
          isSubmitted: true
        });
      })
    });
    var formatedValues = getFormValues(fieldsRef.current);

    if (formStateRef.current.isValid && !formStateRef.current.isValidating) {
      onValidSubmitRef.current(formatedValues);
    } else {
      onInvalidSubmitRef.current(formatedValues);
    }

    onSubmitRef.current(formatedValues);
  };

  var submitStep = function submitStep(e) {
    var _getCurrentStep4, _enabledSteps;

    if (e) e.preventDefault();
    updateFormState({
      steps: formStateRef.current.steps.map(function (step) {
        var _getCurrentStep3;

        return _extends({}, step, {
          isSubmitted: step.name === ((_getCurrentStep3 = getCurrentStep(formStateRef.current)) === null || _getCurrentStep3 === void 0 ? void 0 : _getCurrentStep3.name) ? true : step.isSubmitted
        });
      })
    });
    var currentStep = getCurrentStep(formStateRef.current);

    if (!(currentStep === null || currentStep === void 0 ? void 0 : currentStep.isValid) || (currentStep === null || currentStep === void 0 ? void 0 : currentStep.isValidating)) {
      return;
    }

    var enabledSteps = formStateRef.current.steps.filter(function (x) {
      return x.isEnabled;
    });
    var currentStepName = (_getCurrentStep4 = getCurrentStep(formStateRef.current)) === null || _getCurrentStep4 === void 0 ? void 0 : _getCurrentStep4.name;
    var isLastStep = ((_enabledSteps = enabledSteps[enabledSteps.length - 1]) === null || _enabledSteps === void 0 ? void 0 : _enabledSteps.name) === currentStepName;

    if (isLastStep) {
      submit();
      return;
    }

    nextStep();
  };

  var setFieldsValues$1 = function setFieldsValues$1(objectOfValues) {
    if (objectOfValues === void 0) {
      objectOfValues = {};
    }

    fieldsRef.current = setFieldsValues(fieldsRef.current, objectOfValues);
    onExternalFieldsUpdate.push();
  };

  var invalidateFields = function invalidateFields(objectOfErrors) {
    if (objectOfErrors === void 0) {
      objectOfErrors = {};
    }

    fieldsRef.current = setFieldsExternalErrors(fieldsRef.current, objectOfErrors);
    onExternalFieldsUpdate.push();
  };

  var getFieldStepName = function getFieldStepName(fieldName) {
    var _fieldsRef$current$fi, _fieldsRef$current$fi2;

    return (_fieldsRef$current$fi = (_fieldsRef$current$fi2 = fieldsRef.current.find(function (field) {
      return fieldName === field.name;
    })) === null || _fieldsRef$current$fi2 === void 0 ? void 0 : _fieldsRef$current$fi2.stepName) !== null && _fieldsRef$current$fi !== void 0 ? _fieldsRef$current$fi : null;
  };

  var validateForm = function validateForm() {
    updateFormState({
      isValid: checkFormValidity(),
      isPristine: checkFormPristine(),
      isValidating: checkFormValidating(),
      steps: formStateRef.current.steps.map(function (step) {
        return _extends({}, step, {
          isValid: checkStepValidity(step.name),
          isPristine: checkStepPristine(step.name),
          isValidating: checkStepValidating(step.name)
        });
      })
    });
  };

  var updateStep$1 = function updateStep$1(step) {
    updateFormState(updateStep(formStateRef.current, step));
    validateForm();
  };

  var unregisterStep$1 = function unregisterStep$1(name) {
    updateFormState(_extends({}, unregisterStep(formStateRef.current, name), {
      isValid: checkFormValidity()
    }));
    validateForm();
  };

  var registerField$1 = function registerField$1(field) {
    delete keepValuesRef.current[field.name];
    fieldsRef.current = registerField(fieldsRef.current, field);
    onFieldsUpdate.push();
    onChangeRef.current(getFormValues(fieldsRef.current));
    validateForm();
  };

  var updateField$1 = function updateField$1(field) {
    fieldsRef.current = updateField(fieldsRef.current, field);
    onFieldsUpdate.push();
    onChangeRef.current(getFormValues(fieldsRef.current));
    validateForm();
  };

  var unregisterField$1 = function unregisterField$1(field, shouldKeepValue) {
    if (shouldKeepValue) {
      keepValuesRef.current[field.name] = field.value;
    }

    fieldsRef.current = unregisterField(fieldsRef.current, field.id);
    onFieldsUpdate.push();
    onChangeRef.current(getFormValues(fieldsRef.current));
    validateForm();
  };

  var reset = function reset() {
    updateFormState(resetForm(formStateRef.current));
    keepValuesRef.current = {};
    onReset.push();
  };

  var formMethods = {
    submit: submit,
    submitStep: submitStep,
    setFieldsValues: setFieldsValues$1,
    invalidateFields: invalidateFields,
    getFieldStepName: getFieldStepName,
    goToStep: goToStep,
    nextStep: nextStep,
    prevStep: prevStep,
    reset: reset
  };
  var contextValue = {
    formStateRef: formStateRef,
    fieldsRef: fieldsRef,
    actions: {
      updateStep: updateStep$1,
      unregisterStep: unregisterStep$1,
      registerField: registerField$1,
      updateField: updateField$1,
      unregisterField: unregisterField$1
    },
    formMethods: formMethods,
    keepValuesRef: keepValuesRef,
    subjects: {
      onFormUpdate: onFormUpdate,
      onFieldsUpdate: onFieldsUpdate,
      onExternalFieldsUpdate: onExternalFieldsUpdate,
      onReset: onReset
    }
  }; // Connect

  React.useEffect(function () {
    connectRef.current(contextValue);
  }, []);
  return React.createElement(FormContext.Provider, {
    value: contextValue
  }, !autoForm ? children : React.createElement("form", {
    noValidate: true,
    onSubmit: submit
  }, children));
};

// Fields errors
var ErrorFieldWithoutForm = /*#__PURE__*/new Error('A Formiz field always needs to be a children of a `<Formiz>` component.');
var ErrorFieldWithoutName = /*#__PURE__*/new Error('A Formiz field (component using a useField hook) always needs a `name` props.'); // Steps errors

var ErrorStepWithoutForm = /*#__PURE__*/new Error('A <FormizStep> always needs to be a children of a `<Formiz>` component.');
var ErrorStepWithoutName = /*#__PURE__*/new Error('A <FormizStep> always needs a `name` props.');

var StepContext = /*#__PURE__*/React.createContext({});
var useStepContext = function useStepContext() {
  return React.useContext(StepContext);
};
var FormizStep = function FormizStep(_ref) {
  var _formStateRef$current;

  var _ref$as = _ref.as,
      Tag = _ref$as === void 0 ? 'div' : _ref$as,
      children = _ref.children,
      name = _ref.name,
      label = _ref.label,
      order = _ref.order,
      _ref$isEnabled = _ref.isEnabled,
      isEnabled = _ref$isEnabled === void 0 ? true : _ref$isEnabled,
      _ref$style = _ref.style,
      style = _ref$style === void 0 ? {} : _ref$style,
      rest = _objectWithoutPropertiesLoose(_ref, ["as", "children", "name", "label", "order", "isEnabled", "style"]);

  if (!name) {
    throw ErrorStepWithoutName;
  }

  var _useFormContext = useFormContext(),
      formStateRef = _useFormContext.formStateRef,
      actions = _useFormContext.actions,
      subjects = _useFormContext.subjects;

  if (!subjects || !actions) {
    throw ErrorStepWithoutForm;
  }

  var _useState = React.useState((_formStateRef$current = formStateRef === null || formStateRef === void 0 ? void 0 : formStateRef.current) !== null && _formStateRef$current !== void 0 ? _formStateRef$current : defaultFormState),
      formState = _useState[0],
      setFormState = _useState[1];

  var _useState2 = React.useState({
    name: name,
    label: label,
    isVisited: false,
    order: order !== null && order !== void 0 ? order : 0
  }),
      state = _useState2[0],
      setState = _useState2[1];

  var isActive = formState.navigatedStepName ? formState.navigatedStepName === name : formState.initialStepName === name; // Subscribe to form state

  React.useEffect(function () {
    var subscription = subjects.onFormUpdate.subscription.subscribe(setFormState);
    return function () {
      return subscription.unsubscribe();
    };
  }, []);
  React.useEffect(function () {
    if (formState.navigatedStepName === name && !state.isVisited && isActive) {
      setState(function (prevState) {
        return _extends({}, prevState, {
          isVisited: true
        });
      });
    }
  }); // Register / Update the step

  React.useEffect(function () {
    actions.updateStep(_extends({}, state, {
      isEnabled: isEnabled
    }));
  }, [state, isEnabled]); // Unregister the step

  React.useEffect(function () {
    return function () {
      actions.unregisterStep(name);
    };
  }, [name]);

  if (!isEnabled) {
    return null;
  }

  return React.createElement(StepContext.Provider, {
    value: {
      name: name
    }
  }, React.createElement(Tag, Object.assign({
    style: _extends({}, style, {
      display: !isActive ? 'none' : null
    })
  }, rest), isEnabled && children));
};

var fieldPropTypes = {
  name: PropTypes.string.isRequired,
  debounce: PropTypes.number,
  defaultValue: PropTypes.any,
  formatValue: PropTypes.func,
  onChange: PropTypes.func,
  required: /*#__PURE__*/PropTypes.oneOfType([PropTypes.bool, PropTypes.node]),
  validations: /*#__PURE__*/PropTypes.arrayOf( /*#__PURE__*/PropTypes.shape({
    rule: PropTypes.func,
    message: PropTypes.node,
    deps: /*#__PURE__*/PropTypes.arrayOf(PropTypes.any)
  })),
  asyncValidations: /*#__PURE__*/PropTypes.arrayOf( /*#__PURE__*/PropTypes.shape({
    rule: PropTypes.func,
    message: PropTypes.node,
    deps: /*#__PURE__*/PropTypes.arrayOf(PropTypes.any)
  })),
  keepValue: PropTypes.bool
};
var fieldDefaultProps = {
  debounce: 100,
  defaultValue: null,
  formatValue: function formatValue(val) {
    return val;
  },
  onChange: function onChange() {},
  required: false,
  validations: [],
  asyncValidations: [],
  keepValue: false
};

var getValidationsWithRequired = function getValidationsWithRequired(validations, required) {
  if (!required && required !== '') {
    return validations;
  }

  return [].concat(validations, [{
    rule: function rule(x) {
      return !!x || x === 0;
    },
    message: required !== true ? required : ''
  }]);
};

var useField = function useField(_ref) {
  var _formStateRef$current, _keepValuesRef$curren, _keepValuesRef$curren2, _ref2, _formStateRef$current2;

  var name = _ref.name,
      _ref$debounce = _ref.debounce,
      debounce = _ref$debounce === void 0 ? fieldDefaultProps.debounce : _ref$debounce,
      _ref$defaultValue = _ref.defaultValue,
      defaultValue = _ref$defaultValue === void 0 ? fieldDefaultProps.defaultValue : _ref$defaultValue,
      _ref$formatValue = _ref.formatValue,
      formatValue = _ref$formatValue === void 0 ? fieldDefaultProps.formatValue : _ref$formatValue,
      _ref$onChange = _ref.onChange,
      onChange = _ref$onChange === void 0 ? fieldDefaultProps.onChange : _ref$onChange,
      _ref$required = _ref.required,
      required = _ref$required === void 0 ? fieldDefaultProps.required : _ref$required,
      _ref$validations = _ref.validations,
      validations = _ref$validations === void 0 ? fieldDefaultProps.validations : _ref$validations,
      _ref$asyncValidations = _ref.asyncValidations,
      asyncValidations = _ref$asyncValidations === void 0 ? fieldDefaultProps.asyncValidations : _ref$asyncValidations,
      _ref$keepValue = _ref.keepValue,
      keepValue = _ref$keepValue === void 0 ? fieldDefaultProps.keepValue : _ref$keepValue;

  if (!name) {
    throw ErrorFieldWithoutName;
  }

  var _useFormContext = useFormContext(),
      formStateRef = _useFormContext.formStateRef,
      actions = _useFormContext.actions,
      subjects = _useFormContext.subjects,
      keepValuesRef = _useFormContext.keepValuesRef;

  if (!subjects || !actions || !keepValuesRef) {
    throw ErrorFieldWithoutForm;
  }

  var isMountedRef = React.useRef(true);
  var stepContext = useStepContext();
  var stepName = stepContext === null || stepContext === void 0 ? void 0 : stepContext.name;

  var _useState = React.useState((_formStateRef$current = formStateRef === null || formStateRef === void 0 ? void 0 : formStateRef.current) !== null && _formStateRef$current !== void 0 ? _formStateRef$current : defaultFormState),
      formState = _useState[0],
      setFormState = _useState[1];

  var initValue = (_keepValuesRef$curren = (_keepValuesRef$curren2 = keepValuesRef.current) === null || _keepValuesRef$curren2 === void 0 ? void 0 : _keepValuesRef$curren2[name]) !== null && _keepValuesRef$curren !== void 0 ? _keepValuesRef$curren : defaultValue;

  var _useState2 = React.useState({
    id: getFieldUniqueId(),
    resetKey: 0,
    value: initValue,
    valueDebounced: initValue,
    errors: [],
    asyncErrors: [],
    externalErrors: [],
    isValidating: false,
    isPristine: true,
    isEnabled: true
  }),
      state = _useState2[0],
      setState = _useState2[1];

  var stateRef = useRefValue(state);
  var nameRef = useRefValue(name);
  var stepNameRef = useRefValue(stepName);
  var validationsRef = useRefValue(getValidationsWithRequired(validations || [], required));
  var asyncValidationsRef = useRefValue(asyncValidations || []);
  var debounceRef = useRefValue(debounce);
  var onChangeRef = useRefValue(onChange);
  var formatValueRef = useRefValue(formatValue);
  var defaultValueRef = useRefValue(defaultValue);
  var keepValueRef = useRefValue(keepValue);
  var currentStepName = formState.navigatedStepName || formState.initialStepName;
  var currentStep = formState.steps.find(function (x) {
    return x.name === currentStepName;
  }) || null;

  var setValue = function setValue(value) {
    setState(function (prevState) {
      return _extends({}, prevState, {
        externalErrors: [],
        value: value,
        isPristine: false
      });
    });
    onChangeRef.current(formatValueRef.current(value), value);
  }; // Subscribe to form state


  React.useEffect(function () {
    var subscription = subjects.onFormUpdate.subscription.subscribe(setFormState);
    return function () {
      return subscription.unsubscribe();
    };
  }, []); // Subscribe to external updates

  React.useEffect(function () {
    var subscription = subjects.onExternalFieldsUpdate.subscription.subscribe(function (fields) {
      var field = fields.find(function (x) {
        return x.id === stateRef.current.id;
      });

      if (field && JSON.stringify(field) !== JSON.stringify(stateRef.current)) {
        setState(field);
      }
    });
    return function () {
      return subscription.unsubscribe();
    };
  }, []); // Subscribe to reset

  React.useEffect(function () {
    var subscription = subjects.onReset.subscription.subscribe(function () {
      setState(function (prevState) {
        return _extends({}, prevState, {
          error: [],
          externalErrors: [],
          resetKey: prevState.resetKey + 1,
          isPristine: true,
          value: defaultValueRef.current
        });
      });
      onChangeRef.current(formatValueRef.current(defaultValueRef.current), defaultValueRef.current);
    });
    return function () {
      return subscription.unsubscribe();
    };
  }, []); // Update validations

  React.useEffect(function () {
    var validateField = function validateField() {
      try {
        /**
         * Sync validations
         */
        var fieldErrors = (validationsRef.current || []).reduce(function (errors, validation) {
          return !validation.rule(state.value) ? [].concat(errors, [validation.message]) : errors;
        }, []);
        var shouldRunAsyncValidations = !fieldErrors.length && !!(asyncValidationsRef.current || []).length;
        setState(function (prevState) {
          return _extends({}, prevState, {
            errors: fieldErrors,
            asyncErrors: [],
            valueDebounced: prevState.value,
            isValidating: shouldRunAsyncValidations
          });
        });

        if (!shouldRunAsyncValidations) {
          return Promise.resolve();
        }
        /**
         * Async validations
         */


        return Promise.resolve(Promise.all((asyncValidationsRef.current || []).map(function (validation) {
          try {
            return Promise.resolve(validation.rule(state.value)).then(function (isValid) {
              return _extends({}, validation, {
                isValid: isValid
              });
            });
          } catch (e) {
            return Promise.reject(e);
          }
        }))).then(function (rules) {
          if (!isMountedRef.current || state.value !== stateRef.current.value) {
            return;
          }

          var fieldAsyncErrors = rules.reduce(function (errors, validation) {
            return !validation.isValid ? [].concat(errors, [validation.message]) : errors;
          }, []);
          setState(function (prevState) {
            return _extends({}, prevState, {
              asyncErrors: fieldAsyncErrors,
              isValidating: false
            });
          });
        });
      } catch (e) {
        return Promise.reject(e);
      }
    };

    if (!debounceRef.current) {
      validateField();
      return function () {};
    }

    var timer = setTimeout(function () {
      validateField();
    }, debounceRef.current);
    return function () {
      return clearTimeout(timer);
    };
  }, [JSON.stringify(state.value), JSON.stringify((_ref2 = [].concat(validations || [], asyncValidations || [])) === null || _ref2 === void 0 ? void 0 : _ref2.reduce(function (acc, cur) {
    return [].concat(acc, cur.deps || [], [cur.message]);
  }, []))]); // Register / Unregister the field

  React.useEffect(function () {
    actions.registerField(_extends({}, stateRef.current, {
      name: nameRef.current,
      stepName: stepNameRef.current,
      value: formatValueRef.current(stateRef.current.value)
    }));
    return function () {
      actions.unregisterField(_extends({}, stateRef.current, {
        name: nameRef.current,
        stepName: stepNameRef.current,
        value: formatValueRef.current(stateRef.current.value)
      }), keepValueRef.current);
    };
  }, []); // Update field at form level

  React.useEffect(function () {
    actions.updateField(_extends({}, state, {
      name: name,
      stepName: stepName,
      value: formatValueRef.current(state.value)
    }));
  }, [name, stepName, JSON.stringify(state)]);
  React.useEffect(function () {
    return function () {
      isMountedRef.current = false;
    };
  }, []);
  var isSubmitted = stepName && currentStep && currentStepName === stepName ? currentStep.isSubmitted : formState.isSubmitted;
  var allErrors = [].concat(state.externalErrors, state.asyncErrors, state.errors);
  return {
    errorMessage: allErrors[0],
    errorMessages: allErrors,
    id: getFieldHtmlUniqueId((formStateRef === null || formStateRef === void 0 ? void 0 : (_formStateRef$current2 = formStateRef.current) === null || _formStateRef$current2 === void 0 ? void 0 : _formStateRef$current2.id) || '', name),
    isPristine: state.isPristine,
    isSubmitted: isSubmitted,
    isValid: !allErrors.length,
    isValidating: state.isValidating,
    setValue: setValue,
    value: state.value,
    valueDebounced: state.valueDebounced,
    resetKey: state.resetKey
  };
};

var shouldSubscribe = function shouldSubscribe(subscribe, key) {
  if (subscribe === true) {
    return true;
  }

  if (subscribe === key) {
    return true;
  }

  if (typeof subscribe !== 'object') {
    return false;
  }

  if (!subscribe[key]) {
    return false;
  }

  return true;
};

var useForm = function useForm(_temp) {
  var _formStateRef$current, _fieldsRef$current, _enabledSteps$, _enabledSteps;

  var _ref = _temp === void 0 ? {} : _temp,
      _ref$subscribe = _ref.subscribe,
      subscribe = _ref$subscribe === void 0 ? true : _ref$subscribe;

  var _useFormContext = useFormContext(),
      formStateRef = _useFormContext.formStateRef,
      fieldsRef = _useFormContext.fieldsRef,
      formMethods = _useFormContext.formMethods,
      subjects = _useFormContext.subjects;

  var _useState = React.useState(formMethods),
      methods = _useState[0],
      setMethods = _useState[1];

  var _useState2 = React.useState((_formStateRef$current = formStateRef === null || formStateRef === void 0 ? void 0 : formStateRef.current) !== null && _formStateRef$current !== void 0 ? _formStateRef$current : defaultFormState),
      localFormState = _useState2[0],
      setLocalFormState = _useState2[1];

  var _useState3 = React.useState((_fieldsRef$current = fieldsRef === null || fieldsRef === void 0 ? void 0 : fieldsRef.current) !== null && _fieldsRef$current !== void 0 ? _fieldsRef$current : []),
      localFields = _useState3[0],
      setLocalFields = _useState3[1];

  var localFieldsRef = useRefValue(localFields);
  var subscriptionsRef = React.useRef([]);

  var subscribeOnFormUpdate = function subscribeOnFormUpdate(subject) {
    if (!subject || !shouldSubscribe(subscribe, 'form')) {
      return;
    }

    var subscription = subject.subscription.subscribe(setLocalFormState);
    subscriptionsRef.current.push(subscription);
  };

  var subscribeOnFieldsUpdate = function subscribeOnFieldsUpdate(subject) {
    if (!subject || !shouldSubscribe(subscribe, 'fields')) {
      return;
    }

    var subscribeFields = typeof subscribe === 'object' && typeof subscribe.fields === 'object' ? subscribe.fields : null;
    var subscription = subject.subscription.subscribe(function (nextFields) {
      var nextState = subscribeFields ? nextFields.filter(function (x) {
        return subscribeFields.includes(x.name);
      }) : nextFields;

      if (JSON.stringify(localFieldsRef.current) === JSON.stringify(nextState)) {
        return;
      }

      setLocalFields(nextState);
    });
    subscriptionsRef.current.push(subscription);
  }; // Use the connect property to retrieve the state


  var connect = React.useCallback(function (_ref2) {
    var _formMethods = _ref2.formMethods,
        _subjects = _ref2.subjects;
    setMethods(_formMethods);
    subscribeOnFormUpdate(_subjects === null || _subjects === void 0 ? void 0 : _subjects.onFormUpdate);
    subscribeOnFieldsUpdate(_subjects === null || _subjects === void 0 ? void 0 : _subjects.onFieldsUpdate);
  }, []); // Subscribe (if not used with connect)

  React.useEffect(function () {
    subscribeOnFormUpdate(subjects === null || subjects === void 0 ? void 0 : subjects.onFormUpdate);
    subscribeOnFieldsUpdate(subjects === null || subjects === void 0 ? void 0 : subjects.onFieldsUpdate);
  }, []); // Clear all subscriptions at unmount

  React.useEffect(function () {
    return function () {
      subscriptionsRef.current.forEach(function (subscription) {
        return subscription === null || subscription === void 0 ? void 0 : subscription.unsubscribe();
      });
    };
  }, []);
  var enabledSteps = localFormState.steps.filter(function (x) {
    return x.isEnabled;
  }).map(function (_ref3, index) {
    var name = _ref3.name,
        label = _ref3.label,
        isSubmitted = _ref3.isSubmitted,
        isPristine = _ref3.isPristine,
        isValidating = _ref3.isValidating,
        isValid = _ref3.isValid,
        isVisited = _ref3.isVisited;
    return {
      index: index,
      name: name,
      label: label,
      isPristine: isPristine !== null && isPristine !== void 0 ? isPristine : false,
      isSubmitted: isSubmitted !== null && isSubmitted !== void 0 ? isSubmitted : false,
      isValid: isValid !== null && isValid !== void 0 ? isValid : false,
      isValidating: isValidating !== null && isValidating !== void 0 ? isValidating : false,
      isVisited: isVisited !== null && isVisited !== void 0 ? isVisited : false
    };
  }).map(function (x, index) {
    return _extends({}, x, {
      index: index
    });
  });
  var currentStep = enabledSteps.find(function (x) {
    return x.name === (localFormState.navigatedStepName || localFormState.initialStepName);
  }) || null;
  return _extends({}, methods, shouldSubscribe(subscribe, 'form') ? {
    resetKey: localFormState.resetKey,
    isSubmitted: localFormState.isSubmitted,
    isValid: localFormState.isValid,
    isValidating: localFormState.isValidating,
    isPristine: localFormState.isPristine,
    steps: enabledSteps,
    currentStep: currentStep || {},
    isStepPristine: currentStep ? currentStep.isPristine : localFormState.isPristine,
    isStepValid: currentStep ? currentStep.isValid : localFormState.isValid,
    isStepValidating: currentStep ? currentStep.isValidating : localFormState.isValidating,
    isStepSubmitted: currentStep ? currentStep.isSubmitted : localFormState.isSubmitted,
    isFirstStep: ((_enabledSteps$ = enabledSteps[0]) === null || _enabledSteps$ === void 0 ? void 0 : _enabledSteps$.name) === (currentStep === null || currentStep === void 0 ? void 0 : currentStep.name),
    isLastStep: ((_enabledSteps = enabledSteps[enabledSteps.length - 1]) === null || _enabledSteps === void 0 ? void 0 : _enabledSteps.name) === (currentStep === null || currentStep === void 0 ? void 0 : currentStep.name)
  } : {}, shouldSubscribe(subscribe, 'fields') ? {
    values: getFormValues(localFields)
  } : {}, {
    __connect__: connect
  });
};

exports.Formiz = Formiz;
exports.FormizStep = FormizStep;
exports.fieldDefaultProps = fieldDefaultProps;
exports.fieldPropTypes = fieldPropTypes;
exports.useField = useField;
exports.useForm = useForm;
//# sourceMappingURL=formiz-core.cjs.development.js.map
